
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d1c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08007eec  08007eec  00017eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008098  08008098  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008098  08008098  00018098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080a0  080080a0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080a0  080080a0  000180a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080a4  080080a4  000180a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080080a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a4  20000080  08008128  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014524  08008128  00024524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165fa  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c3  00000000  00000000  000366aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  00039a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  0003aee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024be6  00000000  00000000  0003c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c2d  00000000  00000000  00060d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd8fe  00000000  00000000  000799cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001572c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005934  00000000  00000000  0015731c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ed4 	.word	0x08007ed4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08007ed4 	.word	0x08007ed4

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012f3c 	.word	0x20012f3c
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b974 	b.w	8000650 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468e      	mov	lr, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d14d      	bne.n	800042a <__udivmoddi4+0xaa>
 800038e:	428a      	cmp	r2, r1
 8000390:	4694      	mov	ip, r2
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0xe8>
 8000394:	fab2 f282 	clz	r2, r2
 8000398:	b152      	cbz	r2, 80003b0 <__udivmoddi4+0x30>
 800039a:	fa01 f302 	lsl.w	r3, r1, r2
 800039e:	f1c2 0120 	rsb	r1, r2, #32
 80003a2:	fa20 f101 	lsr.w	r1, r0, r1
 80003a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003aa:	ea41 0e03 	orr.w	lr, r1, r3
 80003ae:	4094      	lsls	r4, r2
 80003b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003b4:	0c21      	lsrs	r1, r4, #16
 80003b6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ba:	fa1f f78c 	uxth.w	r7, ip
 80003be:	fb08 e316 	mls	r3, r8, r6, lr
 80003c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003c6:	fb06 f107 	mul.w	r1, r6, r7
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003d6:	f080 811f 	bcs.w	8000618 <__udivmoddi4+0x298>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 811c 	bls.w	8000618 <__udivmoddi4+0x298>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f4:	fb00 f707 	mul.w	r7, r0, r7
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x92>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	f080 810a 	bcs.w	800061c <__udivmoddi4+0x29c>
 8000408:	42a7      	cmp	r7, r4
 800040a:	f240 8107 	bls.w	800061c <__udivmoddi4+0x29c>
 800040e:	4464      	add	r4, ip
 8000410:	3802      	subs	r0, #2
 8000412:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	2600      	movs	r6, #0
 800041a:	b11d      	cbz	r5, 8000424 <__udivmoddi4+0xa4>
 800041c:	40d4      	lsrs	r4, r2
 800041e:	2300      	movs	r3, #0
 8000420:	e9c5 4300 	strd	r4, r3, [r5]
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0xc2>
 800042e:	2d00      	cmp	r5, #0
 8000430:	f000 80ef 	beq.w	8000612 <__udivmoddi4+0x292>
 8000434:	2600      	movs	r6, #0
 8000436:	e9c5 0100 	strd	r0, r1, [r5]
 800043a:	4630      	mov	r0, r6
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	fab3 f683 	clz	r6, r3
 8000446:	2e00      	cmp	r6, #0
 8000448:	d14a      	bne.n	80004e0 <__udivmoddi4+0x160>
 800044a:	428b      	cmp	r3, r1
 800044c:	d302      	bcc.n	8000454 <__udivmoddi4+0xd4>
 800044e:	4282      	cmp	r2, r0
 8000450:	f200 80f9 	bhi.w	8000646 <__udivmoddi4+0x2c6>
 8000454:	1a84      	subs	r4, r0, r2
 8000456:	eb61 0303 	sbc.w	r3, r1, r3
 800045a:	2001      	movs	r0, #1
 800045c:	469e      	mov	lr, r3
 800045e:	2d00      	cmp	r5, #0
 8000460:	d0e0      	beq.n	8000424 <__udivmoddi4+0xa4>
 8000462:	e9c5 4e00 	strd	r4, lr, [r5]
 8000466:	e7dd      	b.n	8000424 <__udivmoddi4+0xa4>
 8000468:	b902      	cbnz	r2, 800046c <__udivmoddi4+0xec>
 800046a:	deff      	udf	#255	; 0xff
 800046c:	fab2 f282 	clz	r2, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	f040 8092 	bne.w	800059a <__udivmoddi4+0x21a>
 8000476:	eba1 010c 	sub.w	r1, r1, ip
 800047a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	2601      	movs	r6, #1
 8000484:	0c20      	lsrs	r0, r4, #16
 8000486:	fbb1 f3f7 	udiv	r3, r1, r7
 800048a:	fb07 1113 	mls	r1, r7, r3, r1
 800048e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000492:	fb0e f003 	mul.w	r0, lr, r3
 8000496:	4288      	cmp	r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x12c>
 800049a:	eb1c 0101 	adds.w	r1, ip, r1
 800049e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x12a>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f200 80cb 	bhi.w	8000640 <__udivmoddi4+0x2c0>
 80004aa:	4643      	mov	r3, r8
 80004ac:	1a09      	subs	r1, r1, r0
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b4:	fb07 1110 	mls	r1, r7, r0, r1
 80004b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004bc:	fb0e fe00 	mul.w	lr, lr, r0
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x156>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004cc:	d202      	bcs.n	80004d4 <__udivmoddi4+0x154>
 80004ce:	45a6      	cmp	lr, r4
 80004d0:	f200 80bb 	bhi.w	800064a <__udivmoddi4+0x2ca>
 80004d4:	4608      	mov	r0, r1
 80004d6:	eba4 040e 	sub.w	r4, r4, lr
 80004da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x9a>
 80004e0:	f1c6 0720 	rsb	r7, r6, #32
 80004e4:	40b3      	lsls	r3, r6
 80004e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ee:	fa20 f407 	lsr.w	r4, r0, r7
 80004f2:	fa01 f306 	lsl.w	r3, r1, r6
 80004f6:	431c      	orrs	r4, r3
 80004f8:	40f9      	lsrs	r1, r7
 80004fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000502:	fbb1 f8f9 	udiv	r8, r1, r9
 8000506:	0c20      	lsrs	r0, r4, #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fb09 1118 	mls	r1, r9, r8, r1
 8000510:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000514:	fb08 f00e 	mul.w	r0, r8, lr
 8000518:	4288      	cmp	r0, r1
 800051a:	fa02 f206 	lsl.w	r2, r2, r6
 800051e:	d90b      	bls.n	8000538 <__udivmoddi4+0x1b8>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000528:	f080 8088 	bcs.w	800063c <__udivmoddi4+0x2bc>
 800052c:	4288      	cmp	r0, r1
 800052e:	f240 8085 	bls.w	800063c <__udivmoddi4+0x2bc>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	1a09      	subs	r1, r1, r0
 800053a:	b2a4      	uxth	r4, r4
 800053c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000540:	fb09 1110 	mls	r1, r9, r0, r1
 8000544:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	458e      	cmp	lr, r1
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x1e2>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000558:	d26c      	bcs.n	8000634 <__udivmoddi4+0x2b4>
 800055a:	458e      	cmp	lr, r1
 800055c:	d96a      	bls.n	8000634 <__udivmoddi4+0x2b4>
 800055e:	3802      	subs	r0, #2
 8000560:	4461      	add	r1, ip
 8000562:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000566:	fba0 9402 	umull	r9, r4, r0, r2
 800056a:	eba1 010e 	sub.w	r1, r1, lr
 800056e:	42a1      	cmp	r1, r4
 8000570:	46c8      	mov	r8, r9
 8000572:	46a6      	mov	lr, r4
 8000574:	d356      	bcc.n	8000624 <__udivmoddi4+0x2a4>
 8000576:	d053      	beq.n	8000620 <__udivmoddi4+0x2a0>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x212>
 800057a:	ebb3 0208 	subs.w	r2, r3, r8
 800057e:	eb61 010e 	sbc.w	r1, r1, lr
 8000582:	fa01 f707 	lsl.w	r7, r1, r7
 8000586:	fa22 f306 	lsr.w	r3, r2, r6
 800058a:	40f1      	lsrs	r1, r6
 800058c:	431f      	orrs	r7, r3
 800058e:	e9c5 7100 	strd	r7, r1, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	40d8      	lsrs	r0, r3
 80005a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a4:	fa21 f303 	lsr.w	r3, r1, r3
 80005a8:	4091      	lsls	r1, r2
 80005aa:	4301      	orrs	r1, r0
 80005ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b0:	fa1f fe8c 	uxth.w	lr, ip
 80005b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005b8:	fb07 3610 	mls	r6, r7, r0, r3
 80005bc:	0c0b      	lsrs	r3, r1, #16
 80005be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005c2:	fb00 f60e 	mul.w	r6, r0, lr
 80005c6:	429e      	cmp	r6, r3
 80005c8:	fa04 f402 	lsl.w	r4, r4, r2
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x260>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005d6:	d22f      	bcs.n	8000638 <__udivmoddi4+0x2b8>
 80005d8:	429e      	cmp	r6, r3
 80005da:	d92d      	bls.n	8000638 <__udivmoddi4+0x2b8>
 80005dc:	3802      	subs	r0, #2
 80005de:	4463      	add	r3, ip
 80005e0:	1b9b      	subs	r3, r3, r6
 80005e2:	b289      	uxth	r1, r1
 80005e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005e8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f0:	fb06 f30e 	mul.w	r3, r6, lr
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d908      	bls.n	800060a <__udivmoddi4+0x28a>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000600:	d216      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 8000602:	428b      	cmp	r3, r1
 8000604:	d914      	bls.n	8000630 <__udivmoddi4+0x2b0>
 8000606:	3e02      	subs	r6, #2
 8000608:	4461      	add	r1, ip
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000610:	e738      	b.n	8000484 <__udivmoddi4+0x104>
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e705      	b.n	8000424 <__udivmoddi4+0xa4>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e3      	b.n	80003e4 <__udivmoddi4+0x64>
 800061c:	4618      	mov	r0, r3
 800061e:	e6f8      	b.n	8000412 <__udivmoddi4+0x92>
 8000620:	454b      	cmp	r3, r9
 8000622:	d2a9      	bcs.n	8000578 <__udivmoddi4+0x1f8>
 8000624:	ebb9 0802 	subs.w	r8, r9, r2
 8000628:	eb64 0e0c 	sbc.w	lr, r4, ip
 800062c:	3801      	subs	r0, #1
 800062e:	e7a3      	b.n	8000578 <__udivmoddi4+0x1f8>
 8000630:	4646      	mov	r6, r8
 8000632:	e7ea      	b.n	800060a <__udivmoddi4+0x28a>
 8000634:	4620      	mov	r0, r4
 8000636:	e794      	b.n	8000562 <__udivmoddi4+0x1e2>
 8000638:	4640      	mov	r0, r8
 800063a:	e7d1      	b.n	80005e0 <__udivmoddi4+0x260>
 800063c:	46d0      	mov	r8, sl
 800063e:	e77b      	b.n	8000538 <__udivmoddi4+0x1b8>
 8000640:	3b02      	subs	r3, #2
 8000642:	4461      	add	r1, ip
 8000644:	e732      	b.n	80004ac <__udivmoddi4+0x12c>
 8000646:	4630      	mov	r0, r6
 8000648:	e709      	b.n	800045e <__udivmoddi4+0xde>
 800064a:	4464      	add	r4, ip
 800064c:	3802      	subs	r0, #2
 800064e:	e742      	b.n	80004d6 <__udivmoddi4+0x156>

08000650 <__aeabi_idiv0>:
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fa99 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f853 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f8c3 	bl	80007ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <main+0x94>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <main+0x94>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000672:	481e      	ldr	r0, [pc, #120]	; (80006ec <main+0x98>)
 8000674:	f004 fc8c 	bl	8004f90 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000678:	f004 fab4 	bl	8004be4 <SEGGER_SYSVIEW_Conf>

  //SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	2302      	movs	r3, #2
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <main+0x9c>)
 8000688:	22c8      	movs	r2, #200	; 0xc8
 800068a:	491a      	ldr	r1, [pc, #104]	; (80006f4 <main+0xa0>)
 800068c:	481a      	ldr	r0, [pc, #104]	; (80006f8 <main+0xa4>)
 800068e:	f002 fc35 	bl	8002efc <xTaskCreate>
 8000692:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d00a      	beq.n	80006b0 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800069a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800069e:	f383 8811 	msr	BASEPRI, r3
 80006a2:	f3bf 8f6f 	isb	sy
 80006a6:	f3bf 8f4f 	dsb	sy
 80006aa:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006ac:	bf00      	nop
 80006ae:	e7fe      	b.n	80006ae <main+0x5a>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	2302      	movs	r3, #2
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <main+0xa8>)
 80006ba:	22c8      	movs	r2, #200	; 0xc8
 80006bc:	4910      	ldr	r1, [pc, #64]	; (8000700 <main+0xac>)
 80006be:	4811      	ldr	r0, [pc, #68]	; (8000704 <main+0xb0>)
 80006c0:	f002 fc1c 	bl	8002efc <xTaskCreate>
 80006c4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d00a      	beq.n	80006e2 <main+0x8e>
        __asm volatile
 80006cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d0:	f383 8811 	msr	BASEPRI, r3
 80006d4:	f3bf 8f6f 	isb	sy
 80006d8:	f3bf 8f4f 	dsb	sy
 80006dc:	60fb      	str	r3, [r7, #12]
    }
 80006de:	bf00      	nop
 80006e0:	e7fe      	b.n	80006e0 <main+0x8c>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80006e2:	f002 fd61 	bl	80031a8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <main+0x92>
 80006e8:	e0001000 	.word	0xe0001000
 80006ec:	0007a120 	.word	0x0007a120
 80006f0:	08007eec 	.word	0x08007eec
 80006f4:	08007f04 	.word	0x08007f04
 80006f8:	080008e9 	.word	0x080008e9
 80006fc:	08007f0c 	.word	0x08007f0c
 8000700:	08007f24 	.word	0x08007f24
 8000704:	08000925 	.word	0x08000925

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2234      	movs	r2, #52	; 0x34
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f006 ff52 	bl	80075c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <SystemClock_Config+0xdc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a2b      	ldr	r2, [pc, #172]	; (80007e4 <SystemClock_Config+0xdc>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <SystemClock_Config+0xdc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <SystemClock_Config+0xe0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <SystemClock_Config+0xe0>)
 8000752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <SystemClock_Config+0xe0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800077c:	23b4      	movs	r3, #180	; 0xb4
 800077e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000788:	2302      	movs	r3, #2
 800078a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4618      	mov	r0, r3
 8000792:	f001 f887 	bl	80018a4 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800079c:	f000 f8f2 	bl	8000984 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a0:	f000 fcc8 	bl	8001134 <HAL_PWREx_EnableOverDrive>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007aa:	f000 f8eb 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	230f      	movs	r3, #15
 80007b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2302      	movs	r3, #2
 80007b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	2105      	movs	r1, #5
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fd01 	bl	80011d4 <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007d8:	f000 f8d4 	bl	8000984 <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	; 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a34      	ldr	r2, [pc, #208]	; (80008dc <MX_GPIO_Init+0xf0>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b32      	ldr	r3, [pc, #200]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a2d      	ldr	r2, [pc, #180]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a26      	ldr	r2, [pc, #152]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b24      	ldr	r3, [pc, #144]	; (80008dc <MX_GPIO_Init+0xf0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_GPIO_Init+0xf0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a1f      	ldr	r2, [pc, #124]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	481a      	ldr	r0, [pc, #104]	; (80008e0 <MX_GPIO_Init+0xf4>)
 8000878:	f000 fc42 	bl	8001100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000882:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <MX_GPIO_Init+0xf8>)
 8000894:	f000 faa0 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000898:	230c      	movs	r3, #12
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a8:	2307      	movs	r3, #7
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	480b      	ldr	r0, [pc, #44]	; (80008e0 <MX_GPIO_Init+0xf4>)
 80008b4:	f000 fa90 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b8:	2320      	movs	r3, #32
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_GPIO_Init+0xf4>)
 80008d0:	f000 fa82 	bl	8000dd8 <HAL_GPIO_Init>

}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	; 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40020800 	.word	0x40020800

080008e8 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09c      	sub	sp, #112	; 0x70
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 80008f0:	f107 000c 	add.w	r0, r7, #12
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <task1_handler+0x34>)
 80008f8:	2164      	movs	r1, #100	; 0x64
 80008fa:	f006 fe69 	bl	80075d0 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4618      	mov	r0, r3
 8000904:	f006 fd7c 	bl	8007400 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <task1_handler+0x38>)
 800090a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	f3bf 8f4f 	dsb	sy
 8000914:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000918:	e7ea      	b.n	80008f0 <task1_handler+0x8>
 800091a:	bf00      	nop
 800091c:	08007f2c 	.word	0x08007f2c
 8000920:	e000ed04 	.word	0xe000ed04

08000924 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	; 0x70
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 800092c:	f107 000c 	add.w	r0, r7, #12
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a09      	ldr	r2, [pc, #36]	; (8000958 <task2_handler+0x34>)
 8000934:	2164      	movs	r1, #100	; 0x64
 8000936:	f006 fe4b 	bl	80075d0 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4618      	mov	r0, r3
 8000940:	f006 fd5e 	bl	8007400 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <task2_handler+0x38>)
 8000946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	f3bf 8f4f 	dsb	sy
 8000950:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000954:	e7ea      	b.n	800092c <task2_handler+0x8>
 8000956:	bf00      	nop
 8000958:	08007f2c 	.word	0x08007f2c
 800095c:	e000ed04 	.word	0xe000ed04

08000960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d101      	bne.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000972:	f000 f92f 	bl	8000bd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40001000 	.word	0x40001000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 80009ce:	f003 fd53 	bl	8004478 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	; 0x38
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4b33      	ldr	r3, [pc, #204]	; (8000ac4 <HAL_InitTick+0xe4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	4a32      	ldr	r2, [pc, #200]	; (8000ac4 <HAL_InitTick+0xe4>)
 80009fa:	f043 0310 	orr.w	r3, r3, #16
 80009fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000a00:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <HAL_InitTick+0xe4>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	f003 0310 	and.w	r3, r3, #16
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a0c:	f107 0210 	add.w	r2, r7, #16
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fce2 	bl	80013e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d103      	bne.n	8000a2e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a26:	f000 fcc7 	bl	80013b8 <HAL_RCC_GetPCLK1Freq>
 8000a2a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a2c:	e004      	b.n	8000a38 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a2e:	f000 fcc3 	bl	80013b8 <HAL_RCC_GetPCLK1Freq>
 8000a32:	4603      	mov	r3, r0
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3a:	4a23      	ldr	r2, [pc, #140]	; (8000ac8 <HAL_InitTick+0xe8>)
 8000a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a40:	0c9b      	lsrs	r3, r3, #18
 8000a42:	3b01      	subs	r3, #1
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <HAL_InitTick+0xec>)
 8000a48:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <HAL_InitTick+0xf0>)
 8000a4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <HAL_InitTick+0xec>)
 8000a4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a54:	4a1d      	ldr	r2, [pc, #116]	; (8000acc <HAL_InitTick+0xec>)
 8000a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <HAL_InitTick+0xec>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <HAL_InitTick+0xec>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_InitTick+0xec>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a6c:	4817      	ldr	r0, [pc, #92]	; (8000acc <HAL_InitTick+0xec>)
 8000a6e:	f001 f9b7 	bl	8001de0 <HAL_TIM_Base_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d11b      	bne.n	8000ab8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a80:	4812      	ldr	r0, [pc, #72]	; (8000acc <HAL_InitTick+0xec>)
 8000a82:	f001 fa07 	bl	8001e94 <HAL_TIM_Base_Start_IT>
 8000a86:	4603      	mov	r3, r0
 8000a88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d111      	bne.n	8000ab8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a94:	2036      	movs	r0, #54	; 0x36
 8000a96:	f000 f991 	bl	8000dbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d808      	bhi.n	8000ab2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2036      	movs	r0, #54	; 0x36
 8000aa6:	f000 f96d 	bl	8000d84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <HAL_InitTick+0xf4>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	e002      	b.n	8000ab8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ab8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3738      	adds	r7, #56	; 0x38
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	431bde83 	.word	0x431bde83
 8000acc:	2000009c 	.word	0x2000009c
 8000ad0:	40001000 	.word	0x40001000
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <TIM6_DAC_IRQHandler+0x10>)
 8000b0a:	f001 fa33 	bl	8001f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000009c 	.word	0x2000009c

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b42:	490e      	ldr	r1, [pc, #56]	; (8000b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b44:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b58:	4c0b      	ldr	r4, [pc, #44]	; (8000b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b66:	f7ff ffd7 	bl	8000b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f006 fce7 	bl	800753c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fd71 	bl	8000654 <main>
  bx  lr    
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000b80:	080080a8 	.word	0x080080a8
  ldr r2, =_sbss
 8000b84:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000b88:	20014524 	.word	0x20014524

08000b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <HAL_Init+0x40>)
 8000b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_Init+0x40>)
 8000ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x40>)
 8000bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f8d8 	bl	8000d6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff ff0e 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fee4 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023c00 	.word	0x40023c00

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	200000e4 	.word	0x200000e4

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	200000e4 	.word	0x200000e4

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ff4c 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d96:	f7ff ff61 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000d9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	68b9      	ldr	r1, [r7, #8]
 8000da0:	6978      	ldr	r0, [r7, #20]
 8000da2:	f7ff ffb1 	bl	8000d08 <NVIC_EncodePriority>
 8000da6:	4602      	mov	r2, r0
 8000da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff80 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff54 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	e165      	b.n	80010c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	f040 8154 	bne.w	80010ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d005      	beq.n	8000e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d130      	bne.n	8000e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f003 0201 	and.w	r2, r3, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d017      	beq.n	8000ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d123      	bne.n	8000f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	69b9      	ldr	r1, [r7, #24]
 8000f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0203 	and.w	r2, r3, #3
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80ae 	beq.w	80010ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b5d      	ldr	r3, [pc, #372]	; (80010d8 <HAL_GPIO_Init+0x300>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a5c      	ldr	r2, [pc, #368]	; (80010d8 <HAL_GPIO_Init+0x300>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b5a      	ldr	r3, [pc, #360]	; (80010d8 <HAL_GPIO_Init+0x300>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7a:	4a58      	ldr	r2, [pc, #352]	; (80010dc <HAL_GPIO_Init+0x304>)
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4f      	ldr	r2, [pc, #316]	; (80010e0 <HAL_GPIO_Init+0x308>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d025      	beq.n	8000ff2 <HAL_GPIO_Init+0x21a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4e      	ldr	r2, [pc, #312]	; (80010e4 <HAL_GPIO_Init+0x30c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d01f      	beq.n	8000fee <HAL_GPIO_Init+0x216>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4d      	ldr	r2, [pc, #308]	; (80010e8 <HAL_GPIO_Init+0x310>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d019      	beq.n	8000fea <HAL_GPIO_Init+0x212>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4c      	ldr	r2, [pc, #304]	; (80010ec <HAL_GPIO_Init+0x314>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0x20e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4b      	ldr	r2, [pc, #300]	; (80010f0 <HAL_GPIO_Init+0x318>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_GPIO_Init+0x20a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4a      	ldr	r2, [pc, #296]	; (80010f4 <HAL_GPIO_Init+0x31c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d007      	beq.n	8000fde <HAL_GPIO_Init+0x206>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a49      	ldr	r2, [pc, #292]	; (80010f8 <HAL_GPIO_Init+0x320>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_GPIO_Init+0x202>
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	e00c      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fda:	2307      	movs	r3, #7
 8000fdc:	e00a      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fde:	2305      	movs	r3, #5
 8000fe0:	e008      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e004      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	69fa      	ldr	r2, [r7, #28]
 8000ff6:	f002 0203 	and.w	r2, r2, #3
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	4093      	lsls	r3, r2
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001004:	4935      	ldr	r1, [pc, #212]	; (80010dc <HAL_GPIO_Init+0x304>)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001012:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <HAL_GPIO_Init+0x324>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001036:	4a31      	ldr	r2, [pc, #196]	; (80010fc <HAL_GPIO_Init+0x324>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <HAL_GPIO_Init+0x324>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001060:	4a26      	ldr	r2, [pc, #152]	; (80010fc <HAL_GPIO_Init+0x324>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <HAL_GPIO_Init+0x324>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <HAL_GPIO_Init+0x324>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_GPIO_Init+0x324>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b4:	4a11      	ldr	r2, [pc, #68]	; (80010fc <HAL_GPIO_Init+0x324>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3301      	adds	r3, #1
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	f67f ae96 	bls.w	8000df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40013800 	.word	0x40013800
 80010e0:	40020000 	.word	0x40020000
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020c00 	.word	0x40020c00
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40021400 	.word	0x40021400
 80010f8:	40021800 	.word	0x40021800
 80010fc:	40013c00 	.word	0x40013c00

08001100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
 800110c:	4613      	mov	r3, r2
 800110e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001110:	787b      	ldrb	r3, [r7, #1]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800111c:	e003      	b.n	8001126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	041a      	lsls	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	619a      	str	r2, [r3, #24]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a1f      	ldr	r2, [pc, #124]	; (80011c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001160:	f7ff fd4c 	bl	8000bfc <HAL_GetTick>
 8001164:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001166:	e009      	b.n	800117c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001168:	f7ff fd48 	bl	8000bfc <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001176:	d901      	bls.n	800117c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e01f      	b.n	80011bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_PWREx_EnableOverDrive+0x98>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d1ee      	bne.n	8001168 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001190:	f7ff fd34 	bl	8000bfc <HAL_GetTick>
 8001194:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001196:	e009      	b.n	80011ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001198:	f7ff fd30 	bl	8000bfc <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011a6:	d901      	bls.n	80011ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e007      	b.n	80011bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <HAL_PWREx_EnableOverDrive+0x98>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011b8:	d1ee      	bne.n	8001198 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	420e0040 	.word	0x420e0040
 80011cc:	40007000 	.word	0x40007000
 80011d0:	420e0044 	.word	0x420e0044

080011d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0cc      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011e8:	4b68      	ldr	r3, [pc, #416]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d90c      	bls.n	8001210 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b65      	ldr	r3, [pc, #404]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fe:	4b63      	ldr	r3, [pc, #396]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d001      	beq.n	8001210 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0b8      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001228:	4b59      	ldr	r3, [pc, #356]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4a58      	ldr	r2, [pc, #352]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001232:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001240:	4b53      	ldr	r3, [pc, #332]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800124a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800124c:	4b50      	ldr	r3, [pc, #320]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	494d      	ldr	r1, [pc, #308]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	4313      	orrs	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d044      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b47      	ldr	r3, [pc, #284]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d119      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e07f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d003      	beq.n	8001292 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800128e:	2b03      	cmp	r3, #3
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001292:	4b3f      	ldr	r3, [pc, #252]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e06f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e067      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f023 0203 	bic.w	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4934      	ldr	r1, [pc, #208]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c4:	f7ff fc9a 	bl	8000bfc <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012cc:	f7ff fc96 	bl	8000bfc <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e04f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 020c 	and.w	r2, r3, #12
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d1eb      	bne.n	80012cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d20c      	bcs.n	800131c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e032      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4916      	ldr	r1, [pc, #88]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	4313      	orrs	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d009      	beq.n	800135a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	490e      	ldr	r1, [pc, #56]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	4313      	orrs	r3, r2
 8001358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800135a:	f000 f873 	bl	8001444 <HAL_RCC_GetSysClockFreq>
 800135e:	4602      	mov	r2, r0
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	490a      	ldr	r1, [pc, #40]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	5ccb      	ldrb	r3, [r1, r3]
 800136e:	fa22 f303 	lsr.w	r3, r2, r3
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_RCC_ClockConfig+0x1c8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fb30 	bl	80009e0 <HAL_InitTick>

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023c00 	.word	0x40023c00
 8001390:	40023800 	.word	0x40023800
 8001394:	08008010 	.word	0x08008010
 8001398:	20000000 	.word	0x20000000
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000000 	.word	0x20000000

080013b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013bc:	f7ff fff0 	bl	80013a0 <HAL_RCC_GetHCLKFreq>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	0a9b      	lsrs	r3, r3, #10
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	4903      	ldr	r1, [pc, #12]	; (80013dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ce:	5ccb      	ldrb	r3, [r1, r3]
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	08008020 	.word	0x08008020

080013e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	220f      	movs	r2, #15
 80013ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_RCC_GetClockConfig+0x5c>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0203 	and.w	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_RCC_GetClockConfig+0x5c>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <HAL_RCC_GetClockConfig+0x5c>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_RCC_GetClockConfig+0x5c>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	08db      	lsrs	r3, r3, #3
 800141a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_RCC_GetClockConfig+0x60>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 020f 	and.w	r2, r3, #15
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	601a      	str	r2, [r3, #0]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40023c00 	.word	0x40023c00

08001444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001448:	b0ae      	sub	sp, #184	; 0xb8
 800144a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800146a:	4bcb      	ldr	r3, [pc, #812]	; (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b0c      	cmp	r3, #12
 8001474:	f200 8206 	bhi.w	8001884 <HAL_RCC_GetSysClockFreq+0x440>
 8001478:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <HAL_RCC_GetSysClockFreq+0x3c>)
 800147a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147e:	bf00      	nop
 8001480:	080014b5 	.word	0x080014b5
 8001484:	08001885 	.word	0x08001885
 8001488:	08001885 	.word	0x08001885
 800148c:	08001885 	.word	0x08001885
 8001490:	080014bd 	.word	0x080014bd
 8001494:	08001885 	.word	0x08001885
 8001498:	08001885 	.word	0x08001885
 800149c:	08001885 	.word	0x08001885
 80014a0:	080014c5 	.word	0x080014c5
 80014a4:	08001885 	.word	0x08001885
 80014a8:	08001885 	.word	0x08001885
 80014ac:	08001885 	.word	0x08001885
 80014b0:	080016b5 	.word	0x080016b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014b4:	4bb9      	ldr	r3, [pc, #740]	; (800179c <HAL_RCC_GetSysClockFreq+0x358>)
 80014b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80014ba:	e1e7      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014bc:	4bb8      	ldr	r3, [pc, #736]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014c2:	e1e3      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014c4:	4bb4      	ldr	r3, [pc, #720]	; (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014d0:	4bb1      	ldr	r3, [pc, #708]	; (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d071      	beq.n	80015c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014dc:	4bae      	ldr	r3, [pc, #696]	; (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	099b      	lsrs	r3, r3, #6
 80014e2:	2200      	movs	r2, #0
 80014e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80014e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001502:	4622      	mov	r2, r4
 8001504:	462b      	mov	r3, r5
 8001506:	f04f 0000 	mov.w	r0, #0
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	0159      	lsls	r1, r3, #5
 8001510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001514:	0150      	lsls	r0, r2, #5
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4621      	mov	r1, r4
 800151c:	1a51      	subs	r1, r2, r1
 800151e:	6439      	str	r1, [r7, #64]	; 0x40
 8001520:	4629      	mov	r1, r5
 8001522:	eb63 0301 	sbc.w	r3, r3, r1
 8001526:	647b      	str	r3, [r7, #68]	; 0x44
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001534:	4649      	mov	r1, r9
 8001536:	018b      	lsls	r3, r1, #6
 8001538:	4641      	mov	r1, r8
 800153a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800153e:	4641      	mov	r1, r8
 8001540:	018a      	lsls	r2, r1, #6
 8001542:	4641      	mov	r1, r8
 8001544:	1a51      	subs	r1, r2, r1
 8001546:	63b9      	str	r1, [r7, #56]	; 0x38
 8001548:	4649      	mov	r1, r9
 800154a:	eb63 0301 	sbc.w	r3, r3, r1
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800155c:	4649      	mov	r1, r9
 800155e:	00cb      	lsls	r3, r1, #3
 8001560:	4641      	mov	r1, r8
 8001562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001566:	4641      	mov	r1, r8
 8001568:	00ca      	lsls	r2, r1, #3
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	4603      	mov	r3, r0
 8001570:	4622      	mov	r2, r4
 8001572:	189b      	adds	r3, r3, r2
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
 8001576:	462b      	mov	r3, r5
 8001578:	460a      	mov	r2, r1
 800157a:	eb42 0303 	adc.w	r3, r2, r3
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800158c:	4629      	mov	r1, r5
 800158e:	024b      	lsls	r3, r1, #9
 8001590:	4621      	mov	r1, r4
 8001592:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001596:	4621      	mov	r1, r4
 8001598:	024a      	lsls	r2, r1, #9
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015a2:	2200      	movs	r2, #0
 80015a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015b0:	f7fe fece 	bl	8000350 <__aeabi_uldivmod>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4613      	mov	r3, r2
 80015ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015be:	e067      	b.n	8001690 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c0:	4b75      	ldr	r3, [pc, #468]	; (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	099b      	lsrs	r3, r3, #6
 80015c6:	2200      	movs	r2, #0
 80015c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015cc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80015da:	2300      	movs	r3, #0
 80015dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015e2:	4622      	mov	r2, r4
 80015e4:	462b      	mov	r3, r5
 80015e6:	f04f 0000 	mov.w	r0, #0
 80015ea:	f04f 0100 	mov.w	r1, #0
 80015ee:	0159      	lsls	r1, r3, #5
 80015f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015f4:	0150      	lsls	r0, r2, #5
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4621      	mov	r1, r4
 80015fc:	1a51      	subs	r1, r2, r1
 80015fe:	62b9      	str	r1, [r7, #40]	; 0x28
 8001600:	4629      	mov	r1, r5
 8001602:	eb63 0301 	sbc.w	r3, r3, r1
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001614:	4649      	mov	r1, r9
 8001616:	018b      	lsls	r3, r1, #6
 8001618:	4641      	mov	r1, r8
 800161a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800161e:	4641      	mov	r1, r8
 8001620:	018a      	lsls	r2, r1, #6
 8001622:	4641      	mov	r1, r8
 8001624:	ebb2 0a01 	subs.w	sl, r2, r1
 8001628:	4649      	mov	r1, r9
 800162a:	eb63 0b01 	sbc.w	fp, r3, r1
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800163a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800163e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001642:	4692      	mov	sl, r2
 8001644:	469b      	mov	fp, r3
 8001646:	4623      	mov	r3, r4
 8001648:	eb1a 0303 	adds.w	r3, sl, r3
 800164c:	623b      	str	r3, [r7, #32]
 800164e:	462b      	mov	r3, r5
 8001650:	eb4b 0303 	adc.w	r3, fp, r3
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001662:	4629      	mov	r1, r5
 8001664:	028b      	lsls	r3, r1, #10
 8001666:	4621      	mov	r1, r4
 8001668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800166c:	4621      	mov	r1, r4
 800166e:	028a      	lsls	r2, r1, #10
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001678:	2200      	movs	r2, #0
 800167a:	673b      	str	r3, [r7, #112]	; 0x70
 800167c:	677a      	str	r2, [r7, #116]	; 0x74
 800167e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001682:	f7fe fe65 	bl	8000350 <__aeabi_uldivmod>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4613      	mov	r3, r2
 800168c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001690:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	3301      	adds	r3, #1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80016a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016b2:	e0eb      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016b4:	4b38      	ldr	r3, [pc, #224]	; (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016c0:	4b35      	ldr	r3, [pc, #212]	; (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d06b      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016cc:	4b32      	ldr	r3, [pc, #200]	; (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	099b      	lsrs	r3, r3, #6
 80016d2:	2200      	movs	r2, #0
 80016d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80016d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016de:	663b      	str	r3, [r7, #96]	; 0x60
 80016e0:	2300      	movs	r3, #0
 80016e2:	667b      	str	r3, [r7, #100]	; 0x64
 80016e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016e8:	4622      	mov	r2, r4
 80016ea:	462b      	mov	r3, r5
 80016ec:	f04f 0000 	mov.w	r0, #0
 80016f0:	f04f 0100 	mov.w	r1, #0
 80016f4:	0159      	lsls	r1, r3, #5
 80016f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016fa:	0150      	lsls	r0, r2, #5
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4621      	mov	r1, r4
 8001702:	1a51      	subs	r1, r2, r1
 8001704:	61b9      	str	r1, [r7, #24]
 8001706:	4629      	mov	r1, r5
 8001708:	eb63 0301 	sbc.w	r3, r3, r1
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800171a:	4659      	mov	r1, fp
 800171c:	018b      	lsls	r3, r1, #6
 800171e:	4651      	mov	r1, sl
 8001720:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001724:	4651      	mov	r1, sl
 8001726:	018a      	lsls	r2, r1, #6
 8001728:	4651      	mov	r1, sl
 800172a:	ebb2 0801 	subs.w	r8, r2, r1
 800172e:	4659      	mov	r1, fp
 8001730:	eb63 0901 	sbc.w	r9, r3, r1
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001740:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001744:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001748:	4690      	mov	r8, r2
 800174a:	4699      	mov	r9, r3
 800174c:	4623      	mov	r3, r4
 800174e:	eb18 0303 	adds.w	r3, r8, r3
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	462b      	mov	r3, r5
 8001756:	eb49 0303 	adc.w	r3, r9, r3
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001768:	4629      	mov	r1, r5
 800176a:	024b      	lsls	r3, r1, #9
 800176c:	4621      	mov	r1, r4
 800176e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001772:	4621      	mov	r1, r4
 8001774:	024a      	lsls	r2, r1, #9
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800177e:	2200      	movs	r2, #0
 8001780:	65bb      	str	r3, [r7, #88]	; 0x58
 8001782:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001784:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001788:	f7fe fde2 	bl	8000350 <__aeabi_uldivmod>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4613      	mov	r3, r2
 8001792:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001796:	e065      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x420>
 8001798:	40023800 	.word	0x40023800
 800179c:	00f42400 	.word	0x00f42400
 80017a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a4:	4b3d      	ldr	r3, [pc, #244]	; (800189c <HAL_RCC_GetSysClockFreq+0x458>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	099b      	lsrs	r3, r3, #6
 80017aa:	2200      	movs	r2, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	4611      	mov	r1, r2
 80017b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017b4:	653b      	str	r3, [r7, #80]	; 0x50
 80017b6:	2300      	movs	r3, #0
 80017b8:	657b      	str	r3, [r7, #84]	; 0x54
 80017ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80017be:	4642      	mov	r2, r8
 80017c0:	464b      	mov	r3, r9
 80017c2:	f04f 0000 	mov.w	r0, #0
 80017c6:	f04f 0100 	mov.w	r1, #0
 80017ca:	0159      	lsls	r1, r3, #5
 80017cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017d0:	0150      	lsls	r0, r2, #5
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4641      	mov	r1, r8
 80017d8:	1a51      	subs	r1, r2, r1
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	4649      	mov	r1, r9
 80017de:	eb63 0301 	sbc.w	r3, r3, r1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017f0:	4659      	mov	r1, fp
 80017f2:	018b      	lsls	r3, r1, #6
 80017f4:	4651      	mov	r1, sl
 80017f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017fa:	4651      	mov	r1, sl
 80017fc:	018a      	lsls	r2, r1, #6
 80017fe:	4651      	mov	r1, sl
 8001800:	1a54      	subs	r4, r2, r1
 8001802:	4659      	mov	r1, fp
 8001804:	eb63 0501 	sbc.w	r5, r3, r1
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	00eb      	lsls	r3, r5, #3
 8001812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001816:	00e2      	lsls	r2, r4, #3
 8001818:	4614      	mov	r4, r2
 800181a:	461d      	mov	r5, r3
 800181c:	4643      	mov	r3, r8
 800181e:	18e3      	adds	r3, r4, r3
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	464b      	mov	r3, r9
 8001824:	eb45 0303 	adc.w	r3, r5, r3
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001836:	4629      	mov	r1, r5
 8001838:	028b      	lsls	r3, r1, #10
 800183a:	4621      	mov	r1, r4
 800183c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001840:	4621      	mov	r1, r4
 8001842:	028a      	lsls	r2, r1, #10
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800184c:	2200      	movs	r2, #0
 800184e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001850:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001852:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001856:	f7fe fd7b 	bl	8000350 <__aeabi_uldivmod>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4613      	mov	r3, r2
 8001860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_RCC_GetSysClockFreq+0x458>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	0f1b      	lsrs	r3, r3, #28
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001876:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001882:	e003      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800188a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800188c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001890:	4618      	mov	r0, r3
 8001892:	37b8      	adds	r7, #184	; 0xb8
 8001894:	46bd      	mov	sp, r7
 8001896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	00f42400 	.word	0x00f42400

080018a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e28d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 8083 	beq.w	80019ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018c4:	4b94      	ldr	r3, [pc, #592]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d019      	beq.n	8001904 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018d0:	4b91      	ldr	r3, [pc, #580]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018dc:	4b8e      	ldr	r3, [pc, #568]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018e8:	d00c      	beq.n	8001904 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ea:	4b8b      	ldr	r3, [pc, #556]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018f2:	2b0c      	cmp	r3, #12
 80018f4:	d112      	bne.n	800191c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f6:	4b88      	ldr	r3, [pc, #544]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001902:	d10b      	bne.n	800191c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	4b84      	ldr	r3, [pc, #528]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d05b      	beq.n	80019c8 <HAL_RCC_OscConfig+0x124>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d157      	bne.n	80019c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e25a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d106      	bne.n	8001934 <HAL_RCC_OscConfig+0x90>
 8001926:	4b7c      	ldr	r3, [pc, #496]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a7b      	ldr	r2, [pc, #492]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e01d      	b.n	8001970 <HAL_RCC_OscConfig+0xcc>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0xb4>
 800193e:	4b76      	ldr	r3, [pc, #472]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a75      	ldr	r2, [pc, #468]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a72      	ldr	r2, [pc, #456]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0xcc>
 8001958:	4b6f      	ldr	r3, [pc, #444]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a6e      	ldr	r2, [pc, #440]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 800195e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b6c      	ldr	r3, [pc, #432]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a6b      	ldr	r2, [pc, #428]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 800196a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d013      	beq.n	80019a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff f940 	bl	8000bfc <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff f93c 	bl	8000bfc <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e21f      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b61      	ldr	r3, [pc, #388]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0xdc>
 800199e:	e014      	b.n	80019ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7ff f92c 	bl	8000bfc <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a8:	f7ff f928 	bl	8000bfc <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e20b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ba:	4b57      	ldr	r3, [pc, #348]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x104>
 80019c6:	e000      	b.n	80019ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d06f      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019d6:	4b50      	ldr	r3, [pc, #320]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d017      	beq.n	8001a12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019e2:	4b4d      	ldr	r3, [pc, #308]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d105      	bne.n	80019fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ee:	4b4a      	ldr	r3, [pc, #296]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fa:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d11c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a06:	4b44      	ldr	r3, [pc, #272]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x186>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1d3      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b3b      	ldr	r3, [pc, #236]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4937      	ldr	r1, [pc, #220]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e03a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a48:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <HAL_RCC_OscConfig+0x278>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff f8d5 	bl	8000bfc <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff f8d1 	bl	8000bfc <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e1b4      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b28      	ldr	r3, [pc, #160]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4925      	ldr	r1, [pc, #148]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_RCC_OscConfig+0x278>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff f8b4 	bl	8000bfc <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff f8b0 	bl	8000bfc <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e193      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d036      	beq.n	8001b30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d016      	beq.n	8001af8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f894 	bl	8000bfc <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff f890 	bl	8000bfc <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e173      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x234>
 8001af6:	e01b      	b.n	8001b30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afe:	f7ff f87d 	bl	8000bfc <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	e00e      	b.n	8001b24 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b06:	f7ff f879 	bl	8000bfc <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d907      	bls.n	8001b24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e15c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	42470000 	.word	0x42470000
 8001b20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b24:	4b8a      	ldr	r3, [pc, #552]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1ea      	bne.n	8001b06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 8097 	beq.w	8001c6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b42:	4b83      	ldr	r3, [pc, #524]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10f      	bne.n	8001b6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b7f      	ldr	r3, [pc, #508]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a7e      	ldr	r2, [pc, #504]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b7c      	ldr	r3, [pc, #496]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6e:	4b79      	ldr	r3, [pc, #484]	; (8001d54 <HAL_RCC_OscConfig+0x4b0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d118      	bne.n	8001bac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7a:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_RCC_OscConfig+0x4b0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a75      	ldr	r2, [pc, #468]	; (8001d54 <HAL_RCC_OscConfig+0x4b0>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b86:	f7ff f839 	bl	8000bfc <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8e:	f7ff f835 	bl	8000bfc <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e118      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	4b6c      	ldr	r3, [pc, #432]	; (8001d54 <HAL_RCC_OscConfig+0x4b0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x31e>
 8001bb4:	4b66      	ldr	r3, [pc, #408]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb8:	4a65      	ldr	r2, [pc, #404]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc0:	e01c      	b.n	8001bfc <HAL_RCC_OscConfig+0x358>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x340>
 8001bca:	4b61      	ldr	r3, [pc, #388]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bce:	4a60      	ldr	r2, [pc, #384]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd6:	4b5e      	ldr	r3, [pc, #376]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	4a5d      	ldr	r2, [pc, #372]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6713      	str	r3, [r2, #112]	; 0x70
 8001be2:	e00b      	b.n	8001bfc <HAL_RCC_OscConfig+0x358>
 8001be4:	4b5a      	ldr	r3, [pc, #360]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	4a59      	ldr	r2, [pc, #356]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bea:	f023 0301 	bic.w	r3, r3, #1
 8001bee:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf0:	4b57      	ldr	r3, [pc, #348]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf4:	4a56      	ldr	r2, [pc, #344]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bf6:	f023 0304 	bic.w	r3, r3, #4
 8001bfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d015      	beq.n	8001c30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7fe fffa 	bl	8000bfc <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0c:	f7fe fff6 	bl	8000bfc <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e0d7      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c22:	4b4b      	ldr	r3, [pc, #300]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0ee      	beq.n	8001c0c <HAL_RCC_OscConfig+0x368>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7fe ffe4 	bl	8000bfc <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c38:	f7fe ffe0 	bl	8000bfc <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e0c1      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4e:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1ee      	bne.n	8001c38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c60:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	4a3a      	ldr	r2, [pc, #232]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80ad 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c76:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d060      	beq.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d145      	bne.n	8001d16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <HAL_RCC_OscConfig+0x4b4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7fe ffb4 	bl	8000bfc <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c98:	f7fe ffb0 	bl	8000bfc <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e093      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	019b      	lsls	r3, r3, #6
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	085b      	lsrs	r3, r3, #1
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	041b      	lsls	r3, r3, #16
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	061b      	lsls	r3, r3, #24
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	071b      	lsls	r3, r3, #28
 8001ce2:	491b      	ldr	r1, [pc, #108]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_RCC_OscConfig+0x4b4>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7fe ff85 	bl	8000bfc <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7fe ff81 	bl	8000bfc <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e064      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x452>
 8001d14:	e05c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_RCC_OscConfig+0x4b4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7fe ff6e 	bl	8000bfc <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d24:	f7fe ff6a 	bl	8000bfc <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e04d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x480>
 8001d42:	e045      	b.n	8001dd0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e040      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40007000 	.word	0x40007000
 8001d58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <HAL_RCC_OscConfig+0x538>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d030      	beq.n	8001dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d129      	bne.n	8001dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d122      	bne.n	8001dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d119      	bne.n	8001dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	085b      	lsrs	r3, r3, #1
 8001da4:	3b01      	subs	r3, #1
 8001da6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d10f      	bne.n	8001dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800

08001de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e041      	b.n	8001e76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f839 	bl	8001e7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f000 f9d8 	bl	80021d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d001      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e04e      	b.n	8001f4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <HAL_TIM_Base_Start_IT+0xc4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d022      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x80>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed6:	d01d      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x80>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1f      	ldr	r2, [pc, #124]	; (8001f5c <HAL_TIM_Base_Start_IT+0xc8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d018      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x80>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1e      	ldr	r2, [pc, #120]	; (8001f60 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d013      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x80>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00e      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x80>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1b      	ldr	r2, [pc, #108]	; (8001f68 <HAL_TIM_Base_Start_IT+0xd4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d009      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x80>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <HAL_TIM_Base_Start_IT+0xd8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d004      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x80>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d111      	bne.n	8001f38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d010      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f36:	e007      	b.n	8001f48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40010000 	.word	0x40010000
 8001f5c:	40000400 	.word	0x40000400
 8001f60:	40000800 	.word	0x40000800
 8001f64:	40000c00 	.word	0x40000c00
 8001f68:	40010400 	.word	0x40010400
 8001f6c:	40014000 	.word	0x40014000
 8001f70:	40001800 	.word	0x40001800

08001f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d122      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d11b      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0202 	mvn.w	r2, #2
 8001fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8ee 	bl	8002198 <HAL_TIM_IC_CaptureCallback>
 8001fbc:	e005      	b.n	8001fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8e0 	bl	8002184 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f8f1 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d122      	bne.n	8002024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d11b      	bne.n	8002024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0204 	mvn.w	r2, #4
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8c4 	bl	8002198 <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f8b6 	bl	8002184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f8c7 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b08      	cmp	r3, #8
 8002030:	d122      	bne.n	8002078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b08      	cmp	r3, #8
 800203e:	d11b      	bne.n	8002078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0208 	mvn.w	r2, #8
 8002048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2204      	movs	r2, #4
 800204e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f89a 	bl	8002198 <HAL_TIM_IC_CaptureCallback>
 8002064:	e005      	b.n	8002072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f88c 	bl	8002184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f89d 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b10      	cmp	r3, #16
 8002084:	d122      	bne.n	80020cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b10      	cmp	r3, #16
 8002092:	d11b      	bne.n	80020cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0210 	mvn.w	r2, #16
 800209c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2208      	movs	r2, #8
 80020a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f870 	bl	8002198 <HAL_TIM_IC_CaptureCallback>
 80020b8:	e005      	b.n	80020c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f862 	bl	8002184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f873 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d10e      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d107      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0201 	mvn.w	r2, #1
 80020f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe fc34 	bl	8000960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002102:	2b80      	cmp	r3, #128	; 0x80
 8002104:	d10e      	bne.n	8002124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002110:	2b80      	cmp	r3, #128	; 0x80
 8002112:	d107      	bne.n	8002124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f902 	bl	8002328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212e:	2b40      	cmp	r3, #64	; 0x40
 8002130:	d10e      	bne.n	8002150 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213c:	2b40      	cmp	r3, #64	; 0x40
 800213e:	d107      	bne.n	8002150 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f838 	bl	80021c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b20      	cmp	r3, #32
 800215c:	d10e      	bne.n	800217c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0320 	and.w	r3, r3, #32
 8002168:	2b20      	cmp	r3, #32
 800216a:	d107      	bne.n	800217c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0220 	mvn.w	r2, #32
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f8cc 	bl	8002314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a40      	ldr	r2, [pc, #256]	; (80022e8 <TIM_Base_SetConfig+0x114>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d013      	beq.n	8002214 <TIM_Base_SetConfig+0x40>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f2:	d00f      	beq.n	8002214 <TIM_Base_SetConfig+0x40>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a3d      	ldr	r2, [pc, #244]	; (80022ec <TIM_Base_SetConfig+0x118>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00b      	beq.n	8002214 <TIM_Base_SetConfig+0x40>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a3c      	ldr	r2, [pc, #240]	; (80022f0 <TIM_Base_SetConfig+0x11c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d007      	beq.n	8002214 <TIM_Base_SetConfig+0x40>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a3b      	ldr	r2, [pc, #236]	; (80022f4 <TIM_Base_SetConfig+0x120>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d003      	beq.n	8002214 <TIM_Base_SetConfig+0x40>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a3a      	ldr	r2, [pc, #232]	; (80022f8 <TIM_Base_SetConfig+0x124>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d108      	bne.n	8002226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a2f      	ldr	r2, [pc, #188]	; (80022e8 <TIM_Base_SetConfig+0x114>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d02b      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d027      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a2c      	ldr	r2, [pc, #176]	; (80022ec <TIM_Base_SetConfig+0x118>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d023      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a2b      	ldr	r2, [pc, #172]	; (80022f0 <TIM_Base_SetConfig+0x11c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d01f      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <TIM_Base_SetConfig+0x120>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01b      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <TIM_Base_SetConfig+0x124>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d017      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a28      	ldr	r2, [pc, #160]	; (80022fc <TIM_Base_SetConfig+0x128>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a27      	ldr	r2, [pc, #156]	; (8002300 <TIM_Base_SetConfig+0x12c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00f      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a26      	ldr	r2, [pc, #152]	; (8002304 <TIM_Base_SetConfig+0x130>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00b      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a25      	ldr	r2, [pc, #148]	; (8002308 <TIM_Base_SetConfig+0x134>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d007      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a24      	ldr	r2, [pc, #144]	; (800230c <TIM_Base_SetConfig+0x138>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d003      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a23      	ldr	r2, [pc, #140]	; (8002310 <TIM_Base_SetConfig+0x13c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d108      	bne.n	8002298 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <TIM_Base_SetConfig+0x114>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d003      	beq.n	80022cc <TIM_Base_SetConfig+0xf8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a0c      	ldr	r2, [pc, #48]	; (80022f8 <TIM_Base_SetConfig+0x124>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d103      	bne.n	80022d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	615a      	str	r2, [r3, #20]
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40010000 	.word	0x40010000
 80022ec:	40000400 	.word	0x40000400
 80022f0:	40000800 	.word	0x40000800
 80022f4:	40000c00 	.word	0x40000c00
 80022f8:	40010400 	.word	0x40010400
 80022fc:	40014000 	.word	0x40014000
 8002300:	40014400 	.word	0x40014400
 8002304:	40014800 	.word	0x40014800
 8002308:	40001800 	.word	0x40001800
 800230c:	40001c00 	.word	0x40001c00
 8002310:	40002000 	.word	0x40002000

08002314 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f103 0208 	add.w	r2, r3, #8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002354:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f103 0208 	add.w	r2, r3, #8
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f103 0208 	add.w	r2, r3, #8
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002396:	b480      	push	{r7}
 8002398:	b085      	sub	sp, #20
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	601a      	str	r2, [r3, #0]
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80023de:	b480      	push	{r7}
 80023e0:	b085      	sub	sp, #20
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023f4:	d103      	bne.n	80023fe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	e00c      	b.n	8002418 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3308      	adds	r3, #8
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e002      	b.n	800240c <vListInsert+0x2e>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	429a      	cmp	r2, r3
 8002416:	d2f6      	bcs.n	8002406 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	601a      	str	r2, [r3, #0]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6892      	ldr	r2, [r2, #8]
 8002466:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6852      	ldr	r2, [r2, #4]
 8002470:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	429a      	cmp	r2, r3
 800247a:	d103      	bne.n	8002484 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1e5a      	subs	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <xQueueGenericReset+0x2a>
        __asm volatile
 80024b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	60bb      	str	r3, [r7, #8]
    }
 80024ca:	bf00      	nop
 80024cc:	e7fe      	b.n	80024cc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80024ce:	f002 f851 	bl	8004574 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	68f9      	ldr	r1, [r7, #12]
 80024dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	441a      	add	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	3b01      	subs	r3, #1
 8002500:	68f9      	ldr	r1, [r7, #12]
 8002502:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	441a      	add	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	22ff      	movs	r2, #255	; 0xff
 8002512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	22ff      	movs	r2, #255	; 0xff
 800251a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00f      	beq.n	800254c <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3310      	adds	r3, #16
 8002530:	4618      	mov	r0, r3
 8002532:	f001 f8b3 	bl	800369c <xTaskRemoveFromEventList>
 8002536:	e009      	b.n	800254c <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3310      	adds	r3, #16
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fefd 	bl	800233c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3324      	adds	r3, #36	; 0x24
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fef8 	bl	800233c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800254c:	f002 f842 	bl	80045d4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002550:	2301      	movs	r3, #1
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800255a:	b580      	push	{r7, lr}
 800255c:	b08c      	sub	sp, #48	; 0x30
 800255e:	af02      	add	r7, sp, #8
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	4613      	mov	r3, r2
 8002566:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10a      	bne.n	8002584 <xQueueGenericCreate+0x2a>
        __asm volatile
 800256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	61bb      	str	r3, [r7, #24]
    }
 8002580:	bf00      	nop
 8002582:	e7fe      	b.n	8002582 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	fb02 f303 	mul.w	r3, r2, r3
 800258c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <xQueueGenericCreate+0x48>
 8002594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d101      	bne.n	80025a6 <xQueueGenericCreate+0x4c>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <xQueueGenericCreate+0x4e>
 80025a6:	2300      	movs	r3, #0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <xQueueGenericCreate+0x68>
        __asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	617b      	str	r3, [r7, #20]
    }
 80025be:	bf00      	nop
 80025c0:	e7fe      	b.n	80025c0 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80025c8:	d90a      	bls.n	80025e0 <xQueueGenericCreate+0x86>
        __asm volatile
 80025ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ce:	f383 8811 	msr	BASEPRI, r3
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	613b      	str	r3, [r7, #16]
    }
 80025dc:	bf00      	nop
 80025de:	e7fe      	b.n	80025de <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	3350      	adds	r3, #80	; 0x50
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 f8f1 	bl	80047cc <pvPortMalloc>
 80025ea:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00d      	beq.n	800260e <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3350      	adds	r3, #80	; 0x50
 80025fa:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025fc:	79fa      	ldrb	r2, [r7, #7]
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	4613      	mov	r3, r2
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f805 	bl	8002618 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800260e:	6a3b      	ldr	r3, [r7, #32]
    }
 8002610:	4618      	mov	r0, r3
 8002612:	3728      	adds	r7, #40	; 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d103      	bne.n	8002634 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e002      	b.n	800263a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002646:	2101      	movs	r1, #1
 8002648:	69b8      	ldr	r0, [r7, #24]
 800264a:	f7ff ff2b 	bl	80024a4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	68f9      	ldr	r1, [r7, #12]
 800265c:	2073      	movs	r0, #115	; 0x73
 800265e:	f004 f84b 	bl	80066f8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b090      	sub	sp, #64	; 0x40
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <xQueueGenericSend+0x32>
        __asm volatile
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800269a:	bf00      	nop
 800269c:	e7fe      	b.n	800269c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d103      	bne.n	80026ac <xQueueGenericSend+0x40>
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <xQueueGenericSend+0x44>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <xQueueGenericSend+0x46>
 80026b0:	2300      	movs	r3, #0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10a      	bne.n	80026cc <xQueueGenericSend+0x60>
        __asm volatile
 80026b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ba:	f383 8811 	msr	BASEPRI, r3
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	f3bf 8f4f 	dsb	sy
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80026c8:	bf00      	nop
 80026ca:	e7fe      	b.n	80026ca <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d103      	bne.n	80026da <xQueueGenericSend+0x6e>
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <xQueueGenericSend+0x72>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <xQueueGenericSend+0x74>
 80026de:	2300      	movs	r3, #0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10a      	bne.n	80026fa <xQueueGenericSend+0x8e>
        __asm volatile
 80026e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e8:	f383 8811 	msr	BASEPRI, r3
 80026ec:	f3bf 8f6f 	isb	sy
 80026f0:	f3bf 8f4f 	dsb	sy
 80026f4:	623b      	str	r3, [r7, #32]
    }
 80026f6:	bf00      	nop
 80026f8:	e7fe      	b.n	80026f8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026fa:	f001 f969 	bl	80039d0 <xTaskGetSchedulerState>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <xQueueGenericSend+0x9e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <xQueueGenericSend+0xa2>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <xQueueGenericSend+0xa4>
 800270e:	2300      	movs	r3, #0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <xQueueGenericSend+0xbe>
        __asm volatile
 8002714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002718:	f383 8811 	msr	BASEPRI, r3
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	61fb      	str	r3, [r7, #28]
    }
 8002726:	bf00      	nop
 8002728:	e7fe      	b.n	8002728 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800272a:	f001 ff23 	bl	8004574 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002736:	429a      	cmp	r2, r3
 8002738:	d302      	bcc.n	8002740 <xQueueGenericSend+0xd4>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d11f      	bne.n	8002780 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002742:	4618      	mov	r0, r3
 8002744:	f004 fd66 	bl	8007214 <SEGGER_SYSVIEW_ShrinkId>
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	460b      	mov	r3, r1
 8002752:	4601      	mov	r1, r0
 8002754:	205a      	movs	r0, #90	; 0x5a
 8002756:	f004 f845 	bl	80067e4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002760:	f000 fa56 	bl	8002c10 <prvCopyDataToQueue>
 8002764:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	3324      	adds	r3, #36	; 0x24
 8002772:	4618      	mov	r0, r3
 8002774:	f000 ff92 	bl	800369c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002778:	f001 ff2c 	bl	80045d4 <vPortExitCritical>
                return pdPASS;
 800277c:	2301      	movs	r3, #1
 800277e:	e07d      	b.n	800287c <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d110      	bne.n	80027a8 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002786:	f001 ff25 	bl	80045d4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278c:	4618      	mov	r0, r3
 800278e:	f004 fd41 	bl	8007214 <SEGGER_SYSVIEW_ShrinkId>
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	460b      	mov	r3, r1
 800279c:	4601      	mov	r1, r0
 800279e:	205a      	movs	r0, #90	; 0x5a
 80027a0:	f004 f820 	bl	80067e4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e069      	b.n	800287c <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 ffd8 	bl	8003768 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027b8:	2301      	movs	r3, #1
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027bc:	f001 ff0a 	bl	80045d4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027c0:	f000 fd54 	bl	800326c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027c4:	f001 fed6 	bl	8004574 <vPortEnterCritical>
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d4:	d103      	bne.n	80027de <xQueueGenericSend+0x172>
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ea:	d103      	bne.n	80027f4 <xQueueGenericSend+0x188>
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027f4:	f001 feee 	bl	80045d4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027f8:	1d3a      	adds	r2, r7, #4
 80027fa:	f107 0314 	add.w	r3, r7, #20
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f000 ffc7 	bl	8003794 <xTaskCheckForTimeOut>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d124      	bne.n	8002856 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800280c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800280e:	f000 faf7 	bl	8002e00 <prvIsQueueFull>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d018      	beq.n	800284a <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281a:	3310      	adds	r3, #16
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fee9 	bl	80035f8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002828:	f000 fa82 	bl	8002d30 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800282c:	f000 fd2c 	bl	8003288 <xTaskResumeAll>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	f47f af79 	bne.w	800272a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <xQueueGenericSend+0x218>)
 800283a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	e76f      	b.n	800272a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800284a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800284c:	f000 fa70 	bl	8002d30 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002850:	f000 fd1a 	bl	8003288 <xTaskResumeAll>
 8002854:	e769      	b.n	800272a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002856:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002858:	f000 fa6a 	bl	8002d30 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800285c:	f000 fd14 	bl	8003288 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	4618      	mov	r0, r3
 8002864:	f004 fcd6 	bl	8007214 <SEGGER_SYSVIEW_ShrinkId>
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	460b      	mov	r3, r1
 8002872:	4601      	mov	r1, r0
 8002874:	205a      	movs	r0, #90	; 0x5a
 8002876:	f003 ffb5 	bl	80067e4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800287a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800287c:	4618      	mov	r0, r3
 800287e:	3738      	adds	r7, #56	; 0x38
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	e000ed04 	.word	0xe000ed04

08002888 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b090      	sub	sp, #64	; 0x40
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <xQueueGenericSendFromISR+0x3c>
 80028bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <xQueueGenericSendFromISR+0x40>
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <xQueueGenericSendFromISR+0x42>
 80028c8:	2300      	movs	r3, #0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10a      	bne.n	80028e4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80028ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d2:	f383 8811 	msr	BASEPRI, r3
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80028e0:	bf00      	nop
 80028e2:	e7fe      	b.n	80028e2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d103      	bne.n	80028f2 <xQueueGenericSendFromISR+0x6a>
 80028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <xQueueGenericSendFromISR+0x6e>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <xQueueGenericSendFromISR+0x70>
 80028f6:	2300      	movs	r3, #0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	623b      	str	r3, [r7, #32]
    }
 800290e:	bf00      	nop
 8002910:	e7fe      	b.n	8002910 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002912:	f001 ff1b 	bl	800474c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002916:	f3ef 8211 	mrs	r2, BASEPRI
 800291a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291e:	f383 8811 	msr	BASEPRI, r3
 8002922:	f3bf 8f6f 	isb	sy
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	61fa      	str	r2, [r7, #28]
 800292c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800292e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002930:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	429a      	cmp	r2, r3
 800293c:	d302      	bcc.n	8002944 <xQueueGenericSendFromISR+0xbc>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d148      	bne.n	80029d6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800294a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002956:	4618      	mov	r0, r3
 8002958:	f004 fc5c 	bl	8007214 <SEGGER_SYSVIEW_ShrinkId>
 800295c:	4601      	mov	r1, r0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	461a      	mov	r2, r3
 8002962:	2060      	movs	r0, #96	; 0x60
 8002964:	f003 fe6e 	bl	8006644 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800296e:	f000 f94f 	bl	8002c10 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002972:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800297a:	d112      	bne.n	80029a2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800297c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2b00      	cmp	r3, #0
 8002982:	d025      	beq.n	80029d0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	3324      	adds	r3, #36	; 0x24
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fe87 	bl	800369c <xTaskRemoveFromEventList>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01d      	beq.n	80029d0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01a      	beq.n	80029d0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	e016      	b.n	80029d0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80029a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80029a6:	2b7f      	cmp	r3, #127	; 0x7f
 80029a8:	d10a      	bne.n	80029c0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80029aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ae:	f383 8811 	msr	BASEPRI, r3
 80029b2:	f3bf 8f6f 	isb	sy
 80029b6:	f3bf 8f4f 	dsb	sy
 80029ba:	617b      	str	r3, [r7, #20]
    }
 80029bc:	bf00      	nop
 80029be:	e7fe      	b.n	80029be <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80029c4:	3301      	adds	r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	b25a      	sxtb	r2, r3
 80029ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80029d0:	2301      	movs	r3, #1
 80029d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80029d4:	e00b      	b.n	80029ee <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	4618      	mov	r0, r3
 80029da:	f004 fc1b 	bl	8007214 <SEGGER_SYSVIEW_ShrinkId>
 80029de:	4601      	mov	r1, r0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	461a      	mov	r2, r3
 80029e4:	2060      	movs	r0, #96	; 0x60
 80029e6:	f003 fe2d 	bl	8006644 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80029f8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3740      	adds	r7, #64	; 0x40
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b08f      	sub	sp, #60	; 0x3c
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10a      	bne.n	8002a34 <xQueueReceive+0x30>
        __asm volatile
 8002a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a22:	f383 8811 	msr	BASEPRI, r3
 8002a26:	f3bf 8f6f 	isb	sy
 8002a2a:	f3bf 8f4f 	dsb	sy
 8002a2e:	623b      	str	r3, [r7, #32]
    }
 8002a30:	bf00      	nop
 8002a32:	e7fe      	b.n	8002a32 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d103      	bne.n	8002a42 <xQueueReceive+0x3e>
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <xQueueReceive+0x42>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <xQueueReceive+0x44>
 8002a46:	2300      	movs	r3, #0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <xQueueReceive+0x5e>
        __asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	61fb      	str	r3, [r7, #28]
    }
 8002a5e:	bf00      	nop
 8002a60:	e7fe      	b.n	8002a60 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a62:	f000 ffb5 	bl	80039d0 <xTaskGetSchedulerState>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <xQueueReceive+0x6e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <xQueueReceive+0x72>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <xQueueReceive+0x74>
 8002a76:	2300      	movs	r3, #0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <xQueueReceive+0x8e>
        __asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	61bb      	str	r3, [r7, #24]
    }
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a92:	f001 fd6f 	bl	8004574 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d024      	beq.n	8002aec <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aa6:	f000 f91d 	bl	8002ce4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 fbb1 	bl	8007214 <SEGGER_SYSVIEW_ShrinkId>
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f004 fbad 	bl	8007214 <SEGGER_SYSVIEW_ShrinkId>
 8002aba:	4602      	mov	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	9100      	str	r1, [sp, #0]
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	205c      	movs	r0, #92	; 0x5c
 8002ac6:	f003 fe8d 	bl	80067e4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	1e5a      	subs	r2, r3, #1
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d004      	beq.n	8002ae4 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	3310      	adds	r3, #16
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fddc 	bl	800369c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002ae4:	f001 fd76 	bl	80045d4 <vPortExitCritical>
                return pdPASS;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e08a      	b.n	8002c02 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d113      	bne.n	8002b1a <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002af2:	f001 fd6f 	bl	80045d4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	4618      	mov	r0, r3
 8002afa:	f004 fb8b 	bl	8007214 <SEGGER_SYSVIEW_ShrinkId>
 8002afe:	4604      	mov	r4, r0
 8002b00:	2000      	movs	r0, #0
 8002b02:	f004 fb87 	bl	8007214 <SEGGER_SYSVIEW_ShrinkId>
 8002b06:	4602      	mov	r2, r0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	9100      	str	r1, [sp, #0]
 8002b0e:	4621      	mov	r1, r4
 8002b10:	205c      	movs	r0, #92	; 0x5c
 8002b12:	f003 fe67 	bl	80067e4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e073      	b.n	8002c02 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d106      	bne.n	8002b2e <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b20:	f107 0310 	add.w	r3, r7, #16
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fe1f 	bl	8003768 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b2e:	f001 fd51 	bl	80045d4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b32:	f000 fb9b 	bl	800326c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b36:	f001 fd1d 	bl	8004574 <vPortEnterCritical>
 8002b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b40:	b25b      	sxtb	r3, r3
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b46:	d103      	bne.n	8002b50 <xQueueReceive+0x14c>
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b5c:	d103      	bne.n	8002b66 <xQueueReceive+0x162>
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b66:	f001 fd35 	bl	80045d4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b6a:	1d3a      	adds	r2, r7, #4
 8002b6c:	f107 0310 	add.w	r3, r7, #16
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fe0e 	bl	8003794 <xTaskCheckForTimeOut>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d124      	bne.n	8002bc8 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b80:	f000 f928 	bl	8002dd4 <prvIsQueueEmpty>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d018      	beq.n	8002bbc <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	3324      	adds	r3, #36	; 0x24
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4611      	mov	r1, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 fd30 	bl	80035f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b9a:	f000 f8c9 	bl	8002d30 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b9e:	f000 fb73 	bl	8003288 <xTaskResumeAll>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f47f af74 	bne.w	8002a92 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <xQueueReceive+0x208>)
 8002bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	e76a      	b.n	8002a92 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bbe:	f000 f8b7 	bl	8002d30 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002bc2:	f000 fb61 	bl	8003288 <xTaskResumeAll>
 8002bc6:	e764      	b.n	8002a92 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bca:	f000 f8b1 	bl	8002d30 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002bce:	f000 fb5b 	bl	8003288 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bd4:	f000 f8fe 	bl	8002dd4 <prvIsQueueEmpty>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f43f af59 	beq.w	8002a92 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be2:	4618      	mov	r0, r3
 8002be4:	f004 fb16 	bl	8007214 <SEGGER_SYSVIEW_ShrinkId>
 8002be8:	4604      	mov	r4, r0
 8002bea:	2000      	movs	r0, #0
 8002bec:	f004 fb12 	bl	8007214 <SEGGER_SYSVIEW_ShrinkId>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	9100      	str	r1, [sp, #0]
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	205c      	movs	r0, #92	; 0x5c
 8002bfc:	f003 fdf2 	bl	80067e4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002c00:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3734      	adds	r7, #52	; 0x34
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd90      	pop	{r4, r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000ed04 	.word	0xe000ed04

08002c10 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10d      	bne.n	8002c4a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d14d      	bne.n	8002cd2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fee6 	bl	8003a0c <xTaskPriorityDisinherit>
 8002c40:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	e043      	b.n	8002cd2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d119      	bne.n	8002c84 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6858      	ldr	r0, [r3, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	f004 fca2 	bl	80075a4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	441a      	add	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d32b      	bcc.n	8002cd2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	e026      	b.n	8002cd2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	68d8      	ldr	r0, [r3, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	f004 fc88 	bl	80075a4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	425b      	negs	r3, r3
 8002c9e:	441a      	add	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d207      	bcs.n	8002cc0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	425b      	negs	r3, r3
 8002cba:	441a      	add	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d105      	bne.n	8002cd2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002cda:	697b      	ldr	r3, [r7, #20]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d018      	beq.n	8002d28 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	441a      	add	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d303      	bcc.n	8002d18 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68d9      	ldr	r1, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	461a      	mov	r2, r3
 8002d22:	6838      	ldr	r0, [r7, #0]
 8002d24:	f004 fc3e 	bl	80075a4 <memcpy>
    }
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d38:	f001 fc1c 	bl	8004574 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d42:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d44:	e011      	b.n	8002d6a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d012      	beq.n	8002d74 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3324      	adds	r3, #36	; 0x24
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fca2 	bl	800369c <xTaskRemoveFromEventList>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d5e:	f000 fd7f 	bl	8003860 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	dce9      	bgt.n	8002d46 <prvUnlockQueue+0x16>
 8002d72:	e000      	b.n	8002d76 <prvUnlockQueue+0x46>
                        break;
 8002d74:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	22ff      	movs	r2, #255	; 0xff
 8002d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002d7e:	f001 fc29 	bl	80045d4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d82:	f001 fbf7 	bl	8004574 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d8c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d8e:	e011      	b.n	8002db4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d012      	beq.n	8002dbe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3310      	adds	r3, #16
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fc7d 	bl	800369c <xTaskRemoveFromEventList>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002da8:	f000 fd5a 	bl	8003860 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002dac:	7bbb      	ldrb	r3, [r7, #14]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002db4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	dce9      	bgt.n	8002d90 <prvUnlockQueue+0x60>
 8002dbc:	e000      	b.n	8002dc0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002dbe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	22ff      	movs	r2, #255	; 0xff
 8002dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002dc8:	f001 fc04 	bl	80045d4 <vPortExitCritical>
}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ddc:	f001 fbca 	bl	8004574 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002de8:	2301      	movs	r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e001      	b.n	8002df2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002df2:	f001 fbef 	bl	80045d4 <vPortExitCritical>

    return xReturn;
 8002df6:	68fb      	ldr	r3, [r7, #12]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e08:	f001 fbb4 	bl	8004574 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d102      	bne.n	8002e1e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	e001      	b.n	8002e22 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e22:	f001 fbd7 	bl	80045d4 <vPortExitCritical>

    return xReturn;
 8002e26:	68fb      	ldr	r3, [r7, #12]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	e01e      	b.n	8002e7e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <vQueueAddToRegistry+0x60>)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d115      	bne.n	8002e78 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e4c:	4910      	ldr	r1, [pc, #64]	; (8002e90 <vQueueAddToRegistry+0x60>)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e56:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <vQueueAddToRegistry+0x60>)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f004 f9d5 	bl	8007214 <SEGGER_SYSVIEW_ShrinkId>
 8002e6a:	4601      	mov	r1, r0
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	2071      	movs	r0, #113	; 0x71
 8002e72:	f003 fbe7 	bl	8006644 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e76:	e006      	b.n	8002e86 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b07      	cmp	r3, #7
 8002e82:	d9dd      	bls.n	8002e40 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200000e8 	.word	0x200000e8

08002e94 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002ea4:	f001 fb66 	bl	8004574 <vPortEnterCritical>
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb4:	d103      	bne.n	8002ebe <vQueueWaitForMessageRestricted+0x2a>
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec4:	b25b      	sxtb	r3, r3
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eca:	d103      	bne.n	8002ed4 <vQueueWaitForMessageRestricted+0x40>
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ed4:	f001 fb7e 	bl	80045d4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d106      	bne.n	8002eee <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3324      	adds	r3, #36	; 0x24
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 fba9 	bl	8003640 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002eee:	6978      	ldr	r0, [r7, #20]
 8002ef0:	f7ff ff1e 	bl	8002d30 <prvUnlockQueue>
    }
 8002ef4:	bf00      	nop
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08c      	sub	sp, #48	; 0x30
 8002f00:	af04      	add	r7, sp, #16
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f001 fc5b 	bl	80047cc <pvPortMalloc>
 8002f16:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00e      	beq.n	8002f3c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f1e:	2058      	movs	r0, #88	; 0x58
 8002f20:	f001 fc54 	bl	80047cc <pvPortMalloc>
 8002f24:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
 8002f32:	e005      	b.n	8002f40 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002f34:	6978      	ldr	r0, [r7, #20]
 8002f36:	f001 fd29 	bl	800498c <vPortFree>
 8002f3a:	e001      	b.n	8002f40 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d013      	beq.n	8002f6e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	9303      	str	r3, [sp, #12]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	9302      	str	r3, [sp, #8]
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	9301      	str	r3, [sp, #4]
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f80e 	bl	8002f7e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f62:	69f8      	ldr	r0, [r7, #28]
 8002f64:	f000 f8a2 	bl	80030ac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	e002      	b.n	8002f74 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f72:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f74:	69bb      	ldr	r3, [r7, #24]
    }
 8002f76:	4618      	mov	r0, r3
 8002f78:	3720      	adds	r7, #32
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b088      	sub	sp, #32
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	461a      	mov	r2, r3
 8002f96:	21a5      	movs	r1, #165	; 0xa5
 8002f98:	f004 fb12 	bl	80075c0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f023 0307 	bic.w	r3, r3, #7
 8002fb4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	617b      	str	r3, [r7, #20]
    }
 8002fd2:	bf00      	nop
 8002fd4:	e7fe      	b.n	8002fd4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01f      	beq.n	800301c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	e012      	b.n	8003008 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	7819      	ldrb	r1, [r3, #0]
 8002fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	4413      	add	r3, r2
 8002ff0:	3334      	adds	r3, #52	; 0x34
 8002ff2:	460a      	mov	r2, r1
 8002ff4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d006      	beq.n	8003010 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3301      	adds	r3, #1
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b09      	cmp	r3, #9
 800300c:	d9e9      	bls.n	8002fe2 <prvInitialiseNewTask+0x64>
 800300e:	e000      	b.n	8003012 <prvInitialiseNewTask+0x94>
            {
                break;
 8003010:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800301a:	e003      	b.n	8003024 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	2b04      	cmp	r3, #4
 8003028:	d901      	bls.n	800302e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800302a:	2304      	movs	r3, #4
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003032:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003038:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	2200      	movs	r2, #0
 800303e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	3304      	adds	r3, #4
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff f999 	bl	800237c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	3318      	adds	r3, #24
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff f994 	bl	800237c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003058:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	f1c3 0205 	rsb	r2, r3, #5
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003068:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306c:	3350      	adds	r3, #80	; 0x50
 800306e:	2204      	movs	r2, #4
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f004 faa4 	bl	80075c0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	3354      	adds	r3, #84	; 0x54
 800307c:	2201      	movs	r2, #1
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f004 fa9d 	bl	80075c0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	68f9      	ldr	r1, [r7, #12]
 800308a:	69b8      	ldr	r0, [r7, #24]
 800308c:	f001 f8c8 	bl	8004220 <pxPortInitialiseStack>
 8003090:	4602      	mov	r2, r0
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800309c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030a2:	bf00      	nop
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80030ac:	b5b0      	push	{r4, r5, r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80030b4:	f001 fa5e 	bl	8004574 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80030b8:	4b35      	ldr	r3, [pc, #212]	; (8003190 <prvAddNewTaskToReadyList+0xe4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3301      	adds	r3, #1
 80030be:	4a34      	ldr	r2, [pc, #208]	; (8003190 <prvAddNewTaskToReadyList+0xe4>)
 80030c0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80030c2:	4b34      	ldr	r3, [pc, #208]	; (8003194 <prvAddNewTaskToReadyList+0xe8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80030ca:	4a32      	ldr	r2, [pc, #200]	; (8003194 <prvAddNewTaskToReadyList+0xe8>)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030d0:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <prvAddNewTaskToReadyList+0xe4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d110      	bne.n	80030fa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80030d8:	f000 fbe0 	bl	800389c <prvInitialiseTaskLists>
 80030dc:	e00d      	b.n	80030fa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80030de:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <prvAddNewTaskToReadyList+0xec>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030e6:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <prvAddNewTaskToReadyList+0xe8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d802      	bhi.n	80030fa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80030f4:	4a27      	ldr	r2, [pc, #156]	; (8003194 <prvAddNewTaskToReadyList+0xe8>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80030fa:	4b28      	ldr	r3, [pc, #160]	; (800319c <prvAddNewTaskToReadyList+0xf0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3301      	adds	r3, #1
 8003100:	4a26      	ldr	r2, [pc, #152]	; (800319c <prvAddNewTaskToReadyList+0xf0>)
 8003102:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <prvAddNewTaskToReadyList+0xf0>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d016      	beq.n	8003140 <prvAddNewTaskToReadyList+0x94>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4618      	mov	r0, r3
 8003116:	f003 ff57 	bl	8006fc8 <SEGGER_SYSVIEW_OnTaskCreate>
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	461d      	mov	r5, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461c      	mov	r4, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	1ae3      	subs	r3, r4, r3
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	462b      	mov	r3, r5
 800313c:	f001 fdf4 	bl	8004d28 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4618      	mov	r0, r3
 8003144:	f003 ffc4 	bl	80070d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	2201      	movs	r2, #1
 800314e:	409a      	lsls	r2, r3
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <prvAddNewTaskToReadyList+0xf4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4313      	orrs	r3, r2
 8003156:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <prvAddNewTaskToReadyList+0xf4>)
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4a0f      	ldr	r2, [pc, #60]	; (80031a4 <prvAddNewTaskToReadyList+0xf8>)
 8003168:	441a      	add	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3304      	adds	r3, #4
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f7ff f910 	bl	8002396 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003176:	f001 fa2d 	bl	80045d4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <prvAddNewTaskToReadyList+0xec>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003182:	4b04      	ldr	r3, [pc, #16]	; (8003194 <prvAddNewTaskToReadyList+0xe8>)
 8003184:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bdb0      	pop	{r4, r5, r7, pc}
 800318e:	bf00      	nop
 8003190:	20000200 	.word	0x20000200
 8003194:	20000128 	.word	0x20000128
 8003198:	2000020c 	.word	0x2000020c
 800319c:	2000021c 	.word	0x2000021c
 80031a0:	20000208 	.word	0x20000208
 80031a4:	2000012c 	.word	0x2000012c

080031a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80031ae:	4b27      	ldr	r3, [pc, #156]	; (800324c <vTaskStartScheduler+0xa4>)
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	2300      	movs	r3, #0
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2300      	movs	r3, #0
 80031b8:	2282      	movs	r2, #130	; 0x82
 80031ba:	4925      	ldr	r1, [pc, #148]	; (8003250 <vTaskStartScheduler+0xa8>)
 80031bc:	4825      	ldr	r0, [pc, #148]	; (8003254 <vTaskStartScheduler+0xac>)
 80031be:	f7ff fe9d 	bl	8002efc <xTaskCreate>
 80031c2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d102      	bne.n	80031d0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80031ca:	f000 fd17 	bl	8003bfc <xTimerCreateTimerTask>
 80031ce:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d124      	bne.n	8003220 <vTaskStartScheduler+0x78>
        __asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	60bb      	str	r3, [r7, #8]
    }
 80031e8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80031ea:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <vTaskStartScheduler+0xb0>)
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031f0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80031f2:	4b1a      	ldr	r3, [pc, #104]	; (800325c <vTaskStartScheduler+0xb4>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <vTaskStartScheduler+0xb8>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80031fe:	4b19      	ldr	r3, [pc, #100]	; (8003264 <vTaskStartScheduler+0xbc>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b12      	ldr	r3, [pc, #72]	; (800324c <vTaskStartScheduler+0xa4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d102      	bne.n	8003210 <vTaskStartScheduler+0x68>
 800320a:	f003 fec1 	bl	8006f90 <SEGGER_SYSVIEW_OnIdle>
 800320e:	e004      	b.n	800321a <vTaskStartScheduler+0x72>
 8003210:	4b14      	ldr	r3, [pc, #80]	; (8003264 <vTaskStartScheduler+0xbc>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f003 ff19 	bl	800704c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800321a:	f001 f88b 	bl	8004334 <xPortStartScheduler>
 800321e:	e00e      	b.n	800323e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003226:	d10a      	bne.n	800323e <vTaskStartScheduler+0x96>
        __asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	607b      	str	r3, [r7, #4]
    }
 800323a:	bf00      	nop
 800323c:	e7fe      	b.n	800323c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <vTaskStartScheduler+0xc0>)
 8003240:	681b      	ldr	r3, [r3, #0]
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000224 	.word	0x20000224
 8003250:	08007f30 	.word	0x08007f30
 8003254:	08003879 	.word	0x08003879
 8003258:	20000220 	.word	0x20000220
 800325c:	2000020c 	.word	0x2000020c
 8003260:	20000204 	.word	0x20000204
 8003264:	20000128 	.word	0x20000128
 8003268:	2000000c 	.word	0x2000000c

0800326c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <vTaskSuspendAll+0x18>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3301      	adds	r3, #1
 8003276:	4a03      	ldr	r2, [pc, #12]	; (8003284 <vTaskSuspendAll+0x18>)
 8003278:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800327a:	bf00      	nop
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	20000228 	.word	0x20000228

08003288 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <xTaskResumeAll+0x104>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10a      	bne.n	80032b4 <xTaskResumeAll+0x2c>
        __asm volatile
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	603b      	str	r3, [r7, #0]
    }
 80032b0:	bf00      	nop
 80032b2:	e7fe      	b.n	80032b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80032b4:	f001 f95e 	bl	8004574 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80032b8:	4b34      	ldr	r3, [pc, #208]	; (800338c <xTaskResumeAll+0x104>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3b01      	subs	r3, #1
 80032be:	4a33      	ldr	r2, [pc, #204]	; (800338c <xTaskResumeAll+0x104>)
 80032c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032c2:	4b32      	ldr	r3, [pc, #200]	; (800338c <xTaskResumeAll+0x104>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d159      	bne.n	800337e <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032ca:	4b31      	ldr	r3, [pc, #196]	; (8003390 <xTaskResumeAll+0x108>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d055      	beq.n	800337e <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032d2:	e032      	b.n	800333a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d4:	4b2f      	ldr	r3, [pc, #188]	; (8003394 <xTaskResumeAll+0x10c>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	3318      	adds	r3, #24
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff f8b5 	bl	8002450 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3304      	adds	r3, #4
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff f8b0 	bl	8002450 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 feec 	bl	80070d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	2201      	movs	r2, #1
 80032fe:	409a      	lsls	r2, r3
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <xTaskResumeAll+0x110>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4313      	orrs	r3, r2
 8003306:	4a24      	ldr	r2, [pc, #144]	; (8003398 <xTaskResumeAll+0x110>)
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4a21      	ldr	r2, [pc, #132]	; (800339c <xTaskResumeAll+0x114>)
 8003318:	441a      	add	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3304      	adds	r3, #4
 800331e:	4619      	mov	r1, r3
 8003320:	4610      	mov	r0, r2
 8003322:	f7ff f838 	bl	8002396 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <xTaskResumeAll+0x118>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	429a      	cmp	r2, r3
 8003332:	d302      	bcc.n	800333a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <xTaskResumeAll+0x11c>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <xTaskResumeAll+0x10c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1c8      	bne.n	80032d4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003348:	f000 fb26 	bl	8003998 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800334c:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <xTaskResumeAll+0x120>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d010      	beq.n	800337a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003358:	f000 f84a 	bl	80033f0 <xTaskIncrementTick>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <xTaskResumeAll+0x11c>)
 8003364:	2201      	movs	r2, #1
 8003366:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	3b01      	subs	r3, #1
 800336c:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f1      	bne.n	8003358 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <xTaskResumeAll+0x120>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <xTaskResumeAll+0x11c>)
 800337c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800337e:	f001 f929 	bl	80045d4 <vPortExitCritical>

    return xAlreadyYielded;
 8003382:	687b      	ldr	r3, [r7, #4]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000228 	.word	0x20000228
 8003390:	20000200 	.word	0x20000200
 8003394:	200001c0 	.word	0x200001c0
 8003398:	20000208 	.word	0x20000208
 800339c:	2000012c 	.word	0x2000012c
 80033a0:	20000128 	.word	0x20000128
 80033a4:	20000214 	.word	0x20000214
 80033a8:	20000210 	.word	0x20000210

080033ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <xTaskGetTickCount+0x1c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80033b8:	687b      	ldr	r3, [r7, #4]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000204 	.word	0x20000204

080033cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033d2:	f001 f9bb 	bl	800474c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80033da:	4b04      	ldr	r3, [pc, #16]	; (80033ec <xTaskGetTickCountFromISR+0x20>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80033e0:	683b      	ldr	r3, [r7, #0]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000204 	.word	0x20000204

080033f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <xTaskIncrementTick+0x110>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d173      	bne.n	80034ea <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003402:	4b40      	ldr	r3, [pc, #256]	; (8003504 <xTaskIncrementTick+0x114>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3301      	adds	r3, #1
 8003408:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800340a:	4a3e      	ldr	r2, [pc, #248]	; (8003504 <xTaskIncrementTick+0x114>)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d120      	bne.n	8003458 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003416:	4b3c      	ldr	r3, [pc, #240]	; (8003508 <xTaskIncrementTick+0x118>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <xTaskIncrementTick+0x46>
        __asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	603b      	str	r3, [r7, #0]
    }
 8003432:	bf00      	nop
 8003434:	e7fe      	b.n	8003434 <xTaskIncrementTick+0x44>
 8003436:	4b34      	ldr	r3, [pc, #208]	; (8003508 <xTaskIncrementTick+0x118>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	4b33      	ldr	r3, [pc, #204]	; (800350c <xTaskIncrementTick+0x11c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a31      	ldr	r2, [pc, #196]	; (8003508 <xTaskIncrementTick+0x118>)
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	4a31      	ldr	r2, [pc, #196]	; (800350c <xTaskIncrementTick+0x11c>)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	4b31      	ldr	r3, [pc, #196]	; (8003510 <xTaskIncrementTick+0x120>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3301      	adds	r3, #1
 8003450:	4a2f      	ldr	r2, [pc, #188]	; (8003510 <xTaskIncrementTick+0x120>)
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	f000 faa0 	bl	8003998 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003458:	4b2e      	ldr	r3, [pc, #184]	; (8003514 <xTaskIncrementTick+0x124>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	429a      	cmp	r2, r3
 8003460:	d348      	bcc.n	80034f4 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003462:	4b29      	ldr	r3, [pc, #164]	; (8003508 <xTaskIncrementTick+0x118>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d104      	bne.n	8003476 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800346c:	4b29      	ldr	r3, [pc, #164]	; (8003514 <xTaskIncrementTick+0x124>)
 800346e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003472:	601a      	str	r2, [r3, #0]
                    break;
 8003474:	e03e      	b.n	80034f4 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <xTaskIncrementTick+0x118>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	429a      	cmp	r2, r3
 800348c:	d203      	bcs.n	8003496 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800348e:	4a21      	ldr	r2, [pc, #132]	; (8003514 <xTaskIncrementTick+0x124>)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003494:	e02e      	b.n	80034f4 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	3304      	adds	r3, #4
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe ffd8 	bl	8002450 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	3318      	adds	r3, #24
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fe ffcf 	bl	8002450 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f003 fe0b 	bl	80070d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	2201      	movs	r2, #1
 80034c0:	409a      	lsls	r2, r3
 80034c2:	4b15      	ldr	r3, [pc, #84]	; (8003518 <xTaskIncrementTick+0x128>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	4a13      	ldr	r2, [pc, #76]	; (8003518 <xTaskIncrementTick+0x128>)
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4a10      	ldr	r2, [pc, #64]	; (800351c <xTaskIncrementTick+0x12c>)
 80034da:	441a      	add	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	3304      	adds	r3, #4
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f7fe ff57 	bl	8002396 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034e8:	e7bb      	b.n	8003462 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <xTaskIncrementTick+0x130>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	4a0b      	ldr	r2, [pc, #44]	; (8003520 <xTaskIncrementTick+0x130>)
 80034f2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80034f4:	697b      	ldr	r3, [r7, #20]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000228 	.word	0x20000228
 8003504:	20000204 	.word	0x20000204
 8003508:	200001b8 	.word	0x200001b8
 800350c:	200001bc 	.word	0x200001bc
 8003510:	20000218 	.word	0x20000218
 8003514:	20000220 	.word	0x20000220
 8003518:	20000208 	.word	0x20000208
 800351c:	2000012c 	.word	0x2000012c
 8003520:	20000210 	.word	0x20000210

08003524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800352a:	4b2d      	ldr	r3, [pc, #180]	; (80035e0 <vTaskSwitchContext+0xbc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003532:	4b2c      	ldr	r3, [pc, #176]	; (80035e4 <vTaskSwitchContext+0xc0>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003538:	e04d      	b.n	80035d6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800353a:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <vTaskSwitchContext+0xc0>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003540:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <vTaskSwitchContext+0xc4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	fab3 f383 	clz	r3, r3
 800354c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800354e:	7afb      	ldrb	r3, [r7, #11]
 8003550:	f1c3 031f 	rsb	r3, r3, #31
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	4925      	ldr	r1, [pc, #148]	; (80035ec <vTaskSwitchContext+0xc8>)
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10a      	bne.n	8003580 <vTaskSwitchContext+0x5c>
        __asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	607b      	str	r3, [r7, #4]
    }
 800357c:	bf00      	nop
 800357e:	e7fe      	b.n	800357e <vTaskSwitchContext+0x5a>
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4a18      	ldr	r2, [pc, #96]	; (80035ec <vTaskSwitchContext+0xc8>)
 800358c:	4413      	add	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	3308      	adds	r3, #8
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d104      	bne.n	80035b0 <vTaskSwitchContext+0x8c>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <vTaskSwitchContext+0xcc>)
 80035b8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <vTaskSwitchContext+0xcc>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <vTaskSwitchContext+0xd0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d102      	bne.n	80035cc <vTaskSwitchContext+0xa8>
 80035c6:	f003 fce3 	bl	8006f90 <SEGGER_SYSVIEW_OnIdle>
}
 80035ca:	e004      	b.n	80035d6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80035cc:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <vTaskSwitchContext+0xcc>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f003 fd3b 	bl	800704c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000228 	.word	0x20000228
 80035e4:	20000214 	.word	0x20000214
 80035e8:	20000208 	.word	0x20000208
 80035ec:	2000012c 	.word	0x2000012c
 80035f0:	20000128 	.word	0x20000128
 80035f4:	20000224 	.word	0x20000224

080035f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	60fb      	str	r3, [r7, #12]
    }
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800361e:	4b07      	ldr	r3, [pc, #28]	; (800363c <vTaskPlaceOnEventList+0x44>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3318      	adds	r3, #24
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fe fed9 	bl	80023de <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800362c:	2101      	movs	r1, #1
 800362e:	6838      	ldr	r0, [r7, #0]
 8003630:	f000 fa6c 	bl	8003b0c <prvAddCurrentTaskToDelayedList>
}
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000128 	.word	0x20000128

08003640 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	617b      	str	r3, [r7, #20]
    }
 8003664:	bf00      	nop
 8003666:	e7fe      	b.n	8003666 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <vTaskPlaceOnEventListRestricted+0x58>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3318      	adds	r3, #24
 800366e:	4619      	mov	r1, r3
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7fe fe90 	bl	8002396 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800367c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003680:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003682:	2024      	movs	r0, #36	; 0x24
 8003684:	f002 ff84 	bl	8006590 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	68b8      	ldr	r0, [r7, #8]
 800368c:	f000 fa3e 	bl	8003b0c <prvAddCurrentTaskToDelayedList>
    }
 8003690:	bf00      	nop
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20000128 	.word	0x20000128

0800369c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	60fb      	str	r3, [r7, #12]
    }
 80036c4:	bf00      	nop
 80036c6:	e7fe      	b.n	80036c6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	3318      	adds	r3, #24
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe febf 	bl	8002450 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036d2:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <xTaskRemoveFromEventList+0xb4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d120      	bne.n	800371c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	3304      	adds	r3, #4
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe feb6 	bl	8002450 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 fcf2 	bl	80070d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	2201      	movs	r2, #1
 80036f2:	409a      	lsls	r2, r3
 80036f4:	4b17      	ldr	r3, [pc, #92]	; (8003754 <xTaskRemoveFromEventList+0xb8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	4a16      	ldr	r2, [pc, #88]	; (8003754 <xTaskRemoveFromEventList+0xb8>)
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4a13      	ldr	r2, [pc, #76]	; (8003758 <xTaskRemoveFromEventList+0xbc>)
 800370c:	441a      	add	r2, r3
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	3304      	adds	r3, #4
 8003712:	4619      	mov	r1, r3
 8003714:	4610      	mov	r0, r2
 8003716:	f7fe fe3e 	bl	8002396 <vListInsertEnd>
 800371a:	e005      	b.n	8003728 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	3318      	adds	r3, #24
 8003720:	4619      	mov	r1, r3
 8003722:	480e      	ldr	r0, [pc, #56]	; (800375c <xTaskRemoveFromEventList+0xc0>)
 8003724:	f7fe fe37 	bl	8002396 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <xTaskRemoveFromEventList+0xc4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	429a      	cmp	r2, r3
 8003734:	d905      	bls.n	8003742 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003736:	2301      	movs	r3, #1
 8003738:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <xTaskRemoveFromEventList+0xc8>)
 800373c:	2201      	movs	r2, #1
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	e001      	b.n	8003746 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003746:	697b      	ldr	r3, [r7, #20]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000228 	.word	0x20000228
 8003754:	20000208 	.word	0x20000208
 8003758:	2000012c 	.word	0x2000012c
 800375c:	200001c0 	.word	0x200001c0
 8003760:	20000128 	.word	0x20000128
 8003764:	20000214 	.word	0x20000214

08003768 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <vTaskInternalSetTimeOutState+0x24>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <vTaskInternalSetTimeOutState+0x28>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	605a      	str	r2, [r3, #4]
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	20000218 	.word	0x20000218
 8003790:	20000204 	.word	0x20000204

08003794 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	613b      	str	r3, [r7, #16]
    }
 80037b6:	bf00      	nop
 80037b8:	e7fe      	b.n	80037b8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	60fb      	str	r3, [r7, #12]
    }
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80037d6:	f000 fecd 	bl	8004574 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80037da:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <xTaskCheckForTimeOut+0xc4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037f2:	d102      	bne.n	80037fa <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	e026      	b.n	8003848 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4b17      	ldr	r3, [pc, #92]	; (800385c <xTaskCheckForTimeOut+0xc8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d00a      	beq.n	800381c <xTaskCheckForTimeOut+0x88>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	429a      	cmp	r2, r3
 800380e:	d305      	bcc.n	800381c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003810:	2301      	movs	r3, #1
 8003812:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	e015      	b.n	8003848 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	429a      	cmp	r2, r3
 8003824:	d20b      	bcs.n	800383e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	1ad2      	subs	r2, r2, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff ff98 	bl	8003768 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	e004      	b.n	8003848 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003844:	2301      	movs	r3, #1
 8003846:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003848:	f000 fec4 	bl	80045d4 <vPortExitCritical>

    return xReturn;
 800384c:	69fb      	ldr	r3, [r7, #28]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000204 	.word	0x20000204
 800385c:	20000218 	.word	0x20000218

08003860 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <vTaskMissedYield+0x14>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]
}
 800386a:	bf00      	nop
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	20000214 	.word	0x20000214

08003878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003880:	f000 f84c 	bl	800391c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003884:	4b04      	ldr	r3, [pc, #16]	; (8003898 <prvIdleTask+0x20>)
 8003886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003894:	e7f4      	b.n	8003880 <prvIdleTask+0x8>
 8003896:	bf00      	nop
 8003898:	e000ed04 	.word	0xe000ed04

0800389c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038a2:	2300      	movs	r3, #0
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	e00c      	b.n	80038c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4a12      	ldr	r2, [pc, #72]	; (80038fc <prvInitialiseTaskLists+0x60>)
 80038b4:	4413      	add	r3, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe fd40 	bl	800233c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3301      	adds	r3, #1
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d9ef      	bls.n	80038a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80038c8:	480d      	ldr	r0, [pc, #52]	; (8003900 <prvInitialiseTaskLists+0x64>)
 80038ca:	f7fe fd37 	bl	800233c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80038ce:	480d      	ldr	r0, [pc, #52]	; (8003904 <prvInitialiseTaskLists+0x68>)
 80038d0:	f7fe fd34 	bl	800233c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80038d4:	480c      	ldr	r0, [pc, #48]	; (8003908 <prvInitialiseTaskLists+0x6c>)
 80038d6:	f7fe fd31 	bl	800233c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80038da:	480c      	ldr	r0, [pc, #48]	; (800390c <prvInitialiseTaskLists+0x70>)
 80038dc:	f7fe fd2e 	bl	800233c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80038e0:	480b      	ldr	r0, [pc, #44]	; (8003910 <prvInitialiseTaskLists+0x74>)
 80038e2:	f7fe fd2b 	bl	800233c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <prvInitialiseTaskLists+0x78>)
 80038e8:	4a05      	ldr	r2, [pc, #20]	; (8003900 <prvInitialiseTaskLists+0x64>)
 80038ea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <prvInitialiseTaskLists+0x7c>)
 80038ee:	4a05      	ldr	r2, [pc, #20]	; (8003904 <prvInitialiseTaskLists+0x68>)
 80038f0:	601a      	str	r2, [r3, #0]
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	2000012c 	.word	0x2000012c
 8003900:	20000190 	.word	0x20000190
 8003904:	200001a4 	.word	0x200001a4
 8003908:	200001c0 	.word	0x200001c0
 800390c:	200001d4 	.word	0x200001d4
 8003910:	200001ec 	.word	0x200001ec
 8003914:	200001b8 	.word	0x200001b8
 8003918:	200001bc 	.word	0x200001bc

0800391c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003922:	e019      	b.n	8003958 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003924:	f000 fe26 	bl	8004574 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003928:	4b10      	ldr	r3, [pc, #64]	; (800396c <prvCheckTasksWaitingTermination+0x50>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fd8b 	bl	8002450 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800393a:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <prvCheckTasksWaitingTermination+0x54>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3b01      	subs	r3, #1
 8003940:	4a0b      	ldr	r2, [pc, #44]	; (8003970 <prvCheckTasksWaitingTermination+0x54>)
 8003942:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <prvCheckTasksWaitingTermination+0x58>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3b01      	subs	r3, #1
 800394a:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <prvCheckTasksWaitingTermination+0x58>)
 800394c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800394e:	f000 fe41 	bl	80045d4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f810 	bl	8003978 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <prvCheckTasksWaitingTermination+0x58>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e1      	bne.n	8003924 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	200001d4 	.word	0x200001d4
 8003970:	20000200 	.word	0x20000200
 8003974:	200001e8 	.word	0x200001e8

08003978 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	4618      	mov	r0, r3
 8003986:	f001 f801 	bl	800498c <vPortFree>
                vPortFree( pxTCB );
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fffe 	bl	800498c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <prvResetNextTaskUnblockTime+0x30>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d104      	bne.n	80039b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <prvResetNextTaskUnblockTime+0x34>)
 80039a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039ae:	e005      	b.n	80039bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <prvResetNextTaskUnblockTime+0x30>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a04      	ldr	r2, [pc, #16]	; (80039cc <prvResetNextTaskUnblockTime+0x34>)
 80039ba:	6013      	str	r3, [r2, #0]
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	200001b8 	.word	0x200001b8
 80039cc:	20000220 	.word	0x20000220

080039d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <xTaskGetSchedulerState+0x34>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d102      	bne.n	80039e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80039de:	2301      	movs	r3, #1
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	e008      	b.n	80039f6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <xTaskGetSchedulerState+0x38>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80039ec:	2302      	movs	r3, #2
 80039ee:	607b      	str	r3, [r7, #4]
 80039f0:	e001      	b.n	80039f6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80039f2:	2300      	movs	r3, #0
 80039f4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80039f6:	687b      	ldr	r3, [r7, #4]
    }
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	2000020c 	.word	0x2000020c
 8003a08:	20000228 	.word	0x20000228

08003a0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d068      	beq.n	8003af4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003a22:	4b37      	ldr	r3, [pc, #220]	; (8003b00 <xTaskPriorityDisinherit+0xf4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d00a      	beq.n	8003a42 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	60fb      	str	r3, [r7, #12]
    }
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	60bb      	str	r3, [r7, #8]
    }
 8003a5c:	bf00      	nop
 8003a5e:	e7fe      	b.n	8003a5e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a64:	1e5a      	subs	r2, r3, #1
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d03e      	beq.n	8003af4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d13a      	bne.n	8003af4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	3304      	adds	r3, #4
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fce4 	bl	8002450 <uxListRemove>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	2201      	movs	r2, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43da      	mvns	r2, r3
 8003a9a:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <xTaskPriorityDisinherit+0xf8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <xTaskPriorityDisinherit+0xf8>)
 8003aa2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	204a      	movs	r0, #74	; 0x4a
 8003aaa:	f002 fd8f 	bl	80065cc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	f1c3 0205 	rsb	r2, r3, #5
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <xTaskPriorityDisinherit+0xf8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <xTaskPriorityDisinherit+0xf8>)
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4a09      	ldr	r2, [pc, #36]	; (8003b08 <xTaskPriorityDisinherit+0xfc>)
 8003ae2:	441a      	add	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f7fe fc53 	bl	8002396 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003af0:	2301      	movs	r3, #1
 8003af2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003af4:	697b      	ldr	r3, [r7, #20]
    }
 8003af6:	4618      	mov	r0, r3
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000128 	.word	0x20000128
 8003b04:	20000208 	.word	0x20000208
 8003b08:	2000012c 	.word	0x2000012c

08003b0c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b16:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b1c:	4b31      	ldr	r3, [pc, #196]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3304      	adds	r3, #4
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe fc94 	bl	8002450 <uxListRemove>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10b      	bne.n	8003b46 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b2e:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	2201      	movs	r2, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43da      	mvns	r2, r3
 8003b3c:	4b2a      	ldr	r3, [pc, #168]	; (8003be8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4013      	ands	r3, r2
 8003b42:	4a29      	ldr	r2, [pc, #164]	; (8003be8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b44:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b4c:	d110      	bne.n	8003b70 <prvAddCurrentTaskToDelayedList+0x64>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003b54:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	211b      	movs	r1, #27
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f003 fafa 	bl	8007154 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b60:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4619      	mov	r1, r3
 8003b68:	4820      	ldr	r0, [pc, #128]	; (8003bec <prvAddCurrentTaskToDelayedList+0xe0>)
 8003b6a:	f7fe fc14 	bl	8002396 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b6e:	e032      	b.n	8003bd6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b78:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d20f      	bcs.n	8003ba8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003b88:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2104      	movs	r1, #4
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f003 fae0 	bl	8007154 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b94:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	f7fe fc1c 	bl	80023de <vListInsert>
}
 8003ba6:	e016      	b.n	8003bd6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2104      	movs	r1, #4
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f003 fad0 	bl	8007154 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	f7fe fc0c 	bl	80023de <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d202      	bcs.n	8003bd6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003bd0:	4a09      	ldr	r2, [pc, #36]	; (8003bf8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6013      	str	r3, [r2, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000204 	.word	0x20000204
 8003be4:	20000128 	.word	0x20000128
 8003be8:	20000208 	.word	0x20000208
 8003bec:	200001ec 	.word	0x200001ec
 8003bf0:	200001bc 	.word	0x200001bc
 8003bf4:	200001b8 	.word	0x200001b8
 8003bf8:	20000220 	.word	0x20000220

08003bfc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c06:	f000 fad5 	bl	80041b4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c0a:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <xTimerCreateTimerTask+0x54>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00b      	beq.n	8003c2a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <xTimerCreateTimerTask+0x58>)
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	2302      	movs	r3, #2
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c20:	490d      	ldr	r1, [pc, #52]	; (8003c58 <xTimerCreateTimerTask+0x5c>)
 8003c22:	480e      	ldr	r0, [pc, #56]	; (8003c5c <xTimerCreateTimerTask+0x60>)
 8003c24:	f7ff f96a 	bl	8002efc <xTaskCreate>
 8003c28:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	603b      	str	r3, [r7, #0]
    }
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003c46:	687b      	ldr	r3, [r7, #4]
    }
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	2000025c 	.word	0x2000025c
 8003c54:	20000260 	.word	0x20000260
 8003c58:	08007f38 	.word	0x08007f38
 8003c5c:	08003d95 	.word	0x08003d95

08003c60 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	; 0x28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10a      	bne.n	8003c8e <xTimerGenericCommand+0x2e>
        __asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	623b      	str	r3, [r7, #32]
    }
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003c8e:	4b1a      	ldr	r3, [pc, #104]	; (8003cf8 <xTimerGenericCommand+0x98>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d02a      	beq.n	8003cec <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b05      	cmp	r3, #5
 8003ca6:	dc18      	bgt.n	8003cda <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ca8:	f7ff fe92 	bl	80039d0 <xTaskGetSchedulerState>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d109      	bne.n	8003cc6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <xTimerGenericCommand+0x98>)
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	f107 0114 	add.w	r1, r7, #20
 8003cba:	2300      	movs	r3, #0
 8003cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cbe:	f7fe fcd5 	bl	800266c <xQueueGenericSend>
 8003cc2:	6278      	str	r0, [r7, #36]	; 0x24
 8003cc4:	e012      	b.n	8003cec <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <xTimerGenericCommand+0x98>)
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	f107 0114 	add.w	r1, r7, #20
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f7fe fccb 	bl	800266c <xQueueGenericSend>
 8003cd6:	6278      	str	r0, [r7, #36]	; 0x24
 8003cd8:	e008      	b.n	8003cec <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003cda:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <xTimerGenericCommand+0x98>)
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	f107 0114 	add.w	r1, r7, #20
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	f7fe fdcf 	bl	8002888 <xQueueGenericSendFromISR>
 8003cea:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3728      	adds	r7, #40	; 0x28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	2000025c 	.word	0x2000025c

08003cfc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d06:	4b22      	ldr	r3, [pc, #136]	; (8003d90 <prvProcessExpiredTimer+0x94>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe fb9b 	bl	8002450 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d022      	beq.n	8003d6e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	699a      	ldr	r2, [r3, #24]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	18d1      	adds	r1, r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	6978      	ldr	r0, [r7, #20]
 8003d36:	f000 f8d1 	bl	8003edc <prvInsertTimerInActiveList>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01f      	beq.n	8003d80 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d40:	2300      	movs	r3, #0
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	2300      	movs	r3, #0
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	2100      	movs	r1, #0
 8003d4a:	6978      	ldr	r0, [r7, #20]
 8003d4c:	f7ff ff88 	bl	8003c60 <xTimerGenericCommand>
 8003d50:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d113      	bne.n	8003d80 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	60fb      	str	r3, [r7, #12]
    }
 8003d6a:	bf00      	nop
 8003d6c:	e7fe      	b.n	8003d6c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	6978      	ldr	r0, [r7, #20]
 8003d86:	4798      	blx	r3
    }
 8003d88:	bf00      	nop
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000254 	.word	0x20000254

08003d94 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d9c:	f107 0308 	add.w	r3, r7, #8
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 f857 	bl	8003e54 <prvGetNextExpireTime>
 8003da6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4619      	mov	r1, r3
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f803 	bl	8003db8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003db2:	f000 f8d5 	bl	8003f60 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003db6:	e7f1      	b.n	8003d9c <prvTimerTask+0x8>

08003db8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003dc2:	f7ff fa53 	bl	800326c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dc6:	f107 0308 	add.w	r3, r7, #8
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f866 	bl	8003e9c <prvSampleTimeNow>
 8003dd0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d130      	bne.n	8003e3a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <prvProcessTimerOrBlockTask+0x3c>
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d806      	bhi.n	8003df4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003de6:	f7ff fa4f 	bl	8003288 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003dea:	68f9      	ldr	r1, [r7, #12]
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ff85 	bl	8003cfc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003df2:	e024      	b.n	8003e3e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003dfa:	4b13      	ldr	r3, [pc, #76]	; (8003e48 <prvProcessTimerOrBlockTask+0x90>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <prvProcessTimerOrBlockTask+0x50>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <prvProcessTimerOrBlockTask+0x52>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <prvProcessTimerOrBlockTask+0x94>)
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f7ff f83b 	bl	8002e94 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e1e:	f7ff fa33 	bl	8003288 <xTaskResumeAll>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <prvProcessTimerOrBlockTask+0x98>)
 8003e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	f3bf 8f6f 	isb	sy
    }
 8003e38:	e001      	b.n	8003e3e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e3a:	f7ff fa25 	bl	8003288 <xTaskResumeAll>
    }
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000258 	.word	0x20000258
 8003e4c:	2000025c 	.word	0x2000025c
 8003e50:	e000ed04 	.word	0xe000ed04

08003e54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e5c:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <prvGetNextExpireTime+0x44>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <prvGetNextExpireTime+0x16>
 8003e66:	2201      	movs	r2, #1
 8003e68:	e000      	b.n	8003e6c <prvGetNextExpireTime+0x18>
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e78:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <prvGetNextExpireTime+0x44>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	e001      	b.n	8003e88 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e88:	68fb      	ldr	r3, [r7, #12]
    }
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000254 	.word	0x20000254

08003e9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ea4:	f7ff fa82 	bl	80033ac <xTaskGetTickCount>
 8003ea8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <prvSampleTimeNow+0x3c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d205      	bcs.n	8003ec0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003eb4:	f000 f91a 	bl	80040ec <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e002      	b.n	8003ec6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003ec6:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <prvSampleTimeNow+0x3c>)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
    }
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000264 	.word	0x20000264

08003edc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d812      	bhi.n	8003f28 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	1ad2      	subs	r2, r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d302      	bcc.n	8003f16 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f10:	2301      	movs	r3, #1
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	e01b      	b.n	8003f4e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <prvInsertTimerInActiveList+0x7c>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4610      	mov	r0, r2
 8003f22:	f7fe fa5c 	bl	80023de <vListInsert>
 8003f26:	e012      	b.n	8003f4e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d206      	bcs.n	8003f3e <prvInsertTimerInActiveList+0x62>
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d302      	bcc.n	8003f3e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	e007      	b.n	8003f4e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f3e:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <prvInsertTimerInActiveList+0x80>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3304      	adds	r3, #4
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f7fe fa48 	bl	80023de <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f4e:	697b      	ldr	r3, [r7, #20]
    }
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000258 	.word	0x20000258
 8003f5c:	20000254 	.word	0x20000254

08003f60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08c      	sub	sp, #48	; 0x30
 8003f64:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f66:	e0ae      	b.n	80040c6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f2c0 80aa 	blt.w	80040c4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe fa65 	bl	8002450 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff ff87 	bl	8003e9c <prvSampleTimeNow>
 8003f8e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b09      	cmp	r3, #9
 8003f94:	f200 8097 	bhi.w	80040c6 <prvProcessReceivedCommands+0x166>
 8003f98:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <prvProcessReceivedCommands+0x40>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fc9 	.word	0x08003fc9
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003fc9 	.word	0x08003fc9
 8003fac:	0800403d 	.word	0x0800403d
 8003fb0:	08004051 	.word	0x08004051
 8003fb4:	0800409b 	.word	0x0800409b
 8003fb8:	08003fc9 	.word	0x08003fc9
 8003fbc:	08003fc9 	.word	0x08003fc9
 8003fc0:	0800403d 	.word	0x0800403d
 8003fc4:	08004051 	.word	0x08004051
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	18d1      	adds	r1, r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a3a      	ldr	r2, [r7, #32]
 8003fe6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fe8:	f7ff ff78 	bl	8003edc <prvInsertTimerInActiveList>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d069      	beq.n	80040c6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ff8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d05e      	beq.n	80040c6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	441a      	add	r2, r3
 8004010:	2300      	movs	r3, #0
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	2300      	movs	r3, #0
 8004016:	2100      	movs	r1, #0
 8004018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800401a:	f7ff fe21 	bl	8003c60 <xTimerGenericCommand>
 800401e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d14f      	bne.n	80040c6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	61bb      	str	r3, [r7, #24]
    }
 8004038:	bf00      	nop
 800403a:	e7fe      	b.n	800403a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	b2da      	uxtb	r2, r3
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800404e:	e03a      	b.n	80040c6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	b2da      	uxtb	r2, r3
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	617b      	str	r3, [r7, #20]
    }
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	18d1      	adds	r1, r2, r3
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	6a3a      	ldr	r2, [r7, #32]
 8004092:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004094:	f7ff ff22 	bl	8003edc <prvInsertTimerInActiveList>
                        break;
 8004098:	e015      	b.n	80040c6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d103      	bne.n	80040b0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80040a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040aa:	f000 fc6f 	bl	800498c <vPortFree>
 80040ae:	e00a      	b.n	80040c6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040b6:	f023 0301 	bic.w	r3, r3, #1
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80040c2:	e000      	b.n	80040c6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80040c4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <prvProcessReceivedCommands+0x188>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f107 0108 	add.w	r1, r7, #8
 80040ce:	2200      	movs	r2, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe fc97 	bl	8002a04 <xQueueReceive>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f47f af45 	bne.w	8003f68 <prvProcessReceivedCommands+0x8>
        }
    }
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	3728      	adds	r7, #40	; 0x28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	2000025c 	.word	0x2000025c

080040ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040f2:	e048      	b.n	8004186 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040f4:	4b2d      	ldr	r3, [pc, #180]	; (80041ac <prvSwitchTimerLists+0xc0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040fe:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <prvSwitchTimerLists+0xc0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3304      	adds	r3, #4
 800410c:	4618      	mov	r0, r3
 800410e:	f7fe f99f 	bl	8002450 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d02e      	beq.n	8004186 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4413      	add	r3, r2
 8004130:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	429a      	cmp	r2, r3
 8004138:	d90e      	bls.n	8004158 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004146:	4b19      	ldr	r3, [pc, #100]	; (80041ac <prvSwitchTimerLists+0xc0>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3304      	adds	r3, #4
 800414e:	4619      	mov	r1, r3
 8004150:	4610      	mov	r0, r2
 8004152:	f7fe f944 	bl	80023de <vListInsert>
 8004156:	e016      	b.n	8004186 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004158:	2300      	movs	r3, #0
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2300      	movs	r3, #0
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	2100      	movs	r1, #0
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f7ff fd7c 	bl	8003c60 <xTimerGenericCommand>
 8004168:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	603b      	str	r3, [r7, #0]
    }
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004186:	4b09      	ldr	r3, [pc, #36]	; (80041ac <prvSwitchTimerLists+0xc0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1b1      	bne.n	80040f4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <prvSwitchTimerLists+0xc0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <prvSwitchTimerLists+0xc4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a04      	ldr	r2, [pc, #16]	; (80041ac <prvSwitchTimerLists+0xc0>)
 800419c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800419e:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <prvSwitchTimerLists+0xc4>)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	6013      	str	r3, [r2, #0]
    }
 80041a4:	bf00      	nop
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	20000254 	.word	0x20000254
 80041b0:	20000258 	.word	0x20000258

080041b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80041b8:	f000 f9dc 	bl	8004574 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80041bc:	4b12      	ldr	r3, [pc, #72]	; (8004208 <prvCheckForValidListAndQueue+0x54>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d11d      	bne.n	8004200 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80041c4:	4811      	ldr	r0, [pc, #68]	; (800420c <prvCheckForValidListAndQueue+0x58>)
 80041c6:	f7fe f8b9 	bl	800233c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80041ca:	4811      	ldr	r0, [pc, #68]	; (8004210 <prvCheckForValidListAndQueue+0x5c>)
 80041cc:	f7fe f8b6 	bl	800233c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80041d0:	4b10      	ldr	r3, [pc, #64]	; (8004214 <prvCheckForValidListAndQueue+0x60>)
 80041d2:	4a0e      	ldr	r2, [pc, #56]	; (800420c <prvCheckForValidListAndQueue+0x58>)
 80041d4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80041d6:	4b10      	ldr	r3, [pc, #64]	; (8004218 <prvCheckForValidListAndQueue+0x64>)
 80041d8:	4a0d      	ldr	r2, [pc, #52]	; (8004210 <prvCheckForValidListAndQueue+0x5c>)
 80041da:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80041dc:	2200      	movs	r2, #0
 80041de:	210c      	movs	r1, #12
 80041e0:	200a      	movs	r0, #10
 80041e2:	f7fe f9ba 	bl	800255a <xQueueGenericCreate>
 80041e6:	4603      	mov	r3, r0
 80041e8:	4a07      	ldr	r2, [pc, #28]	; (8004208 <prvCheckForValidListAndQueue+0x54>)
 80041ea:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <prvCheckForValidListAndQueue+0x54>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <prvCheckForValidListAndQueue+0x54>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4908      	ldr	r1, [pc, #32]	; (800421c <prvCheckForValidListAndQueue+0x68>)
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe fe18 	bl	8002e30 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004200:	f000 f9e8 	bl	80045d4 <vPortExitCritical>
    }
 8004204:	bf00      	nop
 8004206:	bd80      	pop	{r7, pc}
 8004208:	2000025c 	.word	0x2000025c
 800420c:	2000022c 	.word	0x2000022c
 8004210:	20000240 	.word	0x20000240
 8004214:	20000254 	.word	0x20000254
 8004218:	20000258 	.word	0x20000258
 800421c:	08007f40 	.word	0x08007f40

08004220 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3b04      	subs	r3, #4
 8004230:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004238:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3b04      	subs	r3, #4
 800423e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f023 0201 	bic.w	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3b04      	subs	r3, #4
 800424e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004250:	4a0c      	ldr	r2, [pc, #48]	; (8004284 <pxPortInitialiseStack+0x64>)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3b14      	subs	r3, #20
 800425a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3b04      	subs	r3, #4
 8004266:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f06f 0202 	mvn.w	r2, #2
 800426e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3b20      	subs	r3, #32
 8004274:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004276:	68fb      	ldr	r3, [r7, #12]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	08004289 	.word	0x08004289

08004288 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <prvTaskExitError+0x54>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800429a:	d00a      	beq.n	80042b2 <prvTaskExitError+0x2a>
        __asm volatile
 800429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a0:	f383 8811 	msr	BASEPRI, r3
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	60fb      	str	r3, [r7, #12]
    }
 80042ae:	bf00      	nop
 80042b0:	e7fe      	b.n	80042b0 <prvTaskExitError+0x28>
        __asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	60bb      	str	r3, [r7, #8]
    }
 80042c4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80042c6:	bf00      	nop
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0fc      	beq.n	80042c8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	20000010 	.word	0x20000010

080042e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80042e0:	4b07      	ldr	r3, [pc, #28]	; (8004300 <pxCurrentTCBConst2>)
 80042e2:	6819      	ldr	r1, [r3, #0]
 80042e4:	6808      	ldr	r0, [r1, #0]
 80042e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ea:	f380 8809 	msr	PSP, r0
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f380 8811 	msr	BASEPRI, r0
 80042fa:	4770      	bx	lr
 80042fc:	f3af 8000 	nop.w

08004300 <pxCurrentTCBConst2>:
 8004300:	20000128 	.word	0x20000128
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop

08004308 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004308:	4808      	ldr	r0, [pc, #32]	; (800432c <prvPortStartFirstTask+0x24>)
 800430a:	6800      	ldr	r0, [r0, #0]
 800430c:	6800      	ldr	r0, [r0, #0]
 800430e:	f380 8808 	msr	MSP, r0
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f380 8814 	msr	CONTROL, r0
 800431a:	b662      	cpsie	i
 800431c:	b661      	cpsie	f
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	df00      	svc	0
 8004328:	bf00      	nop
 800432a:	0000      	.short	0x0000
 800432c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop

08004334 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800433a:	4b46      	ldr	r3, [pc, #280]	; (8004454 <xPortStartScheduler+0x120>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a46      	ldr	r2, [pc, #280]	; (8004458 <xPortStartScheduler+0x124>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d10a      	bne.n	800435a <xPortStartScheduler+0x26>
        __asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	613b      	str	r3, [r7, #16]
    }
 8004356:	bf00      	nop
 8004358:	e7fe      	b.n	8004358 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800435a:	4b3e      	ldr	r3, [pc, #248]	; (8004454 <xPortStartScheduler+0x120>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a3f      	ldr	r2, [pc, #252]	; (800445c <xPortStartScheduler+0x128>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d10a      	bne.n	800437a <xPortStartScheduler+0x46>
        __asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	60fb      	str	r3, [r7, #12]
    }
 8004376:	bf00      	nop
 8004378:	e7fe      	b.n	8004378 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800437a:	4b39      	ldr	r3, [pc, #228]	; (8004460 <xPortStartScheduler+0x12c>)
 800437c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	22ff      	movs	r2, #255	; 0xff
 800438a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800439c:	b2da      	uxtb	r2, r3
 800439e:	4b31      	ldr	r3, [pc, #196]	; (8004464 <xPortStartScheduler+0x130>)
 80043a0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043a2:	4b31      	ldr	r3, [pc, #196]	; (8004468 <xPortStartScheduler+0x134>)
 80043a4:	2207      	movs	r2, #7
 80043a6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043a8:	e009      	b.n	80043be <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80043aa:	4b2f      	ldr	r3, [pc, #188]	; (8004468 <xPortStartScheduler+0x134>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	4a2d      	ldr	r2, [pc, #180]	; (8004468 <xPortStartScheduler+0x134>)
 80043b2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c6:	2b80      	cmp	r3, #128	; 0x80
 80043c8:	d0ef      	beq.n	80043aa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043ca:	4b27      	ldr	r3, [pc, #156]	; (8004468 <xPortStartScheduler+0x134>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f1c3 0307 	rsb	r3, r3, #7
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d00a      	beq.n	80043ec <xPortStartScheduler+0xb8>
        __asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	60bb      	str	r3, [r7, #8]
    }
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043ec:	4b1e      	ldr	r3, [pc, #120]	; (8004468 <xPortStartScheduler+0x134>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	4a1d      	ldr	r2, [pc, #116]	; (8004468 <xPortStartScheduler+0x134>)
 80043f4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043f6:	4b1c      	ldr	r3, [pc, #112]	; (8004468 <xPortStartScheduler+0x134>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043fe:	4a1a      	ldr	r2, [pc, #104]	; (8004468 <xPortStartScheduler+0x134>)
 8004400:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800440a:	4b18      	ldr	r3, [pc, #96]	; (800446c <xPortStartScheduler+0x138>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a17      	ldr	r2, [pc, #92]	; (800446c <xPortStartScheduler+0x138>)
 8004410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004414:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004416:	4b15      	ldr	r3, [pc, #84]	; (800446c <xPortStartScheduler+0x138>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a14      	ldr	r2, [pc, #80]	; (800446c <xPortStartScheduler+0x138>)
 800441c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004420:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004422:	f000 f963 	bl	80046ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <xPortStartScheduler+0x13c>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800442c:	f000 f982 	bl	8004734 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004430:	4b10      	ldr	r3, [pc, #64]	; (8004474 <xPortStartScheduler+0x140>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0f      	ldr	r2, [pc, #60]	; (8004474 <xPortStartScheduler+0x140>)
 8004436:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800443a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800443c:	f7ff ff64 	bl	8004308 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004440:	f7ff f870 	bl	8003524 <vTaskSwitchContext>
    prvTaskExitError();
 8004444:	f7ff ff20 	bl	8004288 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	e000ed00 	.word	0xe000ed00
 8004458:	410fc271 	.word	0x410fc271
 800445c:	410fc270 	.word	0x410fc270
 8004460:	e000e400 	.word	0xe000e400
 8004464:	20000268 	.word	0x20000268
 8004468:	2000026c 	.word	0x2000026c
 800446c:	e000ed20 	.word	0xe000ed20
 8004470:	20000010 	.word	0x20000010
 8004474:	e000ef34 	.word	0xe000ef34

08004478 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800447e:	4b37      	ldr	r3, [pc, #220]	; (800455c <vInitPrioGroupValue+0xe4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a37      	ldr	r2, [pc, #220]	; (8004560 <vInitPrioGroupValue+0xe8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d10a      	bne.n	800449e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	613b      	str	r3, [r7, #16]
    }
 800449a:	bf00      	nop
 800449c:	e7fe      	b.n	800449c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800449e:	4b2f      	ldr	r3, [pc, #188]	; (800455c <vInitPrioGroupValue+0xe4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a30      	ldr	r2, [pc, #192]	; (8004564 <vInitPrioGroupValue+0xec>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d10a      	bne.n	80044be <vInitPrioGroupValue+0x46>
        __asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	60fb      	str	r3, [r7, #12]
    }
 80044ba:	bf00      	nop
 80044bc:	e7fe      	b.n	80044bc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044be:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <vInitPrioGroupValue+0xf0>)
 80044c0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	22ff      	movs	r2, #255	; 0xff
 80044ce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	4b22      	ldr	r3, [pc, #136]	; (800456c <vInitPrioGroupValue+0xf4>)
 80044e4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044e6:	4b22      	ldr	r3, [pc, #136]	; (8004570 <vInitPrioGroupValue+0xf8>)
 80044e8:	2207      	movs	r2, #7
 80044ea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044ec:	e009      	b.n	8004502 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80044ee:	4b20      	ldr	r3, [pc, #128]	; (8004570 <vInitPrioGroupValue+0xf8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	4a1e      	ldr	r2, [pc, #120]	; (8004570 <vInitPrioGroupValue+0xf8>)
 80044f6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b80      	cmp	r3, #128	; 0x80
 800450c:	d0ef      	beq.n	80044ee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800450e:	4b18      	ldr	r3, [pc, #96]	; (8004570 <vInitPrioGroupValue+0xf8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1c3 0307 	rsb	r3, r3, #7
 8004516:	2b04      	cmp	r3, #4
 8004518:	d00a      	beq.n	8004530 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	60bb      	str	r3, [r7, #8]
    }
 800452c:	bf00      	nop
 800452e:	e7fe      	b.n	800452e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004530:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <vInitPrioGroupValue+0xf8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	4a0e      	ldr	r2, [pc, #56]	; (8004570 <vInitPrioGroupValue+0xf8>)
 8004538:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800453a:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <vInitPrioGroupValue+0xf8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004542:	4a0b      	ldr	r2, [pc, #44]	; (8004570 <vInitPrioGroupValue+0xf8>)
 8004544:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	b2da      	uxtb	r2, r3
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	e000ed00 	.word	0xe000ed00
 8004560:	410fc271 	.word	0x410fc271
 8004564:	410fc270 	.word	0x410fc270
 8004568:	e000e400 	.word	0xe000e400
 800456c:	20000268 	.word	0x20000268
 8004570:	2000026c 	.word	0x2000026c

08004574 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
        __asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	607b      	str	r3, [r7, #4]
    }
 800458c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800458e:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <vPortEnterCritical+0x58>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3301      	adds	r3, #1
 8004594:	4a0d      	ldr	r2, [pc, #52]	; (80045cc <vPortEnterCritical+0x58>)
 8004596:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004598:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <vPortEnterCritical+0x58>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d10f      	bne.n	80045c0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <vPortEnterCritical+0x5c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <vPortEnterCritical+0x4c>
        __asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	603b      	str	r3, [r7, #0]
    }
 80045bc:	bf00      	nop
 80045be:	e7fe      	b.n	80045be <vPortEnterCritical+0x4a>
    }
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	20000010 	.word	0x20000010
 80045d0:	e000ed04 	.word	0xe000ed04

080045d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <vPortExitCritical+0x50>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <vPortExitCritical+0x24>
        __asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	607b      	str	r3, [r7, #4]
    }
 80045f4:	bf00      	nop
 80045f6:	e7fe      	b.n	80045f6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <vPortExitCritical+0x50>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	4a09      	ldr	r2, [pc, #36]	; (8004624 <vPortExitCritical+0x50>)
 8004600:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <vPortExitCritical+0x50>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d105      	bne.n	8004616 <vPortExitCritical+0x42>
 800460a:	2300      	movs	r3, #0
 800460c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	f383 8811 	msr	BASEPRI, r3
    }
 8004614:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000010 	.word	0x20000010
	...

08004630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004630:	f3ef 8009 	mrs	r0, PSP
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	4b15      	ldr	r3, [pc, #84]	; (8004690 <pxCurrentTCBConst>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	f01e 0f10 	tst.w	lr, #16
 8004640:	bf08      	it	eq
 8004642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464a:	6010      	str	r0, [r2, #0]
 800464c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004654:	f380 8811 	msr	BASEPRI, r0
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f7fe ff60 	bl	8003524 <vTaskSwitchContext>
 8004664:	f04f 0000 	mov.w	r0, #0
 8004668:	f380 8811 	msr	BASEPRI, r0
 800466c:	bc09      	pop	{r0, r3}
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	6808      	ldr	r0, [r1, #0]
 8004672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004676:	f01e 0f10 	tst.w	lr, #16
 800467a:	bf08      	it	eq
 800467c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004680:	f380 8809 	msr	PSP, r0
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	f3af 8000 	nop.w

08004690 <pxCurrentTCBConst>:
 8004690:	20000128 	.word	0x20000128
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop

08004698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
        __asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	607b      	str	r3, [r7, #4]
    }
 80046b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80046b2:	f002 fbf3 	bl	8006e9c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80046b6:	f7fe fe9b 	bl	80033f0 <xTaskIncrementTick>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d006      	beq.n	80046ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80046c0:	f002 fc4a 	bl	8006f58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046c4:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <SysTick_Handler+0x50>)
 80046c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	e001      	b.n	80046d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80046ce:	f002 fc27 	bl	8006f20 <SEGGER_SYSVIEW_RecordExitISR>
 80046d2:	2300      	movs	r3, #0
 80046d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	f383 8811 	msr	BASEPRI, r3
    }
 80046dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	e000ed04 	.word	0xe000ed04

080046ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <vPortSetupTimerInterrupt+0x34>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <vPortSetupTimerInterrupt+0x38>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046fc:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <vPortSetupTimerInterrupt+0x3c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a0a      	ldr	r2, [pc, #40]	; (800472c <vPortSetupTimerInterrupt+0x40>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	099b      	lsrs	r3, r3, #6
 8004708:	4a09      	ldr	r2, [pc, #36]	; (8004730 <vPortSetupTimerInterrupt+0x44>)
 800470a:	3b01      	subs	r3, #1
 800470c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800470e:	4b04      	ldr	r3, [pc, #16]	; (8004720 <vPortSetupTimerInterrupt+0x34>)
 8004710:	2207      	movs	r2, #7
 8004712:	601a      	str	r2, [r3, #0]
}
 8004714:	bf00      	nop
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	e000e010 	.word	0xe000e010
 8004724:	e000e018 	.word	0xe000e018
 8004728:	20000000 	.word	0x20000000
 800472c:	10624dd3 	.word	0x10624dd3
 8004730:	e000e014 	.word	0xe000e014

08004734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004744 <vPortEnableVFP+0x10>
 8004738:	6801      	ldr	r1, [r0, #0]
 800473a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800473e:	6001      	str	r1, [r0, #0]
 8004740:	4770      	bx	lr
 8004742:	0000      	.short	0x0000
 8004744:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop

0800474c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004752:	f3ef 8305 	mrs	r3, IPSR
 8004756:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b0f      	cmp	r3, #15
 800475c:	d914      	bls.n	8004788 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800475e:	4a17      	ldr	r2, [pc, #92]	; (80047bc <vPortValidateInterruptPriority+0x70>)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004768:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <vPortValidateInterruptPriority+0x74>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	7afa      	ldrb	r2, [r7, #11]
 800476e:	429a      	cmp	r2, r3
 8004770:	d20a      	bcs.n	8004788 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	607b      	str	r3, [r7, #4]
    }
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004788:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <vPortValidateInterruptPriority+0x78>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004790:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <vPortValidateInterruptPriority+0x7c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d90a      	bls.n	80047ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	603b      	str	r3, [r7, #0]
    }
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <vPortValidateInterruptPriority+0x60>
    }
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	e000e3f0 	.word	0xe000e3f0
 80047c0:	20000268 	.word	0x20000268
 80047c4:	e000ed0c 	.word	0xe000ed0c
 80047c8:	2000026c 	.word	0x2000026c

080047cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80047d8:	f7fe fd48 	bl	800326c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80047dc:	4b65      	ldr	r3, [pc, #404]	; (8004974 <pvPortMalloc+0x1a8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80047e4:	f000 f934 	bl	8004a50 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047e8:	4b63      	ldr	r3, [pc, #396]	; (8004978 <pvPortMalloc+0x1ac>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f040 80a7 	bne.w	8004944 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d02d      	beq.n	8004858 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80047fc:	2208      	movs	r2, #8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	429a      	cmp	r2, r3
 8004806:	d227      	bcs.n	8004858 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004808:	2208      	movs	r2, #8
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4413      	add	r3, r2
 800480e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	2b00      	cmp	r3, #0
 8004818:	d021      	beq.n	800485e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f023 0307 	bic.w	r3, r3, #7
 8004820:	3308      	adds	r3, #8
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	429a      	cmp	r2, r3
 8004826:	d214      	bcs.n	8004852 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f023 0307 	bic.w	r3, r3, #7
 800482e:	3308      	adds	r3, #8
 8004830:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	2b00      	cmp	r3, #0
 800483a:	d010      	beq.n	800485e <pvPortMalloc+0x92>
        __asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	617b      	str	r3, [r7, #20]
    }
 800484e:	bf00      	nop
 8004850:	e7fe      	b.n	8004850 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004856:	e002      	b.n	800485e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	607b      	str	r3, [r7, #4]
 800485c:	e000      	b.n	8004860 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800485e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d06e      	beq.n	8004944 <pvPortMalloc+0x178>
 8004866:	4b45      	ldr	r3, [pc, #276]	; (800497c <pvPortMalloc+0x1b0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	429a      	cmp	r2, r3
 800486e:	d869      	bhi.n	8004944 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004870:	4b43      	ldr	r3, [pc, #268]	; (8004980 <pvPortMalloc+0x1b4>)
 8004872:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004874:	4b42      	ldr	r3, [pc, #264]	; (8004980 <pvPortMalloc+0x1b4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800487a:	e004      	b.n	8004886 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d903      	bls.n	8004898 <pvPortMalloc+0xcc>
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f1      	bne.n	800487c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004898:	4b36      	ldr	r3, [pc, #216]	; (8004974 <pvPortMalloc+0x1a8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489e:	429a      	cmp	r2, r3
 80048a0:	d050      	beq.n	8004944 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2208      	movs	r2, #8
 80048a8:	4413      	add	r3, r2
 80048aa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	1ad2      	subs	r2, r2, r3
 80048bc:	2308      	movs	r3, #8
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d91f      	bls.n	8004904 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4413      	add	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <pvPortMalloc+0x120>
        __asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	613b      	str	r3, [r7, #16]
    }
 80048e8:	bf00      	nop
 80048ea:	e7fe      	b.n	80048ea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	1ad2      	subs	r2, r2, r3
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048fe:	69b8      	ldr	r0, [r7, #24]
 8004900:	f000 f908 	bl	8004b14 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004904:	4b1d      	ldr	r3, [pc, #116]	; (800497c <pvPortMalloc+0x1b0>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	4a1b      	ldr	r2, [pc, #108]	; (800497c <pvPortMalloc+0x1b0>)
 8004910:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004912:	4b1a      	ldr	r3, [pc, #104]	; (800497c <pvPortMalloc+0x1b0>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <pvPortMalloc+0x1b8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d203      	bcs.n	8004926 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800491e:	4b17      	ldr	r3, [pc, #92]	; (800497c <pvPortMalloc+0x1b0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a18      	ldr	r2, [pc, #96]	; (8004984 <pvPortMalloc+0x1b8>)
 8004924:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	4b13      	ldr	r3, [pc, #76]	; (8004978 <pvPortMalloc+0x1ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	431a      	orrs	r2, r3
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800493a:	4b13      	ldr	r3, [pc, #76]	; (8004988 <pvPortMalloc+0x1bc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3301      	adds	r3, #1
 8004940:	4a11      	ldr	r2, [pc, #68]	; (8004988 <pvPortMalloc+0x1bc>)
 8004942:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004944:	f7fe fca0 	bl	8003288 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <pvPortMalloc+0x19c>
        __asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	60fb      	str	r3, [r7, #12]
    }
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <pvPortMalloc+0x19a>
    return pvReturn;
 8004968:	69fb      	ldr	r3, [r7, #28]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3728      	adds	r7, #40	; 0x28
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20012e78 	.word	0x20012e78
 8004978:	20012e8c 	.word	0x20012e8c
 800497c:	20012e7c 	.word	0x20012e7c
 8004980:	20012e70 	.word	0x20012e70
 8004984:	20012e80 	.word	0x20012e80
 8004988:	20012e84 	.word	0x20012e84

0800498c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d04d      	beq.n	8004a3a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800499e:	2308      	movs	r3, #8
 80049a0:	425b      	negs	r3, r3
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4413      	add	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <vPortFree+0xb8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <vPortFree+0x44>
        __asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	60fb      	str	r3, [r7, #12]
    }
 80049cc:	bf00      	nop
 80049ce:	e7fe      	b.n	80049ce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <vPortFree+0x62>
        __asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	60bb      	str	r3, [r7, #8]
    }
 80049ea:	bf00      	nop
 80049ec:	e7fe      	b.n	80049ec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <vPortFree+0xb8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01e      	beq.n	8004a3a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d11a      	bne.n	8004a3a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <vPortFree+0xb8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	401a      	ands	r2, r3
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004a14:	f7fe fc2a 	bl	800326c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <vPortFree+0xbc>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4413      	add	r3, r2
 8004a22:	4a09      	ldr	r2, [pc, #36]	; (8004a48 <vPortFree+0xbc>)
 8004a24:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a26:	6938      	ldr	r0, [r7, #16]
 8004a28:	f000 f874 	bl	8004b14 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004a2c:	4b07      	ldr	r3, [pc, #28]	; (8004a4c <vPortFree+0xc0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	4a06      	ldr	r2, [pc, #24]	; (8004a4c <vPortFree+0xc0>)
 8004a34:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004a36:	f7fe fc27 	bl	8003288 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004a3a:	bf00      	nop
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20012e8c 	.word	0x20012e8c
 8004a48:	20012e7c 	.word	0x20012e7c
 8004a4c:	20012e88 	.word	0x20012e88

08004a50 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a56:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004a5a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004a5c:	4b27      	ldr	r3, [pc, #156]	; (8004afc <prvHeapInit+0xac>)
 8004a5e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00c      	beq.n	8004a84 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3307      	adds	r3, #7
 8004a6e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0307 	bic.w	r3, r3, #7
 8004a76:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	4a1f      	ldr	r2, [pc, #124]	; (8004afc <prvHeapInit+0xac>)
 8004a80:	4413      	add	r3, r2
 8004a82:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a88:	4a1d      	ldr	r2, [pc, #116]	; (8004b00 <prvHeapInit+0xb0>)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a8e:	4b1c      	ldr	r3, [pc, #112]	; (8004b00 <prvHeapInit+0xb0>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	4413      	add	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0307 	bic.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4a15      	ldr	r2, [pc, #84]	; (8004b04 <prvHeapInit+0xb4>)
 8004ab0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004ab2:	4b14      	ldr	r3, [pc, #80]	; (8004b04 <prvHeapInit+0xb4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004aba:	4b12      	ldr	r3, [pc, #72]	; (8004b04 <prvHeapInit+0xb4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	1ad2      	subs	r2, r2, r3
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ad0:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <prvHeapInit+0xb4>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4a0a      	ldr	r2, [pc, #40]	; (8004b08 <prvHeapInit+0xb8>)
 8004ade:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4a09      	ldr	r2, [pc, #36]	; (8004b0c <prvHeapInit+0xbc>)
 8004ae6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ae8:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <prvHeapInit+0xc0>)
 8004aea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004aee:	601a      	str	r2, [r3, #0]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	20000270 	.word	0x20000270
 8004b00:	20012e70 	.word	0x20012e70
 8004b04:	20012e78 	.word	0x20012e78
 8004b08:	20012e80 	.word	0x20012e80
 8004b0c:	20012e7c 	.word	0x20012e7c
 8004b10:	20012e8c 	.word	0x20012e8c

08004b14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b1c:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <prvInsertBlockIntoFreeList+0xac>)
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e002      	b.n	8004b28 <prvInsertBlockIntoFreeList+0x14>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d8f7      	bhi.n	8004b22 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d108      	bne.n	8004b56 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	441a      	add	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	441a      	add	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d118      	bne.n	8004b9c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <prvInsertBlockIntoFreeList+0xb0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d00d      	beq.n	8004b92 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	441a      	add	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	e008      	b.n	8004ba4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b92:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <prvInsertBlockIntoFreeList+0xb0>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	e003      	b.n	8004ba4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d002      	beq.n	8004bb2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20012e70 	.word	0x20012e70
 8004bc4:	20012e78 	.word	0x20012e78

08004bc8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004bcc:	4803      	ldr	r0, [pc, #12]	; (8004bdc <_cbSendSystemDesc+0x14>)
 8004bce:	f002 f90f 	bl	8006df0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004bd2:	4803      	ldr	r0, [pc, #12]	; (8004be0 <_cbSendSystemDesc+0x18>)
 8004bd4:	f002 f90c 	bl	8006df0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004bd8:	bf00      	nop
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	08007f48 	.word	0x08007f48
 8004be0:	08007f8c 	.word	0x08007f8c

08004be4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <SEGGER_SYSVIEW_Conf+0x20>)
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <SEGGER_SYSVIEW_Conf+0x20>)
 8004bee:	6819      	ldr	r1, [r3, #0]
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <SEGGER_SYSVIEW_Conf+0x24>)
 8004bf2:	4a06      	ldr	r2, [pc, #24]	; (8004c0c <SEGGER_SYSVIEW_Conf+0x28>)
 8004bf4:	f001 fc78 	bl	80064e8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004bf8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004bfc:	f001 fcb8 	bl	8006570 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004c00:	bf00      	nop
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20000000 	.word	0x20000000
 8004c08:	08004bc9 	.word	0x08004bc9
 8004c0c:	08008028 	.word	0x08008028

08004c10 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004c16:	2300      	movs	r3, #0
 8004c18:	607b      	str	r3, [r7, #4]
 8004c1a:	e033      	b.n	8004c84 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004c1c:	491e      	ldr	r1, [pc, #120]	; (8004c98 <_cbSendTaskList+0x88>)
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	491a      	ldr	r1, [pc, #104]	; (8004c98 <_cbSendTaskList+0x88>)
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	6819      	ldr	r1, [r3, #0]
 8004c3e:	4c16      	ldr	r4, [pc, #88]	; (8004c98 <_cbSendTaskList+0x88>)
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4423      	add	r3, r4
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	681c      	ldr	r4, [r3, #0]
 8004c50:	4d11      	ldr	r5, [pc, #68]	; (8004c98 <_cbSendTaskList+0x88>)
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	442b      	add	r3, r5
 8004c5e:	330c      	adds	r3, #12
 8004c60:	681d      	ldr	r5, [r3, #0]
 8004c62:	4e0d      	ldr	r6, [pc, #52]	; (8004c98 <_cbSendTaskList+0x88>)
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4433      	add	r3, r6
 8004c70:	3310      	adds	r3, #16
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	462b      	mov	r3, r5
 8004c78:	4622      	mov	r2, r4
 8004c7a:	f000 f8bd 	bl	8004df8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3301      	adds	r3, #1
 8004c82:	607b      	str	r3, [r7, #4]
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <_cbSendTaskList+0x8c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d3c6      	bcc.n	8004c1c <_cbSendTaskList+0xc>
  }
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c98:	20012e90 	.word	0x20012e90
 8004c9c:	20012f30 	.word	0x20012f30

08004ca0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004ca8:	f7fe fb90 	bl	80033cc <xTaskGetTickCountFromISR>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2200      	movs	r2, #0
 8004cb0:	469a      	mov	sl, r3
 8004cb2:	4693      	mov	fp, r2
 8004cb4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004cb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	f04f 0a00 	mov.w	sl, #0
 8004cc4:	f04f 0b00 	mov.w	fp, #0
 8004cc8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004ccc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004cd0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004cd4:	4652      	mov	r2, sl
 8004cd6:	465b      	mov	r3, fp
 8004cd8:	1a14      	subs	r4, r2, r0
 8004cda:	eb63 0501 	sbc.w	r5, r3, r1
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	00ab      	lsls	r3, r5, #2
 8004ce8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004cec:	00a2      	lsls	r2, r4, #2
 8004cee:	4614      	mov	r4, r2
 8004cf0:	461d      	mov	r5, r3
 8004cf2:	eb14 0800 	adds.w	r8, r4, r0
 8004cf6:	eb45 0901 	adc.w	r9, r5, r1
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d0e:	4690      	mov	r8, r2
 8004d10:	4699      	mov	r9, r3
 8004d12:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004d16:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004d28 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004d36:	2205      	movs	r2, #5
 8004d38:	492b      	ldr	r1, [pc, #172]	; (8004de8 <SYSVIEW_AddTask+0xc0>)
 8004d3a:	68b8      	ldr	r0, [r7, #8]
 8004d3c:	f002 fc22 	bl	8007584 <memcmp>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d04b      	beq.n	8004dde <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004d46:	4b29      	ldr	r3, [pc, #164]	; (8004dec <SYSVIEW_AddTask+0xc4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b07      	cmp	r3, #7
 8004d4c:	d903      	bls.n	8004d56 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004d4e:	4828      	ldr	r0, [pc, #160]	; (8004df0 <SYSVIEW_AddTask+0xc8>)
 8004d50:	f002 fb6a 	bl	8007428 <SEGGER_SYSVIEW_Warn>
    return;
 8004d54:	e044      	b.n	8004de0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d56:	4b25      	ldr	r3, [pc, #148]	; (8004dec <SYSVIEW_AddTask+0xc4>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4926      	ldr	r1, [pc, #152]	; (8004df4 <SYSVIEW_AddTask+0xcc>)
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d6a:	4b20      	ldr	r3, [pc, #128]	; (8004dec <SYSVIEW_AddTask+0xc4>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4921      	ldr	r1, [pc, #132]	; (8004df4 <SYSVIEW_AddTask+0xcc>)
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d80:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <SYSVIEW_AddTask+0xc4>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	491b      	ldr	r1, [pc, #108]	; (8004df4 <SYSVIEW_AddTask+0xcc>)
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	3308      	adds	r3, #8
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d96:	4b15      	ldr	r3, [pc, #84]	; (8004dec <SYSVIEW_AddTask+0xc4>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4916      	ldr	r1, [pc, #88]	; (8004df4 <SYSVIEW_AddTask+0xcc>)
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	330c      	adds	r3, #12
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004dac:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <SYSVIEW_AddTask+0xc4>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	4910      	ldr	r1, [pc, #64]	; (8004df4 <SYSVIEW_AddTask+0xcc>)
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	3310      	adds	r3, #16
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <SYSVIEW_AddTask+0xc4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	4a08      	ldr	r2, [pc, #32]	; (8004dec <SYSVIEW_AddTask+0xc4>)
 8004dca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f80e 	bl	8004df8 <SYSVIEW_SendTaskInfo>
 8004ddc:	e000      	b.n	8004de0 <SYSVIEW_AddTask+0xb8>
    return;
 8004dde:	bf00      	nop

}
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	08007f9c 	.word	0x08007f9c
 8004dec:	20012f30 	.word	0x20012f30
 8004df0:	08007fa4 	.word	0x08007fa4
 8004df4:	20012e90 	.word	0x20012e90

08004df8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08a      	sub	sp, #40	; 0x28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004e06:	f107 0314 	add.w	r3, r7, #20
 8004e0a:	2214      	movs	r2, #20
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f002 fbd6 	bl	80075c0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004e28:	f107 0314 	add.w	r3, r7, #20
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f001 fee7 	bl	8006c00 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004e32:	bf00      	nop
 8004e34:	3728      	adds	r7, #40	; 0x28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <__NVIC_EnableIRQ>:
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	db0b      	blt.n	8004e66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	f003 021f 	and.w	r2, r3, #31
 8004e54:	4907      	ldr	r1, [pc, #28]	; (8004e74 <__NVIC_EnableIRQ+0x38>)
 8004e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	e000e100 	.word	0xe000e100

08004e78 <__NVIC_SetPriority>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	6039      	str	r1, [r7, #0]
 8004e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	db0a      	blt.n	8004ea2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	490c      	ldr	r1, [pc, #48]	; (8004ec4 <__NVIC_SetPriority+0x4c>)
 8004e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e96:	0112      	lsls	r2, r2, #4
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ea0:	e00a      	b.n	8004eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	4908      	ldr	r1, [pc, #32]	; (8004ec8 <__NVIC_SetPriority+0x50>)
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	3b04      	subs	r3, #4
 8004eb0:	0112      	lsls	r2, r2, #4
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	761a      	strb	r2, [r3, #24]
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	e000e100 	.word	0xe000e100
 8004ec8:	e000ed00 	.word	0xe000ed00

08004ecc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004ed2:	f002 fb05 	bl	80074e0 <SEGGER_SYSVIEW_IsStarted>
 8004ed6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004ede:	f001 fd13 	bl	8006908 <SEGGER_SYSVIEW_Start>
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004ef6:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <_cbOnUARTRx+0x3c>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d806      	bhi.n	8004f0c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004efe:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <_cbOnUARTRx+0x3c>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	3301      	adds	r3, #1
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <_cbOnUARTRx+0x3c>)
 8004f08:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004f0a:	e009      	b.n	8004f20 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004f0c:	f7ff ffde 	bl	8004ecc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004f10:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <_cbOnUARTRx+0x3c>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	4618      	mov	r0, r3
 8004f16:	1dfb      	adds	r3, r7, #7
 8004f18:	2201      	movs	r2, #1
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f000 fb9c 	bl	8005658 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004f20:	bf00      	nop
}
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20000014 	.word	0x20000014

08004f2c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004f34:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <_cbOnUARTTx+0x5c>)
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d80f      	bhi.n	8004f5c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004f3c:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <_cbOnUARTTx+0x5c>)
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	461a      	mov	r2, r3
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <_cbOnUARTTx+0x60>)
 8004f44:	5c9a      	ldrb	r2, [r3, r2]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004f4a:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <_cbOnUARTTx+0x5c>)
 8004f4c:	785b      	ldrb	r3, [r3, #1]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <_cbOnUARTTx+0x5c>)
 8004f54:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004f56:	2301      	movs	r3, #1
 8004f58:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004f5a:	e00f      	b.n	8004f7c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <_cbOnUARTTx+0x5c>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fa1b 	bl	80053a0 <SEGGER_RTT_ReadUpBufferNoLock>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	da02      	bge.n	8004f7a <_cbOnUARTTx+0x4e>
    r = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	e000      	b.n	8004f7c <_cbOnUARTTx+0x50>
  }
Done:
 8004f7a:	bf00      	nop
  return r;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000014 	.word	0x20000014
 8004f8c:	08008030 	.word	0x08008030

08004f90 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004f98:	4a04      	ldr	r2, [pc, #16]	; (8004fac <SEGGER_UART_init+0x1c>)
 8004f9a:	4905      	ldr	r1, [pc, #20]	; (8004fb0 <SEGGER_UART_init+0x20>)
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f863 	bl	8005068 <HIF_UART_Init>
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	08004eed 	.word	0x08004eed
 8004fb0:	08004f2d 	.word	0x08004f2d

08004fb4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004fba:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <USART2_IRQHandler+0x80>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d011      	beq.n	8004fee <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004fca:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <USART2_IRQHandler+0x84>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f003 030b 	and.w	r3, r3, #11
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d108      	bne.n	8004fee <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004fdc:	4b17      	ldr	r3, [pc, #92]	; (800503c <USART2_IRQHandler+0x88>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004fe4:	4b15      	ldr	r3, [pc, #84]	; (800503c <USART2_IRQHandler+0x88>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	79fa      	ldrb	r2, [r7, #7]
 8004fea:	4610      	mov	r0, r2
 8004fec:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01a      	beq.n	800502e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004ff8:	4b11      	ldr	r3, [pc, #68]	; (8005040 <USART2_IRQHandler+0x8c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d015      	beq.n	800502c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005000:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <USART2_IRQHandler+0x8c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	1dfa      	adds	r2, r7, #7
 8005006:	4610      	mov	r0, r2
 8005008:	4798      	blx	r3
 800500a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005012:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <USART2_IRQHandler+0x90>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a0b      	ldr	r2, [pc, #44]	; (8005044 <USART2_IRQHandler+0x90>)
 8005018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e006      	b.n	800502e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005020:	4b04      	ldr	r3, [pc, #16]	; (8005034 <USART2_IRQHandler+0x80>)
 8005022:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005024:	79fa      	ldrb	r2, [r7, #7]
 8005026:	4b04      	ldr	r3, [pc, #16]	; (8005038 <USART2_IRQHandler+0x84>)
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	e000      	b.n	800502e <USART2_IRQHandler+0x7a>
      return;
 800502c:	bf00      	nop
    }
  }
}
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40004400 	.word	0x40004400
 8005038:	40004404 	.word	0x40004404
 800503c:	20012f34 	.word	0x20012f34
 8005040:	20012f38 	.word	0x20012f38
 8005044:	4000440c 	.word	0x4000440c

08005048 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a04      	ldr	r2, [pc, #16]	; (8005064 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005056:	6013      	str	r3, [r2, #0]
}
 8005058:	bf00      	nop
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	4000440c 	.word	0x4000440c

08005068 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005074:	4b2e      	ldr	r3, [pc, #184]	; (8005130 <HIF_UART_Init+0xc8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2d      	ldr	r2, [pc, #180]	; (8005130 <HIF_UART_Init+0xc8>)
 800507a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800507e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005080:	4b2c      	ldr	r3, [pc, #176]	; (8005134 <HIF_UART_Init+0xcc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a2b      	ldr	r2, [pc, #172]	; (8005134 <HIF_UART_Init+0xcc>)
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800508c:	4b2a      	ldr	r3, [pc, #168]	; (8005138 <HIF_UART_Init+0xd0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005098:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80050a0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80050a2:	4a25      	ldr	r2, [pc, #148]	; (8005138 <HIF_UART_Init+0xd0>)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80050a8:	4b24      	ldr	r3, [pc, #144]	; (800513c <HIF_UART_Init+0xd4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050b4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80050bc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80050be:	4a1f      	ldr	r2, [pc, #124]	; (800513c <HIF_UART_Init+0xd4>)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80050c4:	4b1e      	ldr	r3, [pc, #120]	; (8005140 <HIF_UART_Init+0xd8>)
 80050c6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80050ca:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80050cc:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <HIF_UART_Init+0xdc>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80050d2:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <HIF_UART_Init+0xe0>)
 80050d4:	2280      	movs	r2, #128	; 0x80
 80050d6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80050de:	4a1b      	ldr	r2, [pc, #108]	; (800514c <HIF_UART_Init+0xe4>)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e6:	3301      	adds	r3, #1
 80050e8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	085b      	lsrs	r3, r3, #1
 80050ee:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f6:	d302      	bcc.n	80050fe <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80050f8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80050fc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d004      	beq.n	800510e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	4a11      	ldr	r2, [pc, #68]	; (8005150 <HIF_UART_Init+0xe8>)
 800510a:	b29b      	uxth	r3, r3
 800510c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800510e:	4a11      	ldr	r2, [pc, #68]	; (8005154 <HIF_UART_Init+0xec>)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005114:	4a10      	ldr	r2, [pc, #64]	; (8005158 <HIF_UART_Init+0xf0>)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800511a:	2106      	movs	r1, #6
 800511c:	2026      	movs	r0, #38	; 0x26
 800511e:	f7ff feab 	bl	8004e78 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005122:	2026      	movs	r0, #38	; 0x26
 8005124:	f7ff fe8a 	bl	8004e3c <__NVIC_EnableIRQ>
}
 8005128:	bf00      	nop
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40023840 	.word	0x40023840
 8005134:	40023830 	.word	0x40023830
 8005138:	40020020 	.word	0x40020020
 800513c:	40020000 	.word	0x40020000
 8005140:	4000440c 	.word	0x4000440c
 8005144:	40004410 	.word	0x40004410
 8005148:	40004414 	.word	0x40004414
 800514c:	055d4a80 	.word	0x055d4a80
 8005150:	40004408 	.word	0x40004408
 8005154:	20012f34 	.word	0x20012f34
 8005158:	20012f38 	.word	0x20012f38

0800515c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005162:	4b26      	ldr	r3, [pc, #152]	; (80051fc <_DoInit+0xa0>)
 8005164:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005166:	22a8      	movs	r2, #168	; 0xa8
 8005168:	2100      	movs	r1, #0
 800516a:	6838      	ldr	r0, [r7, #0]
 800516c:	f002 fa28 	bl	80075c0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2203      	movs	r2, #3
 8005174:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2203      	movs	r2, #3
 800517a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	4a20      	ldr	r2, [pc, #128]	; (8005200 <_DoInit+0xa4>)
 8005180:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <_DoInit+0xa8>)
 8005186:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800518e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2200      	movs	r2, #0
 8005194:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2200      	movs	r2, #0
 800519a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	4a16      	ldr	r2, [pc, #88]	; (8005200 <_DoInit+0xa4>)
 80051a6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	4a17      	ldr	r2, [pc, #92]	; (8005208 <_DoInit+0xac>)
 80051ac:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2210      	movs	r2, #16
 80051b2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2200      	movs	r2, #0
 80051b8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2200      	movs	r2, #0
 80051be:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2200      	movs	r2, #0
 80051c4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80051c6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80051ca:	2300      	movs	r3, #0
 80051cc:	607b      	str	r3, [r7, #4]
 80051ce:	e00c      	b.n	80051ea <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f1c3 030f 	rsb	r3, r3, #15
 80051d6:	4a0d      	ldr	r2, [pc, #52]	; (800520c <_DoInit+0xb0>)
 80051d8:	5cd1      	ldrb	r1, [r2, r3]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4413      	add	r3, r2
 80051e0:	460a      	mov	r2, r1
 80051e2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3301      	adds	r3, #1
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b0f      	cmp	r3, #15
 80051ee:	d9ef      	bls.n	80051d0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80051f0:	f3bf 8f5f 	dmb	sy
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20012f3c 	.word	0x20012f3c
 8005200:	08007ff4 	.word	0x08007ff4
 8005204:	20012fe4 	.word	0x20012fe4
 8005208:	200133e4 	.word	0x200133e4
 800520c:	08008034 	.word	0x08008034

08005210 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005210:	b580      	push	{r7, lr}
 8005212:	b08a      	sub	sp, #40	; 0x28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800521c:	2300      	movs	r3, #0
 800521e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	429a      	cmp	r2, r3
 8005232:	d905      	bls.n	8005240 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
 800523e:	e007      	b.n	8005250 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	69b9      	ldr	r1, [r7, #24]
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	1acb      	subs	r3, r1, r3
 800524a:	4413      	add	r3, r2
 800524c:	3b01      	subs	r3, #1
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	4293      	cmp	r3, r2
 800525c:	bf28      	it	cs
 800525e:	4613      	movcs	r3, r2
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4293      	cmp	r3, r2
 8005268:	bf28      	it	cs
 800526a:	4613      	movcs	r3, r2
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	6978      	ldr	r0, [r7, #20]
 800527e:	f002 f991 	bl	80075a4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005282:	6a3a      	ldr	r2, [r7, #32]
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	4413      	add	r3, r2
 8005288:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	4413      	add	r3, r2
 8005290:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	4413      	add	r3, r2
 80052a0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d101      	bne.n	80052b0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80052ac:	2300      	movs	r3, #0
 80052ae:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052b0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1b2      	bne.n	8005226 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80052c0:	6a3b      	ldr	r3, [r7, #32]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3728      	adds	r7, #40	; 0x28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b088      	sub	sp, #32
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d911      	bls.n	8005312 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	4413      	add	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	6938      	ldr	r0, [r7, #16]
 80052fe:	f002 f951 	bl	80075a4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005302:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	441a      	add	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005310:	e01f      	b.n	8005352 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	6938      	ldr	r0, [r7, #16]
 8005326:	f002 f93d 	bl	80075a4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	4413      	add	r3, r2
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4619      	mov	r1, r3
 8005342:	6938      	ldr	r0, [r7, #16]
 8005344:	f002 f92e 	bl	80075a4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005348:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	60da      	str	r2, [r3, #12]
}
 8005352:	bf00      	nop
 8005354:	3720      	adds	r7, #32
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800535a:	b480      	push	{r7}
 800535c:	b087      	sub	sp, #28
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	429a      	cmp	r2, r3
 8005374:	d808      	bhi.n	8005388 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad2      	subs	r2, r2, r3
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4413      	add	r3, r2
 8005382:	3b01      	subs	r3, #1
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	e004      	b.n	8005392 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005392:	697b      	ldr	r3, [r7, #20]
}
 8005394:	4618      	mov	r0, r3
 8005396:	371c      	adds	r7, #28
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08c      	sub	sp, #48	; 0x30
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80053ac:	4b3e      	ldr	r3, [pc, #248]	; (80054a8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80053ae:	623b      	str	r3, [r7, #32]
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b53      	cmp	r3, #83	; 0x53
 80053b8:	d001      	beq.n	80053be <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80053ba:	f7ff fecf 	bl	800515c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	4613      	mov	r3, r2
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	4413      	add	r3, r2
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	4a37      	ldr	r2, [pc, #220]	; (80054a8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80053cc:	4413      	add	r3, r2
 80053ce:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80053e0:	2300      	movs	r3, #0
 80053e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80053e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d92b      	bls.n	8005444 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4293      	cmp	r3, r2
 80053fc:	bf28      	it	cs
 80053fe:	4613      	movcs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	4413      	add	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	6939      	ldr	r1, [r7, #16]
 8005410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005412:	f002 f8c7 	bl	80075a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	4413      	add	r3, r2
 800541c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800541e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	4413      	add	r3, r2
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800542e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800543c:	429a      	cmp	r2, r3
 800543e:	d101      	bne.n	8005444 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005440:	2300      	movs	r3, #0
 8005442:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4293      	cmp	r3, r2
 8005452:	bf28      	it	cs
 8005454:	4613      	movcs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d019      	beq.n	8005492 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	4413      	add	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	6939      	ldr	r1, [r7, #16]
 800546c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800546e:	f002 f899 	bl	80075a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	4413      	add	r3, r2
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800547a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	4413      	add	r3, r2
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800548a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	4413      	add	r3, r2
 8005490:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800549c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3730      	adds	r7, #48	; 0x30
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20012f3c 	.word	0x20012f3c

080054ac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08c      	sub	sp, #48	; 0x30
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80054b8:	4b3e      	ldr	r3, [pc, #248]	; (80055b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80054ba:	623b      	str	r3, [r7, #32]
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b53      	cmp	r3, #83	; 0x53
 80054c4:	d001      	beq.n	80054ca <SEGGER_RTT_ReadNoLock+0x1e>
 80054c6:	f7ff fe49 	bl	800515c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4613      	mov	r3, r2
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	4413      	add	r3, r2
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	3360      	adds	r3, #96	; 0x60
 80054d6:	4a37      	ldr	r2, [pc, #220]	; (80055b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80054d8:	4413      	add	r3, r2
 80054da:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80054ec:	2300      	movs	r3, #0
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80054f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d92b      	bls.n	8005550 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4293      	cmp	r3, r2
 8005508:	bf28      	it	cs
 800550a:	4613      	movcs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	4413      	add	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	6939      	ldr	r1, [r7, #16]
 800551c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800551e:	f002 f841 	bl	80075a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	4413      	add	r3, r2
 8005528:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800552a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	4413      	add	r3, r2
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800553a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	4413      	add	r3, r2
 8005540:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005548:	429a      	cmp	r2, r3
 800554a:	d101      	bne.n	8005550 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800554c:	2300      	movs	r3, #0
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4293      	cmp	r3, r2
 800555e:	bf28      	it	cs
 8005560:	4613      	movcs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d019      	beq.n	800559e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	4413      	add	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	6939      	ldr	r1, [r7, #16]
 8005578:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800557a:	f002 f813 	bl	80075a4 <memcpy>
    NumBytesRead += NumBytesRem;
 800557e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	4413      	add	r3, r2
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	4413      	add	r3, r2
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	4413      	add	r3, r2
 800559c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3730      	adds	r7, #48	; 0x30
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20012f3c 	.word	0x20012f3c

080055b8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4613      	mov	r3, r2
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	4413      	add	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	3360      	adds	r3, #96	; 0x60
 80055d4:	4a1f      	ldr	r2, [pc, #124]	; (8005654 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80055d6:	4413      	add	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d029      	beq.n	8005636 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d82e      	bhi.n	8005644 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d013      	beq.n	8005616 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80055ee:	e029      	b.n	8005644 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80055f0:	6978      	ldr	r0, [r7, #20]
 80055f2:	f7ff feb2 	bl	800535a <_GetAvailWriteSpace>
 80055f6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d202      	bcs.n	8005606 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005600:	2300      	movs	r3, #0
 8005602:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005604:	e021      	b.n	800564a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	69b9      	ldr	r1, [r7, #24]
 800560e:	6978      	ldr	r0, [r7, #20]
 8005610:	f7ff fe5b 	bl	80052ca <_WriteNoCheck>
    break;
 8005614:	e019      	b.n	800564a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005616:	6978      	ldr	r0, [r7, #20]
 8005618:	f7ff fe9f 	bl	800535a <_GetAvailWriteSpace>
 800561c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	4293      	cmp	r3, r2
 8005624:	bf28      	it	cs
 8005626:	4613      	movcs	r3, r2
 8005628:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	69b9      	ldr	r1, [r7, #24]
 800562e:	6978      	ldr	r0, [r7, #20]
 8005630:	f7ff fe4b 	bl	80052ca <_WriteNoCheck>
    break;
 8005634:	e009      	b.n	800564a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	69b9      	ldr	r1, [r7, #24]
 800563a:	6978      	ldr	r0, [r7, #20]
 800563c:	f7ff fde8 	bl	8005210 <_WriteBlocking>
 8005640:	61f8      	str	r0, [r7, #28]
    break;
 8005642:	e002      	b.n	800564a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005644:	2300      	movs	r3, #0
 8005646:	61fb      	str	r3, [r7, #28]
    break;
 8005648:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800564a:	69fb      	ldr	r3, [r7, #28]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	20012f3c 	.word	0x20012f3c

08005658 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005664:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005666:	61fb      	str	r3, [r7, #28]
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b53      	cmp	r3, #83	; 0x53
 8005670:	d001      	beq.n	8005676 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005672:	f7ff fd73 	bl	800515c <_DoInit>
  SEGGER_RTT_LOCK();
 8005676:	f3ef 8311 	mrs	r3, BASEPRI
 800567a:	f04f 0120 	mov.w	r1, #32
 800567e:	f381 8811 	msr	BASEPRI, r1
 8005682:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7ff ff95 	bl	80055b8 <SEGGER_RTT_WriteDownBufferNoLock>
 800568e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005696:	697b      	ldr	r3, [r7, #20]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20012f3c 	.word	0x20012f3c

080056a4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80056b2:	4b3d      	ldr	r3, [pc, #244]	; (80057a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b53      	cmp	r3, #83	; 0x53
 80056be:	d001      	beq.n	80056c4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80056c0:	f7ff fd4c 	bl	800515c <_DoInit>
  SEGGER_RTT_LOCK();
 80056c4:	f3ef 8311 	mrs	r3, BASEPRI
 80056c8:	f04f 0120 	mov.w	r1, #32
 80056cc:	f381 8811 	msr	BASEPRI, r1
 80056d0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056d2:	4b35      	ldr	r3, [pc, #212]	; (80057a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80056d4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80056da:	6939      	ldr	r1, [r7, #16]
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	4613      	mov	r3, r2
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	4413      	add	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	440b      	add	r3, r1
 80056ea:	3304      	adds	r3, #4
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d008      	beq.n	8005704 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	3301      	adds	r3, #1
 80056f6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	429a      	cmp	r2, r3
 8005700:	dbeb      	blt.n	80056da <SEGGER_RTT_AllocUpBuffer+0x36>
 8005702:	e000      	b.n	8005706 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005704:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	429a      	cmp	r2, r3
 800570e:	da3f      	bge.n	8005790 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005710:	6939      	ldr	r1, [r7, #16]
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	4613      	mov	r3, r2
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	4413      	add	r3, r2
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	440b      	add	r3, r1
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005724:	6939      	ldr	r1, [r7, #16]
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	4613      	mov	r3, r2
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	4413      	add	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	440b      	add	r3, r1
 8005734:	3304      	adds	r3, #4
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800573a:	6939      	ldr	r1, [r7, #16]
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	4613      	mov	r3, r2
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	4413      	add	r3, r2
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	440b      	add	r3, r1
 8005748:	3320      	adds	r3, #32
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800574e:	6939      	ldr	r1, [r7, #16]
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	4613      	mov	r3, r2
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	4413      	add	r3, r2
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	440b      	add	r3, r1
 800575c:	3328      	adds	r3, #40	; 0x28
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005762:	6939      	ldr	r1, [r7, #16]
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	4613      	mov	r3, r2
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	4413      	add	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	440b      	add	r3, r1
 8005770:	3324      	adds	r3, #36	; 0x24
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005776:	6939      	ldr	r1, [r7, #16]
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	4613      	mov	r3, r2
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	4413      	add	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	440b      	add	r3, r1
 8005784:	332c      	adds	r3, #44	; 0x2c
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800578a:	f3bf 8f5f 	dmb	sy
 800578e:	e002      	b.n	8005796 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005794:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800579c:	69fb      	ldr	r3, [r7, #28]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3720      	adds	r7, #32
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20012f3c 	.word	0x20012f3c

080057ac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08a      	sub	sp, #40	; 0x28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80057ba:	4b21      	ldr	r3, [pc, #132]	; (8005840 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80057bc:	623b      	str	r3, [r7, #32]
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b53      	cmp	r3, #83	; 0x53
 80057c6:	d001      	beq.n	80057cc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80057c8:	f7ff fcc8 	bl	800515c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057cc:	4b1c      	ldr	r3, [pc, #112]	; (8005840 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80057ce:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d82c      	bhi.n	8005830 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80057d6:	f3ef 8311 	mrs	r3, BASEPRI
 80057da:	f04f 0120 	mov.w	r1, #32
 80057de:	f381 8811 	msr	BASEPRI, r1
 80057e2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4613      	mov	r3, r2
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	4413      	add	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	3360      	adds	r3, #96	; 0x60
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	4413      	add	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00e      	beq.n	800581a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2200      	movs	r2, #0
 8005812:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2200      	movs	r2, #0
 8005818:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800581e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005820:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800582a:	2300      	movs	r3, #0
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
 800582e:	e002      	b.n	8005836 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005838:	4618      	mov	r0, r3
 800583a:	3728      	adds	r7, #40	; 0x28
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	20012f3c 	.word	0x20012f3c

08005844 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	60fa      	str	r2, [r7, #12]
 800585a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b80      	cmp	r3, #128	; 0x80
 8005860:	d90a      	bls.n	8005878 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005862:	2380      	movs	r3, #128	; 0x80
 8005864:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005866:	e007      	b.n	8005878 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	1c53      	adds	r3, r2, #1
 800586c:	60bb      	str	r3, [r7, #8]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1c59      	adds	r1, r3, #1
 8005872:	60f9      	str	r1, [r7, #12]
 8005874:	7812      	ldrb	r2, [r2, #0]
 8005876:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	1e5a      	subs	r2, r3, #1
 800587c:	607a      	str	r2, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <_EncodeStr+0x46>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1ee      	bne.n	8005868 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	b2da      	uxtb	r2, r3
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005896:	68fb      	ldr	r3, [r7, #12]
}
 8005898:	4618      	mov	r0, r3
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3307      	adds	r3, #7
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058c2:	4b35      	ldr	r3, [pc, #212]	; (8005998 <_HandleIncomingPacket+0xdc>)
 80058c4:	7e1b      	ldrb	r3, [r3, #24]
 80058c6:	4618      	mov	r0, r3
 80058c8:	1cfb      	adds	r3, r7, #3
 80058ca:	2201      	movs	r2, #1
 80058cc:	4619      	mov	r1, r3
 80058ce:	f7ff fded 	bl	80054ac <SEGGER_RTT_ReadNoLock>
 80058d2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d052      	beq.n	8005980 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	2b80      	cmp	r3, #128	; 0x80
 80058de:	d031      	beq.n	8005944 <_HandleIncomingPacket+0x88>
 80058e0:	2b80      	cmp	r3, #128	; 0x80
 80058e2:	dc40      	bgt.n	8005966 <_HandleIncomingPacket+0xaa>
 80058e4:	2b07      	cmp	r3, #7
 80058e6:	dc15      	bgt.n	8005914 <_HandleIncomingPacket+0x58>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	dd3c      	ble.n	8005966 <_HandleIncomingPacket+0xaa>
 80058ec:	3b01      	subs	r3, #1
 80058ee:	2b06      	cmp	r3, #6
 80058f0:	d839      	bhi.n	8005966 <_HandleIncomingPacket+0xaa>
 80058f2:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <_HandleIncomingPacket+0x3c>)
 80058f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f8:	0800591b 	.word	0x0800591b
 80058fc:	08005921 	.word	0x08005921
 8005900:	08005927 	.word	0x08005927
 8005904:	0800592d 	.word	0x0800592d
 8005908:	08005933 	.word	0x08005933
 800590c:	08005939 	.word	0x08005939
 8005910:	0800593f 	.word	0x0800593f
 8005914:	2b7f      	cmp	r3, #127	; 0x7f
 8005916:	d035      	beq.n	8005984 <_HandleIncomingPacket+0xc8>
 8005918:	e025      	b.n	8005966 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800591a:	f000 fff5 	bl	8006908 <SEGGER_SYSVIEW_Start>
      break;
 800591e:	e036      	b.n	800598e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005920:	f001 f8ae 	bl	8006a80 <SEGGER_SYSVIEW_Stop>
      break;
 8005924:	e033      	b.n	800598e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005926:	f001 fa87 	bl	8006e38 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800592a:	e030      	b.n	800598e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800592c:	f001 fa4c 	bl	8006dc8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005930:	e02d      	b.n	800598e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005932:	f001 f8cb 	bl	8006acc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005936:	e02a      	b.n	800598e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005938:	f001 fd24 	bl	8007384 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800593c:	e027      	b.n	800598e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800593e:	f001 fd03 	bl	8007348 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005942:	e024      	b.n	800598e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005944:	4b14      	ldr	r3, [pc, #80]	; (8005998 <_HandleIncomingPacket+0xdc>)
 8005946:	7e1b      	ldrb	r3, [r3, #24]
 8005948:	4618      	mov	r0, r3
 800594a:	1cfb      	adds	r3, r7, #3
 800594c:	2201      	movs	r2, #1
 800594e:	4619      	mov	r1, r3
 8005950:	f7ff fdac 	bl	80054ac <SEGGER_RTT_ReadNoLock>
 8005954:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d015      	beq.n	8005988 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	4618      	mov	r0, r3
 8005960:	f001 fc68 	bl	8007234 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005964:	e010      	b.n	8005988 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005966:	78fb      	ldrb	r3, [r7, #3]
 8005968:	b25b      	sxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	da0e      	bge.n	800598c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800596e:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <_HandleIncomingPacket+0xdc>)
 8005970:	7e1b      	ldrb	r3, [r3, #24]
 8005972:	4618      	mov	r0, r3
 8005974:	1cfb      	adds	r3, r7, #3
 8005976:	2201      	movs	r2, #1
 8005978:	4619      	mov	r1, r3
 800597a:	f7ff fd97 	bl	80054ac <SEGGER_RTT_ReadNoLock>
      }
      break;
 800597e:	e005      	b.n	800598c <_HandleIncomingPacket+0xd0>
    }
  }
 8005980:	bf00      	nop
 8005982:	e004      	b.n	800598e <_HandleIncomingPacket+0xd2>
      break;
 8005984:	bf00      	nop
 8005986:	e002      	b.n	800598e <_HandleIncomingPacket+0xd2>
      break;
 8005988:	bf00      	nop
 800598a:	e000      	b.n	800598e <_HandleIncomingPacket+0xd2>
      break;
 800598c:	bf00      	nop
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	200143fc 	.word	0x200143fc

0800599c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b08c      	sub	sp, #48	; 0x30
 80059a0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80059a2:	2301      	movs	r3, #1
 80059a4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80059a6:	1d3b      	adds	r3, r7, #4
 80059a8:	3301      	adds	r3, #1
 80059aa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b0:	4b32      	ldr	r3, [pc, #200]	; (8005a7c <_TrySendOverflowPacket+0xe0>)
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b6:	e00b      	b.n	80059d0 <_TrySendOverflowPacket+0x34>
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059be:	1c59      	adds	r1, r3, #1
 80059c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	09db      	lsrs	r3, r3, #7
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	2b7f      	cmp	r3, #127	; 0x7f
 80059d4:	d8f0      	bhi.n	80059b8 <_TrySendOverflowPacket+0x1c>
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80059e6:	4b26      	ldr	r3, [pc, #152]	; (8005a80 <_TrySendOverflowPacket+0xe4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80059ec:	4b23      	ldr	r3, [pc, #140]	; (8005a7c <_TrySendOverflowPacket+0xe0>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	623b      	str	r3, [r7, #32]
 80059fe:	e00b      	b.n	8005a18 <_TrySendOverflowPacket+0x7c>
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	1c59      	adds	r1, r3, #1
 8005a08:	6279      	str	r1, [r7, #36]	; 0x24
 8005a0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	09db      	lsrs	r3, r3, #7
 8005a16:	623b      	str	r3, [r7, #32]
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a1c:	d8f0      	bhi.n	8005a00 <_TrySendOverflowPacket+0x64>
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	627a      	str	r2, [r7, #36]	; 0x24
 8005a24:	6a3a      	ldr	r2, [r7, #32]
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005a2e:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <_TrySendOverflowPacket+0xe0>)
 8005a30:	785b      	ldrb	r3, [r3, #1]
 8005a32:	4618      	mov	r0, r3
 8005a34:	1d3b      	adds	r3, r7, #4
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	1d3b      	adds	r3, r7, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	f7fa fbe6 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a44:	4603      	mov	r3, r0
 8005a46:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005a48:	f7ff fafe 	bl	8005048 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a52:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <_TrySendOverflowPacket+0xe0>)
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005a58:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <_TrySendOverflowPacket+0xe0>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <_TrySendOverflowPacket+0xe0>)
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	e004      	b.n	8005a70 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005a66:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <_TrySendOverflowPacket+0xe0>)
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	4a03      	ldr	r2, [pc, #12]	; (8005a7c <_TrySendOverflowPacket+0xe0>)
 8005a6e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005a70:	693b      	ldr	r3, [r7, #16]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3730      	adds	r7, #48	; 0x30
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	200143fc 	.word	0x200143fc
 8005a80:	e0001004 	.word	0xe0001004

08005a84 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08a      	sub	sp, #40	; 0x28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005a90:	4b96      	ldr	r3, [pc, #600]	; (8005cec <_SendPacket+0x268>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d010      	beq.n	8005aba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005a98:	4b94      	ldr	r3, [pc, #592]	; (8005cec <_SendPacket+0x268>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8130 	beq.w	8005d02 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005aa2:	4b92      	ldr	r3, [pc, #584]	; (8005cec <_SendPacket+0x268>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d109      	bne.n	8005abe <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005aaa:	f7ff ff77 	bl	800599c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005aae:	4b8f      	ldr	r3, [pc, #572]	; (8005cec <_SendPacket+0x268>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	f040 8127 	bne.w	8005d06 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005ab8:	e001      	b.n	8005abe <_SendPacket+0x3a>
    goto Send;
 8005aba:	bf00      	nop
 8005abc:	e000      	b.n	8005ac0 <_SendPacket+0x3c>
Send:
 8005abe:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b1f      	cmp	r3, #31
 8005ac4:	d809      	bhi.n	8005ada <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005ac6:	4b89      	ldr	r3, [pc, #548]	; (8005cec <_SendPacket+0x268>)
 8005ac8:	69da      	ldr	r2, [r3, #28]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f040 8118 	bne.w	8005d0a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b17      	cmp	r3, #23
 8005ade:	d807      	bhi.n	8005af0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e0c4      	b.n	8005c7a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	2b7f      	cmp	r3, #127	; 0x7f
 8005afc:	d912      	bls.n	8005b24 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	09da      	lsrs	r2, r3, #7
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	3a01      	subs	r2, #1
 8005b16:	60fa      	str	r2, [r7, #12]
 8005b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	e006      	b.n	8005b32 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b7e      	cmp	r3, #126	; 0x7e
 8005b36:	d807      	bhi.n	8005b48 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	e098      	b.n	8005c7a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b4e:	d212      	bcs.n	8005b76 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	09da      	lsrs	r2, r3, #7
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	3a01      	subs	r2, #1
 8005b68:	60fa      	str	r2, [r7, #12]
 8005b6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	e081      	b.n	8005c7a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b7c:	d21d      	bcs.n	8005bba <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	0b9a      	lsrs	r2, r3, #14
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	09db      	lsrs	r3, r3, #7
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	3a01      	subs	r2, #1
 8005b98:	60fa      	str	r2, [r7, #12]
 8005b9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	3a01      	subs	r2, #1
 8005bac:	60fa      	str	r2, [r7, #12]
 8005bae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	e05f      	b.n	8005c7a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bc0:	d228      	bcs.n	8005c14 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	0d5a      	lsrs	r2, r3, #21
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	0b9b      	lsrs	r3, r3, #14
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	3a01      	subs	r2, #1
 8005bdc:	60fa      	str	r2, [r7, #12]
 8005bde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	09db      	lsrs	r3, r3, #7
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	3a01      	subs	r2, #1
 8005bf2:	60fa      	str	r2, [r7, #12]
 8005bf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	3a01      	subs	r2, #1
 8005c06:	60fa      	str	r2, [r7, #12]
 8005c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e032      	b.n	8005c7a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	0f1a      	lsrs	r2, r3, #28
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	0d5b      	lsrs	r3, r3, #21
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	3a01      	subs	r2, #1
 8005c2e:	60fa      	str	r2, [r7, #12]
 8005c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	0b9b      	lsrs	r3, r3, #14
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	3a01      	subs	r2, #1
 8005c44:	60fa      	str	r2, [r7, #12]
 8005c46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	09db      	lsrs	r3, r3, #7
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	3a01      	subs	r2, #1
 8005c5a:	60fa      	str	r2, [r7, #12]
 8005c5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	3a01      	subs	r2, #1
 8005c6e:	60fa      	str	r2, [r7, #12]
 8005c70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c7a:	4b1d      	ldr	r3, [pc, #116]	; (8005cf0 <_SendPacket+0x26c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005c80:	4b1a      	ldr	r3, [pc, #104]	; (8005cec <_SendPacket+0x268>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	623b      	str	r3, [r7, #32]
 8005c92:	e00b      	b.n	8005cac <_SendPacket+0x228>
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	1c59      	adds	r1, r3, #1
 8005c9c:	6279      	str	r1, [r7, #36]	; 0x24
 8005c9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	09db      	lsrs	r3, r3, #7
 8005caa:	623b      	str	r3, [r7, #32]
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	2b7f      	cmp	r3, #127	; 0x7f
 8005cb0:	d8f0      	bhi.n	8005c94 <_SendPacket+0x210>
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	627a      	str	r2, [r7, #36]	; 0x24
 8005cb8:	6a3a      	ldr	r2, [r7, #32]
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005cc2:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <_SendPacket+0x268>)
 8005cc4:	785b      	ldrb	r3, [r3, #1]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	68f9      	ldr	r1, [r7, #12]
 8005cd2:	f7fa fa9d 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005cd6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005cd8:	f7ff f9b6 	bl	8005048 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d008      	beq.n	8005cf4 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005ce2:	4a02      	ldr	r2, [pc, #8]	; (8005cec <_SendPacket+0x268>)
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	60d3      	str	r3, [r2, #12]
 8005ce8:	e010      	b.n	8005d0c <_SendPacket+0x288>
 8005cea:	bf00      	nop
 8005cec:	200143fc 	.word	0x200143fc
 8005cf0:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005cf4:	4b19      	ldr	r3, [pc, #100]	; (8005d5c <_SendPacket+0x2d8>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <_SendPacket+0x2d8>)
 8005cfe:	701a      	strb	r2, [r3, #0]
 8005d00:	e004      	b.n	8005d0c <_SendPacket+0x288>
    goto SendDone;
 8005d02:	bf00      	nop
 8005d04:	e002      	b.n	8005d0c <_SendPacket+0x288>
      goto SendDone;
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <_SendPacket+0x288>
      goto SendDone;
 8005d0a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005d0c:	4b13      	ldr	r3, [pc, #76]	; (8005d5c <_SendPacket+0x2d8>)
 8005d0e:	7e1b      	ldrb	r3, [r3, #24]
 8005d10:	4619      	mov	r1, r3
 8005d12:	4a13      	ldr	r2, [pc, #76]	; (8005d60 <_SendPacket+0x2dc>)
 8005d14:	460b      	mov	r3, r1
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	440b      	add	r3, r1
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	336c      	adds	r3, #108	; 0x6c
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <_SendPacket+0x2d8>)
 8005d24:	7e1b      	ldrb	r3, [r3, #24]
 8005d26:	4618      	mov	r0, r3
 8005d28:	490d      	ldr	r1, [pc, #52]	; (8005d60 <_SendPacket+0x2dc>)
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	4403      	add	r3, r0
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	440b      	add	r3, r1
 8005d34:	3370      	adds	r3, #112	; 0x70
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d00b      	beq.n	8005d54 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005d3c:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <_SendPacket+0x2d8>)
 8005d3e:	789b      	ldrb	r3, [r3, #2]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d107      	bne.n	8005d54 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <_SendPacket+0x2d8>)
 8005d46:	2201      	movs	r2, #1
 8005d48:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005d4a:	f7ff fdb7 	bl	80058bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005d4e:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <_SendPacket+0x2d8>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005d54:	bf00      	nop
 8005d56:	3728      	adds	r7, #40	; 0x28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	200143fc 	.word	0x200143fc
 8005d60:	20012f3c 	.word	0x20012f3c

08005d64 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08a      	sub	sp, #40	; 0x28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d80a      	bhi.n	8005d94 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	1c59      	adds	r1, r3, #1
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6051      	str	r1, [r2, #4]
 8005d88:	78fa      	ldrb	r2, [r7, #3]
 8005d8a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b80      	cmp	r3, #128	; 0x80
 8005d9a:	d15a      	bne.n	8005e52 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691a      	ldr	r2, [r3, #16]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	623b      	str	r3, [r7, #32]
 8005dbc:	e00b      	b.n	8005dd6 <_StoreChar+0x72>
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	1c59      	adds	r1, r3, #1
 8005dc6:	6279      	str	r1, [r7, #36]	; 0x24
 8005dc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	09db      	lsrs	r3, r3, #7
 8005dd4:	623b      	str	r3, [r7, #32]
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8005dda:	d8f0      	bhi.n	8005dbe <_StoreChar+0x5a>
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	627a      	str	r2, [r7, #36]	; 0x24
 8005de2:	6a3a      	ldr	r2, [r7, #32]
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	e00b      	b.n	8005e0e <_StoreChar+0xaa>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	1c59      	adds	r1, r3, #1
 8005dfe:	61f9      	str	r1, [r7, #28]
 8005e00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	09db      	lsrs	r3, r3, #7
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b7f      	cmp	r3, #127	; 0x7f
 8005e12:	d8f0      	bhi.n	8005df6 <_StoreChar+0x92>
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	61fa      	str	r2, [r7, #28]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	221a      	movs	r2, #26
 8005e2a:	6939      	ldr	r1, [r7, #16]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff fe29 	bl	8005a84 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff fd34 	bl	80058a4 <_PreparePacket>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	611a      	str	r2, [r3, #16]
  }
}
 8005e52:	bf00      	nop
 8005e54:	3728      	adds	r7, #40	; 0x28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	; 0x28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005e72:	2301      	movs	r3, #1
 8005e74:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005e76:	e007      	b.n	8005e88 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005e78:	6a3a      	ldr	r2, [r7, #32]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	623b      	str	r3, [r7, #32]
    Width++;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	3301      	adds	r3, #1
 8005e86:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005e88:	6a3a      	ldr	r2, [r7, #32]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d2f3      	bcs.n	8005e78 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d901      	bls.n	8005e9c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d11f      	bne.n	8005ee6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01c      	beq.n	8005ee6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <_PrintUnsigned+0x66>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <_PrintUnsigned+0x66>
        c = '0';
 8005ebc:	2330      	movs	r3, #48	; 0x30
 8005ebe:	76fb      	strb	r3, [r7, #27]
 8005ec0:	e001      	b.n	8005ec6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005ec2:	2320      	movs	r3, #32
 8005ec4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ec6:	e007      	b.n	8005ed8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005ece:	7efb      	ldrb	r3, [r7, #27]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f7ff ff46 	bl	8005d64 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <_PrintUnsigned+0x8a>
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d3f0      	bcc.n	8005ec8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d903      	bls.n	8005ef4 <_PrintUnsigned+0x98>
      NumDigits--;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	603b      	str	r3, [r7, #0]
 8005ef2:	e009      	b.n	8005f08 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d200      	bcs.n	8005f08 <_PrintUnsigned+0xac>
        break;
 8005f06:	e005      	b.n	8005f14 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	fb02 f303 	mul.w	r3, r2, r3
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005f12:	e7e8      	b.n	8005ee6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005f2c:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <_PrintUnsigned+0x128>)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	4413      	add	r3, r2
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	4619      	mov	r1, r3
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7ff ff14 	bl	8005d64 <_StoreChar>
    Digit /= Base;
 8005f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e3      	bne.n	8005f14 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d011      	beq.n	8005f7a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00e      	beq.n	8005f7a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f5c:	e006      	b.n	8005f6c <_PrintUnsigned+0x110>
        FieldWidth--;
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	3b01      	subs	r3, #1
 8005f62:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005f64:	2120      	movs	r1, #32
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff fefc 	bl	8005d64 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <_PrintUnsigned+0x11e>
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d3f1      	bcc.n	8005f5e <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005f7a:	bf00      	nop
 8005f7c:	3728      	adds	r7, #40	; 0x28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	08008054 	.word	0x08008054

08005f88 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	bfb8      	it	lt
 8005f9c:	425b      	neglt	r3, r3
 8005f9e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005fa4:	e007      	b.n	8005fb6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8005fae:	613b      	str	r3, [r7, #16]
    Width++;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	daf3      	bge.n	8005fa6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d901      	bls.n	8005fca <_PrintInt+0x42>
    Width = NumDigits;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <_PrintInt+0x5e>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	db04      	blt.n	8005fe0 <_PrintInt+0x58>
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <_PrintInt+0x5e>
    FieldWidth--;
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <_PrintInt+0x6e>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d016      	beq.n	8006024 <_PrintInt+0x9c>
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d111      	bne.n	8006024 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00e      	beq.n	8006024 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006006:	e006      	b.n	8006016 <_PrintInt+0x8e>
        FieldWidth--;
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	3b01      	subs	r3, #1
 800600c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800600e:	2120      	movs	r1, #32
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff fea7 	bl	8005d64 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <_PrintInt+0x9c>
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	429a      	cmp	r2, r3
 8006022:	d3f1      	bcc.n	8006008 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	da07      	bge.n	800603a <_PrintInt+0xb2>
    v = -v;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	425b      	negs	r3, r3
 800602e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006030:	212d      	movs	r1, #45	; 0x2d
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff fe96 	bl	8005d64 <_StoreChar>
 8006038:	e008      	b.n	800604c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006044:	212b      	movs	r1, #43	; 0x2b
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff fe8c 	bl	8005d64 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d019      	beq.n	800608a <_PrintInt+0x102>
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d114      	bne.n	800608a <_PrintInt+0x102>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d111      	bne.n	800608a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00e      	beq.n	800608a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800606c:	e006      	b.n	800607c <_PrintInt+0xf4>
        FieldWidth--;
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	3b01      	subs	r3, #1
 8006072:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006074:	2130      	movs	r1, #48	; 0x30
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f7ff fe74 	bl	8005d64 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <_PrintInt+0x102>
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	429a      	cmp	r2, r3
 8006088:	d3f1      	bcc.n	800606e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	9301      	str	r3, [sp, #4]
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7ff fedf 	bl	8005e5c <_PrintUnsigned>
}
 800609e:	bf00      	nop
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b098      	sub	sp, #96	; 0x60
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80060b4:	f3ef 8311 	mrs	r3, BASEPRI
 80060b8:	f04f 0120 	mov.w	r1, #32
 80060bc:	f381 8811 	msr	BASEPRI, r1
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c2:	48b7      	ldr	r0, [pc, #732]	; (80063a0 <_VPrintTarget+0x2f8>)
 80060c4:	f7ff fbee 	bl	80058a4 <_PreparePacket>
 80060c8:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80060ca:	4bb5      	ldr	r3, [pc, #724]	; (80063a0 <_VPrintTarget+0x2f8>)
 80060cc:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80060ce:	2300      	movs	r3, #0
 80060d0:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	3301      	adds	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3301      	adds	r3, #1
 80060ec:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80060ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 81a8 	beq.w	8006448 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80060f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060fc:	2b25      	cmp	r3, #37	; 0x25
 80060fe:	f040 8195 	bne.w	800642c <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006102:	2300      	movs	r3, #0
 8006104:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006106:	2301      	movs	r3, #1
 8006108:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006112:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006116:	3b23      	subs	r3, #35	; 0x23
 8006118:	2b0d      	cmp	r3, #13
 800611a:	d83f      	bhi.n	800619c <_VPrintTarget+0xf4>
 800611c:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <_VPrintTarget+0x7c>)
 800611e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006122:	bf00      	nop
 8006124:	0800618d 	.word	0x0800618d
 8006128:	0800619d 	.word	0x0800619d
 800612c:	0800619d 	.word	0x0800619d
 8006130:	0800619d 	.word	0x0800619d
 8006134:	0800619d 	.word	0x0800619d
 8006138:	0800619d 	.word	0x0800619d
 800613c:	0800619d 	.word	0x0800619d
 8006140:	0800619d 	.word	0x0800619d
 8006144:	0800617d 	.word	0x0800617d
 8006148:	0800619d 	.word	0x0800619d
 800614c:	0800615d 	.word	0x0800615d
 8006150:	0800619d 	.word	0x0800619d
 8006154:	0800619d 	.word	0x0800619d
 8006158:	0800616d 	.word	0x0800616d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800615c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	64bb      	str	r3, [r7, #72]	; 0x48
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3301      	adds	r3, #1
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	e01a      	b.n	80061a2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800616c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800616e:	f043 0302 	orr.w	r3, r3, #2
 8006172:	64bb      	str	r3, [r7, #72]	; 0x48
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3301      	adds	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	e012      	b.n	80061a2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800617c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800617e:	f043 0304 	orr.w	r3, r3, #4
 8006182:	64bb      	str	r3, [r7, #72]	; 0x48
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3301      	adds	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	e00a      	b.n	80061a2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800618c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800618e:	f043 0308 	orr.w	r3, r3, #8
 8006192:	64bb      	str	r3, [r7, #72]	; 0x48
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3301      	adds	r3, #1
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	e002      	b.n	80061a2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800619c:	2300      	movs	r3, #0
 800619e:	653b      	str	r3, [r7, #80]	; 0x50
 80061a0:	bf00      	nop
        }
      } while (v);
 80061a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1b0      	bne.n	800610a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80061a8:	2300      	movs	r3, #0
 80061aa:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80061b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061b8:	2b2f      	cmp	r3, #47	; 0x2f
 80061ba:	d912      	bls.n	80061e2 <_VPrintTarget+0x13a>
 80061bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061c0:	2b39      	cmp	r3, #57	; 0x39
 80061c2:	d80e      	bhi.n	80061e2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80061ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	461a      	mov	r2, r3
 80061d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061da:	4413      	add	r3, r2
 80061dc:	3b30      	subs	r3, #48	; 0x30
 80061de:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80061e0:	e7e4      	b.n	80061ac <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80061e2:	2300      	movs	r3, #0
 80061e4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80061ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061f2:	2b2e      	cmp	r3, #46	; 0x2e
 80061f4:	d11d      	bne.n	8006232 <_VPrintTarget+0x18a>
        sFormat++;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3301      	adds	r3, #1
 80061fa:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006204:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006208:	2b2f      	cmp	r3, #47	; 0x2f
 800620a:	d912      	bls.n	8006232 <_VPrintTarget+0x18a>
 800620c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006210:	2b39      	cmp	r3, #57	; 0x39
 8006212:	d80e      	bhi.n	8006232 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3301      	adds	r3, #1
 8006218:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800621a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	461a      	mov	r2, r3
 8006226:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800622a:	4413      	add	r3, r2
 800622c:	3b30      	subs	r3, #48	; 0x30
 800622e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006230:	e7e4      	b.n	80061fc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800623a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800623e:	2b6c      	cmp	r3, #108	; 0x6c
 8006240:	d003      	beq.n	800624a <_VPrintTarget+0x1a2>
 8006242:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006246:	2b68      	cmp	r3, #104	; 0x68
 8006248:	d107      	bne.n	800625a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3301      	adds	r3, #1
 8006256:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006258:	e7ef      	b.n	800623a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800625a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800625e:	2b25      	cmp	r3, #37	; 0x25
 8006260:	f000 80d8 	beq.w	8006414 <_VPrintTarget+0x36c>
 8006264:	2b25      	cmp	r3, #37	; 0x25
 8006266:	f2c0 80dc 	blt.w	8006422 <_VPrintTarget+0x37a>
 800626a:	2b78      	cmp	r3, #120	; 0x78
 800626c:	f300 80d9 	bgt.w	8006422 <_VPrintTarget+0x37a>
 8006270:	2b58      	cmp	r3, #88	; 0x58
 8006272:	f2c0 80d6 	blt.w	8006422 <_VPrintTarget+0x37a>
 8006276:	3b58      	subs	r3, #88	; 0x58
 8006278:	2b20      	cmp	r3, #32
 800627a:	f200 80d2 	bhi.w	8006422 <_VPrintTarget+0x37a>
 800627e:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <_VPrintTarget+0x1dc>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	0800637b 	.word	0x0800637b
 8006288:	08006423 	.word	0x08006423
 800628c:	08006423 	.word	0x08006423
 8006290:	08006423 	.word	0x08006423
 8006294:	08006423 	.word	0x08006423
 8006298:	08006423 	.word	0x08006423
 800629c:	08006423 	.word	0x08006423
 80062a0:	08006423 	.word	0x08006423
 80062a4:	08006423 	.word	0x08006423
 80062a8:	08006423 	.word	0x08006423
 80062ac:	08006423 	.word	0x08006423
 80062b0:	08006309 	.word	0x08006309
 80062b4:	0800632f 	.word	0x0800632f
 80062b8:	08006423 	.word	0x08006423
 80062bc:	08006423 	.word	0x08006423
 80062c0:	08006423 	.word	0x08006423
 80062c4:	08006423 	.word	0x08006423
 80062c8:	08006423 	.word	0x08006423
 80062cc:	08006423 	.word	0x08006423
 80062d0:	08006423 	.word	0x08006423
 80062d4:	08006423 	.word	0x08006423
 80062d8:	08006423 	.word	0x08006423
 80062dc:	08006423 	.word	0x08006423
 80062e0:	08006423 	.word	0x08006423
 80062e4:	080063ef 	.word	0x080063ef
 80062e8:	08006423 	.word	0x08006423
 80062ec:	08006423 	.word	0x08006423
 80062f0:	080063a5 	.word	0x080063a5
 80062f4:	08006423 	.word	0x08006423
 80062f8:	08006355 	.word	0x08006355
 80062fc:	08006423 	.word	0x08006423
 8006300:	08006423 	.word	0x08006423
 8006304:	0800637b 	.word	0x0800637b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	1d19      	adds	r1, r3, #4
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6011      	str	r1, [r2, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 800631c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006320:	f107 0310 	add.w	r3, r7, #16
 8006324:	4611      	mov	r1, r2
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fd1c 	bl	8005d64 <_StoreChar>
        break;
 800632c:	e07a      	b.n	8006424 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	1d19      	adds	r1, r3, #4
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6011      	str	r1, [r2, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800633c:	f107 0010 	add.w	r0, r7, #16
 8006340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800634a:	220a      	movs	r2, #10
 800634c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800634e:	f7ff fe1b 	bl	8005f88 <_PrintInt>
        break;
 8006352:	e067      	b.n	8006424 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	1d19      	adds	r1, r3, #4
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6011      	str	r1, [r2, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006362:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006364:	f107 0010 	add.w	r0, r7, #16
 8006368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800636a:	9301      	str	r3, [sp, #4]
 800636c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006372:	220a      	movs	r2, #10
 8006374:	f7ff fd72 	bl	8005e5c <_PrintUnsigned>
        break;
 8006378:	e054      	b.n	8006424 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	1d19      	adds	r1, r3, #4
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6011      	str	r1, [r2, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006388:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800638a:	f107 0010 	add.w	r0, r7, #16
 800638e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006398:	2210      	movs	r2, #16
 800639a:	f7ff fd5f 	bl	8005e5c <_PrintUnsigned>
        break;
 800639e:	e041      	b.n	8006424 <_VPrintTarget+0x37c>
 80063a0:	2001442c 	.word	0x2001442c
      case 's':
        s = va_arg(*pParamList, const char*);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	1d19      	adds	r1, r3, #4
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6011      	str	r1, [r2, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 80063b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <_VPrintTarget+0x314>
          s = "(null)";
 80063b8:	4b4a      	ldr	r3, [pc, #296]	; (80064e4 <_VPrintTarget+0x43c>)
 80063ba:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 80063bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 80063c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c6:	3301      	adds	r3, #1
 80063c8:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 80063ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00b      	beq.n	80063ea <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80063d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80063d6:	f107 0310 	add.w	r3, r7, #16
 80063da:	4611      	mov	r1, r2
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff fcc1 	bl	8005d64 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	2b7f      	cmp	r3, #127	; 0x7f
 80063e6:	d9e9      	bls.n	80063bc <_VPrintTarget+0x314>
        break;
 80063e8:	e01c      	b.n	8006424 <_VPrintTarget+0x37c>
            break;
 80063ea:	bf00      	nop
        break;
 80063ec:	e01a      	b.n	8006424 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	1d19      	adds	r1, r3, #4
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6011      	str	r1, [r2, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80063fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063fe:	f107 0010 	add.w	r0, r7, #16
 8006402:	2300      	movs	r3, #0
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	2308      	movs	r3, #8
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	2308      	movs	r3, #8
 800640c:	2210      	movs	r2, #16
 800640e:	f7ff fd25 	bl	8005e5c <_PrintUnsigned>
        break;
 8006412:	e007      	b.n	8006424 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006414:	f107 0310 	add.w	r3, r7, #16
 8006418:	2125      	movs	r1, #37	; 0x25
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff fca2 	bl	8005d64 <_StoreChar>
        break;
 8006420:	e000      	b.n	8006424 <_VPrintTarget+0x37c>
      default:
        break;
 8006422:	bf00      	nop
      }
      sFormat++;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	e007      	b.n	800643c <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 800642c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006430:	f107 0310 	add.w	r3, r7, #16
 8006434:	4611      	mov	r1, r2
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff fc94 	bl	8005d64 <_StoreChar>
    }
  } while (*sFormat);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	f47f ae4d 	bne.w	80060e0 <_VPrintTarget+0x38>
 8006446:	e000      	b.n	800644a <_VPrintTarget+0x3a2>
      break;
 8006448:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d041      	beq.n	80064d4 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006450:	6a3a      	ldr	r2, [r7, #32]
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006460:	e00b      	b.n	800647a <_VPrintTarget+0x3d2>
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	b2da      	uxtb	r2, r3
 8006466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006468:	1c59      	adds	r1, r3, #1
 800646a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800646c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	701a      	strb	r2, [r3, #0]
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	09db      	lsrs	r3, r3, #7
 8006478:	63bb      	str	r3, [r7, #56]	; 0x38
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	2b7f      	cmp	r3, #127	; 0x7f
 800647e:	d8f0      	bhi.n	8006462 <_VPrintTarget+0x3ba>
 8006480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648e:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	637b      	str	r3, [r7, #52]	; 0x34
 8006494:	2300      	movs	r3, #0
 8006496:	633b      	str	r3, [r7, #48]	; 0x30
 8006498:	e00b      	b.n	80064b2 <_VPrintTarget+0x40a>
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	b2da      	uxtb	r2, r3
 800649e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a0:	1c59      	adds	r1, r3, #1
 80064a2:	6379      	str	r1, [r7, #52]	; 0x34
 80064a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	09db      	lsrs	r3, r3, #7
 80064b0:	633b      	str	r3, [r7, #48]	; 0x30
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	2b7f      	cmp	r3, #127	; 0x7f
 80064b6:	d8f0      	bhi.n	800649a <_VPrintTarget+0x3f2>
 80064b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	637a      	str	r2, [r7, #52]	; 0x34
 80064be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c6:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	6979      	ldr	r1, [r7, #20]
 80064cc:	221a      	movs	r2, #26
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff fad8 	bl	8005a84 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80064da:	bf00      	nop
 80064dc:	3758      	adds	r7, #88	; 0x58
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	08008000 	.word	0x08008000

080064e8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80064f6:	2300      	movs	r3, #0
 80064f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064fc:	4917      	ldr	r1, [pc, #92]	; (800655c <SEGGER_SYSVIEW_Init+0x74>)
 80064fe:	4818      	ldr	r0, [pc, #96]	; (8006560 <SEGGER_SYSVIEW_Init+0x78>)
 8006500:	f7ff f8d0 	bl	80056a4 <SEGGER_RTT_AllocUpBuffer>
 8006504:	4603      	mov	r3, r0
 8006506:	b2da      	uxtb	r2, r3
 8006508:	4b16      	ldr	r3, [pc, #88]	; (8006564 <SEGGER_SYSVIEW_Init+0x7c>)
 800650a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800650c:	4b15      	ldr	r3, [pc, #84]	; (8006564 <SEGGER_SYSVIEW_Init+0x7c>)
 800650e:	785a      	ldrb	r2, [r3, #1]
 8006510:	4b14      	ldr	r3, [pc, #80]	; (8006564 <SEGGER_SYSVIEW_Init+0x7c>)
 8006512:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006514:	4b13      	ldr	r3, [pc, #76]	; (8006564 <SEGGER_SYSVIEW_Init+0x7c>)
 8006516:	7e1b      	ldrb	r3, [r3, #24]
 8006518:	4618      	mov	r0, r3
 800651a:	2300      	movs	r3, #0
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	2308      	movs	r3, #8
 8006520:	4a11      	ldr	r2, [pc, #68]	; (8006568 <SEGGER_SYSVIEW_Init+0x80>)
 8006522:	490f      	ldr	r1, [pc, #60]	; (8006560 <SEGGER_SYSVIEW_Init+0x78>)
 8006524:	f7ff f942 	bl	80057ac <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006528:	4b0e      	ldr	r3, [pc, #56]	; (8006564 <SEGGER_SYSVIEW_Init+0x7c>)
 800652a:	2200      	movs	r2, #0
 800652c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800652e:	4b0f      	ldr	r3, [pc, #60]	; (800656c <SEGGER_SYSVIEW_Init+0x84>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a0c      	ldr	r2, [pc, #48]	; (8006564 <SEGGER_SYSVIEW_Init+0x7c>)
 8006534:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006536:	4a0b      	ldr	r2, [pc, #44]	; (8006564 <SEGGER_SYSVIEW_Init+0x7c>)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800653c:	4a09      	ldr	r2, [pc, #36]	; (8006564 <SEGGER_SYSVIEW_Init+0x7c>)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006542:	4a08      	ldr	r2, [pc, #32]	; (8006564 <SEGGER_SYSVIEW_Init+0x7c>)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006548:	4a06      	ldr	r2, [pc, #24]	; (8006564 <SEGGER_SYSVIEW_Init+0x7c>)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800654e:	4b05      	ldr	r3, [pc, #20]	; (8006564 <SEGGER_SYSVIEW_Init+0x7c>)
 8006550:	2200      	movs	r2, #0
 8006552:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006554:	bf00      	nop
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	200133f4 	.word	0x200133f4
 8006560:	08008008 	.word	0x08008008
 8006564:	200143fc 	.word	0x200143fc
 8006568:	200143f4 	.word	0x200143f4
 800656c:	e0001004 	.word	0xe0001004

08006570 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006578:	4a04      	ldr	r2, [pc, #16]	; (800658c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6113      	str	r3, [r2, #16]
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	200143fc 	.word	0x200143fc

08006590 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006598:	f3ef 8311 	mrs	r3, BASEPRI
 800659c:	f04f 0120 	mov.w	r1, #32
 80065a0:	f381 8811 	msr	BASEPRI, r1
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	4808      	ldr	r0, [pc, #32]	; (80065c8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80065a8:	f7ff f97c 	bl	80058a4 <_PreparePacket>
 80065ac:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	68b9      	ldr	r1, [r7, #8]
 80065b2:	68b8      	ldr	r0, [r7, #8]
 80065b4:	f7ff fa66 	bl	8005a84 <_SendPacket>
  RECORD_END();
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f383 8811 	msr	BASEPRI, r3
}
 80065be:	bf00      	nop
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	2001442c 	.word	0x2001442c

080065cc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065d6:	f3ef 8311 	mrs	r3, BASEPRI
 80065da:	f04f 0120 	mov.w	r1, #32
 80065de:	f381 8811 	msr	BASEPRI, r1
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	4816      	ldr	r0, [pc, #88]	; (8006640 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80065e6:	f7ff f95d 	bl	80058a4 <_PreparePacket>
 80065ea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	61fb      	str	r3, [r7, #28]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	e00b      	b.n	8006612 <SEGGER_SYSVIEW_RecordU32+0x46>
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	1c59      	adds	r1, r3, #1
 8006602:	61f9      	str	r1, [r7, #28]
 8006604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	09db      	lsrs	r3, r3, #7
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	2b7f      	cmp	r3, #127	; 0x7f
 8006616:	d8f0      	bhi.n	80065fa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	61fa      	str	r2, [r7, #28]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	68f9      	ldr	r1, [r7, #12]
 800662c:	6938      	ldr	r0, [r7, #16]
 800662e:	f7ff fa29 	bl	8005a84 <_SendPacket>
  RECORD_END();
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f383 8811 	msr	BASEPRI, r3
}
 8006638:	bf00      	nop
 800663a:	3720      	adds	r7, #32
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	2001442c 	.word	0x2001442c

08006644 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006644:	b580      	push	{r7, lr}
 8006646:	b08c      	sub	sp, #48	; 0x30
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006650:	f3ef 8311 	mrs	r3, BASEPRI
 8006654:	f04f 0120 	mov.w	r1, #32
 8006658:	f381 8811 	msr	BASEPRI, r1
 800665c:	61fb      	str	r3, [r7, #28]
 800665e:	4825      	ldr	r0, [pc, #148]	; (80066f4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006660:	f7ff f920 	bl	80058a4 <_PreparePacket>
 8006664:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	62bb      	str	r3, [r7, #40]	; 0x28
 8006672:	e00b      	b.n	800668c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	b2da      	uxtb	r2, r3
 8006678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667a:	1c59      	adds	r1, r3, #1
 800667c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800667e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	09db      	lsrs	r3, r3, #7
 800668a:	62bb      	str	r3, [r7, #40]	; 0x28
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	2b7f      	cmp	r3, #127	; 0x7f
 8006690:	d8f0      	bhi.n	8006674 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	627b      	str	r3, [r7, #36]	; 0x24
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	623b      	str	r3, [r7, #32]
 80066aa:	e00b      	b.n	80066c4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	1c59      	adds	r1, r3, #1
 80066b4:	6279      	str	r1, [r7, #36]	; 0x24
 80066b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	09db      	lsrs	r3, r3, #7
 80066c2:	623b      	str	r3, [r7, #32]
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	2b7f      	cmp	r3, #127	; 0x7f
 80066c8:	d8f0      	bhi.n	80066ac <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	627a      	str	r2, [r7, #36]	; 0x24
 80066d0:	6a3a      	ldr	r2, [r7, #32]
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	6979      	ldr	r1, [r7, #20]
 80066de:	69b8      	ldr	r0, [r7, #24]
 80066e0:	f7ff f9d0 	bl	8005a84 <_SendPacket>
  RECORD_END();
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f383 8811 	msr	BASEPRI, r3
}
 80066ea:	bf00      	nop
 80066ec:	3730      	adds	r7, #48	; 0x30
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	2001442c 	.word	0x2001442c

080066f8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08e      	sub	sp, #56	; 0x38
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006706:	f3ef 8311 	mrs	r3, BASEPRI
 800670a:	f04f 0120 	mov.w	r1, #32
 800670e:	f381 8811 	msr	BASEPRI, r1
 8006712:	61fb      	str	r3, [r7, #28]
 8006714:	4832      	ldr	r0, [pc, #200]	; (80067e0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006716:	f7ff f8c5 	bl	80058a4 <_PreparePacket>
 800671a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	637b      	str	r3, [r7, #52]	; 0x34
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	633b      	str	r3, [r7, #48]	; 0x30
 8006728:	e00b      	b.n	8006742 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	b2da      	uxtb	r2, r3
 800672e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006730:	1c59      	adds	r1, r3, #1
 8006732:	6379      	str	r1, [r7, #52]	; 0x34
 8006734:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	09db      	lsrs	r3, r3, #7
 8006740:	633b      	str	r3, [r7, #48]	; 0x30
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	2b7f      	cmp	r3, #127	; 0x7f
 8006746:	d8f0      	bhi.n	800672a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	637a      	str	r2, [r7, #52]	; 0x34
 800674e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006756:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006760:	e00b      	b.n	800677a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	b2da      	uxtb	r2, r3
 8006766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006768:	1c59      	adds	r1, r3, #1
 800676a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800676c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	09db      	lsrs	r3, r3, #7
 8006778:	62bb      	str	r3, [r7, #40]	; 0x28
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	2b7f      	cmp	r3, #127	; 0x7f
 800677e:	d8f0      	bhi.n	8006762 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	623b      	str	r3, [r7, #32]
 8006798:	e00b      	b.n	80067b2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	b2da      	uxtb	r2, r3
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	1c59      	adds	r1, r3, #1
 80067a2:	6279      	str	r1, [r7, #36]	; 0x24
 80067a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	09db      	lsrs	r3, r3, #7
 80067b0:	623b      	str	r3, [r7, #32]
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	2b7f      	cmp	r3, #127	; 0x7f
 80067b6:	d8f0      	bhi.n	800679a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	627a      	str	r2, [r7, #36]	; 0x24
 80067be:	6a3a      	ldr	r2, [r7, #32]
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	6979      	ldr	r1, [r7, #20]
 80067cc:	69b8      	ldr	r0, [r7, #24]
 80067ce:	f7ff f959 	bl	8005a84 <_SendPacket>
  RECORD_END();
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	f383 8811 	msr	BASEPRI, r3
}
 80067d8:	bf00      	nop
 80067da:	3738      	adds	r7, #56	; 0x38
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	2001442c 	.word	0x2001442c

080067e4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b090      	sub	sp, #64	; 0x40
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80067f2:	f3ef 8311 	mrs	r3, BASEPRI
 80067f6:	f04f 0120 	mov.w	r1, #32
 80067fa:	f381 8811 	msr	BASEPRI, r1
 80067fe:	61fb      	str	r3, [r7, #28]
 8006800:	4840      	ldr	r0, [pc, #256]	; (8006904 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006802:	f7ff f84f 	bl	80058a4 <_PreparePacket>
 8006806:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	63bb      	str	r3, [r7, #56]	; 0x38
 8006814:	e00b      	b.n	800682e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	b2da      	uxtb	r2, r3
 800681a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681c:	1c59      	adds	r1, r3, #1
 800681e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006820:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	09db      	lsrs	r3, r3, #7
 800682c:	63bb      	str	r3, [r7, #56]	; 0x38
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	2b7f      	cmp	r3, #127	; 0x7f
 8006832:	d8f0      	bhi.n	8006816 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006836:	1c5a      	adds	r2, r3, #1
 8006838:	63fa      	str	r2, [r7, #60]	; 0x3c
 800683a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800683c:	b2d2      	uxtb	r2, r2
 800683e:	701a      	strb	r2, [r3, #0]
 8006840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006842:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	637b      	str	r3, [r7, #52]	; 0x34
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	633b      	str	r3, [r7, #48]	; 0x30
 800684c:	e00b      	b.n	8006866 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	b2da      	uxtb	r2, r3
 8006852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006854:	1c59      	adds	r1, r3, #1
 8006856:	6379      	str	r1, [r7, #52]	; 0x34
 8006858:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	09db      	lsrs	r3, r3, #7
 8006864:	633b      	str	r3, [r7, #48]	; 0x30
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	2b7f      	cmp	r3, #127	; 0x7f
 800686a:	d8f0      	bhi.n	800684e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800686c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	637a      	str	r2, [r7, #52]	; 0x34
 8006872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	62bb      	str	r3, [r7, #40]	; 0x28
 8006884:	e00b      	b.n	800689e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	b2da      	uxtb	r2, r3
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	1c59      	adds	r1, r3, #1
 800688e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006890:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	09db      	lsrs	r3, r3, #7
 800689c:	62bb      	str	r3, [r7, #40]	; 0x28
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	2b7f      	cmp	r3, #127	; 0x7f
 80068a2:	d8f0      	bhi.n	8006886 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	701a      	strb	r2, [r3, #0]
 80068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
 80068b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ba:	623b      	str	r3, [r7, #32]
 80068bc:	e00b      	b.n	80068d6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	1c59      	adds	r1, r3, #1
 80068c6:	6279      	str	r1, [r7, #36]	; 0x24
 80068c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	09db      	lsrs	r3, r3, #7
 80068d4:	623b      	str	r3, [r7, #32]
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	2b7f      	cmp	r3, #127	; 0x7f
 80068da:	d8f0      	bhi.n	80068be <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	627a      	str	r2, [r7, #36]	; 0x24
 80068e2:	6a3a      	ldr	r2, [r7, #32]
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	701a      	strb	r2, [r3, #0]
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	6979      	ldr	r1, [r7, #20]
 80068f0:	69b8      	ldr	r0, [r7, #24]
 80068f2:	f7ff f8c7 	bl	8005a84 <_SendPacket>
  RECORD_END();
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	f383 8811 	msr	BASEPRI, r3
}
 80068fc:	bf00      	nop
 80068fe:	3740      	adds	r7, #64	; 0x40
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	2001442c 	.word	0x2001442c

08006908 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006908:	b580      	push	{r7, lr}
 800690a:	b08c      	sub	sp, #48	; 0x30
 800690c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800690e:	4b59      	ldr	r3, [pc, #356]	; (8006a74 <SEGGER_SYSVIEW_Start+0x16c>)
 8006910:	2201      	movs	r2, #1
 8006912:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006914:	f3ef 8311 	mrs	r3, BASEPRI
 8006918:	f04f 0120 	mov.w	r1, #32
 800691c:	f381 8811 	msr	BASEPRI, r1
 8006920:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006922:	4b54      	ldr	r3, [pc, #336]	; (8006a74 <SEGGER_SYSVIEW_Start+0x16c>)
 8006924:	785b      	ldrb	r3, [r3, #1]
 8006926:	220a      	movs	r2, #10
 8006928:	4953      	ldr	r1, [pc, #332]	; (8006a78 <SEGGER_SYSVIEW_Start+0x170>)
 800692a:	4618      	mov	r0, r3
 800692c:	f7f9 fc70 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006936:	f7fe fb87 	bl	8005048 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800693a:	200a      	movs	r0, #10
 800693c:	f7ff fe28 	bl	8006590 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006940:	f3ef 8311 	mrs	r3, BASEPRI
 8006944:	f04f 0120 	mov.w	r1, #32
 8006948:	f381 8811 	msr	BASEPRI, r1
 800694c:	60bb      	str	r3, [r7, #8]
 800694e:	484b      	ldr	r0, [pc, #300]	; (8006a7c <SEGGER_SYSVIEW_Start+0x174>)
 8006950:	f7fe ffa8 	bl	80058a4 <_PreparePacket>
 8006954:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800695e:	4b45      	ldr	r3, [pc, #276]	; (8006a74 <SEGGER_SYSVIEW_Start+0x16c>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
 8006964:	e00b      	b.n	800697e <SEGGER_SYSVIEW_Start+0x76>
 8006966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006968:	b2da      	uxtb	r2, r3
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	1c59      	adds	r1, r3, #1
 800696e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006970:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	09db      	lsrs	r3, r3, #7
 800697c:	62bb      	str	r3, [r7, #40]	; 0x28
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	2b7f      	cmp	r3, #127	; 0x7f
 8006982:	d8f0      	bhi.n	8006966 <SEGGER_SYSVIEW_Start+0x5e>
 8006984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	62fa      	str	r2, [r7, #44]	; 0x2c
 800698a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
 8006998:	4b36      	ldr	r3, [pc, #216]	; (8006a74 <SEGGER_SYSVIEW_Start+0x16c>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	623b      	str	r3, [r7, #32]
 800699e:	e00b      	b.n	80069b8 <SEGGER_SYSVIEW_Start+0xb0>
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	1c59      	adds	r1, r3, #1
 80069a8:	6279      	str	r1, [r7, #36]	; 0x24
 80069aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	09db      	lsrs	r3, r3, #7
 80069b6:	623b      	str	r3, [r7, #32]
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	2b7f      	cmp	r3, #127	; 0x7f
 80069bc:	d8f0      	bhi.n	80069a0 <SEGGER_SYSVIEW_Start+0x98>
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	627a      	str	r2, [r7, #36]	; 0x24
 80069c4:	6a3a      	ldr	r2, [r7, #32]
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	61fb      	str	r3, [r7, #28]
 80069d2:	4b28      	ldr	r3, [pc, #160]	; (8006a74 <SEGGER_SYSVIEW_Start+0x16c>)
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	61bb      	str	r3, [r7, #24]
 80069d8:	e00b      	b.n	80069f2 <SEGGER_SYSVIEW_Start+0xea>
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	1c59      	adds	r1, r3, #1
 80069e2:	61f9      	str	r1, [r7, #28]
 80069e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	09db      	lsrs	r3, r3, #7
 80069f0:	61bb      	str	r3, [r7, #24]
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b7f      	cmp	r3, #127	; 0x7f
 80069f6:	d8f0      	bhi.n	80069da <SEGGER_SYSVIEW_Start+0xd2>
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	61fa      	str	r2, [r7, #28]
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	613b      	str	r3, [r7, #16]
 8006a10:	e00b      	b.n	8006a2a <SEGGER_SYSVIEW_Start+0x122>
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	1c59      	adds	r1, r3, #1
 8006a1a:	6179      	str	r1, [r7, #20]
 8006a1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a20:	b2d2      	uxtb	r2, r2
 8006a22:	701a      	strb	r2, [r3, #0]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	09db      	lsrs	r3, r3, #7
 8006a28:	613b      	str	r3, [r7, #16]
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a2e:	d8f0      	bhi.n	8006a12 <SEGGER_SYSVIEW_Start+0x10a>
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	617a      	str	r2, [r7, #20]
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006a40:	2218      	movs	r2, #24
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff f81d 	bl	8005a84 <_SendPacket>
      RECORD_END();
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006a50:	4b08      	ldr	r3, [pc, #32]	; (8006a74 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006a58:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006a5e:	f000 f9eb 	bl	8006e38 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006a62:	f000 f9b1 	bl	8006dc8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006a66:	f000 fc8d 	bl	8007384 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006a6a:	bf00      	nop
 8006a6c:	3730      	adds	r7, #48	; 0x30
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	200143fc 	.word	0x200143fc
 8006a78:	08008048 	.word	0x08008048
 8006a7c:	2001442c 	.word	0x2001442c

08006a80 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a86:	f3ef 8311 	mrs	r3, BASEPRI
 8006a8a:	f04f 0120 	mov.w	r1, #32
 8006a8e:	f381 8811 	msr	BASEPRI, r1
 8006a92:	607b      	str	r3, [r7, #4]
 8006a94:	480b      	ldr	r0, [pc, #44]	; (8006ac4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006a96:	f7fe ff05 	bl	80058a4 <_PreparePacket>
 8006a9a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ac8 <SEGGER_SYSVIEW_Stop+0x48>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d007      	beq.n	8006ab4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006aa4:	220b      	movs	r2, #11
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6838      	ldr	r0, [r7, #0]
 8006aaa:	f7fe ffeb 	bl	8005a84 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006aae:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <SEGGER_SYSVIEW_Stop+0x48>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f383 8811 	msr	BASEPRI, r3
}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	2001442c 	.word	0x2001442c
 8006ac8:	200143fc 	.word	0x200143fc

08006acc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08c      	sub	sp, #48	; 0x30
 8006ad0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ad2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ad6:	f04f 0120 	mov.w	r1, #32
 8006ada:	f381 8811 	msr	BASEPRI, r1
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	4845      	ldr	r0, [pc, #276]	; (8006bf8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006ae2:	f7fe fedf 	bl	80058a4 <_PreparePacket>
 8006ae6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006af0:	4b42      	ldr	r3, [pc, #264]	; (8006bfc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006af6:	e00b      	b.n	8006b10 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afe:	1c59      	adds	r1, r3, #1
 8006b00:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b06:	b2d2      	uxtb	r2, r2
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0c:	09db      	lsrs	r3, r3, #7
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	2b7f      	cmp	r3, #127	; 0x7f
 8006b14:	d8f0      	bhi.n	8006af8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2a:	4b34      	ldr	r3, [pc, #208]	; (8006bfc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	623b      	str	r3, [r7, #32]
 8006b30:	e00b      	b.n	8006b4a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	1c59      	adds	r1, r3, #1
 8006b3a:	6279      	str	r1, [r7, #36]	; 0x24
 8006b3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b40:	b2d2      	uxtb	r2, r2
 8006b42:	701a      	strb	r2, [r3, #0]
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	09db      	lsrs	r3, r3, #7
 8006b48:	623b      	str	r3, [r7, #32]
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b4e:	d8f0      	bhi.n	8006b32 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	627a      	str	r2, [r7, #36]	; 0x24
 8006b56:	6a3a      	ldr	r2, [r7, #32]
 8006b58:	b2d2      	uxtb	r2, r2
 8006b5a:	701a      	strb	r2, [r3, #0]
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	61fb      	str	r3, [r7, #28]
 8006b64:	4b25      	ldr	r3, [pc, #148]	; (8006bfc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	e00b      	b.n	8006b84 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	1c59      	adds	r1, r3, #1
 8006b74:	61f9      	str	r1, [r7, #28]
 8006b76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b7a:	b2d2      	uxtb	r2, r2
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	09db      	lsrs	r3, r3, #7
 8006b82:	61bb      	str	r3, [r7, #24]
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	2b7f      	cmp	r3, #127	; 0x7f
 8006b88:	d8f0      	bhi.n	8006b6c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	61fa      	str	r2, [r7, #28]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	b2d2      	uxtb	r2, r2
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	613b      	str	r3, [r7, #16]
 8006ba2:	e00b      	b.n	8006bbc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	1c59      	adds	r1, r3, #1
 8006bac:	6179      	str	r1, [r7, #20]
 8006bae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	09db      	lsrs	r3, r3, #7
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8006bc0:	d8f0      	bhi.n	8006ba4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	617a      	str	r2, [r7, #20]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	701a      	strb	r2, [r3, #0]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006bd2:	2218      	movs	r2, #24
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	68b8      	ldr	r0, [r7, #8]
 8006bd8:	f7fe ff54 	bl	8005a84 <_SendPacket>
  RECORD_END();
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006be2:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006bea:	4b04      	ldr	r3, [pc, #16]	; (8006bfc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	4798      	blx	r3
  }
}
 8006bf0:	bf00      	nop
 8006bf2:	3730      	adds	r7, #48	; 0x30
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	2001442c 	.word	0x2001442c
 8006bfc:	200143fc 	.word	0x200143fc

08006c00 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b092      	sub	sp, #72	; 0x48
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006c08:	f3ef 8311 	mrs	r3, BASEPRI
 8006c0c:	f04f 0120 	mov.w	r1, #32
 8006c10:	f381 8811 	msr	BASEPRI, r1
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	486a      	ldr	r0, [pc, #424]	; (8006dc0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006c18:	f7fe fe44 	bl	80058a4 <_PreparePacket>
 8006c1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	647b      	str	r3, [r7, #68]	; 0x44
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4b66      	ldr	r3, [pc, #408]	; (8006dc4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	643b      	str	r3, [r7, #64]	; 0x40
 8006c32:	e00b      	b.n	8006c4c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c3a:	1c59      	adds	r1, r3, #1
 8006c3c:	6479      	str	r1, [r7, #68]	; 0x44
 8006c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c48:	09db      	lsrs	r3, r3, #7
 8006c4a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c50:	d8f0      	bhi.n	8006c34 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	647a      	str	r2, [r7, #68]	; 0x44
 8006c58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c6c:	e00b      	b.n	8006c86 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c74:	1c59      	adds	r1, r3, #1
 8006c76:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c82:	09db      	lsrs	r3, r3, #7
 8006c84:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	2b7f      	cmp	r3, #127	; 0x7f
 8006c8a:	d8f0      	bhi.n	8006c6e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7fe fdcd 	bl	8005844 <_EncodeStr>
 8006caa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006cac:	2209      	movs	r2, #9
 8006cae:	68f9      	ldr	r1, [r7, #12]
 8006cb0:	6938      	ldr	r0, [r7, #16]
 8006cb2:	f7fe fee7 	bl	8005a84 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b40      	ldr	r3, [pc, #256]	; (8006dc4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8006cca:	e00b      	b.n	8006ce4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd2:	1c59      	adds	r1, r3, #1
 8006cd4:	6379      	str	r1, [r7, #52]	; 0x34
 8006cd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	09db      	lsrs	r3, r3, #7
 8006ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ce8:	d8f0      	bhi.n	8006ccc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	637a      	str	r2, [r7, #52]	; 0x34
 8006cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d04:	e00b      	b.n	8006d1e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	1c59      	adds	r1, r3, #1
 8006d0e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	701a      	strb	r2, [r3, #0]
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	09db      	lsrs	r3, r3, #7
 8006d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d20:	2b7f      	cmp	r3, #127	; 0x7f
 8006d22:	d8f0      	bhi.n	8006d06 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	623b      	str	r3, [r7, #32]
 8006d3e:	e00b      	b.n	8006d58 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	1c59      	adds	r1, r3, #1
 8006d48:	6279      	str	r1, [r7, #36]	; 0x24
 8006d4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	09db      	lsrs	r3, r3, #7
 8006d56:	623b      	str	r3, [r7, #32]
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d5c:	d8f0      	bhi.n	8006d40 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	627a      	str	r2, [r7, #36]	; 0x24
 8006d64:	6a3a      	ldr	r2, [r7, #32]
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	61fb      	str	r3, [r7, #28]
 8006d72:	2300      	movs	r3, #0
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	e00b      	b.n	8006d90 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	1c59      	adds	r1, r3, #1
 8006d80:	61f9      	str	r1, [r7, #28]
 8006d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	09db      	lsrs	r3, r3, #7
 8006d8e:	61bb      	str	r3, [r7, #24]
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b7f      	cmp	r3, #127	; 0x7f
 8006d94:	d8f0      	bhi.n	8006d78 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	61fa      	str	r2, [r7, #28]
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	701a      	strb	r2, [r3, #0]
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006da6:	2215      	movs	r2, #21
 8006da8:	68f9      	ldr	r1, [r7, #12]
 8006daa:	6938      	ldr	r0, [r7, #16]
 8006dac:	f7fe fe6a 	bl	8005a84 <_SendPacket>
  RECORD_END();
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f383 8811 	msr	BASEPRI, r3
}
 8006db6:	bf00      	nop
 8006db8:	3748      	adds	r7, #72	; 0x48
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	2001442c 	.word	0x2001442c
 8006dc4:	200143fc 	.word	0x200143fc

08006dc8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006dcc:	4b07      	ldr	r3, [pc, #28]	; (8006dec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d008      	beq.n	8006de6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006dd4:	4b05      	ldr	r3, [pc, #20]	; (8006dec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006dde:	4b03      	ldr	r3, [pc, #12]	; (8006dec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	4798      	blx	r3
  }
}
 8006de6:	bf00      	nop
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	200143fc 	.word	0x200143fc

08006df0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006df8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dfc:	f04f 0120 	mov.w	r1, #32
 8006e00:	f381 8811 	msr	BASEPRI, r1
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	480b      	ldr	r0, [pc, #44]	; (8006e34 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006e08:	f7fe fd4c 	bl	80058a4 <_PreparePacket>
 8006e0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e0e:	2280      	movs	r2, #128	; 0x80
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	6938      	ldr	r0, [r7, #16]
 8006e14:	f7fe fd16 	bl	8005844 <_EncodeStr>
 8006e18:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006e1a:	220e      	movs	r2, #14
 8006e1c:	68f9      	ldr	r1, [r7, #12]
 8006e1e:	6938      	ldr	r0, [r7, #16]
 8006e20:	f7fe fe30 	bl	8005a84 <_SendPacket>
  RECORD_END();
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f383 8811 	msr	BASEPRI, r3
}
 8006e2a:	bf00      	nop
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	2001442c 	.word	0x2001442c

08006e38 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006e38:	b590      	push	{r4, r7, lr}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006e3e:	4b15      	ldr	r3, [pc, #84]	; (8006e94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d01a      	beq.n	8006e7c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006e46:	4b13      	ldr	r3, [pc, #76]	; (8006e94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d015      	beq.n	8006e7c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006e50:	4b10      	ldr	r3, [pc, #64]	; (8006e94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4798      	blx	r3
 8006e58:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e5c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006e5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	f04f 0300 	mov.w	r3, #0
 8006e6a:	000a      	movs	r2, r1
 8006e6c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e6e:	4613      	mov	r3, r2
 8006e70:	461a      	mov	r2, r3
 8006e72:	4621      	mov	r1, r4
 8006e74:	200d      	movs	r0, #13
 8006e76:	f7ff fbe5 	bl	8006644 <SEGGER_SYSVIEW_RecordU32x2>
 8006e7a:	e006      	b.n	8006e8a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006e7c:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4619      	mov	r1, r3
 8006e82:	200c      	movs	r0, #12
 8006e84:	f7ff fba2 	bl	80065cc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006e88:	bf00      	nop
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd90      	pop	{r4, r7, pc}
 8006e92:	bf00      	nop
 8006e94:	200143fc 	.word	0x200143fc
 8006e98:	e0001004 	.word	0xe0001004

08006e9c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ea6:	f04f 0120 	mov.w	r1, #32
 8006eaa:	f381 8811 	msr	BASEPRI, r1
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	4819      	ldr	r0, [pc, #100]	; (8006f18 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006eb2:	f7fe fcf7 	bl	80058a4 <_PreparePacket>
 8006eb6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006ebc:	4b17      	ldr	r3, [pc, #92]	; (8006f1c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	613b      	str	r3, [r7, #16]
 8006ece:	e00b      	b.n	8006ee8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	1c59      	adds	r1, r3, #1
 8006ed8:	6179      	str	r1, [r7, #20]
 8006eda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	09db      	lsrs	r3, r3, #7
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	2b7f      	cmp	r3, #127	; 0x7f
 8006eec:	d8f0      	bhi.n	8006ed0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	617a      	str	r2, [r7, #20]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006efe:	2202      	movs	r2, #2
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	68b8      	ldr	r0, [r7, #8]
 8006f04:	f7fe fdbe 	bl	8005a84 <_SendPacket>
  RECORD_END();
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f383 8811 	msr	BASEPRI, r3
}
 8006f0e:	bf00      	nop
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	2001442c 	.word	0x2001442c
 8006f1c:	e000ed04 	.word	0xe000ed04

08006f20 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f26:	f3ef 8311 	mrs	r3, BASEPRI
 8006f2a:	f04f 0120 	mov.w	r1, #32
 8006f2e:	f381 8811 	msr	BASEPRI, r1
 8006f32:	607b      	str	r3, [r7, #4]
 8006f34:	4807      	ldr	r0, [pc, #28]	; (8006f54 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006f36:	f7fe fcb5 	bl	80058a4 <_PreparePacket>
 8006f3a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006f3c:	2203      	movs	r2, #3
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6838      	ldr	r0, [r7, #0]
 8006f42:	f7fe fd9f 	bl	8005a84 <_SendPacket>
  RECORD_END();
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f383 8811 	msr	BASEPRI, r3
}
 8006f4c:	bf00      	nop
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	2001442c 	.word	0x2001442c

08006f58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006f62:	f04f 0120 	mov.w	r1, #32
 8006f66:	f381 8811 	msr	BASEPRI, r1
 8006f6a:	607b      	str	r3, [r7, #4]
 8006f6c:	4807      	ldr	r0, [pc, #28]	; (8006f8c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006f6e:	f7fe fc99 	bl	80058a4 <_PreparePacket>
 8006f72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006f74:	2212      	movs	r2, #18
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6838      	ldr	r0, [r7, #0]
 8006f7a:	f7fe fd83 	bl	8005a84 <_SendPacket>
  RECORD_END();
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f383 8811 	msr	BASEPRI, r3
}
 8006f84:	bf00      	nop
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	2001442c 	.word	0x2001442c

08006f90 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f96:	f3ef 8311 	mrs	r3, BASEPRI
 8006f9a:	f04f 0120 	mov.w	r1, #32
 8006f9e:	f381 8811 	msr	BASEPRI, r1
 8006fa2:	607b      	str	r3, [r7, #4]
 8006fa4:	4807      	ldr	r0, [pc, #28]	; (8006fc4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006fa6:	f7fe fc7d 	bl	80058a4 <_PreparePacket>
 8006faa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006fac:	2211      	movs	r2, #17
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6838      	ldr	r0, [r7, #0]
 8006fb2:	f7fe fd67 	bl	8005a84 <_SendPacket>
  RECORD_END();
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f383 8811 	msr	BASEPRI, r3
}
 8006fbc:	bf00      	nop
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	2001442c 	.word	0x2001442c

08006fc8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8006fd4:	f04f 0120 	mov.w	r1, #32
 8006fd8:	f381 8811 	msr	BASEPRI, r1
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	4819      	ldr	r0, [pc, #100]	; (8007044 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006fe0:	f7fe fc60 	bl	80058a4 <_PreparePacket>
 8006fe4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006fea:	4b17      	ldr	r3, [pc, #92]	; (8007048 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	61fb      	str	r3, [r7, #28]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	61bb      	str	r3, [r7, #24]
 8006ffc:	e00b      	b.n	8007016 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	b2da      	uxtb	r2, r3
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	1c59      	adds	r1, r3, #1
 8007006:	61f9      	str	r1, [r7, #28]
 8007008:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	701a      	strb	r2, [r3, #0]
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	09db      	lsrs	r3, r3, #7
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b7f      	cmp	r3, #127	; 0x7f
 800701a:	d8f0      	bhi.n	8006ffe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	61fa      	str	r2, [r7, #28]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	701a      	strb	r2, [r3, #0]
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800702c:	2208      	movs	r2, #8
 800702e:	68f9      	ldr	r1, [r7, #12]
 8007030:	6938      	ldr	r0, [r7, #16]
 8007032:	f7fe fd27 	bl	8005a84 <_SendPacket>
  RECORD_END();
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f383 8811 	msr	BASEPRI, r3
}
 800703c:	bf00      	nop
 800703e:	3720      	adds	r7, #32
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	2001442c 	.word	0x2001442c
 8007048:	200143fc 	.word	0x200143fc

0800704c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007054:	f3ef 8311 	mrs	r3, BASEPRI
 8007058:	f04f 0120 	mov.w	r1, #32
 800705c:	f381 8811 	msr	BASEPRI, r1
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	4819      	ldr	r0, [pc, #100]	; (80070c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007064:	f7fe fc1e 	bl	80058a4 <_PreparePacket>
 8007068:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800706e:	4b17      	ldr	r3, [pc, #92]	; (80070cc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	61fb      	str	r3, [r7, #28]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	61bb      	str	r3, [r7, #24]
 8007080:	e00b      	b.n	800709a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	b2da      	uxtb	r2, r3
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	1c59      	adds	r1, r3, #1
 800708a:	61f9      	str	r1, [r7, #28]
 800708c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	701a      	strb	r2, [r3, #0]
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	09db      	lsrs	r3, r3, #7
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	2b7f      	cmp	r3, #127	; 0x7f
 800709e:	d8f0      	bhi.n	8007082 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	61fa      	str	r2, [r7, #28]
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	b2d2      	uxtb	r2, r2
 80070aa:	701a      	strb	r2, [r3, #0]
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80070b0:	2204      	movs	r2, #4
 80070b2:	68f9      	ldr	r1, [r7, #12]
 80070b4:	6938      	ldr	r0, [r7, #16]
 80070b6:	f7fe fce5 	bl	8005a84 <_SendPacket>
  RECORD_END();
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f383 8811 	msr	BASEPRI, r3
}
 80070c0:	bf00      	nop
 80070c2:	3720      	adds	r7, #32
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	2001442c 	.word	0x2001442c
 80070cc:	200143fc 	.word	0x200143fc

080070d0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070d8:	f3ef 8311 	mrs	r3, BASEPRI
 80070dc:	f04f 0120 	mov.w	r1, #32
 80070e0:	f381 8811 	msr	BASEPRI, r1
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	4819      	ldr	r0, [pc, #100]	; (800714c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80070e8:	f7fe fbdc 	bl	80058a4 <_PreparePacket>
 80070ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80070f2:	4b17      	ldr	r3, [pc, #92]	; (8007150 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	61fb      	str	r3, [r7, #28]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	61bb      	str	r3, [r7, #24]
 8007104:	e00b      	b.n	800711e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	b2da      	uxtb	r2, r3
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	1c59      	adds	r1, r3, #1
 800710e:	61f9      	str	r1, [r7, #28]
 8007110:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007114:	b2d2      	uxtb	r2, r2
 8007116:	701a      	strb	r2, [r3, #0]
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	09db      	lsrs	r3, r3, #7
 800711c:	61bb      	str	r3, [r7, #24]
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b7f      	cmp	r3, #127	; 0x7f
 8007122:	d8f0      	bhi.n	8007106 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	1c5a      	adds	r2, r3, #1
 8007128:	61fa      	str	r2, [r7, #28]
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	b2d2      	uxtb	r2, r2
 800712e:	701a      	strb	r2, [r3, #0]
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007134:	2206      	movs	r2, #6
 8007136:	68f9      	ldr	r1, [r7, #12]
 8007138:	6938      	ldr	r0, [r7, #16]
 800713a:	f7fe fca3 	bl	8005a84 <_SendPacket>
  RECORD_END();
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f383 8811 	msr	BASEPRI, r3
}
 8007144:	bf00      	nop
 8007146:	3720      	adds	r7, #32
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	2001442c 	.word	0x2001442c
 8007150:	200143fc 	.word	0x200143fc

08007154 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007154:	b580      	push	{r7, lr}
 8007156:	b08a      	sub	sp, #40	; 0x28
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800715e:	f3ef 8311 	mrs	r3, BASEPRI
 8007162:	f04f 0120 	mov.w	r1, #32
 8007166:	f381 8811 	msr	BASEPRI, r1
 800716a:	617b      	str	r3, [r7, #20]
 800716c:	4827      	ldr	r0, [pc, #156]	; (800720c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800716e:	f7fe fb99 	bl	80058a4 <_PreparePacket>
 8007172:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007178:	4b25      	ldr	r3, [pc, #148]	; (8007210 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	623b      	str	r3, [r7, #32]
 800718a:	e00b      	b.n	80071a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	b2da      	uxtb	r2, r3
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	1c59      	adds	r1, r3, #1
 8007194:	6279      	str	r1, [r7, #36]	; 0x24
 8007196:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	701a      	strb	r2, [r3, #0]
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	09db      	lsrs	r3, r3, #7
 80071a2:	623b      	str	r3, [r7, #32]
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	2b7f      	cmp	r3, #127	; 0x7f
 80071a8:	d8f0      	bhi.n	800718c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	627a      	str	r2, [r7, #36]	; 0x24
 80071b0:	6a3a      	ldr	r2, [r7, #32]
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	61fb      	str	r3, [r7, #28]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	61bb      	str	r3, [r7, #24]
 80071c2:	e00b      	b.n	80071dc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	1c59      	adds	r1, r3, #1
 80071cc:	61f9      	str	r1, [r7, #28]
 80071ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	701a      	strb	r2, [r3, #0]
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	09db      	lsrs	r3, r3, #7
 80071da:	61bb      	str	r3, [r7, #24]
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	2b7f      	cmp	r3, #127	; 0x7f
 80071e0:	d8f0      	bhi.n	80071c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	61fa      	str	r2, [r7, #28]
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	b2d2      	uxtb	r2, r2
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80071f2:	2207      	movs	r2, #7
 80071f4:	68f9      	ldr	r1, [r7, #12]
 80071f6:	6938      	ldr	r0, [r7, #16]
 80071f8:	f7fe fc44 	bl	8005a84 <_SendPacket>
  RECORD_END();
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f383 8811 	msr	BASEPRI, r3
}
 8007202:	bf00      	nop
 8007204:	3728      	adds	r7, #40	; 0x28
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	2001442c 	.word	0x2001442c
 8007210:	200143fc 	.word	0x200143fc

08007214 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800721c:	4b04      	ldr	r3, [pc, #16]	; (8007230 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	1ad3      	subs	r3, r2, r3
}
 8007224:	4618      	mov	r0, r3
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	200143fc 	.word	0x200143fc

08007234 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007234:	b580      	push	{r7, lr}
 8007236:	b08c      	sub	sp, #48	; 0x30
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800723e:	4b40      	ldr	r3, [pc, #256]	; (8007340 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d077      	beq.n	8007336 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007246:	4b3e      	ldr	r3, [pc, #248]	; (8007340 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800724c:	2300      	movs	r3, #0
 800724e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007250:	e008      	b.n	8007264 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d007      	beq.n	800726e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	3301      	adds	r3, #1
 8007262:	62bb      	str	r3, [r7, #40]	; 0x28
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007268:	429a      	cmp	r2, r3
 800726a:	d3f2      	bcc.n	8007252 <SEGGER_SYSVIEW_SendModule+0x1e>
 800726c:	e000      	b.n	8007270 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800726e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007272:	2b00      	cmp	r3, #0
 8007274:	d055      	beq.n	8007322 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007276:	f3ef 8311 	mrs	r3, BASEPRI
 800727a:	f04f 0120 	mov.w	r1, #32
 800727e:	f381 8811 	msr	BASEPRI, r1
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	482f      	ldr	r0, [pc, #188]	; (8007344 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007286:	f7fe fb0d 	bl	80058a4 <_PreparePacket>
 800728a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	627b      	str	r3, [r7, #36]	; 0x24
 8007294:	79fb      	ldrb	r3, [r7, #7]
 8007296:	623b      	str	r3, [r7, #32]
 8007298:	e00b      	b.n	80072b2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	b2da      	uxtb	r2, r3
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	1c59      	adds	r1, r3, #1
 80072a2:	6279      	str	r1, [r7, #36]	; 0x24
 80072a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072a8:	b2d2      	uxtb	r2, r2
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	09db      	lsrs	r3, r3, #7
 80072b0:	623b      	str	r3, [r7, #32]
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	2b7f      	cmp	r3, #127	; 0x7f
 80072b6:	d8f0      	bhi.n	800729a <SEGGER_SYSVIEW_SendModule+0x66>
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	627a      	str	r2, [r7, #36]	; 0x24
 80072be:	6a3a      	ldr	r2, [r7, #32]
 80072c0:	b2d2      	uxtb	r2, r2
 80072c2:	701a      	strb	r2, [r3, #0]
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	61fb      	str	r3, [r7, #28]
 80072cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	e00b      	b.n	80072ec <SEGGER_SYSVIEW_SendModule+0xb8>
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	1c59      	adds	r1, r3, #1
 80072dc:	61f9      	str	r1, [r7, #28]
 80072de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	09db      	lsrs	r3, r3, #7
 80072ea:	61bb      	str	r3, [r7, #24]
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	2b7f      	cmp	r3, #127	; 0x7f
 80072f0:	d8f0      	bhi.n	80072d4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	61fa      	str	r2, [r7, #28]
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	b2d2      	uxtb	r2, r2
 80072fc:	701a      	strb	r2, [r3, #0]
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2280      	movs	r2, #128	; 0x80
 8007308:	4619      	mov	r1, r3
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f7fe fa9a 	bl	8005844 <_EncodeStr>
 8007310:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007312:	2216      	movs	r2, #22
 8007314:	68f9      	ldr	r1, [r7, #12]
 8007316:	6938      	ldr	r0, [r7, #16]
 8007318:	f7fe fbb4 	bl	8005a84 <_SendPacket>
      RECORD_END();
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007324:	2b00      	cmp	r3, #0
 8007326:	d006      	beq.n	8007336 <SEGGER_SYSVIEW_SendModule+0x102>
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	4798      	blx	r3
    }
  }
}
 8007336:	bf00      	nop
 8007338:	3730      	adds	r7, #48	; 0x30
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20014424 	.word	0x20014424
 8007344:	2001442c 	.word	0x2001442c

08007348 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800734e:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00f      	beq.n	8007376 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007356:	4b0a      	ldr	r3, [pc, #40]	; (8007380 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1f2      	bne.n	800735c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20014424 	.word	0x20014424

08007384 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800738a:	f3ef 8311 	mrs	r3, BASEPRI
 800738e:	f04f 0120 	mov.w	r1, #32
 8007392:	f381 8811 	msr	BASEPRI, r1
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	4817      	ldr	r0, [pc, #92]	; (80073f8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800739a:	f7fe fa83 	bl	80058a4 <_PreparePacket>
 800739e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	4b14      	ldr	r3, [pc, #80]	; (80073fc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	613b      	str	r3, [r7, #16]
 80073ae:	e00b      	b.n	80073c8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	1c59      	adds	r1, r3, #1
 80073b8:	6179      	str	r1, [r7, #20]
 80073ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	09db      	lsrs	r3, r3, #7
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b7f      	cmp	r3, #127	; 0x7f
 80073cc:	d8f0      	bhi.n	80073b0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	617a      	str	r2, [r7, #20]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80073de:	221b      	movs	r2, #27
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	68b8      	ldr	r0, [r7, #8]
 80073e4:	f7fe fb4e 	bl	8005a84 <_SendPacket>
  RECORD_END();
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f383 8811 	msr	BASEPRI, r3
}
 80073ee:	bf00      	nop
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	2001442c 	.word	0x2001442c
 80073fc:	20014428 	.word	0x20014428

08007400 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007400:	b40f      	push	{r0, r1, r2, r3}
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007408:	f107 0314 	add.w	r3, r7, #20
 800740c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800740e:	1d3b      	adds	r3, r7, #4
 8007410:	461a      	mov	r2, r3
 8007412:	2100      	movs	r1, #0
 8007414:	6938      	ldr	r0, [r7, #16]
 8007416:	f7fe fe47 	bl	80060a8 <_VPrintTarget>
  va_end(ParamList);
}
 800741a:	bf00      	nop
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007424:	b004      	add	sp, #16
 8007426:	4770      	bx	lr

08007428 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007428:	b580      	push	{r7, lr}
 800742a:	b08a      	sub	sp, #40	; 0x28
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007430:	f3ef 8311 	mrs	r3, BASEPRI
 8007434:	f04f 0120 	mov.w	r1, #32
 8007438:	f381 8811 	msr	BASEPRI, r1
 800743c:	617b      	str	r3, [r7, #20]
 800743e:	4827      	ldr	r0, [pc, #156]	; (80074dc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007440:	f7fe fa30 	bl	80058a4 <_PreparePacket>
 8007444:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007446:	2280      	movs	r2, #128	; 0x80
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	6938      	ldr	r0, [r7, #16]
 800744c:	f7fe f9fa 	bl	8005844 <_EncodeStr>
 8007450:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
 8007456:	2301      	movs	r3, #1
 8007458:	623b      	str	r3, [r7, #32]
 800745a:	e00b      	b.n	8007474 <SEGGER_SYSVIEW_Warn+0x4c>
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	b2da      	uxtb	r2, r3
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	1c59      	adds	r1, r3, #1
 8007464:	6279      	str	r1, [r7, #36]	; 0x24
 8007466:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	09db      	lsrs	r3, r3, #7
 8007472:	623b      	str	r3, [r7, #32]
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	2b7f      	cmp	r3, #127	; 0x7f
 8007478:	d8f0      	bhi.n	800745c <SEGGER_SYSVIEW_Warn+0x34>
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	627a      	str	r2, [r7, #36]	; 0x24
 8007480:	6a3a      	ldr	r2, [r7, #32]
 8007482:	b2d2      	uxtb	r2, r2
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	61fb      	str	r3, [r7, #28]
 800748e:	2300      	movs	r3, #0
 8007490:	61bb      	str	r3, [r7, #24]
 8007492:	e00b      	b.n	80074ac <SEGGER_SYSVIEW_Warn+0x84>
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	b2da      	uxtb	r2, r3
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	1c59      	adds	r1, r3, #1
 800749c:	61f9      	str	r1, [r7, #28]
 800749e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	701a      	strb	r2, [r3, #0]
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	09db      	lsrs	r3, r3, #7
 80074aa:	61bb      	str	r3, [r7, #24]
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	2b7f      	cmp	r3, #127	; 0x7f
 80074b0:	d8f0      	bhi.n	8007494 <SEGGER_SYSVIEW_Warn+0x6c>
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	61fa      	str	r2, [r7, #28]
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	b2d2      	uxtb	r2, r2
 80074bc:	701a      	strb	r2, [r3, #0]
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80074c2:	221a      	movs	r2, #26
 80074c4:	68f9      	ldr	r1, [r7, #12]
 80074c6:	6938      	ldr	r0, [r7, #16]
 80074c8:	f7fe fadc 	bl	8005a84 <_SendPacket>
  RECORD_END();
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f383 8811 	msr	BASEPRI, r3
}
 80074d2:	bf00      	nop
 80074d4:	3728      	adds	r7, #40	; 0x28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	2001442c 	.word	0x2001442c

080074e0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80074e0:	b580      	push	{r7, lr}
 80074e2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80074e4:	4b13      	ldr	r3, [pc, #76]	; (8007534 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80074e6:	7e1b      	ldrb	r3, [r3, #24]
 80074e8:	4619      	mov	r1, r3
 80074ea:	4a13      	ldr	r2, [pc, #76]	; (8007538 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80074ec:	460b      	mov	r3, r1
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	440b      	add	r3, r1
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	4413      	add	r3, r2
 80074f6:	336c      	adds	r3, #108	; 0x6c
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b0e      	ldr	r3, [pc, #56]	; (8007534 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80074fc:	7e1b      	ldrb	r3, [r3, #24]
 80074fe:	4618      	mov	r0, r3
 8007500:	490d      	ldr	r1, [pc, #52]	; (8007538 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007502:	4603      	mov	r3, r0
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	4403      	add	r3, r0
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	440b      	add	r3, r1
 800750c:	3370      	adds	r3, #112	; 0x70
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	429a      	cmp	r2, r3
 8007512:	d00b      	beq.n	800752c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007514:	4b07      	ldr	r3, [pc, #28]	; (8007534 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007516:	789b      	ldrb	r3, [r3, #2]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d107      	bne.n	800752c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800751c:	4b05      	ldr	r3, [pc, #20]	; (8007534 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800751e:	2201      	movs	r2, #1
 8007520:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007522:	f7fe f9cb 	bl	80058bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007526:	4b03      	ldr	r3, [pc, #12]	; (8007534 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007528:	2200      	movs	r2, #0
 800752a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800752c:	4b01      	ldr	r3, [pc, #4]	; (8007534 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800752e:	781b      	ldrb	r3, [r3, #0]
}
 8007530:	4618      	mov	r0, r3
 8007532:	bd80      	pop	{r7, pc}
 8007534:	200143fc 	.word	0x200143fc
 8007538:	20012f3c 	.word	0x20012f3c

0800753c <__libc_init_array>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	4d0d      	ldr	r5, [pc, #52]	; (8007574 <__libc_init_array+0x38>)
 8007540:	4c0d      	ldr	r4, [pc, #52]	; (8007578 <__libc_init_array+0x3c>)
 8007542:	1b64      	subs	r4, r4, r5
 8007544:	10a4      	asrs	r4, r4, #2
 8007546:	2600      	movs	r6, #0
 8007548:	42a6      	cmp	r6, r4
 800754a:	d109      	bne.n	8007560 <__libc_init_array+0x24>
 800754c:	4d0b      	ldr	r5, [pc, #44]	; (800757c <__libc_init_array+0x40>)
 800754e:	4c0c      	ldr	r4, [pc, #48]	; (8007580 <__libc_init_array+0x44>)
 8007550:	f000 fcc0 	bl	8007ed4 <_init>
 8007554:	1b64      	subs	r4, r4, r5
 8007556:	10a4      	asrs	r4, r4, #2
 8007558:	2600      	movs	r6, #0
 800755a:	42a6      	cmp	r6, r4
 800755c:	d105      	bne.n	800756a <__libc_init_array+0x2e>
 800755e:	bd70      	pop	{r4, r5, r6, pc}
 8007560:	f855 3b04 	ldr.w	r3, [r5], #4
 8007564:	4798      	blx	r3
 8007566:	3601      	adds	r6, #1
 8007568:	e7ee      	b.n	8007548 <__libc_init_array+0xc>
 800756a:	f855 3b04 	ldr.w	r3, [r5], #4
 800756e:	4798      	blx	r3
 8007570:	3601      	adds	r6, #1
 8007572:	e7f2      	b.n	800755a <__libc_init_array+0x1e>
 8007574:	080080a0 	.word	0x080080a0
 8007578:	080080a0 	.word	0x080080a0
 800757c:	080080a0 	.word	0x080080a0
 8007580:	080080a4 	.word	0x080080a4

08007584 <memcmp>:
 8007584:	b510      	push	{r4, lr}
 8007586:	3901      	subs	r1, #1
 8007588:	4402      	add	r2, r0
 800758a:	4290      	cmp	r0, r2
 800758c:	d101      	bne.n	8007592 <memcmp+0xe>
 800758e:	2000      	movs	r0, #0
 8007590:	e005      	b.n	800759e <memcmp+0x1a>
 8007592:	7803      	ldrb	r3, [r0, #0]
 8007594:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007598:	42a3      	cmp	r3, r4
 800759a:	d001      	beq.n	80075a0 <memcmp+0x1c>
 800759c:	1b18      	subs	r0, r3, r4
 800759e:	bd10      	pop	{r4, pc}
 80075a0:	3001      	adds	r0, #1
 80075a2:	e7f2      	b.n	800758a <memcmp+0x6>

080075a4 <memcpy>:
 80075a4:	440a      	add	r2, r1
 80075a6:	4291      	cmp	r1, r2
 80075a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80075ac:	d100      	bne.n	80075b0 <memcpy+0xc>
 80075ae:	4770      	bx	lr
 80075b0:	b510      	push	{r4, lr}
 80075b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ba:	4291      	cmp	r1, r2
 80075bc:	d1f9      	bne.n	80075b2 <memcpy+0xe>
 80075be:	bd10      	pop	{r4, pc}

080075c0 <memset>:
 80075c0:	4402      	add	r2, r0
 80075c2:	4603      	mov	r3, r0
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d100      	bne.n	80075ca <memset+0xa>
 80075c8:	4770      	bx	lr
 80075ca:	f803 1b01 	strb.w	r1, [r3], #1
 80075ce:	e7f9      	b.n	80075c4 <memset+0x4>

080075d0 <sniprintf>:
 80075d0:	b40c      	push	{r2, r3}
 80075d2:	b530      	push	{r4, r5, lr}
 80075d4:	4b17      	ldr	r3, [pc, #92]	; (8007634 <sniprintf+0x64>)
 80075d6:	1e0c      	subs	r4, r1, #0
 80075d8:	681d      	ldr	r5, [r3, #0]
 80075da:	b09d      	sub	sp, #116	; 0x74
 80075dc:	da08      	bge.n	80075f0 <sniprintf+0x20>
 80075de:	238b      	movs	r3, #139	; 0x8b
 80075e0:	602b      	str	r3, [r5, #0]
 80075e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075e6:	b01d      	add	sp, #116	; 0x74
 80075e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075ec:	b002      	add	sp, #8
 80075ee:	4770      	bx	lr
 80075f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80075f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80075f8:	bf14      	ite	ne
 80075fa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80075fe:	4623      	moveq	r3, r4
 8007600:	9304      	str	r3, [sp, #16]
 8007602:	9307      	str	r3, [sp, #28]
 8007604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007608:	9002      	str	r0, [sp, #8]
 800760a:	9006      	str	r0, [sp, #24]
 800760c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007610:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007612:	ab21      	add	r3, sp, #132	; 0x84
 8007614:	a902      	add	r1, sp, #8
 8007616:	4628      	mov	r0, r5
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	f000 f869 	bl	80076f0 <_svfiprintf_r>
 800761e:	1c43      	adds	r3, r0, #1
 8007620:	bfbc      	itt	lt
 8007622:	238b      	movlt	r3, #139	; 0x8b
 8007624:	602b      	strlt	r3, [r5, #0]
 8007626:	2c00      	cmp	r4, #0
 8007628:	d0dd      	beq.n	80075e6 <sniprintf+0x16>
 800762a:	9b02      	ldr	r3, [sp, #8]
 800762c:	2200      	movs	r2, #0
 800762e:	701a      	strb	r2, [r3, #0]
 8007630:	e7d9      	b.n	80075e6 <sniprintf+0x16>
 8007632:	bf00      	nop
 8007634:	2000001c 	.word	0x2000001c

08007638 <__ssputs_r>:
 8007638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800763c:	688e      	ldr	r6, [r1, #8]
 800763e:	429e      	cmp	r6, r3
 8007640:	4682      	mov	sl, r0
 8007642:	460c      	mov	r4, r1
 8007644:	4690      	mov	r8, r2
 8007646:	461f      	mov	r7, r3
 8007648:	d838      	bhi.n	80076bc <__ssputs_r+0x84>
 800764a:	898a      	ldrh	r2, [r1, #12]
 800764c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007650:	d032      	beq.n	80076b8 <__ssputs_r+0x80>
 8007652:	6825      	ldr	r5, [r4, #0]
 8007654:	6909      	ldr	r1, [r1, #16]
 8007656:	eba5 0901 	sub.w	r9, r5, r1
 800765a:	6965      	ldr	r5, [r4, #20]
 800765c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007660:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007664:	3301      	adds	r3, #1
 8007666:	444b      	add	r3, r9
 8007668:	106d      	asrs	r5, r5, #1
 800766a:	429d      	cmp	r5, r3
 800766c:	bf38      	it	cc
 800766e:	461d      	movcc	r5, r3
 8007670:	0553      	lsls	r3, r2, #21
 8007672:	d531      	bpl.n	80076d8 <__ssputs_r+0xa0>
 8007674:	4629      	mov	r1, r5
 8007676:	f000 fb55 	bl	8007d24 <_malloc_r>
 800767a:	4606      	mov	r6, r0
 800767c:	b950      	cbnz	r0, 8007694 <__ssputs_r+0x5c>
 800767e:	230c      	movs	r3, #12
 8007680:	f8ca 3000 	str.w	r3, [sl]
 8007684:	89a3      	ldrh	r3, [r4, #12]
 8007686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800768a:	81a3      	strh	r3, [r4, #12]
 800768c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007694:	6921      	ldr	r1, [r4, #16]
 8007696:	464a      	mov	r2, r9
 8007698:	f7ff ff84 	bl	80075a4 <memcpy>
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	6126      	str	r6, [r4, #16]
 80076aa:	6165      	str	r5, [r4, #20]
 80076ac:	444e      	add	r6, r9
 80076ae:	eba5 0509 	sub.w	r5, r5, r9
 80076b2:	6026      	str	r6, [r4, #0]
 80076b4:	60a5      	str	r5, [r4, #8]
 80076b6:	463e      	mov	r6, r7
 80076b8:	42be      	cmp	r6, r7
 80076ba:	d900      	bls.n	80076be <__ssputs_r+0x86>
 80076bc:	463e      	mov	r6, r7
 80076be:	6820      	ldr	r0, [r4, #0]
 80076c0:	4632      	mov	r2, r6
 80076c2:	4641      	mov	r1, r8
 80076c4:	f000 faa8 	bl	8007c18 <memmove>
 80076c8:	68a3      	ldr	r3, [r4, #8]
 80076ca:	1b9b      	subs	r3, r3, r6
 80076cc:	60a3      	str	r3, [r4, #8]
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	4433      	add	r3, r6
 80076d2:	6023      	str	r3, [r4, #0]
 80076d4:	2000      	movs	r0, #0
 80076d6:	e7db      	b.n	8007690 <__ssputs_r+0x58>
 80076d8:	462a      	mov	r2, r5
 80076da:	f000 fb97 	bl	8007e0c <_realloc_r>
 80076de:	4606      	mov	r6, r0
 80076e0:	2800      	cmp	r0, #0
 80076e2:	d1e1      	bne.n	80076a8 <__ssputs_r+0x70>
 80076e4:	6921      	ldr	r1, [r4, #16]
 80076e6:	4650      	mov	r0, sl
 80076e8:	f000 fab0 	bl	8007c4c <_free_r>
 80076ec:	e7c7      	b.n	800767e <__ssputs_r+0x46>
	...

080076f0 <_svfiprintf_r>:
 80076f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	4698      	mov	r8, r3
 80076f6:	898b      	ldrh	r3, [r1, #12]
 80076f8:	061b      	lsls	r3, r3, #24
 80076fa:	b09d      	sub	sp, #116	; 0x74
 80076fc:	4607      	mov	r7, r0
 80076fe:	460d      	mov	r5, r1
 8007700:	4614      	mov	r4, r2
 8007702:	d50e      	bpl.n	8007722 <_svfiprintf_r+0x32>
 8007704:	690b      	ldr	r3, [r1, #16]
 8007706:	b963      	cbnz	r3, 8007722 <_svfiprintf_r+0x32>
 8007708:	2140      	movs	r1, #64	; 0x40
 800770a:	f000 fb0b 	bl	8007d24 <_malloc_r>
 800770e:	6028      	str	r0, [r5, #0]
 8007710:	6128      	str	r0, [r5, #16]
 8007712:	b920      	cbnz	r0, 800771e <_svfiprintf_r+0x2e>
 8007714:	230c      	movs	r3, #12
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800771c:	e0d1      	b.n	80078c2 <_svfiprintf_r+0x1d2>
 800771e:	2340      	movs	r3, #64	; 0x40
 8007720:	616b      	str	r3, [r5, #20]
 8007722:	2300      	movs	r3, #0
 8007724:	9309      	str	r3, [sp, #36]	; 0x24
 8007726:	2320      	movs	r3, #32
 8007728:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800772c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007730:	2330      	movs	r3, #48	; 0x30
 8007732:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80078dc <_svfiprintf_r+0x1ec>
 8007736:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800773a:	f04f 0901 	mov.w	r9, #1
 800773e:	4623      	mov	r3, r4
 8007740:	469a      	mov	sl, r3
 8007742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007746:	b10a      	cbz	r2, 800774c <_svfiprintf_r+0x5c>
 8007748:	2a25      	cmp	r2, #37	; 0x25
 800774a:	d1f9      	bne.n	8007740 <_svfiprintf_r+0x50>
 800774c:	ebba 0b04 	subs.w	fp, sl, r4
 8007750:	d00b      	beq.n	800776a <_svfiprintf_r+0x7a>
 8007752:	465b      	mov	r3, fp
 8007754:	4622      	mov	r2, r4
 8007756:	4629      	mov	r1, r5
 8007758:	4638      	mov	r0, r7
 800775a:	f7ff ff6d 	bl	8007638 <__ssputs_r>
 800775e:	3001      	adds	r0, #1
 8007760:	f000 80aa 	beq.w	80078b8 <_svfiprintf_r+0x1c8>
 8007764:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007766:	445a      	add	r2, fp
 8007768:	9209      	str	r2, [sp, #36]	; 0x24
 800776a:	f89a 3000 	ldrb.w	r3, [sl]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 80a2 	beq.w	80078b8 <_svfiprintf_r+0x1c8>
 8007774:	2300      	movs	r3, #0
 8007776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800777a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800777e:	f10a 0a01 	add.w	sl, sl, #1
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	9307      	str	r3, [sp, #28]
 8007786:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800778a:	931a      	str	r3, [sp, #104]	; 0x68
 800778c:	4654      	mov	r4, sl
 800778e:	2205      	movs	r2, #5
 8007790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007794:	4851      	ldr	r0, [pc, #324]	; (80078dc <_svfiprintf_r+0x1ec>)
 8007796:	f7f8 fd8b 	bl	80002b0 <memchr>
 800779a:	9a04      	ldr	r2, [sp, #16]
 800779c:	b9d8      	cbnz	r0, 80077d6 <_svfiprintf_r+0xe6>
 800779e:	06d0      	lsls	r0, r2, #27
 80077a0:	bf44      	itt	mi
 80077a2:	2320      	movmi	r3, #32
 80077a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a8:	0711      	lsls	r1, r2, #28
 80077aa:	bf44      	itt	mi
 80077ac:	232b      	movmi	r3, #43	; 0x2b
 80077ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077b2:	f89a 3000 	ldrb.w	r3, [sl]
 80077b6:	2b2a      	cmp	r3, #42	; 0x2a
 80077b8:	d015      	beq.n	80077e6 <_svfiprintf_r+0xf6>
 80077ba:	9a07      	ldr	r2, [sp, #28]
 80077bc:	4654      	mov	r4, sl
 80077be:	2000      	movs	r0, #0
 80077c0:	f04f 0c0a 	mov.w	ip, #10
 80077c4:	4621      	mov	r1, r4
 80077c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ca:	3b30      	subs	r3, #48	; 0x30
 80077cc:	2b09      	cmp	r3, #9
 80077ce:	d94e      	bls.n	800786e <_svfiprintf_r+0x17e>
 80077d0:	b1b0      	cbz	r0, 8007800 <_svfiprintf_r+0x110>
 80077d2:	9207      	str	r2, [sp, #28]
 80077d4:	e014      	b.n	8007800 <_svfiprintf_r+0x110>
 80077d6:	eba0 0308 	sub.w	r3, r0, r8
 80077da:	fa09 f303 	lsl.w	r3, r9, r3
 80077de:	4313      	orrs	r3, r2
 80077e0:	9304      	str	r3, [sp, #16]
 80077e2:	46a2      	mov	sl, r4
 80077e4:	e7d2      	b.n	800778c <_svfiprintf_r+0x9c>
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	1d19      	adds	r1, r3, #4
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	9103      	str	r1, [sp, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bfbb      	ittet	lt
 80077f2:	425b      	neglt	r3, r3
 80077f4:	f042 0202 	orrlt.w	r2, r2, #2
 80077f8:	9307      	strge	r3, [sp, #28]
 80077fa:	9307      	strlt	r3, [sp, #28]
 80077fc:	bfb8      	it	lt
 80077fe:	9204      	strlt	r2, [sp, #16]
 8007800:	7823      	ldrb	r3, [r4, #0]
 8007802:	2b2e      	cmp	r3, #46	; 0x2e
 8007804:	d10c      	bne.n	8007820 <_svfiprintf_r+0x130>
 8007806:	7863      	ldrb	r3, [r4, #1]
 8007808:	2b2a      	cmp	r3, #42	; 0x2a
 800780a:	d135      	bne.n	8007878 <_svfiprintf_r+0x188>
 800780c:	9b03      	ldr	r3, [sp, #12]
 800780e:	1d1a      	adds	r2, r3, #4
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	9203      	str	r2, [sp, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	bfb8      	it	lt
 8007818:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800781c:	3402      	adds	r4, #2
 800781e:	9305      	str	r3, [sp, #20]
 8007820:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078ec <_svfiprintf_r+0x1fc>
 8007824:	7821      	ldrb	r1, [r4, #0]
 8007826:	2203      	movs	r2, #3
 8007828:	4650      	mov	r0, sl
 800782a:	f7f8 fd41 	bl	80002b0 <memchr>
 800782e:	b140      	cbz	r0, 8007842 <_svfiprintf_r+0x152>
 8007830:	2340      	movs	r3, #64	; 0x40
 8007832:	eba0 000a 	sub.w	r0, r0, sl
 8007836:	fa03 f000 	lsl.w	r0, r3, r0
 800783a:	9b04      	ldr	r3, [sp, #16]
 800783c:	4303      	orrs	r3, r0
 800783e:	3401      	adds	r4, #1
 8007840:	9304      	str	r3, [sp, #16]
 8007842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007846:	4826      	ldr	r0, [pc, #152]	; (80078e0 <_svfiprintf_r+0x1f0>)
 8007848:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800784c:	2206      	movs	r2, #6
 800784e:	f7f8 fd2f 	bl	80002b0 <memchr>
 8007852:	2800      	cmp	r0, #0
 8007854:	d038      	beq.n	80078c8 <_svfiprintf_r+0x1d8>
 8007856:	4b23      	ldr	r3, [pc, #140]	; (80078e4 <_svfiprintf_r+0x1f4>)
 8007858:	bb1b      	cbnz	r3, 80078a2 <_svfiprintf_r+0x1b2>
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	3307      	adds	r3, #7
 800785e:	f023 0307 	bic.w	r3, r3, #7
 8007862:	3308      	adds	r3, #8
 8007864:	9303      	str	r3, [sp, #12]
 8007866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007868:	4433      	add	r3, r6
 800786a:	9309      	str	r3, [sp, #36]	; 0x24
 800786c:	e767      	b.n	800773e <_svfiprintf_r+0x4e>
 800786e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007872:	460c      	mov	r4, r1
 8007874:	2001      	movs	r0, #1
 8007876:	e7a5      	b.n	80077c4 <_svfiprintf_r+0xd4>
 8007878:	2300      	movs	r3, #0
 800787a:	3401      	adds	r4, #1
 800787c:	9305      	str	r3, [sp, #20]
 800787e:	4619      	mov	r1, r3
 8007880:	f04f 0c0a 	mov.w	ip, #10
 8007884:	4620      	mov	r0, r4
 8007886:	f810 2b01 	ldrb.w	r2, [r0], #1
 800788a:	3a30      	subs	r2, #48	; 0x30
 800788c:	2a09      	cmp	r2, #9
 800788e:	d903      	bls.n	8007898 <_svfiprintf_r+0x1a8>
 8007890:	2b00      	cmp	r3, #0
 8007892:	d0c5      	beq.n	8007820 <_svfiprintf_r+0x130>
 8007894:	9105      	str	r1, [sp, #20]
 8007896:	e7c3      	b.n	8007820 <_svfiprintf_r+0x130>
 8007898:	fb0c 2101 	mla	r1, ip, r1, r2
 800789c:	4604      	mov	r4, r0
 800789e:	2301      	movs	r3, #1
 80078a0:	e7f0      	b.n	8007884 <_svfiprintf_r+0x194>
 80078a2:	ab03      	add	r3, sp, #12
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	462a      	mov	r2, r5
 80078a8:	4b0f      	ldr	r3, [pc, #60]	; (80078e8 <_svfiprintf_r+0x1f8>)
 80078aa:	a904      	add	r1, sp, #16
 80078ac:	4638      	mov	r0, r7
 80078ae:	f3af 8000 	nop.w
 80078b2:	1c42      	adds	r2, r0, #1
 80078b4:	4606      	mov	r6, r0
 80078b6:	d1d6      	bne.n	8007866 <_svfiprintf_r+0x176>
 80078b8:	89ab      	ldrh	r3, [r5, #12]
 80078ba:	065b      	lsls	r3, r3, #25
 80078bc:	f53f af2c 	bmi.w	8007718 <_svfiprintf_r+0x28>
 80078c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078c2:	b01d      	add	sp, #116	; 0x74
 80078c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c8:	ab03      	add	r3, sp, #12
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	462a      	mov	r2, r5
 80078ce:	4b06      	ldr	r3, [pc, #24]	; (80078e8 <_svfiprintf_r+0x1f8>)
 80078d0:	a904      	add	r1, sp, #16
 80078d2:	4638      	mov	r0, r7
 80078d4:	f000 f87a 	bl	80079cc <_printf_i>
 80078d8:	e7eb      	b.n	80078b2 <_svfiprintf_r+0x1c2>
 80078da:	bf00      	nop
 80078dc:	08008064 	.word	0x08008064
 80078e0:	0800806e 	.word	0x0800806e
 80078e4:	00000000 	.word	0x00000000
 80078e8:	08007639 	.word	0x08007639
 80078ec:	0800806a 	.word	0x0800806a

080078f0 <_printf_common>:
 80078f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078f4:	4616      	mov	r6, r2
 80078f6:	4699      	mov	r9, r3
 80078f8:	688a      	ldr	r2, [r1, #8]
 80078fa:	690b      	ldr	r3, [r1, #16]
 80078fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007900:	4293      	cmp	r3, r2
 8007902:	bfb8      	it	lt
 8007904:	4613      	movlt	r3, r2
 8007906:	6033      	str	r3, [r6, #0]
 8007908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800790c:	4607      	mov	r7, r0
 800790e:	460c      	mov	r4, r1
 8007910:	b10a      	cbz	r2, 8007916 <_printf_common+0x26>
 8007912:	3301      	adds	r3, #1
 8007914:	6033      	str	r3, [r6, #0]
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	0699      	lsls	r1, r3, #26
 800791a:	bf42      	ittt	mi
 800791c:	6833      	ldrmi	r3, [r6, #0]
 800791e:	3302      	addmi	r3, #2
 8007920:	6033      	strmi	r3, [r6, #0]
 8007922:	6825      	ldr	r5, [r4, #0]
 8007924:	f015 0506 	ands.w	r5, r5, #6
 8007928:	d106      	bne.n	8007938 <_printf_common+0x48>
 800792a:	f104 0a19 	add.w	sl, r4, #25
 800792e:	68e3      	ldr	r3, [r4, #12]
 8007930:	6832      	ldr	r2, [r6, #0]
 8007932:	1a9b      	subs	r3, r3, r2
 8007934:	42ab      	cmp	r3, r5
 8007936:	dc26      	bgt.n	8007986 <_printf_common+0x96>
 8007938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800793c:	1e13      	subs	r3, r2, #0
 800793e:	6822      	ldr	r2, [r4, #0]
 8007940:	bf18      	it	ne
 8007942:	2301      	movne	r3, #1
 8007944:	0692      	lsls	r2, r2, #26
 8007946:	d42b      	bmi.n	80079a0 <_printf_common+0xb0>
 8007948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800794c:	4649      	mov	r1, r9
 800794e:	4638      	mov	r0, r7
 8007950:	47c0      	blx	r8
 8007952:	3001      	adds	r0, #1
 8007954:	d01e      	beq.n	8007994 <_printf_common+0xa4>
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	68e5      	ldr	r5, [r4, #12]
 800795a:	6832      	ldr	r2, [r6, #0]
 800795c:	f003 0306 	and.w	r3, r3, #6
 8007960:	2b04      	cmp	r3, #4
 8007962:	bf08      	it	eq
 8007964:	1aad      	subeq	r5, r5, r2
 8007966:	68a3      	ldr	r3, [r4, #8]
 8007968:	6922      	ldr	r2, [r4, #16]
 800796a:	bf0c      	ite	eq
 800796c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007970:	2500      	movne	r5, #0
 8007972:	4293      	cmp	r3, r2
 8007974:	bfc4      	itt	gt
 8007976:	1a9b      	subgt	r3, r3, r2
 8007978:	18ed      	addgt	r5, r5, r3
 800797a:	2600      	movs	r6, #0
 800797c:	341a      	adds	r4, #26
 800797e:	42b5      	cmp	r5, r6
 8007980:	d11a      	bne.n	80079b8 <_printf_common+0xc8>
 8007982:	2000      	movs	r0, #0
 8007984:	e008      	b.n	8007998 <_printf_common+0xa8>
 8007986:	2301      	movs	r3, #1
 8007988:	4652      	mov	r2, sl
 800798a:	4649      	mov	r1, r9
 800798c:	4638      	mov	r0, r7
 800798e:	47c0      	blx	r8
 8007990:	3001      	adds	r0, #1
 8007992:	d103      	bne.n	800799c <_printf_common+0xac>
 8007994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799c:	3501      	adds	r5, #1
 800799e:	e7c6      	b.n	800792e <_printf_common+0x3e>
 80079a0:	18e1      	adds	r1, r4, r3
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	2030      	movs	r0, #48	; 0x30
 80079a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079aa:	4422      	add	r2, r4
 80079ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079b4:	3302      	adds	r3, #2
 80079b6:	e7c7      	b.n	8007948 <_printf_common+0x58>
 80079b8:	2301      	movs	r3, #1
 80079ba:	4622      	mov	r2, r4
 80079bc:	4649      	mov	r1, r9
 80079be:	4638      	mov	r0, r7
 80079c0:	47c0      	blx	r8
 80079c2:	3001      	adds	r0, #1
 80079c4:	d0e6      	beq.n	8007994 <_printf_common+0xa4>
 80079c6:	3601      	adds	r6, #1
 80079c8:	e7d9      	b.n	800797e <_printf_common+0x8e>
	...

080079cc <_printf_i>:
 80079cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	7e0f      	ldrb	r7, [r1, #24]
 80079d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079d4:	2f78      	cmp	r7, #120	; 0x78
 80079d6:	4691      	mov	r9, r2
 80079d8:	4680      	mov	r8, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	469a      	mov	sl, r3
 80079de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079e2:	d807      	bhi.n	80079f4 <_printf_i+0x28>
 80079e4:	2f62      	cmp	r7, #98	; 0x62
 80079e6:	d80a      	bhi.n	80079fe <_printf_i+0x32>
 80079e8:	2f00      	cmp	r7, #0
 80079ea:	f000 80d8 	beq.w	8007b9e <_printf_i+0x1d2>
 80079ee:	2f58      	cmp	r7, #88	; 0x58
 80079f0:	f000 80a3 	beq.w	8007b3a <_printf_i+0x16e>
 80079f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079fc:	e03a      	b.n	8007a74 <_printf_i+0xa8>
 80079fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a02:	2b15      	cmp	r3, #21
 8007a04:	d8f6      	bhi.n	80079f4 <_printf_i+0x28>
 8007a06:	a101      	add	r1, pc, #4	; (adr r1, 8007a0c <_printf_i+0x40>)
 8007a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a0c:	08007a65 	.word	0x08007a65
 8007a10:	08007a79 	.word	0x08007a79
 8007a14:	080079f5 	.word	0x080079f5
 8007a18:	080079f5 	.word	0x080079f5
 8007a1c:	080079f5 	.word	0x080079f5
 8007a20:	080079f5 	.word	0x080079f5
 8007a24:	08007a79 	.word	0x08007a79
 8007a28:	080079f5 	.word	0x080079f5
 8007a2c:	080079f5 	.word	0x080079f5
 8007a30:	080079f5 	.word	0x080079f5
 8007a34:	080079f5 	.word	0x080079f5
 8007a38:	08007b85 	.word	0x08007b85
 8007a3c:	08007aa9 	.word	0x08007aa9
 8007a40:	08007b67 	.word	0x08007b67
 8007a44:	080079f5 	.word	0x080079f5
 8007a48:	080079f5 	.word	0x080079f5
 8007a4c:	08007ba7 	.word	0x08007ba7
 8007a50:	080079f5 	.word	0x080079f5
 8007a54:	08007aa9 	.word	0x08007aa9
 8007a58:	080079f5 	.word	0x080079f5
 8007a5c:	080079f5 	.word	0x080079f5
 8007a60:	08007b6f 	.word	0x08007b6f
 8007a64:	682b      	ldr	r3, [r5, #0]
 8007a66:	1d1a      	adds	r2, r3, #4
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	602a      	str	r2, [r5, #0]
 8007a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a74:	2301      	movs	r3, #1
 8007a76:	e0a3      	b.n	8007bc0 <_printf_i+0x1f4>
 8007a78:	6820      	ldr	r0, [r4, #0]
 8007a7a:	6829      	ldr	r1, [r5, #0]
 8007a7c:	0606      	lsls	r6, r0, #24
 8007a7e:	f101 0304 	add.w	r3, r1, #4
 8007a82:	d50a      	bpl.n	8007a9a <_printf_i+0xce>
 8007a84:	680e      	ldr	r6, [r1, #0]
 8007a86:	602b      	str	r3, [r5, #0]
 8007a88:	2e00      	cmp	r6, #0
 8007a8a:	da03      	bge.n	8007a94 <_printf_i+0xc8>
 8007a8c:	232d      	movs	r3, #45	; 0x2d
 8007a8e:	4276      	negs	r6, r6
 8007a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a94:	485e      	ldr	r0, [pc, #376]	; (8007c10 <_printf_i+0x244>)
 8007a96:	230a      	movs	r3, #10
 8007a98:	e019      	b.n	8007ace <_printf_i+0x102>
 8007a9a:	680e      	ldr	r6, [r1, #0]
 8007a9c:	602b      	str	r3, [r5, #0]
 8007a9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007aa2:	bf18      	it	ne
 8007aa4:	b236      	sxthne	r6, r6
 8007aa6:	e7ef      	b.n	8007a88 <_printf_i+0xbc>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	6820      	ldr	r0, [r4, #0]
 8007aac:	1d19      	adds	r1, r3, #4
 8007aae:	6029      	str	r1, [r5, #0]
 8007ab0:	0601      	lsls	r1, r0, #24
 8007ab2:	d501      	bpl.n	8007ab8 <_printf_i+0xec>
 8007ab4:	681e      	ldr	r6, [r3, #0]
 8007ab6:	e002      	b.n	8007abe <_printf_i+0xf2>
 8007ab8:	0646      	lsls	r6, r0, #25
 8007aba:	d5fb      	bpl.n	8007ab4 <_printf_i+0xe8>
 8007abc:	881e      	ldrh	r6, [r3, #0]
 8007abe:	4854      	ldr	r0, [pc, #336]	; (8007c10 <_printf_i+0x244>)
 8007ac0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ac2:	bf0c      	ite	eq
 8007ac4:	2308      	moveq	r3, #8
 8007ac6:	230a      	movne	r3, #10
 8007ac8:	2100      	movs	r1, #0
 8007aca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ace:	6865      	ldr	r5, [r4, #4]
 8007ad0:	60a5      	str	r5, [r4, #8]
 8007ad2:	2d00      	cmp	r5, #0
 8007ad4:	bfa2      	ittt	ge
 8007ad6:	6821      	ldrge	r1, [r4, #0]
 8007ad8:	f021 0104 	bicge.w	r1, r1, #4
 8007adc:	6021      	strge	r1, [r4, #0]
 8007ade:	b90e      	cbnz	r6, 8007ae4 <_printf_i+0x118>
 8007ae0:	2d00      	cmp	r5, #0
 8007ae2:	d04d      	beq.n	8007b80 <_printf_i+0x1b4>
 8007ae4:	4615      	mov	r5, r2
 8007ae6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007aea:	fb03 6711 	mls	r7, r3, r1, r6
 8007aee:	5dc7      	ldrb	r7, [r0, r7]
 8007af0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007af4:	4637      	mov	r7, r6
 8007af6:	42bb      	cmp	r3, r7
 8007af8:	460e      	mov	r6, r1
 8007afa:	d9f4      	bls.n	8007ae6 <_printf_i+0x11a>
 8007afc:	2b08      	cmp	r3, #8
 8007afe:	d10b      	bne.n	8007b18 <_printf_i+0x14c>
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	07de      	lsls	r6, r3, #31
 8007b04:	d508      	bpl.n	8007b18 <_printf_i+0x14c>
 8007b06:	6923      	ldr	r3, [r4, #16]
 8007b08:	6861      	ldr	r1, [r4, #4]
 8007b0a:	4299      	cmp	r1, r3
 8007b0c:	bfde      	ittt	le
 8007b0e:	2330      	movle	r3, #48	; 0x30
 8007b10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007b18:	1b52      	subs	r2, r2, r5
 8007b1a:	6122      	str	r2, [r4, #16]
 8007b1c:	f8cd a000 	str.w	sl, [sp]
 8007b20:	464b      	mov	r3, r9
 8007b22:	aa03      	add	r2, sp, #12
 8007b24:	4621      	mov	r1, r4
 8007b26:	4640      	mov	r0, r8
 8007b28:	f7ff fee2 	bl	80078f0 <_printf_common>
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d14c      	bne.n	8007bca <_printf_i+0x1fe>
 8007b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b34:	b004      	add	sp, #16
 8007b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b3a:	4835      	ldr	r0, [pc, #212]	; (8007c10 <_printf_i+0x244>)
 8007b3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b40:	6829      	ldr	r1, [r5, #0]
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b48:	6029      	str	r1, [r5, #0]
 8007b4a:	061d      	lsls	r5, r3, #24
 8007b4c:	d514      	bpl.n	8007b78 <_printf_i+0x1ac>
 8007b4e:	07df      	lsls	r7, r3, #31
 8007b50:	bf44      	itt	mi
 8007b52:	f043 0320 	orrmi.w	r3, r3, #32
 8007b56:	6023      	strmi	r3, [r4, #0]
 8007b58:	b91e      	cbnz	r6, 8007b62 <_printf_i+0x196>
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	f023 0320 	bic.w	r3, r3, #32
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	2310      	movs	r3, #16
 8007b64:	e7b0      	b.n	8007ac8 <_printf_i+0xfc>
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	f043 0320 	orr.w	r3, r3, #32
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	2378      	movs	r3, #120	; 0x78
 8007b70:	4828      	ldr	r0, [pc, #160]	; (8007c14 <_printf_i+0x248>)
 8007b72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b76:	e7e3      	b.n	8007b40 <_printf_i+0x174>
 8007b78:	0659      	lsls	r1, r3, #25
 8007b7a:	bf48      	it	mi
 8007b7c:	b2b6      	uxthmi	r6, r6
 8007b7e:	e7e6      	b.n	8007b4e <_printf_i+0x182>
 8007b80:	4615      	mov	r5, r2
 8007b82:	e7bb      	b.n	8007afc <_printf_i+0x130>
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	6826      	ldr	r6, [r4, #0]
 8007b88:	6961      	ldr	r1, [r4, #20]
 8007b8a:	1d18      	adds	r0, r3, #4
 8007b8c:	6028      	str	r0, [r5, #0]
 8007b8e:	0635      	lsls	r5, r6, #24
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	d501      	bpl.n	8007b98 <_printf_i+0x1cc>
 8007b94:	6019      	str	r1, [r3, #0]
 8007b96:	e002      	b.n	8007b9e <_printf_i+0x1d2>
 8007b98:	0670      	lsls	r0, r6, #25
 8007b9a:	d5fb      	bpl.n	8007b94 <_printf_i+0x1c8>
 8007b9c:	8019      	strh	r1, [r3, #0]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	6123      	str	r3, [r4, #16]
 8007ba2:	4615      	mov	r5, r2
 8007ba4:	e7ba      	b.n	8007b1c <_printf_i+0x150>
 8007ba6:	682b      	ldr	r3, [r5, #0]
 8007ba8:	1d1a      	adds	r2, r3, #4
 8007baa:	602a      	str	r2, [r5, #0]
 8007bac:	681d      	ldr	r5, [r3, #0]
 8007bae:	6862      	ldr	r2, [r4, #4]
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f7f8 fb7c 	bl	80002b0 <memchr>
 8007bb8:	b108      	cbz	r0, 8007bbe <_printf_i+0x1f2>
 8007bba:	1b40      	subs	r0, r0, r5
 8007bbc:	6060      	str	r0, [r4, #4]
 8007bbe:	6863      	ldr	r3, [r4, #4]
 8007bc0:	6123      	str	r3, [r4, #16]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bc8:	e7a8      	b.n	8007b1c <_printf_i+0x150>
 8007bca:	6923      	ldr	r3, [r4, #16]
 8007bcc:	462a      	mov	r2, r5
 8007bce:	4649      	mov	r1, r9
 8007bd0:	4640      	mov	r0, r8
 8007bd2:	47d0      	blx	sl
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d0ab      	beq.n	8007b30 <_printf_i+0x164>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	079b      	lsls	r3, r3, #30
 8007bdc:	d413      	bmi.n	8007c06 <_printf_i+0x23a>
 8007bde:	68e0      	ldr	r0, [r4, #12]
 8007be0:	9b03      	ldr	r3, [sp, #12]
 8007be2:	4298      	cmp	r0, r3
 8007be4:	bfb8      	it	lt
 8007be6:	4618      	movlt	r0, r3
 8007be8:	e7a4      	b.n	8007b34 <_printf_i+0x168>
 8007bea:	2301      	movs	r3, #1
 8007bec:	4632      	mov	r2, r6
 8007bee:	4649      	mov	r1, r9
 8007bf0:	4640      	mov	r0, r8
 8007bf2:	47d0      	blx	sl
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d09b      	beq.n	8007b30 <_printf_i+0x164>
 8007bf8:	3501      	adds	r5, #1
 8007bfa:	68e3      	ldr	r3, [r4, #12]
 8007bfc:	9903      	ldr	r1, [sp, #12]
 8007bfe:	1a5b      	subs	r3, r3, r1
 8007c00:	42ab      	cmp	r3, r5
 8007c02:	dcf2      	bgt.n	8007bea <_printf_i+0x21e>
 8007c04:	e7eb      	b.n	8007bde <_printf_i+0x212>
 8007c06:	2500      	movs	r5, #0
 8007c08:	f104 0619 	add.w	r6, r4, #25
 8007c0c:	e7f5      	b.n	8007bfa <_printf_i+0x22e>
 8007c0e:	bf00      	nop
 8007c10:	08008075 	.word	0x08008075
 8007c14:	08008086 	.word	0x08008086

08007c18 <memmove>:
 8007c18:	4288      	cmp	r0, r1
 8007c1a:	b510      	push	{r4, lr}
 8007c1c:	eb01 0402 	add.w	r4, r1, r2
 8007c20:	d902      	bls.n	8007c28 <memmove+0x10>
 8007c22:	4284      	cmp	r4, r0
 8007c24:	4623      	mov	r3, r4
 8007c26:	d807      	bhi.n	8007c38 <memmove+0x20>
 8007c28:	1e43      	subs	r3, r0, #1
 8007c2a:	42a1      	cmp	r1, r4
 8007c2c:	d008      	beq.n	8007c40 <memmove+0x28>
 8007c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c36:	e7f8      	b.n	8007c2a <memmove+0x12>
 8007c38:	4402      	add	r2, r0
 8007c3a:	4601      	mov	r1, r0
 8007c3c:	428a      	cmp	r2, r1
 8007c3e:	d100      	bne.n	8007c42 <memmove+0x2a>
 8007c40:	bd10      	pop	{r4, pc}
 8007c42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c4a:	e7f7      	b.n	8007c3c <memmove+0x24>

08007c4c <_free_r>:
 8007c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c4e:	2900      	cmp	r1, #0
 8007c50:	d044      	beq.n	8007cdc <_free_r+0x90>
 8007c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c56:	9001      	str	r0, [sp, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8007c5e:	bfb8      	it	lt
 8007c60:	18e4      	addlt	r4, r4, r3
 8007c62:	f000 f913 	bl	8007e8c <__malloc_lock>
 8007c66:	4a1e      	ldr	r2, [pc, #120]	; (8007ce0 <_free_r+0x94>)
 8007c68:	9801      	ldr	r0, [sp, #4]
 8007c6a:	6813      	ldr	r3, [r2, #0]
 8007c6c:	b933      	cbnz	r3, 8007c7c <_free_r+0x30>
 8007c6e:	6063      	str	r3, [r4, #4]
 8007c70:	6014      	str	r4, [r2, #0]
 8007c72:	b003      	add	sp, #12
 8007c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c78:	f000 b90e 	b.w	8007e98 <__malloc_unlock>
 8007c7c:	42a3      	cmp	r3, r4
 8007c7e:	d908      	bls.n	8007c92 <_free_r+0x46>
 8007c80:	6825      	ldr	r5, [r4, #0]
 8007c82:	1961      	adds	r1, r4, r5
 8007c84:	428b      	cmp	r3, r1
 8007c86:	bf01      	itttt	eq
 8007c88:	6819      	ldreq	r1, [r3, #0]
 8007c8a:	685b      	ldreq	r3, [r3, #4]
 8007c8c:	1949      	addeq	r1, r1, r5
 8007c8e:	6021      	streq	r1, [r4, #0]
 8007c90:	e7ed      	b.n	8007c6e <_free_r+0x22>
 8007c92:	461a      	mov	r2, r3
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	b10b      	cbz	r3, 8007c9c <_free_r+0x50>
 8007c98:	42a3      	cmp	r3, r4
 8007c9a:	d9fa      	bls.n	8007c92 <_free_r+0x46>
 8007c9c:	6811      	ldr	r1, [r2, #0]
 8007c9e:	1855      	adds	r5, r2, r1
 8007ca0:	42a5      	cmp	r5, r4
 8007ca2:	d10b      	bne.n	8007cbc <_free_r+0x70>
 8007ca4:	6824      	ldr	r4, [r4, #0]
 8007ca6:	4421      	add	r1, r4
 8007ca8:	1854      	adds	r4, r2, r1
 8007caa:	42a3      	cmp	r3, r4
 8007cac:	6011      	str	r1, [r2, #0]
 8007cae:	d1e0      	bne.n	8007c72 <_free_r+0x26>
 8007cb0:	681c      	ldr	r4, [r3, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	6053      	str	r3, [r2, #4]
 8007cb6:	4421      	add	r1, r4
 8007cb8:	6011      	str	r1, [r2, #0]
 8007cba:	e7da      	b.n	8007c72 <_free_r+0x26>
 8007cbc:	d902      	bls.n	8007cc4 <_free_r+0x78>
 8007cbe:	230c      	movs	r3, #12
 8007cc0:	6003      	str	r3, [r0, #0]
 8007cc2:	e7d6      	b.n	8007c72 <_free_r+0x26>
 8007cc4:	6825      	ldr	r5, [r4, #0]
 8007cc6:	1961      	adds	r1, r4, r5
 8007cc8:	428b      	cmp	r3, r1
 8007cca:	bf04      	itt	eq
 8007ccc:	6819      	ldreq	r1, [r3, #0]
 8007cce:	685b      	ldreq	r3, [r3, #4]
 8007cd0:	6063      	str	r3, [r4, #4]
 8007cd2:	bf04      	itt	eq
 8007cd4:	1949      	addeq	r1, r1, r5
 8007cd6:	6021      	streq	r1, [r4, #0]
 8007cd8:	6054      	str	r4, [r2, #4]
 8007cda:	e7ca      	b.n	8007c72 <_free_r+0x26>
 8007cdc:	b003      	add	sp, #12
 8007cde:	bd30      	pop	{r4, r5, pc}
 8007ce0:	20014510 	.word	0x20014510

08007ce4 <sbrk_aligned>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	4e0e      	ldr	r6, [pc, #56]	; (8007d20 <sbrk_aligned+0x3c>)
 8007ce8:	460c      	mov	r4, r1
 8007cea:	6831      	ldr	r1, [r6, #0]
 8007cec:	4605      	mov	r5, r0
 8007cee:	b911      	cbnz	r1, 8007cf6 <sbrk_aligned+0x12>
 8007cf0:	f000 f8bc 	bl	8007e6c <_sbrk_r>
 8007cf4:	6030      	str	r0, [r6, #0]
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f000 f8b7 	bl	8007e6c <_sbrk_r>
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	d00a      	beq.n	8007d18 <sbrk_aligned+0x34>
 8007d02:	1cc4      	adds	r4, r0, #3
 8007d04:	f024 0403 	bic.w	r4, r4, #3
 8007d08:	42a0      	cmp	r0, r4
 8007d0a:	d007      	beq.n	8007d1c <sbrk_aligned+0x38>
 8007d0c:	1a21      	subs	r1, r4, r0
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f000 f8ac 	bl	8007e6c <_sbrk_r>
 8007d14:	3001      	adds	r0, #1
 8007d16:	d101      	bne.n	8007d1c <sbrk_aligned+0x38>
 8007d18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
 8007d20:	20014514 	.word	0x20014514

08007d24 <_malloc_r>:
 8007d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d28:	1ccd      	adds	r5, r1, #3
 8007d2a:	f025 0503 	bic.w	r5, r5, #3
 8007d2e:	3508      	adds	r5, #8
 8007d30:	2d0c      	cmp	r5, #12
 8007d32:	bf38      	it	cc
 8007d34:	250c      	movcc	r5, #12
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	4607      	mov	r7, r0
 8007d3a:	db01      	blt.n	8007d40 <_malloc_r+0x1c>
 8007d3c:	42a9      	cmp	r1, r5
 8007d3e:	d905      	bls.n	8007d4c <_malloc_r+0x28>
 8007d40:	230c      	movs	r3, #12
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	2600      	movs	r6, #0
 8007d46:	4630      	mov	r0, r6
 8007d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d4c:	4e2e      	ldr	r6, [pc, #184]	; (8007e08 <_malloc_r+0xe4>)
 8007d4e:	f000 f89d 	bl	8007e8c <__malloc_lock>
 8007d52:	6833      	ldr	r3, [r6, #0]
 8007d54:	461c      	mov	r4, r3
 8007d56:	bb34      	cbnz	r4, 8007da6 <_malloc_r+0x82>
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	f7ff ffc2 	bl	8007ce4 <sbrk_aligned>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	4604      	mov	r4, r0
 8007d64:	d14d      	bne.n	8007e02 <_malloc_r+0xde>
 8007d66:	6834      	ldr	r4, [r6, #0]
 8007d68:	4626      	mov	r6, r4
 8007d6a:	2e00      	cmp	r6, #0
 8007d6c:	d140      	bne.n	8007df0 <_malloc_r+0xcc>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	4631      	mov	r1, r6
 8007d72:	4638      	mov	r0, r7
 8007d74:	eb04 0803 	add.w	r8, r4, r3
 8007d78:	f000 f878 	bl	8007e6c <_sbrk_r>
 8007d7c:	4580      	cmp	r8, r0
 8007d7e:	d13a      	bne.n	8007df6 <_malloc_r+0xd2>
 8007d80:	6821      	ldr	r1, [r4, #0]
 8007d82:	3503      	adds	r5, #3
 8007d84:	1a6d      	subs	r5, r5, r1
 8007d86:	f025 0503 	bic.w	r5, r5, #3
 8007d8a:	3508      	adds	r5, #8
 8007d8c:	2d0c      	cmp	r5, #12
 8007d8e:	bf38      	it	cc
 8007d90:	250c      	movcc	r5, #12
 8007d92:	4629      	mov	r1, r5
 8007d94:	4638      	mov	r0, r7
 8007d96:	f7ff ffa5 	bl	8007ce4 <sbrk_aligned>
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	d02b      	beq.n	8007df6 <_malloc_r+0xd2>
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	442b      	add	r3, r5
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	e00e      	b.n	8007dc4 <_malloc_r+0xa0>
 8007da6:	6822      	ldr	r2, [r4, #0]
 8007da8:	1b52      	subs	r2, r2, r5
 8007daa:	d41e      	bmi.n	8007dea <_malloc_r+0xc6>
 8007dac:	2a0b      	cmp	r2, #11
 8007dae:	d916      	bls.n	8007dde <_malloc_r+0xba>
 8007db0:	1961      	adds	r1, r4, r5
 8007db2:	42a3      	cmp	r3, r4
 8007db4:	6025      	str	r5, [r4, #0]
 8007db6:	bf18      	it	ne
 8007db8:	6059      	strne	r1, [r3, #4]
 8007dba:	6863      	ldr	r3, [r4, #4]
 8007dbc:	bf08      	it	eq
 8007dbe:	6031      	streq	r1, [r6, #0]
 8007dc0:	5162      	str	r2, [r4, r5]
 8007dc2:	604b      	str	r3, [r1, #4]
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	f104 060b 	add.w	r6, r4, #11
 8007dca:	f000 f865 	bl	8007e98 <__malloc_unlock>
 8007dce:	f026 0607 	bic.w	r6, r6, #7
 8007dd2:	1d23      	adds	r3, r4, #4
 8007dd4:	1af2      	subs	r2, r6, r3
 8007dd6:	d0b6      	beq.n	8007d46 <_malloc_r+0x22>
 8007dd8:	1b9b      	subs	r3, r3, r6
 8007dda:	50a3      	str	r3, [r4, r2]
 8007ddc:	e7b3      	b.n	8007d46 <_malloc_r+0x22>
 8007dde:	6862      	ldr	r2, [r4, #4]
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	bf0c      	ite	eq
 8007de4:	6032      	streq	r2, [r6, #0]
 8007de6:	605a      	strne	r2, [r3, #4]
 8007de8:	e7ec      	b.n	8007dc4 <_malloc_r+0xa0>
 8007dea:	4623      	mov	r3, r4
 8007dec:	6864      	ldr	r4, [r4, #4]
 8007dee:	e7b2      	b.n	8007d56 <_malloc_r+0x32>
 8007df0:	4634      	mov	r4, r6
 8007df2:	6876      	ldr	r6, [r6, #4]
 8007df4:	e7b9      	b.n	8007d6a <_malloc_r+0x46>
 8007df6:	230c      	movs	r3, #12
 8007df8:	603b      	str	r3, [r7, #0]
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	f000 f84c 	bl	8007e98 <__malloc_unlock>
 8007e00:	e7a1      	b.n	8007d46 <_malloc_r+0x22>
 8007e02:	6025      	str	r5, [r4, #0]
 8007e04:	e7de      	b.n	8007dc4 <_malloc_r+0xa0>
 8007e06:	bf00      	nop
 8007e08:	20014510 	.word	0x20014510

08007e0c <_realloc_r>:
 8007e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e10:	4680      	mov	r8, r0
 8007e12:	4614      	mov	r4, r2
 8007e14:	460e      	mov	r6, r1
 8007e16:	b921      	cbnz	r1, 8007e22 <_realloc_r+0x16>
 8007e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	f7ff bf81 	b.w	8007d24 <_malloc_r>
 8007e22:	b92a      	cbnz	r2, 8007e30 <_realloc_r+0x24>
 8007e24:	f7ff ff12 	bl	8007c4c <_free_r>
 8007e28:	4625      	mov	r5, r4
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e30:	f000 f838 	bl	8007ea4 <_malloc_usable_size_r>
 8007e34:	4284      	cmp	r4, r0
 8007e36:	4607      	mov	r7, r0
 8007e38:	d802      	bhi.n	8007e40 <_realloc_r+0x34>
 8007e3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e3e:	d812      	bhi.n	8007e66 <_realloc_r+0x5a>
 8007e40:	4621      	mov	r1, r4
 8007e42:	4640      	mov	r0, r8
 8007e44:	f7ff ff6e 	bl	8007d24 <_malloc_r>
 8007e48:	4605      	mov	r5, r0
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d0ed      	beq.n	8007e2a <_realloc_r+0x1e>
 8007e4e:	42bc      	cmp	r4, r7
 8007e50:	4622      	mov	r2, r4
 8007e52:	4631      	mov	r1, r6
 8007e54:	bf28      	it	cs
 8007e56:	463a      	movcs	r2, r7
 8007e58:	f7ff fba4 	bl	80075a4 <memcpy>
 8007e5c:	4631      	mov	r1, r6
 8007e5e:	4640      	mov	r0, r8
 8007e60:	f7ff fef4 	bl	8007c4c <_free_r>
 8007e64:	e7e1      	b.n	8007e2a <_realloc_r+0x1e>
 8007e66:	4635      	mov	r5, r6
 8007e68:	e7df      	b.n	8007e2a <_realloc_r+0x1e>
	...

08007e6c <_sbrk_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4d06      	ldr	r5, [pc, #24]	; (8007e88 <_sbrk_r+0x1c>)
 8007e70:	2300      	movs	r3, #0
 8007e72:	4604      	mov	r4, r0
 8007e74:	4608      	mov	r0, r1
 8007e76:	602b      	str	r3, [r5, #0]
 8007e78:	f000 f81e 	bl	8007eb8 <_sbrk>
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	d102      	bne.n	8007e86 <_sbrk_r+0x1a>
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	b103      	cbz	r3, 8007e86 <_sbrk_r+0x1a>
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	20014518 	.word	0x20014518

08007e8c <__malloc_lock>:
 8007e8c:	4801      	ldr	r0, [pc, #4]	; (8007e94 <__malloc_lock+0x8>)
 8007e8e:	f000 b811 	b.w	8007eb4 <__retarget_lock_acquire_recursive>
 8007e92:	bf00      	nop
 8007e94:	2001451c 	.word	0x2001451c

08007e98 <__malloc_unlock>:
 8007e98:	4801      	ldr	r0, [pc, #4]	; (8007ea0 <__malloc_unlock+0x8>)
 8007e9a:	f000 b80c 	b.w	8007eb6 <__retarget_lock_release_recursive>
 8007e9e:	bf00      	nop
 8007ea0:	2001451c 	.word	0x2001451c

08007ea4 <_malloc_usable_size_r>:
 8007ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea8:	1f18      	subs	r0, r3, #4
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bfbc      	itt	lt
 8007eae:	580b      	ldrlt	r3, [r1, r0]
 8007eb0:	18c0      	addlt	r0, r0, r3
 8007eb2:	4770      	bx	lr

08007eb4 <__retarget_lock_acquire_recursive>:
 8007eb4:	4770      	bx	lr

08007eb6 <__retarget_lock_release_recursive>:
 8007eb6:	4770      	bx	lr

08007eb8 <_sbrk>:
 8007eb8:	4a04      	ldr	r2, [pc, #16]	; (8007ecc <_sbrk+0x14>)
 8007eba:	6811      	ldr	r1, [r2, #0]
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	b909      	cbnz	r1, 8007ec4 <_sbrk+0xc>
 8007ec0:	4903      	ldr	r1, [pc, #12]	; (8007ed0 <_sbrk+0x18>)
 8007ec2:	6011      	str	r1, [r2, #0]
 8007ec4:	6810      	ldr	r0, [r2, #0]
 8007ec6:	4403      	add	r3, r0
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	4770      	bx	lr
 8007ecc:	20014520 	.word	0x20014520
 8007ed0:	20014528 	.word	0x20014528

08007ed4 <_init>:
 8007ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed6:	bf00      	nop
 8007ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eda:	bc08      	pop	{r3}
 8007edc:	469e      	mov	lr, r3
 8007ede:	4770      	bx	lr

08007ee0 <_fini>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	bf00      	nop
 8007ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee6:	bc08      	pop	{r3}
 8007ee8:	469e      	mov	lr, r3
 8007eea:	4770      	bx	lr
