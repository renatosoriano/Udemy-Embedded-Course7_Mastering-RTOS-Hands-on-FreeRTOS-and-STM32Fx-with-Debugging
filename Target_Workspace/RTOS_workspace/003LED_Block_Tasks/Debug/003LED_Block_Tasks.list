
003LED_Block_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006148  08006148  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006148  08006148  00016148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006150  08006150  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a814  2000001c  08006174  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a830  08006174  0002a830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cfa  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db8  00000000  00000000  00033d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00036b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  00037d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023981  00000000  00000000  00038e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f83  00000000  00000000  0005c7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db9bb  00000000  00000000  0007274c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c3c  00000000  00000000  0014e158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005fa0 	.word	0x08005fa0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08005fa0 	.word	0x08005fa0

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	2001925c 	.word	0x2001925c

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b8:	f000 b974 	b.w	80005a4 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468e      	mov	lr, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14d      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4694      	mov	ip, r2
 80002e6:	d969      	bls.n	80003bc <__udivmoddi4+0xe8>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b152      	cbz	r2, 8000304 <__udivmoddi4+0x30>
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	f1c2 0120 	rsb	r1, r2, #32
 80002f6:	fa20 f101 	lsr.w	r1, r0, r1
 80002fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000302:	4094      	lsls	r4, r2
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	0c21      	lsrs	r1, r4, #16
 800030a:	fbbe f6f8 	udiv	r6, lr, r8
 800030e:	fa1f f78c 	uxth.w	r7, ip
 8000312:	fb08 e316 	mls	r3, r8, r6, lr
 8000316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800031a:	fb06 f107 	mul.w	r1, r6, r7
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800032a:	f080 811f 	bcs.w	800056c <__udivmoddi4+0x298>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 811c 	bls.w	800056c <__udivmoddi4+0x298>
 8000334:	3e02      	subs	r6, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a5b      	subs	r3, r3, r1
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000340:	fb08 3310 	mls	r3, r8, r0, r3
 8000344:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000348:	fb00 f707 	mul.w	r7, r0, r7
 800034c:	42a7      	cmp	r7, r4
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x92>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000358:	f080 810a 	bcs.w	8000570 <__udivmoddi4+0x29c>
 800035c:	42a7      	cmp	r7, r4
 800035e:	f240 8107 	bls.w	8000570 <__udivmoddi4+0x29c>
 8000362:	4464      	add	r4, ip
 8000364:	3802      	subs	r0, #2
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	1be4      	subs	r4, r4, r7
 800036c:	2600      	movs	r6, #0
 800036e:	b11d      	cbz	r5, 8000378 <__udivmoddi4+0xa4>
 8000370:	40d4      	lsrs	r4, r2
 8000372:	2300      	movs	r3, #0
 8000374:	e9c5 4300 	strd	r4, r3, [r5]
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0xc2>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80ef 	beq.w	8000566 <__udivmoddi4+0x292>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x160>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xd4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80f9 	bhi.w	800059a <__udivmoddi4+0x2c6>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0303 	sbc.w	r3, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	469e      	mov	lr, r3
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e0      	beq.n	8000378 <__udivmoddi4+0xa4>
 80003b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ba:	e7dd      	b.n	8000378 <__udivmoddi4+0xa4>
 80003bc:	b902      	cbnz	r2, 80003c0 <__udivmoddi4+0xec>
 80003be:	deff      	udf	#255	; 0xff
 80003c0:	fab2 f282 	clz	r2, r2
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	f040 8092 	bne.w	80004ee <__udivmoddi4+0x21a>
 80003ca:	eba1 010c 	sub.w	r1, r1, ip
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	2601      	movs	r6, #1
 80003d8:	0c20      	lsrs	r0, r4, #16
 80003da:	fbb1 f3f7 	udiv	r3, r1, r7
 80003de:	fb07 1113 	mls	r1, r7, r3, r1
 80003e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e6:	fb0e f003 	mul.w	r0, lr, r3
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x12c>
 80003ee:	eb1c 0101 	adds.w	r1, ip, r1
 80003f2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x12a>
 80003f8:	4288      	cmp	r0, r1
 80003fa:	f200 80cb 	bhi.w	8000594 <__udivmoddi4+0x2c0>
 80003fe:	4643      	mov	r3, r8
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f7 	udiv	r0, r1, r7
 8000408:	fb07 1110 	mls	r1, r7, r0, r1
 800040c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000410:	fb0e fe00 	mul.w	lr, lr, r0
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x156>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x154>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2ca>
 8000428:	4608      	mov	r0, r1
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000432:	e79c      	b.n	800036e <__udivmoddi4+0x9a>
 8000434:	f1c6 0720 	rsb	r7, r6, #32
 8000438:	40b3      	lsls	r3, r6
 800043a:	fa22 fc07 	lsr.w	ip, r2, r7
 800043e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000442:	fa20 f407 	lsr.w	r4, r0, r7
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	431c      	orrs	r4, r3
 800044c:	40f9      	lsrs	r1, r7
 800044e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000452:	fa00 f306 	lsl.w	r3, r0, r6
 8000456:	fbb1 f8f9 	udiv	r8, r1, r9
 800045a:	0c20      	lsrs	r0, r4, #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fb09 1118 	mls	r1, r9, r8, r1
 8000464:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000468:	fb08 f00e 	mul.w	r0, r8, lr
 800046c:	4288      	cmp	r0, r1
 800046e:	fa02 f206 	lsl.w	r2, r2, r6
 8000472:	d90b      	bls.n	800048c <__udivmoddi4+0x1b8>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800047c:	f080 8088 	bcs.w	8000590 <__udivmoddi4+0x2bc>
 8000480:	4288      	cmp	r0, r1
 8000482:	f240 8085 	bls.w	8000590 <__udivmoddi4+0x2bc>
 8000486:	f1a8 0802 	sub.w	r8, r8, #2
 800048a:	4461      	add	r1, ip
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f9 	udiv	r0, r1, r9
 8000494:	fb09 1110 	mls	r1, r9, r0, r1
 8000498:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800049c:	fb00 fe0e 	mul.w	lr, r0, lr
 80004a0:	458e      	cmp	lr, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x1e2>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004ac:	d26c      	bcs.n	8000588 <__udivmoddi4+0x2b4>
 80004ae:	458e      	cmp	lr, r1
 80004b0:	d96a      	bls.n	8000588 <__udivmoddi4+0x2b4>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ba:	fba0 9402 	umull	r9, r4, r0, r2
 80004be:	eba1 010e 	sub.w	r1, r1, lr
 80004c2:	42a1      	cmp	r1, r4
 80004c4:	46c8      	mov	r8, r9
 80004c6:	46a6      	mov	lr, r4
 80004c8:	d356      	bcc.n	8000578 <__udivmoddi4+0x2a4>
 80004ca:	d053      	beq.n	8000574 <__udivmoddi4+0x2a0>
 80004cc:	b15d      	cbz	r5, 80004e6 <__udivmoddi4+0x212>
 80004ce:	ebb3 0208 	subs.w	r2, r3, r8
 80004d2:	eb61 010e 	sbc.w	r1, r1, lr
 80004d6:	fa01 f707 	lsl.w	r7, r1, r7
 80004da:	fa22 f306 	lsr.w	r3, r2, r6
 80004de:	40f1      	lsrs	r1, r6
 80004e0:	431f      	orrs	r7, r3
 80004e2:	e9c5 7100 	strd	r7, r1, [r5]
 80004e6:	2600      	movs	r6, #0
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	40d8      	lsrs	r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa21 f303 	lsr.w	r3, r1, r3
 80004fc:	4091      	lsls	r1, r2
 80004fe:	4301      	orrs	r1, r0
 8000500:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000504:	fa1f fe8c 	uxth.w	lr, ip
 8000508:	fbb3 f0f7 	udiv	r0, r3, r7
 800050c:	fb07 3610 	mls	r6, r7, r0, r3
 8000510:	0c0b      	lsrs	r3, r1, #16
 8000512:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000516:	fb00 f60e 	mul.w	r6, r0, lr
 800051a:	429e      	cmp	r6, r3
 800051c:	fa04 f402 	lsl.w	r4, r4, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x260>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052a:	d22f      	bcs.n	800058c <__udivmoddi4+0x2b8>
 800052c:	429e      	cmp	r6, r3
 800052e:	d92d      	bls.n	800058c <__udivmoddi4+0x2b8>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1b9b      	subs	r3, r3, r6
 8000536:	b289      	uxth	r1, r1
 8000538:	fbb3 f6f7 	udiv	r6, r3, r7
 800053c:	fb07 3316 	mls	r3, r7, r6, r3
 8000540:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000544:	fb06 f30e 	mul.w	r3, r6, lr
 8000548:	428b      	cmp	r3, r1
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x28a>
 800054c:	eb1c 0101 	adds.w	r1, ip, r1
 8000550:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000554:	d216      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000556:	428b      	cmp	r3, r1
 8000558:	d914      	bls.n	8000584 <__udivmoddi4+0x2b0>
 800055a:	3e02      	subs	r6, #2
 800055c:	4461      	add	r1, ip
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000564:	e738      	b.n	80003d8 <__udivmoddi4+0x104>
 8000566:	462e      	mov	r6, r5
 8000568:	4628      	mov	r0, r5
 800056a:	e705      	b.n	8000378 <__udivmoddi4+0xa4>
 800056c:	4606      	mov	r6, r0
 800056e:	e6e3      	b.n	8000338 <__udivmoddi4+0x64>
 8000570:	4618      	mov	r0, r3
 8000572:	e6f8      	b.n	8000366 <__udivmoddi4+0x92>
 8000574:	454b      	cmp	r3, r9
 8000576:	d2a9      	bcs.n	80004cc <__udivmoddi4+0x1f8>
 8000578:	ebb9 0802 	subs.w	r8, r9, r2
 800057c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000580:	3801      	subs	r0, #1
 8000582:	e7a3      	b.n	80004cc <__udivmoddi4+0x1f8>
 8000584:	4646      	mov	r6, r8
 8000586:	e7ea      	b.n	800055e <__udivmoddi4+0x28a>
 8000588:	4620      	mov	r0, r4
 800058a:	e794      	b.n	80004b6 <__udivmoddi4+0x1e2>
 800058c:	4640      	mov	r0, r8
 800058e:	e7d1      	b.n	8000534 <__udivmoddi4+0x260>
 8000590:	46d0      	mov	r8, sl
 8000592:	e77b      	b.n	800048c <__udivmoddi4+0x1b8>
 8000594:	3b02      	subs	r3, #2
 8000596:	4461      	add	r1, ip
 8000598:	e732      	b.n	8000400 <__udivmoddi4+0x12c>
 800059a:	4630      	mov	r0, r6
 800059c:	e709      	b.n	80003b2 <__udivmoddi4+0xde>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x156>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 faa1 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f86d 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8dd 	bl	8000774 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 80005ba:	482d      	ldr	r0, [pc, #180]	; (8000670 <main+0xc8>)
 80005bc:	f003 fae8 	bl	8003b90 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 80005c0:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <main+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a2b      	ldr	r2, [pc, #172]	; (8000674 <main+0xcc>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005cc:	f003 f90a 	bl	80037e4 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2302      	movs	r3, #2
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	22c8      	movs	r2, #200	; 0xc8
 80005de:	4926      	ldr	r1, [pc, #152]	; (8000678 <main+0xd0>)
 80005e0:	4826      	ldr	r0, [pc, #152]	; (800067c <main+0xd4>)
 80005e2:	f001 ff11 	bl	8002408 <xTaskCreate>
 80005e6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d00a      	beq.n	8000604 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f2:	f383 8811 	msr	BASEPRI, r3
 80005f6:	f3bf 8f6f 	isb	sy
 80005fa:	f3bf 8f4f 	dsb	sy
 80005fe:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000600:	bf00      	nop
 8000602:	e7fe      	b.n	8000602 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2302      	movs	r3, #2
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	22c8      	movs	r2, #200	; 0xc8
 8000612:	491b      	ldr	r1, [pc, #108]	; (8000680 <main+0xd8>)
 8000614:	481b      	ldr	r0, [pc, #108]	; (8000684 <main+0xdc>)
 8000616:	f001 fef7 	bl	8002408 <xTaskCreate>
 800061a:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d00a      	beq.n	8000638 <main+0x90>
        __asm volatile
 8000622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000626:	f383 8811 	msr	BASEPRI, r3
 800062a:	f3bf 8f6f 	isb	sy
 800062e:	f3bf 8f4f 	dsb	sy
 8000632:	617b      	str	r3, [r7, #20]
    }
 8000634:	bf00      	nop
 8000636:	e7fe      	b.n	8000636 <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	2302      	movs	r3, #2
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2300      	movs	r3, #0
 8000642:	22c8      	movs	r2, #200	; 0xc8
 8000644:	4910      	ldr	r1, [pc, #64]	; (8000688 <main+0xe0>)
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <main+0xe4>)
 8000648:	f001 fede 	bl	8002408 <xTaskCreate>
 800064c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00a      	beq.n	800066a <main+0xc2>
        __asm volatile
 8000654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	613b      	str	r3, [r7, #16]
    }
 8000666:	bf00      	nop
 8000668:	e7fe      	b.n	8000668 <main+0xc0>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800066a:	f002 f869 	bl	8002740 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066e:	e7fe      	b.n	800066e <main+0xc6>
 8000670:	0007a120 	.word	0x0007a120
 8000674:	e0001000 	.word	0xe0001000
 8000678:	08005fb8 	.word	0x08005fb8
 800067c:	08000871 	.word	0x08000871
 8000680:	08005fc8 	.word	0x08005fc8
 8000684:	080008a9 	.word	0x080008a9
 8000688:	08005fd8 	.word	0x08005fd8
 800068c:	0800088d 	.word	0x0800088d

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fc76 	bl	8005f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <SystemClock_Config+0xdc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a2b      	ldr	r2, [pc, #172]	; (800076c <SystemClock_Config+0xdc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <SystemClock_Config+0xdc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <SystemClock_Config+0xe0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a25      	ldr	r2, [pc, #148]	; (8000770 <SystemClock_Config+0xe0>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xe0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000700:	2308      	movs	r3, #8
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000704:	23b4      	movs	r3, #180	; 0xb4
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f001 f875 	bl	8001808 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000724:	f000 f8e0 	bl	80008e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000728:	f000 fcb6 	bl	8001098 <HAL_PWREx_EnableOverDrive>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000732:	f000 f8d9 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000742:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2105      	movs	r1, #5
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fcef 	bl	8001138 <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000760:	f000 f8c2 	bl	80008e8 <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3750      	adds	r7, #80	; 0x50
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b35      	ldr	r3, [pc, #212]	; (8000864 <MX_GPIO_Init+0xf0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a34      	ldr	r2, [pc, #208]	; (8000864 <MX_GPIO_Init+0xf0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <MX_GPIO_Init+0xf0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a2d      	ldr	r2, [pc, #180]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a26      	ldr	r2, [pc, #152]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	481a      	ldr	r0, [pc, #104]	; (8000868 <MX_GPIO_Init+0xf4>)
 8000800:	f000 fc30 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <MX_GPIO_Init+0xf8>)
 800081c:	f000 fa8e 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000820:	230c      	movs	r3, #12
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000830:	2307      	movs	r3, #7
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	480b      	ldr	r0, [pc, #44]	; (8000868 <MX_GPIO_Init+0xf4>)
 800083c:	f000 fa7e 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000840:	2320      	movs	r3, #32
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_GPIO_Init+0xf4>)
 8000858:	f000 fa70 	bl	8000d3c <HAL_GPIO_Init>

}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	40020800 	.word	0x40020800

08000870 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <led_green_handler+0x18>)
 800087a:	f005 faa9 	bl	8005dd0 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
		vTaskDelay(pdMS_TO_TICKS(1000));
 800087e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000882:	f001 ff25 	bl	80026d0 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000886:	e7f7      	b.n	8000878 <led_green_handler+0x8>
 8000888:	08005fe8 	.word	0x08005fe8

0800088c <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <led_orange_handler+0x18>)
 8000896:	f005 fa9b 	bl	8005dd0 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
		vTaskDelay(pdMS_TO_TICKS(800));
 800089a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800089e:	f001 ff17 	bl	80026d0 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80008a2:	e7f7      	b.n	8000894 <led_orange_handler+0x8>
 80008a4:	08005ffc 	.word	0x08005ffc

080008a8 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <led_red_handler+0x18>)
 80008b2:	f005 fa8d 	bl	8005dd0 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
		vTaskDelay(pdMS_TO_TICKS(400));
 80008b6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008ba:	f001 ff09 	bl	80026d0 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80008be:	e7f7      	b.n	80008b0 <led_red_handler+0x8>
 80008c0:	08006010 	.word	0x08006010

080008c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d101      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d6:	f000 f92f 	bl	8000b38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40001000 	.word	0x40001000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <HAL_MspInit+0x4c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000932:	f002 fba1 	bl	8003078 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08e      	sub	sp, #56	; 0x38
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <HAL_InitTick+0xe4>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	4a32      	ldr	r2, [pc, #200]	; (8000a28 <HAL_InitTick+0xe4>)
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	6413      	str	r3, [r2, #64]	; 0x40
 8000964:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <HAL_InitTick+0xe4>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	f003 0310 	and.w	r3, r3, #16
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000970:	f107 0210 	add.w	r2, r7, #16
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f000 fce2 	bl	8001344 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000980:	6a3b      	ldr	r3, [r7, #32]
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000986:	2b00      	cmp	r3, #0
 8000988:	d103      	bne.n	8000992 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800098a:	f000 fcc7 	bl	800131c <HAL_RCC_GetPCLK1Freq>
 800098e:	6378      	str	r0, [r7, #52]	; 0x34
 8000990:	e004      	b.n	800099c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000992:	f000 fcc3 	bl	800131c <HAL_RCC_GetPCLK1Freq>
 8000996:	4603      	mov	r3, r0
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800099c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800099e:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <HAL_InitTick+0xe8>)
 80009a0:	fba2 2303 	umull	r2, r3, r2, r3
 80009a4:	0c9b      	lsrs	r3, r3, #18
 80009a6:	3b01      	subs	r3, #1
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <HAL_InitTick+0xec>)
 80009ac:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <HAL_InitTick+0xf0>)
 80009ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <HAL_InitTick+0xec>)
 80009b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009b8:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <HAL_InitTick+0xec>)
 80009ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009bc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <HAL_InitTick+0xec>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <HAL_InitTick+0xec>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <HAL_InitTick+0xec>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009d0:	4817      	ldr	r0, [pc, #92]	; (8000a30 <HAL_InitTick+0xec>)
 80009d2:	f001 f9b7 	bl	8001d44 <HAL_TIM_Base_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d11b      	bne.n	8000a1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009e4:	4812      	ldr	r0, [pc, #72]	; (8000a30 <HAL_InitTick+0xec>)
 80009e6:	f001 fa07 	bl	8001df8 <HAL_TIM_Base_Start_IT>
 80009ea:	4603      	mov	r3, r0
 80009ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d111      	bne.n	8000a1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009f8:	2036      	movs	r0, #54	; 0x36
 80009fa:	f000 f991 	bl	8000d20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b0f      	cmp	r3, #15
 8000a02:	d808      	bhi.n	8000a16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a04:	2200      	movs	r2, #0
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	2036      	movs	r0, #54	; 0x36
 8000a0a:	f000 f96d 	bl	8000ce8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_InitTick+0xf4>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	e002      	b.n	8000a1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3738      	adds	r7, #56	; 0x38
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	431bde83 	.word	0x431bde83
 8000a30:	20000038 	.word	0x20000038
 8000a34:	40001000 	.word	0x40001000
 8000a38:	20000004 	.word	0x20000004

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <TIM6_DAC_IRQHandler+0x10>)
 8000a6e:	f001 fa33 	bl	8001ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000038 	.word	0x20000038

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aa6:	490e      	ldr	r1, [pc, #56]	; (8000ae0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000abc:	4c0b      	ldr	r4, [pc, #44]	; (8000aec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aca:	f7ff ffd7 	bl	8000a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ace:	f005 fa1d 	bl	8005f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fd69 	bl	80005a8 <main>
  bx  lr    
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ae4:	08006158 	.word	0x08006158
  ldr r2, =_sbss
 8000ae8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000aec:	2001a830 	.word	0x2001a830

08000af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <HAL_Init+0x40>)
 8000afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_Init+0x40>)
 8000b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_Init+0x40>)
 8000b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f8d8 	bl	8000cd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff ff0e 	bl	8000944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fee4 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023c00 	.word	0x40023c00

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000080 	.word	0x20000080

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000080 	.word	0x20000080

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ff4c 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfa:	f7ff ff61 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000cfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f7ff ffb1 	bl	8000c6c <NVIC_EncodePriority>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff80 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff54 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e165      	b.n	8001024 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f040 8154 	bne.w	800101e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d005      	beq.n	8000d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d130      	bne.n	8000df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	091b      	lsrs	r3, r3, #4
 8000dda:	f003 0201 	and.w	r2, r3, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d017      	beq.n	8000e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d123      	bne.n	8000e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	69b9      	ldr	r1, [r7, #24]
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0203 	and.w	r2, r3, #3
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80ae 	beq.w	800101e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b5d      	ldr	r3, [pc, #372]	; (800103c <HAL_GPIO_Init+0x300>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	4a5c      	ldr	r2, [pc, #368]	; (800103c <HAL_GPIO_Init+0x300>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed2:	4b5a      	ldr	r3, [pc, #360]	; (800103c <HAL_GPIO_Init+0x300>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ede:	4a58      	ldr	r2, [pc, #352]	; (8001040 <HAL_GPIO_Init+0x304>)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4f      	ldr	r2, [pc, #316]	; (8001044 <HAL_GPIO_Init+0x308>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d025      	beq.n	8000f56 <HAL_GPIO_Init+0x21a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4e      	ldr	r2, [pc, #312]	; (8001048 <HAL_GPIO_Init+0x30c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d01f      	beq.n	8000f52 <HAL_GPIO_Init+0x216>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4d      	ldr	r2, [pc, #308]	; (800104c <HAL_GPIO_Init+0x310>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d019      	beq.n	8000f4e <HAL_GPIO_Init+0x212>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4c      	ldr	r2, [pc, #304]	; (8001050 <HAL_GPIO_Init+0x314>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d013      	beq.n	8000f4a <HAL_GPIO_Init+0x20e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4b      	ldr	r2, [pc, #300]	; (8001054 <HAL_GPIO_Init+0x318>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d00d      	beq.n	8000f46 <HAL_GPIO_Init+0x20a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4a      	ldr	r2, [pc, #296]	; (8001058 <HAL_GPIO_Init+0x31c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x206>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a49      	ldr	r2, [pc, #292]	; (800105c <HAL_GPIO_Init+0x320>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_GPIO_Init+0x202>
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	e00c      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f3e:	2307      	movs	r3, #7
 8000f40:	e00a      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f42:	2305      	movs	r3, #5
 8000f44:	e008      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f46:	2304      	movs	r3, #4
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e004      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f56:	2300      	movs	r3, #0
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	f002 0203 	and.w	r2, r2, #3
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	4093      	lsls	r3, r2
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f68:	4935      	ldr	r1, [pc, #212]	; (8001040 <HAL_GPIO_Init+0x304>)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	3302      	adds	r3, #2
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <HAL_GPIO_Init+0x324>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f9a:	4a31      	ldr	r2, [pc, #196]	; (8001060 <HAL_GPIO_Init+0x324>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <HAL_GPIO_Init+0x324>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc4:	4a26      	ldr	r2, [pc, #152]	; (8001060 <HAL_GPIO_Init+0x324>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <HAL_GPIO_Init+0x324>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <HAL_GPIO_Init+0x324>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <HAL_GPIO_Init+0x324>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001018:	4a11      	ldr	r2, [pc, #68]	; (8001060 <HAL_GPIO_Init+0x324>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3301      	adds	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	f67f ae96 	bls.w	8000d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40013800 	.word	0x40013800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	40020800 	.word	0x40020800
 8001050:	40020c00 	.word	0x40020c00
 8001054:	40021000 	.word	0x40021000
 8001058:	40021400 	.word	0x40021400
 800105c:	40021800 	.word	0x40021800
 8001060:	40013c00 	.word	0x40013c00

08001064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
 8001070:	4613      	mov	r3, r2
 8001072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001080:	e003      	b.n	800108a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	041a      	lsls	r2, r3, #16
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	619a      	str	r2, [r3, #24]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <HAL_PWREx_EnableOverDrive+0x90>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a1f      	ldr	r2, [pc, #124]	; (8001128 <HAL_PWREx_EnableOverDrive+0x90>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <HAL_PWREx_EnableOverDrive+0x90>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_PWREx_EnableOverDrive+0x94>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c4:	f7ff fd4c 	bl	8000b60 <HAL_GetTick>
 80010c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010ca:	e009      	b.n	80010e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010cc:	f7ff fd48 	bl	8000b60 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010da:	d901      	bls.n	80010e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e01f      	b.n	8001120 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_PWREx_EnableOverDrive+0x98>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ec:	d1ee      	bne.n	80010cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f4:	f7ff fd34 	bl	8000b60 <HAL_GetTick>
 80010f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010fa:	e009      	b.n	8001110 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010fc:	f7ff fd30 	bl	8000b60 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800110a:	d901      	bls.n	8001110 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e007      	b.n	8001120 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <HAL_PWREx_EnableOverDrive+0x98>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800111c:	d1ee      	bne.n	80010fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	420e0040 	.word	0x420e0040
 8001130:	40007000 	.word	0x40007000
 8001134:	420e0044 	.word	0x420e0044

08001138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0cc      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800114c:	4b68      	ldr	r3, [pc, #416]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d90c      	bls.n	8001174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115a:	4b65      	ldr	r3, [pc, #404]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001162:	4b63      	ldr	r3, [pc, #396]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0b8      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d020      	beq.n	80011c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800118c:	4b59      	ldr	r3, [pc, #356]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4a58      	ldr	r2, [pc, #352]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a4:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4a52      	ldr	r2, [pc, #328]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b0:	4b50      	ldr	r3, [pc, #320]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	494d      	ldr	r1, [pc, #308]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d044      	beq.n	8001258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d107      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d119      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e07f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d003      	beq.n	80011f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f6:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e06f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e067      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f023 0203 	bic.w	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4934      	ldr	r1, [pc, #208]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	4313      	orrs	r3, r2
 8001226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001228:	f7ff fc9a 	bl	8000b60 <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122e:	e00a      	b.n	8001246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001230:	f7ff fc96 	bl	8000b60 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f241 3288 	movw	r2, #5000	; 0x1388
 800123e:	4293      	cmp	r3, r2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e04f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 020c 	and.w	r2, r3, #12
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	429a      	cmp	r2, r3
 8001256:	d1eb      	bne.n	8001230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 030f 	and.w	r3, r3, #15
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d20c      	bcs.n	8001280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d001      	beq.n	8001280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e032      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4916      	ldr	r1, [pc, #88]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	4313      	orrs	r3, r2
 800129c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d009      	beq.n	80012be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	490e      	ldr	r1, [pc, #56]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012be:	f000 f873 	bl	80013a8 <HAL_RCC_GetSysClockFreq>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	490a      	ldr	r1, [pc, #40]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 80012d0:	5ccb      	ldrb	r3, [r1, r3]
 80012d2:	fa22 f303 	lsr.w	r3, r2, r3
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_RCC_ClockConfig+0x1c8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fb30 	bl	8000944 <HAL_InitTick>

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023c00 	.word	0x40023c00
 80012f4:	40023800 	.word	0x40023800
 80012f8:	080060f4 	.word	0x080060f4
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000004 	.word	0x20000004

08001304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_RCC_GetHCLKFreq+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000000 	.word	0x20000000

0800131c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001320:	f7ff fff0 	bl	8001304 <HAL_RCC_GetHCLKFreq>
 8001324:	4602      	mov	r2, r0
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	0a9b      	lsrs	r3, r3, #10
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	4903      	ldr	r1, [pc, #12]	; (8001340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001332:	5ccb      	ldrb	r3, [r1, r3]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	08006104 	.word	0x08006104

08001344 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	220f      	movs	r2, #15
 8001352:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	08db      	lsrs	r3, r3, #3
 800137e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <HAL_RCC_GetClockConfig+0x60>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 020f 	and.w	r2, r3, #15
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	601a      	str	r2, [r3, #0]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40023c00 	.word	0x40023c00

080013a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ac:	b0ae      	sub	sp, #184	; 0xb8
 80013ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013ce:	4bcb      	ldr	r3, [pc, #812]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b0c      	cmp	r3, #12
 80013d8:	f200 8206 	bhi.w	80017e8 <HAL_RCC_GetSysClockFreq+0x440>
 80013dc:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e2:	bf00      	nop
 80013e4:	08001419 	.word	0x08001419
 80013e8:	080017e9 	.word	0x080017e9
 80013ec:	080017e9 	.word	0x080017e9
 80013f0:	080017e9 	.word	0x080017e9
 80013f4:	08001421 	.word	0x08001421
 80013f8:	080017e9 	.word	0x080017e9
 80013fc:	080017e9 	.word	0x080017e9
 8001400:	080017e9 	.word	0x080017e9
 8001404:	08001429 	.word	0x08001429
 8001408:	080017e9 	.word	0x080017e9
 800140c:	080017e9 	.word	0x080017e9
 8001410:	080017e9 	.word	0x080017e9
 8001414:	08001619 	.word	0x08001619
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001418:	4bb9      	ldr	r3, [pc, #740]	; (8001700 <HAL_RCC_GetSysClockFreq+0x358>)
 800141a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800141e:	e1e7      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001420:	4bb8      	ldr	r3, [pc, #736]	; (8001704 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001426:	e1e3      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001428:	4bb4      	ldr	r3, [pc, #720]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001434:	4bb1      	ldr	r3, [pc, #708]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d071      	beq.n	8001524 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001440:	4bae      	ldr	r3, [pc, #696]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	2200      	movs	r2, #0
 8001448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800144c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001458:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001462:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001466:	4622      	mov	r2, r4
 8001468:	462b      	mov	r3, r5
 800146a:	f04f 0000 	mov.w	r0, #0
 800146e:	f04f 0100 	mov.w	r1, #0
 8001472:	0159      	lsls	r1, r3, #5
 8001474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001478:	0150      	lsls	r0, r2, #5
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4621      	mov	r1, r4
 8001480:	1a51      	subs	r1, r2, r1
 8001482:	6439      	str	r1, [r7, #64]	; 0x40
 8001484:	4629      	mov	r1, r5
 8001486:	eb63 0301 	sbc.w	r3, r3, r1
 800148a:	647b      	str	r3, [r7, #68]	; 0x44
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001498:	4649      	mov	r1, r9
 800149a:	018b      	lsls	r3, r1, #6
 800149c:	4641      	mov	r1, r8
 800149e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014a2:	4641      	mov	r1, r8
 80014a4:	018a      	lsls	r2, r1, #6
 80014a6:	4641      	mov	r1, r8
 80014a8:	1a51      	subs	r1, r2, r1
 80014aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80014ac:	4649      	mov	r1, r9
 80014ae:	eb63 0301 	sbc.w	r3, r3, r1
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80014c0:	4649      	mov	r1, r9
 80014c2:	00cb      	lsls	r3, r1, #3
 80014c4:	4641      	mov	r1, r8
 80014c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014ca:	4641      	mov	r1, r8
 80014cc:	00ca      	lsls	r2, r1, #3
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	4622      	mov	r2, r4
 80014d6:	189b      	adds	r3, r3, r2
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
 80014da:	462b      	mov	r3, r5
 80014dc:	460a      	mov	r2, r1
 80014de:	eb42 0303 	adc.w	r3, r2, r3
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014f0:	4629      	mov	r1, r5
 80014f2:	024b      	lsls	r3, r1, #9
 80014f4:	4621      	mov	r1, r4
 80014f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014fa:	4621      	mov	r1, r4
 80014fc:	024a      	lsls	r2, r1, #9
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001506:	2200      	movs	r2, #0
 8001508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800150c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001510:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001514:	f7fe fec6 	bl	80002a4 <__aeabi_uldivmod>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4613      	mov	r3, r2
 800151e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001522:	e067      	b.n	80015f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001524:	4b75      	ldr	r3, [pc, #468]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	099b      	lsrs	r3, r3, #6
 800152a:	2200      	movs	r2, #0
 800152c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001530:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001534:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800153c:	67bb      	str	r3, [r7, #120]	; 0x78
 800153e:	2300      	movs	r3, #0
 8001540:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001542:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001546:	4622      	mov	r2, r4
 8001548:	462b      	mov	r3, r5
 800154a:	f04f 0000 	mov.w	r0, #0
 800154e:	f04f 0100 	mov.w	r1, #0
 8001552:	0159      	lsls	r1, r3, #5
 8001554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001558:	0150      	lsls	r0, r2, #5
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4621      	mov	r1, r4
 8001560:	1a51      	subs	r1, r2, r1
 8001562:	62b9      	str	r1, [r7, #40]	; 0x28
 8001564:	4629      	mov	r1, r5
 8001566:	eb63 0301 	sbc.w	r3, r3, r1
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001578:	4649      	mov	r1, r9
 800157a:	018b      	lsls	r3, r1, #6
 800157c:	4641      	mov	r1, r8
 800157e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001582:	4641      	mov	r1, r8
 8001584:	018a      	lsls	r2, r1, #6
 8001586:	4641      	mov	r1, r8
 8001588:	ebb2 0a01 	subs.w	sl, r2, r1
 800158c:	4649      	mov	r1, r9
 800158e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800159e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015a6:	4692      	mov	sl, r2
 80015a8:	469b      	mov	fp, r3
 80015aa:	4623      	mov	r3, r4
 80015ac:	eb1a 0303 	adds.w	r3, sl, r3
 80015b0:	623b      	str	r3, [r7, #32]
 80015b2:	462b      	mov	r3, r5
 80015b4:	eb4b 0303 	adc.w	r3, fp, r3
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015c6:	4629      	mov	r1, r5
 80015c8:	028b      	lsls	r3, r1, #10
 80015ca:	4621      	mov	r1, r4
 80015cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015d0:	4621      	mov	r1, r4
 80015d2:	028a      	lsls	r2, r1, #10
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015dc:	2200      	movs	r2, #0
 80015de:	673b      	str	r3, [r7, #112]	; 0x70
 80015e0:	677a      	str	r2, [r7, #116]	; 0x74
 80015e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015e6:	f7fe fe5d 	bl	80002a4 <__aeabi_uldivmod>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4613      	mov	r3, r2
 80015f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015f4:	4b41      	ldr	r3, [pc, #260]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	0c1b      	lsrs	r3, r3, #16
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	3301      	adds	r3, #1
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800160a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001616:	e0eb      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001618:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001624:	4b35      	ldr	r3, [pc, #212]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d06b      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001630:	4b32      	ldr	r3, [pc, #200]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	099b      	lsrs	r3, r3, #6
 8001636:	2200      	movs	r2, #0
 8001638:	66bb      	str	r3, [r7, #104]	; 0x68
 800163a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800163c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800163e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001642:	663b      	str	r3, [r7, #96]	; 0x60
 8001644:	2300      	movs	r3, #0
 8001646:	667b      	str	r3, [r7, #100]	; 0x64
 8001648:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800164c:	4622      	mov	r2, r4
 800164e:	462b      	mov	r3, r5
 8001650:	f04f 0000 	mov.w	r0, #0
 8001654:	f04f 0100 	mov.w	r1, #0
 8001658:	0159      	lsls	r1, r3, #5
 800165a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800165e:	0150      	lsls	r0, r2, #5
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4621      	mov	r1, r4
 8001666:	1a51      	subs	r1, r2, r1
 8001668:	61b9      	str	r1, [r7, #24]
 800166a:	4629      	mov	r1, r5
 800166c:	eb63 0301 	sbc.w	r3, r3, r1
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800167e:	4659      	mov	r1, fp
 8001680:	018b      	lsls	r3, r1, #6
 8001682:	4651      	mov	r1, sl
 8001684:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001688:	4651      	mov	r1, sl
 800168a:	018a      	lsls	r2, r1, #6
 800168c:	4651      	mov	r1, sl
 800168e:	ebb2 0801 	subs.w	r8, r2, r1
 8001692:	4659      	mov	r1, fp
 8001694:	eb63 0901 	sbc.w	r9, r3, r1
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016ac:	4690      	mov	r8, r2
 80016ae:	4699      	mov	r9, r3
 80016b0:	4623      	mov	r3, r4
 80016b2:	eb18 0303 	adds.w	r3, r8, r3
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	462b      	mov	r3, r5
 80016ba:	eb49 0303 	adc.w	r3, r9, r3
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016cc:	4629      	mov	r1, r5
 80016ce:	024b      	lsls	r3, r1, #9
 80016d0:	4621      	mov	r1, r4
 80016d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016d6:	4621      	mov	r1, r4
 80016d8:	024a      	lsls	r2, r1, #9
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016e2:	2200      	movs	r2, #0
 80016e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80016e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016ec:	f7fe fdda 	bl	80002a4 <__aeabi_uldivmod>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4613      	mov	r3, r2
 80016f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016fa:	e065      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x420>
 80016fc:	40023800 	.word	0x40023800
 8001700:	00f42400 	.word	0x00f42400
 8001704:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001708:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <HAL_RCC_GetSysClockFreq+0x458>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	2200      	movs	r2, #0
 8001710:	4618      	mov	r0, r3
 8001712:	4611      	mov	r1, r2
 8001714:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001718:	653b      	str	r3, [r7, #80]	; 0x50
 800171a:	2300      	movs	r3, #0
 800171c:	657b      	str	r3, [r7, #84]	; 0x54
 800171e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001722:	4642      	mov	r2, r8
 8001724:	464b      	mov	r3, r9
 8001726:	f04f 0000 	mov.w	r0, #0
 800172a:	f04f 0100 	mov.w	r1, #0
 800172e:	0159      	lsls	r1, r3, #5
 8001730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001734:	0150      	lsls	r0, r2, #5
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4641      	mov	r1, r8
 800173c:	1a51      	subs	r1, r2, r1
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	4649      	mov	r1, r9
 8001742:	eb63 0301 	sbc.w	r3, r3, r1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001754:	4659      	mov	r1, fp
 8001756:	018b      	lsls	r3, r1, #6
 8001758:	4651      	mov	r1, sl
 800175a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800175e:	4651      	mov	r1, sl
 8001760:	018a      	lsls	r2, r1, #6
 8001762:	4651      	mov	r1, sl
 8001764:	1a54      	subs	r4, r2, r1
 8001766:	4659      	mov	r1, fp
 8001768:	eb63 0501 	sbc.w	r5, r3, r1
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	00eb      	lsls	r3, r5, #3
 8001776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800177a:	00e2      	lsls	r2, r4, #3
 800177c:	4614      	mov	r4, r2
 800177e:	461d      	mov	r5, r3
 8001780:	4643      	mov	r3, r8
 8001782:	18e3      	adds	r3, r4, r3
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	464b      	mov	r3, r9
 8001788:	eb45 0303 	adc.w	r3, r5, r3
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800179a:	4629      	mov	r1, r5
 800179c:	028b      	lsls	r3, r1, #10
 800179e:	4621      	mov	r1, r4
 80017a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017a4:	4621      	mov	r1, r4
 80017a6:	028a      	lsls	r2, r1, #10
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017b0:	2200      	movs	r2, #0
 80017b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80017b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017ba:	f7fe fd73 	bl	80002a4 <__aeabi_uldivmod>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4613      	mov	r3, r2
 80017c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	0f1b      	lsrs	r3, r3, #28
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017e6:	e003      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	37b8      	adds	r7, #184	; 0xb8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	00f42400 	.word	0x00f42400

08001808 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e28d      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8083 	beq.w	800192e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001828:	4b94      	ldr	r3, [pc, #592]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b04      	cmp	r3, #4
 8001832:	d019      	beq.n	8001868 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001834:	4b91      	ldr	r3, [pc, #580]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800183c:	2b08      	cmp	r3, #8
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001840:	4b8e      	ldr	r3, [pc, #568]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800184c:	d00c      	beq.n	8001868 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800184e:	4b8b      	ldr	r3, [pc, #556]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001856:	2b0c      	cmp	r3, #12
 8001858:	d112      	bne.n	8001880 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185a:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001866:	d10b      	bne.n	8001880 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	4b84      	ldr	r3, [pc, #528]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d05b      	beq.n	800192c <HAL_RCC_OscConfig+0x124>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d157      	bne.n	800192c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e25a      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001888:	d106      	bne.n	8001898 <HAL_RCC_OscConfig+0x90>
 800188a:	4b7c      	ldr	r3, [pc, #496]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a7b      	ldr	r2, [pc, #492]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e01d      	b.n	80018d4 <HAL_RCC_OscConfig+0xcc>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0xb4>
 80018a2:	4b76      	ldr	r3, [pc, #472]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a75      	ldr	r2, [pc, #468]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b73      	ldr	r3, [pc, #460]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a72      	ldr	r2, [pc, #456]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0xcc>
 80018bc:	4b6f      	ldr	r3, [pc, #444]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a6e      	ldr	r2, [pc, #440]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b6c      	ldr	r3, [pc, #432]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a6b      	ldr	r2, [pc, #428]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff f940 	bl	8000b60 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff f93c 	bl	8000b60 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e21f      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0xdc>
 8001902:	e014      	b.n	800192e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f92c 	bl	8000b60 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff f928 	bl	8000b60 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e20b      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	4b57      	ldr	r3, [pc, #348]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x104>
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d06f      	beq.n	8001a1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800193a:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b00      	cmp	r3, #0
 8001944:	d017      	beq.n	8001976 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001946:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800194e:	2b08      	cmp	r3, #8
 8001950:	d105      	bne.n	800195e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001952:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d11c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196a:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d116      	bne.n	80019a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_RCC_OscConfig+0x186>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d001      	beq.n	800198e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e1d3      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4937      	ldr	r1, [pc, #220]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	e03a      	b.n	8001a1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d020      	beq.n	80019ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ac:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <HAL_RCC_OscConfig+0x278>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b2:	f7ff f8d5 	bl	8000b60 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ba:	f7ff f8d1 	bl	8000b60 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e1b4      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4925      	ldr	r1, [pc, #148]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
 80019ec:	e015      	b.n	8001a1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_RCC_OscConfig+0x278>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff f8b4 	bl	8000b60 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fc:	f7ff f8b0 	bl	8000b60 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e193      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d036      	beq.n	8001a94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d016      	beq.n	8001a5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_RCC_OscConfig+0x27c>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff f894 	bl	8000b60 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f890 	bl	8000b60 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e173      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x234>
 8001a5a:	e01b      	b.n	8001a94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_OscConfig+0x27c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff f87d 	bl	8000b60 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a68:	e00e      	b.n	8001a88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a6a:	f7ff f879 	bl	8000b60 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d907      	bls.n	8001a88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e15c      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	42470000 	.word	0x42470000
 8001a84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a88:	4b8a      	ldr	r3, [pc, #552]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1ea      	bne.n	8001a6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8097 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa6:	4b83      	ldr	r3, [pc, #524]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10f      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	4b7f      	ldr	r3, [pc, #508]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a7e      	ldr	r2, [pc, #504]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b7c      	ldr	r3, [pc, #496]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad2:	4b79      	ldr	r3, [pc, #484]	; (8001cb8 <HAL_RCC_OscConfig+0x4b0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d118      	bne.n	8001b10 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ade:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <HAL_RCC_OscConfig+0x4b0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a75      	ldr	r2, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x4b0>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aea:	f7ff f839 	bl	8000b60 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af2:	f7ff f835 	bl	8000b60 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e118      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	4b6c      	ldr	r3, [pc, #432]	; (8001cb8 <HAL_RCC_OscConfig+0x4b0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x31e>
 8001b18:	4b66      	ldr	r3, [pc, #408]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	4a65      	ldr	r2, [pc, #404]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6713      	str	r3, [r2, #112]	; 0x70
 8001b24:	e01c      	b.n	8001b60 <HAL_RCC_OscConfig+0x358>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x340>
 8001b2e:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	4a60      	ldr	r2, [pc, #384]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3a:	4b5e      	ldr	r3, [pc, #376]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	4a5d      	ldr	r2, [pc, #372]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6713      	str	r3, [r2, #112]	; 0x70
 8001b46:	e00b      	b.n	8001b60 <HAL_RCC_OscConfig+0x358>
 8001b48:	4b5a      	ldr	r3, [pc, #360]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	4a59      	ldr	r2, [pc, #356]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	6713      	str	r3, [r2, #112]	; 0x70
 8001b54:	4b57      	ldr	r3, [pc, #348]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	4a56      	ldr	r2, [pc, #344]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b5a:	f023 0304 	bic.w	r3, r3, #4
 8001b5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d015      	beq.n	8001b94 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7fe fffa 	bl	8000b60 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7fe fff6 	bl	8000b60 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e0d7      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b86:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0ee      	beq.n	8001b70 <HAL_RCC_OscConfig+0x368>
 8001b92:	e014      	b.n	8001bbe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7fe ffe4 	bl	8000b60 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7fe ffe0 	bl	8000b60 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0c1      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb2:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1ee      	bne.n	8001b9c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc4:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	4a3a      	ldr	r2, [pc, #232]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 80ad 	beq.w	8001d34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bda:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d060      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d145      	bne.n	8001c7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_RCC_OscConfig+0x4b4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7fe ffb4 	bl	8000b60 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7fe ffb0 	bl	8000b60 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e093      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	019b      	lsls	r3, r3, #6
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	085b      	lsrs	r3, r3, #1
 8001c32:	3b01      	subs	r3, #1
 8001c34:	041b      	lsls	r3, r3, #16
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	061b      	lsls	r3, r3, #24
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	071b      	lsls	r3, r3, #28
 8001c46:	491b      	ldr	r1, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_RCC_OscConfig+0x4b4>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7fe ff85 	bl	8000b60 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7fe ff81 	bl	8000b60 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e064      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x452>
 8001c78:	e05c      	b.n	8001d34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_RCC_OscConfig+0x4b4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7fe ff6e 	bl	8000b60 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c88:	f7fe ff6a 	bl	8000b60 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e04d      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x480>
 8001ca6:	e045      	b.n	8001d34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e040      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <HAL_RCC_OscConfig+0x538>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d030      	beq.n	8001d30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d129      	bne.n	8001d30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d122      	bne.n	8001d30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d119      	bne.n	8001d30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d10f      	bne.n	8001d30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d107      	bne.n	8001d30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e041      	b.n	8001dda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f839 	bl	8001de2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f000 f9d8 	bl	8002138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d001      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e04e      	b.n	8001eae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a23      	ldr	r2, [pc, #140]	; (8001ebc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d022      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3a:	d01d      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d018      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d013      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00e      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <HAL_TIM_Base_Start_IT+0xd4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d009      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d004      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d111      	bne.n	8001e9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d010      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9a:	e007      	b.n	8001eac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40010000 	.word	0x40010000
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	40000800 	.word	0x40000800
 8001ec8:	40000c00 	.word	0x40000c00
 8001ecc:	40010400 	.word	0x40010400
 8001ed0:	40014000 	.word	0x40014000
 8001ed4:	40001800 	.word	0x40001800

08001ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d122      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d11b      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0202 	mvn.w	r2, #2
 8001f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8ee 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8e0 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f8f1 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d122      	bne.n	8001f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d11b      	bne.n	8001f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0204 	mvn.w	r2, #4
 8001f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8c4 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f8b6 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f8c7 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d122      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d11b      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0208 	mvn.w	r2, #8
 8001fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f89a 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 8001fc8:	e005      	b.n	8001fd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f88c 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f89d 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b10      	cmp	r3, #16
 8001fe8:	d122      	bne.n	8002030 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b10      	cmp	r3, #16
 8001ff6:	d11b      	bne.n	8002030 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0210 	mvn.w	r2, #16
 8002000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2208      	movs	r2, #8
 8002006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f870 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 800201c:	e005      	b.n	800202a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f862 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f873 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d10e      	bne.n	800205c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b01      	cmp	r3, #1
 800204a:	d107      	bne.n	800205c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0201 	mvn.w	r2, #1
 8002054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe fc34 	bl	80008c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	2b80      	cmp	r3, #128	; 0x80
 8002068:	d10e      	bne.n	8002088 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002074:	2b80      	cmp	r3, #128	; 0x80
 8002076:	d107      	bne.n	8002088 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f902 	bl	800228c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	2b40      	cmp	r3, #64	; 0x40
 8002094:	d10e      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a0:	2b40      	cmp	r3, #64	; 0x40
 80020a2:	d107      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f838 	bl	8002124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b20      	cmp	r3, #32
 80020c0:	d10e      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	d107      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0220 	mvn.w	r2, #32
 80020d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f8cc 	bl	8002278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a40      	ldr	r2, [pc, #256]	; (800224c <TIM_Base_SetConfig+0x114>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002156:	d00f      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3d      	ldr	r2, [pc, #244]	; (8002250 <TIM_Base_SetConfig+0x118>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00b      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a3c      	ldr	r2, [pc, #240]	; (8002254 <TIM_Base_SetConfig+0x11c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d007      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a3b      	ldr	r2, [pc, #236]	; (8002258 <TIM_Base_SetConfig+0x120>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d003      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3a      	ldr	r2, [pc, #232]	; (800225c <TIM_Base_SetConfig+0x124>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d108      	bne.n	800218a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a2f      	ldr	r2, [pc, #188]	; (800224c <TIM_Base_SetConfig+0x114>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d02b      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002198:	d027      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2c      	ldr	r2, [pc, #176]	; (8002250 <TIM_Base_SetConfig+0x118>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d023      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2b      	ldr	r2, [pc, #172]	; (8002254 <TIM_Base_SetConfig+0x11c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01f      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2a      	ldr	r2, [pc, #168]	; (8002258 <TIM_Base_SetConfig+0x120>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01b      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a29      	ldr	r2, [pc, #164]	; (800225c <TIM_Base_SetConfig+0x124>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d017      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a28      	ldr	r2, [pc, #160]	; (8002260 <TIM_Base_SetConfig+0x128>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <TIM_Base_SetConfig+0x12c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00f      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a26      	ldr	r2, [pc, #152]	; (8002268 <TIM_Base_SetConfig+0x130>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00b      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a25      	ldr	r2, [pc, #148]	; (800226c <TIM_Base_SetConfig+0x134>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a24      	ldr	r2, [pc, #144]	; (8002270 <TIM_Base_SetConfig+0x138>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d003      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a23      	ldr	r2, [pc, #140]	; (8002274 <TIM_Base_SetConfig+0x13c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d108      	bne.n	80021fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <TIM_Base_SetConfig+0x114>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d003      	beq.n	8002230 <TIM_Base_SetConfig+0xf8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a0c      	ldr	r2, [pc, #48]	; (800225c <TIM_Base_SetConfig+0x124>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d103      	bne.n	8002238 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	615a      	str	r2, [r3, #20]
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40010000 	.word	0x40010000
 8002250:	40000400 	.word	0x40000400
 8002254:	40000800 	.word	0x40000800
 8002258:	40000c00 	.word	0x40000c00
 800225c:	40010400 	.word	0x40010400
 8002260:	40014000 	.word	0x40014000
 8002264:	40014400 	.word	0x40014400
 8002268:	40014800 	.word	0x40014800
 800226c:	40001800 	.word	0x40001800
 8002270:	40001c00 	.word	0x40001c00
 8002274:	40002000 	.word	0x40002000

08002278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f103 0208 	add.w	r2, r3, #8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f103 0208 	add.w	r2, r3, #8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f103 0208 	add.w	r2, r3, #8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022fa:	b480      	push	{r7}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	601a      	str	r2, [r3, #0]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002358:	d103      	bne.n	8002362 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e00c      	b.n	800237c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3308      	adds	r3, #8
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	e002      	b.n	8002370 <vListInsert+0x2e>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	429a      	cmp	r2, r3
 800237a:	d2f6      	bcs.n	800236a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	601a      	str	r2, [r3, #0]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6892      	ldr	r2, [r2, #8]
 80023ca:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6852      	ldr	r2, [r2, #4]
 80023d4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d103      	bne.n	80023e8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	1e5a      	subs	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002408:	b580      	push	{r7, lr}
 800240a:	b08c      	sub	sp, #48	; 0x30
 800240c:	af04      	add	r7, sp, #16
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4618      	mov	r0, r3
 800241e:	f000 ffd5 	bl	80033cc <pvPortMalloc>
 8002422:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00e      	beq.n	8002448 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800242a:	2058      	movs	r0, #88	; 0x58
 800242c:	f000 ffce 	bl	80033cc <pvPortMalloc>
 8002430:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	631a      	str	r2, [r3, #48]	; 0x30
 800243e:	e005      	b.n	800244c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002440:	6978      	ldr	r0, [r7, #20]
 8002442:	f001 f8a3 	bl	800358c <vPortFree>
 8002446:	e001      	b.n	800244c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d013      	beq.n	800247a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002452:	88fa      	ldrh	r2, [r7, #6]
 8002454:	2300      	movs	r3, #0
 8002456:	9303      	str	r3, [sp, #12]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	9302      	str	r3, [sp, #8]
 800245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 f80e 	bl	800248a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800246e:	69f8      	ldr	r0, [r7, #28]
 8002470:	f000 f8a2 	bl	80025b8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002474:	2301      	movs	r3, #1
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	e002      	b.n	8002480 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800247e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002480:	69bb      	ldr	r3, [r7, #24]
    }
 8002482:	4618      	mov	r0, r3
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b088      	sub	sp, #32
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	461a      	mov	r2, r3
 80024a2:	21a5      	movs	r1, #165	; 0xa5
 80024a4:	f003 fd74 	bl	8005f90 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024b2:	3b01      	subs	r3, #1
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	f023 0307 	bic.w	r3, r3, #7
 80024c0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80024cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d0:	f383 8811 	msr	BASEPRI, r3
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	617b      	str	r3, [r7, #20]
    }
 80024de:	bf00      	nop
 80024e0:	e7fe      	b.n	80024e0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01f      	beq.n	8002528 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	e012      	b.n	8002514 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	4413      	add	r3, r2
 80024f4:	7819      	ldrb	r1, [r3, #0]
 80024f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	4413      	add	r3, r2
 80024fc:	3334      	adds	r3, #52	; 0x34
 80024fe:	460a      	mov	r2, r1
 8002500:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	4413      	add	r3, r2
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3301      	adds	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b09      	cmp	r3, #9
 8002518:	d9e9      	bls.n	80024ee <prvInitialiseNewTask+0x64>
 800251a:	e000      	b.n	800251e <prvInitialiseNewTask+0x94>
            {
                break;
 800251c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002526:	e003      	b.n	8002530 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	2b04      	cmp	r3, #4
 8002534:	d901      	bls.n	800253a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002536:	2304      	movs	r3, #4
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002544:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	2200      	movs	r2, #0
 800254a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	3304      	adds	r3, #4
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fec5 	bl	80022e0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	3318      	adds	r3, #24
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fec0 	bl	80022e0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002564:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	f1c3 0205 	rsb	r2, r3, #5
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002574:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	3350      	adds	r3, #80	; 0x50
 800257a:	2204      	movs	r2, #4
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fd06 	bl	8005f90 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002586:	3354      	adds	r3, #84	; 0x54
 8002588:	2201      	movs	r2, #1
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f003 fcff 	bl	8005f90 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	68f9      	ldr	r1, [r7, #12]
 8002596:	69b8      	ldr	r0, [r7, #24]
 8002598:	f000 fc3e 	bl	8002e18 <pxPortInitialiseStack>
 800259c:	4602      	mov	r2, r0
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025ae:	bf00      	nop
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80025b8:	b5b0      	push	{r4, r5, r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af02      	add	r7, sp, #8
 80025be:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80025c0:	f000 fdd8 	bl	8003174 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80025c4:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <prvAddNewTaskToReadyList+0xfc>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	4a3a      	ldr	r2, [pc, #232]	; (80026b4 <prvAddNewTaskToReadyList+0xfc>)
 80025cc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80025ce:	4b3a      	ldr	r3, [pc, #232]	; (80026b8 <prvAddNewTaskToReadyList+0x100>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80025d6:	4a38      	ldr	r2, [pc, #224]	; (80026b8 <prvAddNewTaskToReadyList+0x100>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025dc:	4b35      	ldr	r3, [pc, #212]	; (80026b4 <prvAddNewTaskToReadyList+0xfc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d110      	bne.n	8002606 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80025e4:	f000 fb06 	bl	8002bf4 <prvInitialiseTaskLists>
 80025e8:	e00d      	b.n	8002606 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80025ea:	4b34      	ldr	r3, [pc, #208]	; (80026bc <prvAddNewTaskToReadyList+0x104>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025f2:	4b31      	ldr	r3, [pc, #196]	; (80026b8 <prvAddNewTaskToReadyList+0x100>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d802      	bhi.n	8002606 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002600:	4a2d      	ldr	r2, [pc, #180]	; (80026b8 <prvAddNewTaskToReadyList+0x100>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002606:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <prvAddNewTaskToReadyList+0x108>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3301      	adds	r3, #1
 800260c:	4a2c      	ldr	r2, [pc, #176]	; (80026c0 <prvAddNewTaskToReadyList+0x108>)
 800260e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <prvAddNewTaskToReadyList+0x108>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d016      	beq.n	800264c <prvAddNewTaskToReadyList+0x94>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4618      	mov	r0, r3
 8002622:	f003 f9c9 	bl	80059b8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	461d      	mov	r5, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461c      	mov	r4, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	1ae3      	subs	r3, r4, r3
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	462b      	mov	r3, r5
 8002648:	f001 f96e 	bl	8003928 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4618      	mov	r0, r3
 8002650:	f003 fa36 	bl	8005ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	2201      	movs	r2, #1
 800265a:	409a      	lsls	r2, r3
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <prvAddNewTaskToReadyList+0x10c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4313      	orrs	r3, r2
 8002662:	4a18      	ldr	r2, [pc, #96]	; (80026c4 <prvAddNewTaskToReadyList+0x10c>)
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4a15      	ldr	r2, [pc, #84]	; (80026c8 <prvAddNewTaskToReadyList+0x110>)
 8002674:	441a      	add	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3304      	adds	r3, #4
 800267a:	4619      	mov	r1, r3
 800267c:	4610      	mov	r0, r2
 800267e:	f7ff fe3c 	bl	80022fa <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002682:	f000 fda7 	bl	80031d4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <prvAddNewTaskToReadyList+0x104>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00e      	beq.n	80026ac <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <prvAddNewTaskToReadyList+0x100>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	429a      	cmp	r2, r3
 800269a:	d207      	bcs.n	80026ac <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <prvAddNewTaskToReadyList+0x114>)
 800269e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bdb0      	pop	{r4, r5, r7, pc}
 80026b4:	2000015c 	.word	0x2000015c
 80026b8:	20000084 	.word	0x20000084
 80026bc:	20000168 	.word	0x20000168
 80026c0:	20000178 	.word	0x20000178
 80026c4:	20000164 	.word	0x20000164
 80026c8:	20000088 	.word	0x20000088
 80026cc:	e000ed04 	.word	0xe000ed04

080026d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01b      	beq.n	800271a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <vTaskDelay+0x68>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <vTaskDelay+0x30>
        __asm volatile
 80026ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	60bb      	str	r3, [r7, #8]
    }
 80026fc:	bf00      	nop
 80026fe:	e7fe      	b.n	80026fe <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002700:	f000 f87a 	bl	80027f8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	2023      	movs	r0, #35	; 0x23
 8002708:	f002 fd60 	bl	80051cc <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800270c:	2100      	movs	r1, #0
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fb0a 	bl	8002d28 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002714:	f000 f87e 	bl	8002814 <xTaskResumeAll>
 8002718:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d107      	bne.n	8002730 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <vTaskDelay+0x6c>)
 8002722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000184 	.word	0x20000184
 800273c:	e000ed04 	.word	0xe000ed04

08002740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <vTaskStartScheduler+0x98>)
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	2300      	movs	r3, #0
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2300      	movs	r3, #0
 8002750:	2282      	movs	r2, #130	; 0x82
 8002752:	4922      	ldr	r1, [pc, #136]	; (80027dc <vTaskStartScheduler+0x9c>)
 8002754:	4822      	ldr	r0, [pc, #136]	; (80027e0 <vTaskStartScheduler+0xa0>)
 8002756:	f7ff fe57 	bl	8002408 <xTaskCreate>
 800275a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d124      	bne.n	80027ac <vTaskStartScheduler+0x6c>
        __asm volatile
 8002762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002766:	f383 8811 	msr	BASEPRI, r3
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	60bb      	str	r3, [r7, #8]
    }
 8002774:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <vTaskStartScheduler+0xa4>)
 8002778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800277c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <vTaskStartScheduler+0xa8>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <vTaskStartScheduler+0xac>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <vTaskStartScheduler+0xb0>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <vTaskStartScheduler+0x98>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d102      	bne.n	800279c <vTaskStartScheduler+0x5c>
 8002796:	f003 f8f3 	bl	8005980 <SEGGER_SYSVIEW_OnIdle>
 800279a:	e004      	b.n	80027a6 <vTaskStartScheduler+0x66>
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <vTaskStartScheduler+0xb0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f003 f94b 	bl	8005a3c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80027a6:	f000 fbc5 	bl	8002f34 <xPortStartScheduler>
 80027aa:	e00e      	b.n	80027ca <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b2:	d10a      	bne.n	80027ca <vTaskStartScheduler+0x8a>
        __asm volatile
 80027b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	607b      	str	r3, [r7, #4]
    }
 80027c6:	bf00      	nop
 80027c8:	e7fe      	b.n	80027c8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <vTaskStartScheduler+0xb4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000180 	.word	0x20000180
 80027dc:	08006024 	.word	0x08006024
 80027e0:	08002bc5 	.word	0x08002bc5
 80027e4:	2000017c 	.word	0x2000017c
 80027e8:	20000168 	.word	0x20000168
 80027ec:	20000160 	.word	0x20000160
 80027f0:	20000084 	.word	0x20000084
 80027f4:	2000000c 	.word	0x2000000c

080027f8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <vTaskSuspendAll+0x18>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	4a03      	ldr	r2, [pc, #12]	; (8002810 <vTaskSuspendAll+0x18>)
 8002804:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	20000184 	.word	0x20000184

08002814 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002822:	4b43      	ldr	r3, [pc, #268]	; (8002930 <xTaskResumeAll+0x11c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10a      	bne.n	8002840 <xTaskResumeAll+0x2c>
        __asm volatile
 800282a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282e:	f383 8811 	msr	BASEPRI, r3
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	603b      	str	r3, [r7, #0]
    }
 800283c:	bf00      	nop
 800283e:	e7fe      	b.n	800283e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002840:	f000 fc98 	bl	8003174 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002844:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <xTaskResumeAll+0x11c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	3b01      	subs	r3, #1
 800284a:	4a39      	ldr	r2, [pc, #228]	; (8002930 <xTaskResumeAll+0x11c>)
 800284c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800284e:	4b38      	ldr	r3, [pc, #224]	; (8002930 <xTaskResumeAll+0x11c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d165      	bne.n	8002922 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002856:	4b37      	ldr	r3, [pc, #220]	; (8002934 <xTaskResumeAll+0x120>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d061      	beq.n	8002922 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800285e:	e032      	b.n	80028c6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002860:	4b35      	ldr	r3, [pc, #212]	; (8002938 <xTaskResumeAll+0x124>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3318      	adds	r3, #24
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fda1 	bl	80023b4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3304      	adds	r3, #4
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fd9c 	bl	80023b4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4618      	mov	r0, r3
 8002880:	f003 f91e 	bl	8005ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	2201      	movs	r2, #1
 800288a:	409a      	lsls	r2, r3
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <xTaskResumeAll+0x128>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4313      	orrs	r3, r2
 8002892:	4a2a      	ldr	r2, [pc, #168]	; (800293c <xTaskResumeAll+0x128>)
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4a27      	ldr	r2, [pc, #156]	; (8002940 <xTaskResumeAll+0x12c>)
 80028a4:	441a      	add	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3304      	adds	r3, #4
 80028aa:	4619      	mov	r1, r3
 80028ac:	4610      	mov	r0, r2
 80028ae:	f7ff fd24 	bl	80022fa <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <xTaskResumeAll+0x130>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	429a      	cmp	r2, r3
 80028be:	d302      	bcc.n	80028c6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80028c0:	4b21      	ldr	r3, [pc, #132]	; (8002948 <xTaskResumeAll+0x134>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028c6:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <xTaskResumeAll+0x124>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1c8      	bne.n	8002860 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80028d4:	f000 fa0c 	bl	8002cf0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80028d8:	4b1c      	ldr	r3, [pc, #112]	; (800294c <xTaskResumeAll+0x138>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d010      	beq.n	8002906 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80028e4:	f000 f848 	bl	8002978 <xTaskIncrementTick>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <xTaskResumeAll+0x134>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f1      	bne.n	80028e4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <xTaskResumeAll+0x138>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <xTaskResumeAll+0x134>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800290e:	2301      	movs	r3, #1
 8002910:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <xTaskResumeAll+0x13c>)
 8002914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002922:	f000 fc57 	bl	80031d4 <vPortExitCritical>

    return xAlreadyYielded;
 8002926:	68bb      	ldr	r3, [r7, #8]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000184 	.word	0x20000184
 8002934:	2000015c 	.word	0x2000015c
 8002938:	2000011c 	.word	0x2000011c
 800293c:	20000164 	.word	0x20000164
 8002940:	20000088 	.word	0x20000088
 8002944:	20000084 	.word	0x20000084
 8002948:	20000170 	.word	0x20000170
 800294c:	2000016c 	.word	0x2000016c
 8002950:	e000ed04 	.word	0xe000ed04

08002954 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800295a:	f000 fcf7 	bl	800334c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002962:	4b04      	ldr	r3, [pc, #16]	; (8002974 <xTaskGetTickCountFromISR+0x20>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002968:	683b      	ldr	r3, [r7, #0]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000160 	.word	0x20000160

08002978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002982:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <xTaskIncrementTick+0x14c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 8092 	bne.w	8002ab0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800298c:	4b4e      	ldr	r3, [pc, #312]	; (8002ac8 <xTaskIncrementTick+0x150>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3301      	adds	r3, #1
 8002992:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002994:	4a4c      	ldr	r2, [pc, #304]	; (8002ac8 <xTaskIncrementTick+0x150>)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d120      	bne.n	80029e2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80029a0:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <xTaskIncrementTick+0x154>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <xTaskIncrementTick+0x48>
        __asm volatile
 80029aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ae:	f383 8811 	msr	BASEPRI, r3
 80029b2:	f3bf 8f6f 	isb	sy
 80029b6:	f3bf 8f4f 	dsb	sy
 80029ba:	603b      	str	r3, [r7, #0]
    }
 80029bc:	bf00      	nop
 80029be:	e7fe      	b.n	80029be <xTaskIncrementTick+0x46>
 80029c0:	4b42      	ldr	r3, [pc, #264]	; (8002acc <xTaskIncrementTick+0x154>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	4b42      	ldr	r3, [pc, #264]	; (8002ad0 <xTaskIncrementTick+0x158>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a40      	ldr	r2, [pc, #256]	; (8002acc <xTaskIncrementTick+0x154>)
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	4a40      	ldr	r2, [pc, #256]	; (8002ad0 <xTaskIncrementTick+0x158>)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <xTaskIncrementTick+0x15c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	4a3e      	ldr	r2, [pc, #248]	; (8002ad4 <xTaskIncrementTick+0x15c>)
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	f000 f987 	bl	8002cf0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <xTaskIncrementTick+0x160>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d34c      	bcc.n	8002a86 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029ec:	4b37      	ldr	r3, [pc, #220]	; (8002acc <xTaskIncrementTick+0x154>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d104      	bne.n	8002a00 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029f6:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <xTaskIncrementTick+0x160>)
 80029f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029fc:	601a      	str	r2, [r3, #0]
                    break;
 80029fe:	e042      	b.n	8002a86 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a00:	4b32      	ldr	r3, [pc, #200]	; (8002acc <xTaskIncrementTick+0x154>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d203      	bcs.n	8002a20 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002a18:	4a2f      	ldr	r2, [pc, #188]	; (8002ad8 <xTaskIncrementTick+0x160>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002a1e:	e032      	b.n	8002a86 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	3304      	adds	r3, #4
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fcc5 	bl	80023b4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	3318      	adds	r3, #24
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fcbc 	bl	80023b4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f003 f83e 	bl	8005ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	2201      	movs	r2, #1
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	4b23      	ldr	r3, [pc, #140]	; (8002adc <xTaskIncrementTick+0x164>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	4a22      	ldr	r2, [pc, #136]	; (8002adc <xTaskIncrementTick+0x164>)
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4a1f      	ldr	r2, [pc, #124]	; (8002ae0 <xTaskIncrementTick+0x168>)
 8002a64:	441a      	add	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f7ff fc44 	bl	80022fa <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a76:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <xTaskIncrementTick+0x16c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d3b5      	bcc.n	80029ec <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002a80:	2301      	movs	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a84:	e7b2      	b.n	80029ec <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <xTaskIncrementTick+0x16c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8c:	4914      	ldr	r1, [pc, #80]	; (8002ae0 <xTaskIncrementTick+0x168>)
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d901      	bls.n	8002aa2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002aa2:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <xTaskIncrementTick+0x170>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e004      	b.n	8002aba <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <xTaskIncrementTick+0x174>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	4a0d      	ldr	r2, [pc, #52]	; (8002aec <xTaskIncrementTick+0x174>)
 8002ab8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002aba:	697b      	ldr	r3, [r7, #20]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000184 	.word	0x20000184
 8002ac8:	20000160 	.word	0x20000160
 8002acc:	20000114 	.word	0x20000114
 8002ad0:	20000118 	.word	0x20000118
 8002ad4:	20000174 	.word	0x20000174
 8002ad8:	2000017c 	.word	0x2000017c
 8002adc:	20000164 	.word	0x20000164
 8002ae0:	20000088 	.word	0x20000088
 8002ae4:	20000084 	.word	0x20000084
 8002ae8:	20000170 	.word	0x20000170
 8002aec:	2000016c 	.word	0x2000016c

08002af0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002af6:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <vTaskSwitchContext+0xbc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002afe:	4b2c      	ldr	r3, [pc, #176]	; (8002bb0 <vTaskSwitchContext+0xc0>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002b04:	e04d      	b.n	8002ba2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <vTaskSwitchContext+0xc0>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b0c:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <vTaskSwitchContext+0xc4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002b1a:	7afb      	ldrb	r3, [r7, #11]
 8002b1c:	f1c3 031f 	rsb	r3, r3, #31
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	4925      	ldr	r1, [pc, #148]	; (8002bb8 <vTaskSwitchContext+0xc8>)
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10a      	bne.n	8002b4c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3a:	f383 8811 	msr	BASEPRI, r3
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	607b      	str	r3, [r7, #4]
    }
 8002b48:	bf00      	nop
 8002b4a:	e7fe      	b.n	8002b4a <vTaskSwitchContext+0x5a>
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <vTaskSwitchContext+0xc8>)
 8002b58:	4413      	add	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	3308      	adds	r3, #8
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d104      	bne.n	8002b7c <vTaskSwitchContext+0x8c>
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <vTaskSwitchContext+0xcc>)
 8002b84:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002b86:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <vTaskSwitchContext+0xcc>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <vTaskSwitchContext+0xd0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d102      	bne.n	8002b98 <vTaskSwitchContext+0xa8>
 8002b92:	f002 fef5 	bl	8005980 <SEGGER_SYSVIEW_OnIdle>
}
 8002b96:	e004      	b.n	8002ba2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <vTaskSwitchContext+0xcc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 ff4d 	bl	8005a3c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002ba2:	bf00      	nop
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000184 	.word	0x20000184
 8002bb0:	20000170 	.word	0x20000170
 8002bb4:	20000164 	.word	0x20000164
 8002bb8:	20000088 	.word	0x20000088
 8002bbc:	20000084 	.word	0x20000084
 8002bc0:	20000180 	.word	0x20000180

08002bc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002bcc:	f000 f852 	bl	8002c74 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <prvIdleTask+0x28>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d9f9      	bls.n	8002bcc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <prvIdleTask+0x2c>)
 8002bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002be8:	e7f0      	b.n	8002bcc <prvIdleTask+0x8>
 8002bea:	bf00      	nop
 8002bec:	20000088 	.word	0x20000088
 8002bf0:	e000ed04 	.word	0xe000ed04

08002bf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	e00c      	b.n	8002c1a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <prvInitialiseTaskLists+0x60>)
 8002c0c:	4413      	add	r3, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fb46 	bl	80022a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3301      	adds	r3, #1
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d9ef      	bls.n	8002c00 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002c20:	480d      	ldr	r0, [pc, #52]	; (8002c58 <prvInitialiseTaskLists+0x64>)
 8002c22:	f7ff fb3d 	bl	80022a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002c26:	480d      	ldr	r0, [pc, #52]	; (8002c5c <prvInitialiseTaskLists+0x68>)
 8002c28:	f7ff fb3a 	bl	80022a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002c2c:	480c      	ldr	r0, [pc, #48]	; (8002c60 <prvInitialiseTaskLists+0x6c>)
 8002c2e:	f7ff fb37 	bl	80022a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002c32:	480c      	ldr	r0, [pc, #48]	; (8002c64 <prvInitialiseTaskLists+0x70>)
 8002c34:	f7ff fb34 	bl	80022a0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002c38:	480b      	ldr	r0, [pc, #44]	; (8002c68 <prvInitialiseTaskLists+0x74>)
 8002c3a:	f7ff fb31 	bl	80022a0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <prvInitialiseTaskLists+0x78>)
 8002c40:	4a05      	ldr	r2, [pc, #20]	; (8002c58 <prvInitialiseTaskLists+0x64>)
 8002c42:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <prvInitialiseTaskLists+0x7c>)
 8002c46:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <prvInitialiseTaskLists+0x68>)
 8002c48:	601a      	str	r2, [r3, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000088 	.word	0x20000088
 8002c58:	200000ec 	.word	0x200000ec
 8002c5c:	20000100 	.word	0x20000100
 8002c60:	2000011c 	.word	0x2000011c
 8002c64:	20000130 	.word	0x20000130
 8002c68:	20000148 	.word	0x20000148
 8002c6c:	20000114 	.word	0x20000114
 8002c70:	20000118 	.word	0x20000118

08002c74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c7a:	e019      	b.n	8002cb0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002c7c:	f000 fa7a 	bl	8003174 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c80:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <prvCheckTasksWaitingTermination+0x50>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fb91 	bl	80023b4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <prvCheckTasksWaitingTermination+0x54>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <prvCheckTasksWaitingTermination+0x54>)
 8002c9a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <prvCheckTasksWaitingTermination+0x58>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <prvCheckTasksWaitingTermination+0x58>)
 8002ca4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002ca6:	f000 fa95 	bl	80031d4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f810 	bl	8002cd0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <prvCheckTasksWaitingTermination+0x58>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e1      	bne.n	8002c7c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000130 	.word	0x20000130
 8002cc8:	2000015c 	.word	0x2000015c
 8002ccc:	20000144 	.word	0x20000144

08002cd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fc55 	bl	800358c <vPortFree>
                vPortFree( pxTCB );
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fc52 	bl	800358c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <prvResetNextTaskUnblockTime+0x30>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d104      	bne.n	8002d08 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <prvResetNextTaskUnblockTime+0x34>)
 8002d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d04:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002d06:	e005      	b.n	8002d14 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <prvResetNextTaskUnblockTime+0x30>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <prvResetNextTaskUnblockTime+0x34>)
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000114 	.word	0x20000114
 8002d24:	2000017c 	.word	0x2000017c

08002d28 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002d32:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <prvAddCurrentTaskToDelayedList+0xd4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d38:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fb38 	bl	80023b4 <uxListRemove>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10b      	bne.n	8002d62 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002d4a:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	2201      	movs	r2, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	4a29      	ldr	r2, [pc, #164]	; (8002e04 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002d60:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d68:	d110      	bne.n	8002d8c <prvAddCurrentTaskToDelayedList+0x64>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	211b      	movs	r1, #27
 8002d76:	4618      	mov	r0, r3
 8002d78:	f002 fee4 	bl	8005b44 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d7c:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3304      	adds	r3, #4
 8002d82:	4619      	mov	r1, r3
 8002d84:	4820      	ldr	r0, [pc, #128]	; (8002e08 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002d86:	f7ff fab8 	bl	80022fa <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002d8a:	e032      	b.n	8002df2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d94:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d20f      	bcs.n	8002dc4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002da4:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2104      	movs	r1, #4
 8002daa:	4618      	mov	r0, r3
 8002dac:	f002 feca 	bl	8005b44 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <prvAddCurrentTaskToDelayedList+0xe4>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3304      	adds	r3, #4
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f7ff fac0 	bl	8002342 <vListInsert>
}
 8002dc2:	e016      	b.n	8002df2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2104      	movs	r1, #4
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f002 feba 	bl	8005b44 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4610      	mov	r0, r2
 8002dde:	f7ff fab0 	bl	8002342 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <prvAddCurrentTaskToDelayedList+0xec>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d202      	bcs.n	8002df2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002dec:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <prvAddCurrentTaskToDelayedList+0xec>)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	6013      	str	r3, [r2, #0]
}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000160 	.word	0x20000160
 8002e00:	20000084 	.word	0x20000084
 8002e04:	20000164 	.word	0x20000164
 8002e08:	20000148 	.word	0x20000148
 8002e0c:	20000118 	.word	0x20000118
 8002e10:	20000114 	.word	0x20000114
 8002e14:	2000017c 	.word	0x2000017c

08002e18 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3b04      	subs	r3, #4
 8002e28:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	3b04      	subs	r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f023 0201 	bic.w	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3b04      	subs	r3, #4
 8002e46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002e48:	4a0c      	ldr	r2, [pc, #48]	; (8002e7c <pxPortInitialiseStack+0x64>)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3b14      	subs	r3, #20
 8002e52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3b04      	subs	r3, #4
 8002e5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f06f 0202 	mvn.w	r2, #2
 8002e66:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3b20      	subs	r3, #32
 8002e6c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	08002e81 	.word	0x08002e81

08002e80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002e8a:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <prvTaskExitError+0x54>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e92:	d00a      	beq.n	8002eaa <prvTaskExitError+0x2a>
        __asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	60fb      	str	r3, [r7, #12]
    }
 8002ea6:	bf00      	nop
 8002ea8:	e7fe      	b.n	8002ea8 <prvTaskExitError+0x28>
        __asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	60bb      	str	r3, [r7, #8]
    }
 8002ebc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002ebe:	bf00      	nop
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0fc      	beq.n	8002ec0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	20000010 	.word	0x20000010
	...

08002ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ee0:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <pxCurrentTCBConst2>)
 8002ee2:	6819      	ldr	r1, [r3, #0]
 8002ee4:	6808      	ldr	r0, [r1, #0]
 8002ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eea:	f380 8809 	msr	PSP, r0
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f04f 0000 	mov.w	r0, #0
 8002ef6:	f380 8811 	msr	BASEPRI, r0
 8002efa:	4770      	bx	lr
 8002efc:	f3af 8000 	nop.w

08002f00 <pxCurrentTCBConst2>:
 8002f00:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop

08002f08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002f08:	4808      	ldr	r0, [pc, #32]	; (8002f2c <prvPortStartFirstTask+0x24>)
 8002f0a:	6800      	ldr	r0, [r0, #0]
 8002f0c:	6800      	ldr	r0, [r0, #0]
 8002f0e:	f380 8808 	msr	MSP, r0
 8002f12:	f04f 0000 	mov.w	r0, #0
 8002f16:	f380 8814 	msr	CONTROL, r0
 8002f1a:	b662      	cpsie	i
 8002f1c:	b661      	cpsie	f
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	df00      	svc	0
 8002f28:	bf00      	nop
 8002f2a:	0000      	.short	0x0000
 8002f2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop

08002f34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f3a:	4b46      	ldr	r3, [pc, #280]	; (8003054 <xPortStartScheduler+0x120>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a46      	ldr	r2, [pc, #280]	; (8003058 <xPortStartScheduler+0x124>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d10a      	bne.n	8002f5a <xPortStartScheduler+0x26>
        __asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	613b      	str	r3, [r7, #16]
    }
 8002f56:	bf00      	nop
 8002f58:	e7fe      	b.n	8002f58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f5a:	4b3e      	ldr	r3, [pc, #248]	; (8003054 <xPortStartScheduler+0x120>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a3f      	ldr	r2, [pc, #252]	; (800305c <xPortStartScheduler+0x128>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10a      	bne.n	8002f7a <xPortStartScheduler+0x46>
        __asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	60fb      	str	r3, [r7, #12]
    }
 8002f76:	bf00      	nop
 8002f78:	e7fe      	b.n	8002f78 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f7a:	4b39      	ldr	r3, [pc, #228]	; (8003060 <xPortStartScheduler+0x12c>)
 8002f7c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	22ff      	movs	r2, #255	; 0xff
 8002f8a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <xPortStartScheduler+0x130>)
 8002fa0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fa2:	4b31      	ldr	r3, [pc, #196]	; (8003068 <xPortStartScheduler+0x134>)
 8002fa4:	2207      	movs	r2, #7
 8002fa6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fa8:	e009      	b.n	8002fbe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002faa:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <xPortStartScheduler+0x134>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	4a2d      	ldr	r2, [pc, #180]	; (8003068 <xPortStartScheduler+0x134>)
 8002fb2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc6:	2b80      	cmp	r3, #128	; 0x80
 8002fc8:	d0ef      	beq.n	8002faa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002fca:	4b27      	ldr	r3, [pc, #156]	; (8003068 <xPortStartScheduler+0x134>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f1c3 0307 	rsb	r3, r3, #7
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d00a      	beq.n	8002fec <xPortStartScheduler+0xb8>
        __asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	60bb      	str	r3, [r7, #8]
    }
 8002fe8:	bf00      	nop
 8002fea:	e7fe      	b.n	8002fea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002fec:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <xPortStartScheduler+0x134>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <xPortStartScheduler+0x134>)
 8002ff4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <xPortStartScheduler+0x134>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ffe:	4a1a      	ldr	r2, [pc, #104]	; (8003068 <xPortStartScheduler+0x134>)
 8003000:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800300a:	4b18      	ldr	r3, [pc, #96]	; (800306c <xPortStartScheduler+0x138>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a17      	ldr	r2, [pc, #92]	; (800306c <xPortStartScheduler+0x138>)
 8003010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003014:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <xPortStartScheduler+0x138>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a14      	ldr	r2, [pc, #80]	; (800306c <xPortStartScheduler+0x138>)
 800301c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003020:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003022:	f000 f963 	bl	80032ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <xPortStartScheduler+0x13c>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800302c:	f000 f982 	bl	8003334 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003030:	4b10      	ldr	r3, [pc, #64]	; (8003074 <xPortStartScheduler+0x140>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <xPortStartScheduler+0x140>)
 8003036:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800303a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800303c:	f7ff ff64 	bl	8002f08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003040:	f7ff fd56 	bl	8002af0 <vTaskSwitchContext>
    prvTaskExitError();
 8003044:	f7ff ff1c 	bl	8002e80 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	e000ed00 	.word	0xe000ed00
 8003058:	410fc271 	.word	0x410fc271
 800305c:	410fc270 	.word	0x410fc270
 8003060:	e000e400 	.word	0xe000e400
 8003064:	20000188 	.word	0x20000188
 8003068:	2000018c 	.word	0x2000018c
 800306c:	e000ed20 	.word	0xe000ed20
 8003070:	20000010 	.word	0x20000010
 8003074:	e000ef34 	.word	0xe000ef34

08003078 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800307e:	4b37      	ldr	r3, [pc, #220]	; (800315c <vInitPrioGroupValue+0xe4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a37      	ldr	r2, [pc, #220]	; (8003160 <vInitPrioGroupValue+0xe8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d10a      	bne.n	800309e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	613b      	str	r3, [r7, #16]
    }
 800309a:	bf00      	nop
 800309c:	e7fe      	b.n	800309c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800309e:	4b2f      	ldr	r3, [pc, #188]	; (800315c <vInitPrioGroupValue+0xe4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a30      	ldr	r2, [pc, #192]	; (8003164 <vInitPrioGroupValue+0xec>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d10a      	bne.n	80030be <vInitPrioGroupValue+0x46>
        __asm volatile
 80030a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ac:	f383 8811 	msr	BASEPRI, r3
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	60fb      	str	r3, [r7, #12]
    }
 80030ba:	bf00      	nop
 80030bc:	e7fe      	b.n	80030bc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030be:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <vInitPrioGroupValue+0xf0>)
 80030c0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	22ff      	movs	r2, #255	; 0xff
 80030ce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4b22      	ldr	r3, [pc, #136]	; (800316c <vInitPrioGroupValue+0xf4>)
 80030e4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <vInitPrioGroupValue+0xf8>)
 80030e8:	2207      	movs	r2, #7
 80030ea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030ec:	e009      	b.n	8003102 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80030ee:	4b20      	ldr	r3, [pc, #128]	; (8003170 <vInitPrioGroupValue+0xf8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	4a1e      	ldr	r2, [pc, #120]	; (8003170 <vInitPrioGroupValue+0xf8>)
 80030f6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310a:	2b80      	cmp	r3, #128	; 0x80
 800310c:	d0ef      	beq.n	80030ee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800310e:	4b18      	ldr	r3, [pc, #96]	; (8003170 <vInitPrioGroupValue+0xf8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f1c3 0307 	rsb	r3, r3, #7
 8003116:	2b04      	cmp	r3, #4
 8003118:	d00a      	beq.n	8003130 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	60bb      	str	r3, [r7, #8]
    }
 800312c:	bf00      	nop
 800312e:	e7fe      	b.n	800312e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003130:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <vInitPrioGroupValue+0xf8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	4a0e      	ldr	r2, [pc, #56]	; (8003170 <vInitPrioGroupValue+0xf8>)
 8003138:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <vInitPrioGroupValue+0xf8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003142:	4a0b      	ldr	r2, [pc, #44]	; (8003170 <vInitPrioGroupValue+0xf8>)
 8003144:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000ed00 	.word	0xe000ed00
 8003160:	410fc271 	.word	0x410fc271
 8003164:	410fc270 	.word	0x410fc270
 8003168:	e000e400 	.word	0xe000e400
 800316c:	20000188 	.word	0x20000188
 8003170:	2000018c 	.word	0x2000018c

08003174 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
        __asm volatile
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	607b      	str	r3, [r7, #4]
    }
 800318c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <vPortEnterCritical+0x58>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3301      	adds	r3, #1
 8003194:	4a0d      	ldr	r2, [pc, #52]	; (80031cc <vPortEnterCritical+0x58>)
 8003196:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <vPortEnterCritical+0x58>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d10f      	bne.n	80031c0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <vPortEnterCritical+0x5c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <vPortEnterCritical+0x4c>
        __asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	603b      	str	r3, [r7, #0]
    }
 80031bc:	bf00      	nop
 80031be:	e7fe      	b.n	80031be <vPortEnterCritical+0x4a>
    }
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	20000010 	.word	0x20000010
 80031d0:	e000ed04 	.word	0xe000ed04

080031d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80031da:	4b12      	ldr	r3, [pc, #72]	; (8003224 <vPortExitCritical+0x50>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10a      	bne.n	80031f8 <vPortExitCritical+0x24>
        __asm volatile
 80031e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	607b      	str	r3, [r7, #4]
    }
 80031f4:	bf00      	nop
 80031f6:	e7fe      	b.n	80031f6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <vPortExitCritical+0x50>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	4a09      	ldr	r2, [pc, #36]	; (8003224 <vPortExitCritical+0x50>)
 8003200:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <vPortExitCritical+0x50>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d105      	bne.n	8003216 <vPortExitCritical+0x42>
 800320a:	2300      	movs	r3, #0
 800320c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003214:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000010 	.word	0x20000010
	...

08003230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003230:	f3ef 8009 	mrs	r0, PSP
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	4b15      	ldr	r3, [pc, #84]	; (8003290 <pxCurrentTCBConst>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	f01e 0f10 	tst.w	lr, #16
 8003240:	bf08      	it	eq
 8003242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800324a:	6010      	str	r0, [r2, #0]
 800324c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003254:	f380 8811 	msr	BASEPRI, r0
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f7ff fc46 	bl	8002af0 <vTaskSwitchContext>
 8003264:	f04f 0000 	mov.w	r0, #0
 8003268:	f380 8811 	msr	BASEPRI, r0
 800326c:	bc09      	pop	{r0, r3}
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	6808      	ldr	r0, [r1, #0]
 8003272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003276:	f01e 0f10 	tst.w	lr, #16
 800327a:	bf08      	it	eq
 800327c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003280:	f380 8809 	msr	PSP, r0
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	f3af 8000 	nop.w

08003290 <pxCurrentTCBConst>:
 8003290:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop

08003298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
        __asm volatile
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	607b      	str	r3, [r7, #4]
    }
 80032b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80032b2:	f002 faeb 	bl	800588c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80032b6:	f7ff fb5f 	bl	8002978 <xTaskIncrementTick>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d006      	beq.n	80032ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80032c0:	f002 fb42 	bl	8005948 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <SysTick_Handler+0x50>)
 80032c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	e001      	b.n	80032d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80032ce:	f002 fb1f 	bl	8005910 <SEGGER_SYSVIEW_RecordExitISR>
 80032d2:	2300      	movs	r3, #0
 80032d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f383 8811 	msr	BASEPRI, r3
    }
 80032dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	e000ed04 	.word	0xe000ed04

080032ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <vPortSetupTimerInterrupt+0x34>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <vPortSetupTimerInterrupt+0x38>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <vPortSetupTimerInterrupt+0x3c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0a      	ldr	r2, [pc, #40]	; (800332c <vPortSetupTimerInterrupt+0x40>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	099b      	lsrs	r3, r3, #6
 8003308:	4a09      	ldr	r2, [pc, #36]	; (8003330 <vPortSetupTimerInterrupt+0x44>)
 800330a:	3b01      	subs	r3, #1
 800330c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800330e:	4b04      	ldr	r3, [pc, #16]	; (8003320 <vPortSetupTimerInterrupt+0x34>)
 8003310:	2207      	movs	r2, #7
 8003312:	601a      	str	r2, [r3, #0]
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	e000e010 	.word	0xe000e010
 8003324:	e000e018 	.word	0xe000e018
 8003328:	20000000 	.word	0x20000000
 800332c:	10624dd3 	.word	0x10624dd3
 8003330:	e000e014 	.word	0xe000e014

08003334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003344 <vPortEnableVFP+0x10>
 8003338:	6801      	ldr	r1, [r0, #0]
 800333a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800333e:	6001      	str	r1, [r0, #0]
 8003340:	4770      	bx	lr
 8003342:	0000      	.short	0x0000
 8003344:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop

0800334c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003352:	f3ef 8305 	mrs	r3, IPSR
 8003356:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b0f      	cmp	r3, #15
 800335c:	d914      	bls.n	8003388 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800335e:	4a17      	ldr	r2, [pc, #92]	; (80033bc <vPortValidateInterruptPriority+0x70>)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003368:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <vPortValidateInterruptPriority+0x74>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	7afa      	ldrb	r2, [r7, #11]
 800336e:	429a      	cmp	r2, r3
 8003370:	d20a      	bcs.n	8003388 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	607b      	str	r3, [r7, #4]
    }
 8003384:	bf00      	nop
 8003386:	e7fe      	b.n	8003386 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003388:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <vPortValidateInterruptPriority+0x78>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <vPortValidateInterruptPriority+0x7c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d90a      	bls.n	80033ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	603b      	str	r3, [r7, #0]
    }
 80033aa:	bf00      	nop
 80033ac:	e7fe      	b.n	80033ac <vPortValidateInterruptPriority+0x60>
    }
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000e3f0 	.word	0xe000e3f0
 80033c0:	20000188 	.word	0x20000188
 80033c4:	e000ed0c 	.word	0xe000ed0c
 80033c8:	2000018c 	.word	0x2000018c

080033cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80033d8:	f7ff fa0e 	bl	80027f8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80033dc:	4b65      	ldr	r3, [pc, #404]	; (8003574 <pvPortMalloc+0x1a8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80033e4:	f000 f934 	bl	8003650 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80033e8:	4b63      	ldr	r3, [pc, #396]	; (8003578 <pvPortMalloc+0x1ac>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f040 80a7 	bne.w	8003544 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d02d      	beq.n	8003458 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80033fc:	2208      	movs	r2, #8
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	429a      	cmp	r2, r3
 8003406:	d227      	bcs.n	8003458 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003408:	2208      	movs	r2, #8
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	2b00      	cmp	r3, #0
 8003418:	d021      	beq.n	800345e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f023 0307 	bic.w	r3, r3, #7
 8003420:	3308      	adds	r3, #8
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	d214      	bcs.n	8003452 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f023 0307 	bic.w	r3, r3, #7
 800342e:	3308      	adds	r3, #8
 8003430:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	2b00      	cmp	r3, #0
 800343a:	d010      	beq.n	800345e <pvPortMalloc+0x92>
        __asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	617b      	str	r3, [r7, #20]
    }
 800344e:	bf00      	nop
 8003450:	e7fe      	b.n	8003450 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003456:	e002      	b.n	800345e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	e000      	b.n	8003460 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800345e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d06e      	beq.n	8003544 <pvPortMalloc+0x178>
 8003466:	4b45      	ldr	r3, [pc, #276]	; (800357c <pvPortMalloc+0x1b0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	d869      	bhi.n	8003544 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003470:	4b43      	ldr	r3, [pc, #268]	; (8003580 <pvPortMalloc+0x1b4>)
 8003472:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003474:	4b42      	ldr	r3, [pc, #264]	; (8003580 <pvPortMalloc+0x1b4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800347a:	e004      	b.n	8003486 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	d903      	bls.n	8003498 <pvPortMalloc+0xcc>
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f1      	bne.n	800347c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003498:	4b36      	ldr	r3, [pc, #216]	; (8003574 <pvPortMalloc+0x1a8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349e:	429a      	cmp	r2, r3
 80034a0:	d050      	beq.n	8003544 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2208      	movs	r2, #8
 80034a8:	4413      	add	r3, r2
 80034aa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	1ad2      	subs	r2, r2, r3
 80034bc:	2308      	movs	r3, #8
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d91f      	bls.n	8003504 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <pvPortMalloc+0x120>
        __asm volatile
 80034d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	613b      	str	r3, [r7, #16]
    }
 80034e8:	bf00      	nop
 80034ea:	e7fe      	b.n	80034ea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	1ad2      	subs	r2, r2, r3
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80034fe:	69b8      	ldr	r0, [r7, #24]
 8003500:	f000 f908 	bl	8003714 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003504:	4b1d      	ldr	r3, [pc, #116]	; (800357c <pvPortMalloc+0x1b0>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	4a1b      	ldr	r2, [pc, #108]	; (800357c <pvPortMalloc+0x1b0>)
 8003510:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003512:	4b1a      	ldr	r3, [pc, #104]	; (800357c <pvPortMalloc+0x1b0>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <pvPortMalloc+0x1b8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d203      	bcs.n	8003526 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800351e:	4b17      	ldr	r3, [pc, #92]	; (800357c <pvPortMalloc+0x1b0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a18      	ldr	r2, [pc, #96]	; (8003584 <pvPortMalloc+0x1b8>)
 8003524:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	4b13      	ldr	r3, [pc, #76]	; (8003578 <pvPortMalloc+0x1ac>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	431a      	orrs	r2, r3
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <pvPortMalloc+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3301      	adds	r3, #1
 8003540:	4a11      	ldr	r2, [pc, #68]	; (8003588 <pvPortMalloc+0x1bc>)
 8003542:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003544:	f7ff f966 	bl	8002814 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <pvPortMalloc+0x19c>
        __asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	60fb      	str	r3, [r7, #12]
    }
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <pvPortMalloc+0x19a>
    return pvReturn;
 8003568:	69fb      	ldr	r3, [r7, #28]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3728      	adds	r7, #40	; 0x28
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20019198 	.word	0x20019198
 8003578:	200191ac 	.word	0x200191ac
 800357c:	2001919c 	.word	0x2001919c
 8003580:	20019190 	.word	0x20019190
 8003584:	200191a0 	.word	0x200191a0
 8003588:	200191a4 	.word	0x200191a4

0800358c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d04d      	beq.n	800363a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800359e:	2308      	movs	r3, #8
 80035a0:	425b      	negs	r3, r3
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4413      	add	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	4b24      	ldr	r3, [pc, #144]	; (8003644 <vPortFree+0xb8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10a      	bne.n	80035d0 <vPortFree+0x44>
        __asm volatile
 80035ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	60fb      	str	r3, [r7, #12]
    }
 80035cc:	bf00      	nop
 80035ce:	e7fe      	b.n	80035ce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <vPortFree+0x62>
        __asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	60bb      	str	r3, [r7, #8]
    }
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	4b14      	ldr	r3, [pc, #80]	; (8003644 <vPortFree+0xb8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01e      	beq.n	800363a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d11a      	bne.n	800363a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <vPortFree+0xb8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	43db      	mvns	r3, r3
 800360e:	401a      	ands	r2, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003614:	f7ff f8f0 	bl	80027f8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <vPortFree+0xbc>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4413      	add	r3, r2
 8003622:	4a09      	ldr	r2, [pc, #36]	; (8003648 <vPortFree+0xbc>)
 8003624:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003626:	6938      	ldr	r0, [r7, #16]
 8003628:	f000 f874 	bl	8003714 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800362c:	4b07      	ldr	r3, [pc, #28]	; (800364c <vPortFree+0xc0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3301      	adds	r3, #1
 8003632:	4a06      	ldr	r2, [pc, #24]	; (800364c <vPortFree+0xc0>)
 8003634:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003636:	f7ff f8ed 	bl	8002814 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800363a:	bf00      	nop
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200191ac 	.word	0x200191ac
 8003648:	2001919c 	.word	0x2001919c
 800364c:	200191a8 	.word	0x200191a8

08003650 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003656:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800365a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800365c:	4b27      	ldr	r3, [pc, #156]	; (80036fc <prvHeapInit+0xac>)
 800365e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00c      	beq.n	8003684 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3307      	adds	r3, #7
 800366e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0307 	bic.w	r3, r3, #7
 8003676:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <prvHeapInit+0xac>)
 8003680:	4413      	add	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003688:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <prvHeapInit+0xb0>)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800368e:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <prvHeapInit+0xb0>)
 8003690:	2200      	movs	r2, #0
 8003692:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	4413      	add	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800369c:	2208      	movs	r2, #8
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0307 	bic.w	r3, r3, #7
 80036aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4a15      	ldr	r2, [pc, #84]	; (8003704 <prvHeapInit+0xb4>)
 80036b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80036b2:	4b14      	ldr	r3, [pc, #80]	; (8003704 <prvHeapInit+0xb4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2200      	movs	r2, #0
 80036b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <prvHeapInit+0xb4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	1ad2      	subs	r2, r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <prvHeapInit+0xb4>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <prvHeapInit+0xb8>)
 80036de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4a09      	ldr	r2, [pc, #36]	; (800370c <prvHeapInit+0xbc>)
 80036e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <prvHeapInit+0xc0>)
 80036ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036ee:	601a      	str	r2, [r3, #0]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	20000190 	.word	0x20000190
 8003700:	20019190 	.word	0x20019190
 8003704:	20019198 	.word	0x20019198
 8003708:	200191a0 	.word	0x200191a0
 800370c:	2001919c 	.word	0x2001919c
 8003710:	200191ac 	.word	0x200191ac

08003714 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800371c:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <prvInsertBlockIntoFreeList+0xac>)
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	e002      	b.n	8003728 <prvInsertBlockIntoFreeList+0x14>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	429a      	cmp	r2, r3
 8003730:	d8f7      	bhi.n	8003722 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	4413      	add	r3, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	429a      	cmp	r2, r3
 8003742:	d108      	bne.n	8003756 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	441a      	add	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	441a      	add	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d118      	bne.n	800379c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <prvInsertBlockIntoFreeList+0xb0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d00d      	beq.n	8003792 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	441a      	add	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	e008      	b.n	80037a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003792:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <prvInsertBlockIntoFreeList+0xb0>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e003      	b.n	80037a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d002      	beq.n	80037b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20019190 	.word	0x20019190
 80037c4:	20019198 	.word	0x20019198

080037c8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80037cc:	4803      	ldr	r0, [pc, #12]	; (80037dc <_cbSendSystemDesc+0x14>)
 80037ce:	f002 f807 	bl	80057e0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80037d2:	4803      	ldr	r0, [pc, #12]	; (80037e0 <_cbSendSystemDesc+0x18>)
 80037d4:	f002 f804 	bl	80057e0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	0800602c 	.word	0x0800602c
 80037e0:	08006070 	.word	0x08006070

080037e4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <SEGGER_SYSVIEW_Conf+0x20>)
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <SEGGER_SYSVIEW_Conf+0x20>)
 80037ee:	6819      	ldr	r1, [r3, #0]
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <SEGGER_SYSVIEW_Conf+0x24>)
 80037f2:	4a06      	ldr	r2, [pc, #24]	; (800380c <SEGGER_SYSVIEW_Conf+0x28>)
 80037f4:	f001 fc78 	bl	80050e8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80037f8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80037fc:	f001 fcb8 	bl	8005170 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003800:	bf00      	nop
 8003802:	bd80      	pop	{r7, pc}
 8003804:	20000000 	.word	0x20000000
 8003808:	080037c9 	.word	0x080037c9
 800380c:	0800610c 	.word	0x0800610c

08003810 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003812:	b085      	sub	sp, #20
 8003814:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	e033      	b.n	8003884 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800381c:	491e      	ldr	r1, [pc, #120]	; (8003898 <_cbSendTaskList+0x88>)
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	491a      	ldr	r1, [pc, #104]	; (8003898 <_cbSendTaskList+0x88>)
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	3304      	adds	r3, #4
 800383c:	6819      	ldr	r1, [r3, #0]
 800383e:	4c16      	ldr	r4, [pc, #88]	; (8003898 <_cbSendTaskList+0x88>)
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4423      	add	r3, r4
 800384c:	3308      	adds	r3, #8
 800384e:	681c      	ldr	r4, [r3, #0]
 8003850:	4d11      	ldr	r5, [pc, #68]	; (8003898 <_cbSendTaskList+0x88>)
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	442b      	add	r3, r5
 800385e:	330c      	adds	r3, #12
 8003860:	681d      	ldr	r5, [r3, #0]
 8003862:	4e0d      	ldr	r6, [pc, #52]	; (8003898 <_cbSendTaskList+0x88>)
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4433      	add	r3, r6
 8003870:	3310      	adds	r3, #16
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	462b      	mov	r3, r5
 8003878:	4622      	mov	r2, r4
 800387a:	f000 f8bd 	bl	80039f8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3301      	adds	r3, #1
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <_cbSendTaskList+0x8c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d3c6      	bcc.n	800381c <_cbSendTaskList+0xc>
  }
}
 800388e:	bf00      	nop
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003898:	200191b0 	.word	0x200191b0
 800389c:	20019250 	.word	0x20019250

080038a0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80038a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80038a8:	f7ff f854 	bl	8002954 <xTaskGetTickCountFromISR>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2200      	movs	r2, #0
 80038b0:	469a      	mov	sl, r3
 80038b2:	4693      	mov	fp, r2
 80038b4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80038b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	f04f 0a00 	mov.w	sl, #0
 80038c4:	f04f 0b00 	mov.w	fp, #0
 80038c8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80038cc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80038d0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80038d4:	4652      	mov	r2, sl
 80038d6:	465b      	mov	r3, fp
 80038d8:	1a14      	subs	r4, r2, r0
 80038da:	eb63 0501 	sbc.w	r5, r3, r1
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	00ab      	lsls	r3, r5, #2
 80038e8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80038ec:	00a2      	lsls	r2, r4, #2
 80038ee:	4614      	mov	r4, r2
 80038f0:	461d      	mov	r5, r3
 80038f2:	eb14 0800 	adds.w	r8, r4, r0
 80038f6:	eb45 0901 	adc.w	r9, r5, r1
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800390a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800390e:	4690      	mov	r8, r2
 8003910:	4699      	mov	r9, r3
 8003912:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003916:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800391a:	4610      	mov	r0, r2
 800391c:	4619      	mov	r1, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003928 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003936:	2205      	movs	r2, #5
 8003938:	492b      	ldr	r1, [pc, #172]	; (80039e8 <SYSVIEW_AddTask+0xc0>)
 800393a:	68b8      	ldr	r0, [r7, #8]
 800393c:	f002 fb0a 	bl	8005f54 <memcmp>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d04b      	beq.n	80039de <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003946:	4b29      	ldr	r3, [pc, #164]	; (80039ec <SYSVIEW_AddTask+0xc4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b07      	cmp	r3, #7
 800394c:	d903      	bls.n	8003956 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800394e:	4828      	ldr	r0, [pc, #160]	; (80039f0 <SYSVIEW_AddTask+0xc8>)
 8003950:	f002 fa52 	bl	8005df8 <SEGGER_SYSVIEW_Warn>
    return;
 8003954:	e044      	b.n	80039e0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003956:	4b25      	ldr	r3, [pc, #148]	; (80039ec <SYSVIEW_AddTask+0xc4>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4926      	ldr	r1, [pc, #152]	; (80039f4 <SYSVIEW_AddTask+0xcc>)
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <SYSVIEW_AddTask+0xc4>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4921      	ldr	r1, [pc, #132]	; (80039f4 <SYSVIEW_AddTask+0xcc>)
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	3304      	adds	r3, #4
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003980:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <SYSVIEW_AddTask+0xc4>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	491b      	ldr	r1, [pc, #108]	; (80039f4 <SYSVIEW_AddTask+0xcc>)
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	3308      	adds	r3, #8
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003996:	4b15      	ldr	r3, [pc, #84]	; (80039ec <SYSVIEW_AddTask+0xc4>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4916      	ldr	r1, [pc, #88]	; (80039f4 <SYSVIEW_AddTask+0xcc>)
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	330c      	adds	r3, #12
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <SYSVIEW_AddTask+0xc4>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4910      	ldr	r1, [pc, #64]	; (80039f4 <SYSVIEW_AddTask+0xcc>)
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	3310      	adds	r3, #16
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <SYSVIEW_AddTask+0xc4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3301      	adds	r3, #1
 80039c8:	4a08      	ldr	r2, [pc, #32]	; (80039ec <SYSVIEW_AddTask+0xc4>)
 80039ca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f80e 	bl	80039f8 <SYSVIEW_SendTaskInfo>
 80039dc:	e000      	b.n	80039e0 <SYSVIEW_AddTask+0xb8>
    return;
 80039de:	bf00      	nop

}
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	08006080 	.word	0x08006080
 80039ec:	20019250 	.word	0x20019250
 80039f0:	08006088 	.word	0x08006088
 80039f4:	200191b0 	.word	0x200191b0

080039f8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003a06:	f107 0314 	add.w	r3, r7, #20
 8003a0a:	2214      	movs	r2, #20
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f002 fabe 	bl	8005f90 <memset>
  TaskInfo.TaskID     = TaskID;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 fddf 	bl	80055f0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003a32:	bf00      	nop
 8003a34:	3728      	adds	r7, #40	; 0x28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <__NVIC_EnableIRQ>:
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	db0b      	blt.n	8003a66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	f003 021f 	and.w	r2, r3, #31
 8003a54:	4907      	ldr	r1, [pc, #28]	; (8003a74 <__NVIC_EnableIRQ+0x38>)
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	e000e100 	.word	0xe000e100

08003a78 <__NVIC_SetPriority>:
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	6039      	str	r1, [r7, #0]
 8003a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	db0a      	blt.n	8003aa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	490c      	ldr	r1, [pc, #48]	; (8003ac4 <__NVIC_SetPriority+0x4c>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	0112      	lsls	r2, r2, #4
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003aa0:	e00a      	b.n	8003ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	4908      	ldr	r1, [pc, #32]	; (8003ac8 <__NVIC_SetPriority+0x50>)
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	3b04      	subs	r3, #4
 8003ab0:	0112      	lsls	r2, r2, #4
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	761a      	strb	r2, [r3, #24]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000e100 	.word	0xe000e100
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003ad2:	f002 f9ed 	bl	8005eb0 <SEGGER_SYSVIEW_IsStarted>
 8003ad6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003ade:	f001 fc0b 	bl	80052f8 <SEGGER_SYSVIEW_Start>
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003af6:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <_cbOnUARTRx+0x3c>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d806      	bhi.n	8003b0c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <_cbOnUARTRx+0x3c>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	3301      	adds	r3, #1
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <_cbOnUARTRx+0x3c>)
 8003b08:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003b0a:	e009      	b.n	8003b20 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003b0c:	f7ff ffde 	bl	8003acc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <_cbOnUARTRx+0x3c>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4618      	mov	r0, r3
 8003b16:	1dfb      	adds	r3, r7, #7
 8003b18:	2201      	movs	r2, #1
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f000 fb9c 	bl	8004258 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003b20:	bf00      	nop
}
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20000014 	.word	0x20000014

08003b2c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003b34:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <_cbOnUARTTx+0x5c>)
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d80f      	bhi.n	8003b5c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003b3c:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <_cbOnUARTTx+0x5c>)
 8003b3e:	785b      	ldrb	r3, [r3, #1]
 8003b40:	461a      	mov	r2, r3
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <_cbOnUARTTx+0x60>)
 8003b44:	5c9a      	ldrb	r2, [r3, r2]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003b4a:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <_cbOnUARTTx+0x5c>)
 8003b4c:	785b      	ldrb	r3, [r3, #1]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <_cbOnUARTTx+0x5c>)
 8003b54:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003b56:	2301      	movs	r3, #1
 8003b58:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003b5a:	e00f      	b.n	8003b7c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <_cbOnUARTTx+0x5c>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fa1b 	bl	8003fa0 <SEGGER_RTT_ReadUpBufferNoLock>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	da02      	bge.n	8003b7a <_cbOnUARTTx+0x4e>
    r = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e000      	b.n	8003b7c <_cbOnUARTTx+0x50>
  }
Done:
 8003b7a:	bf00      	nop
  return r;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000014 	.word	0x20000014
 8003b8c:	08006114 	.word	0x08006114

08003b90 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003b98:	4a04      	ldr	r2, [pc, #16]	; (8003bac <SEGGER_UART_init+0x1c>)
 8003b9a:	4905      	ldr	r1, [pc, #20]	; (8003bb0 <SEGGER_UART_init+0x20>)
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f863 	bl	8003c68 <HIF_UART_Init>
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	08003aed 	.word	0x08003aed
 8003bb0:	08003b2d 	.word	0x08003b2d

08003bb4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003bba:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <USART2_IRQHandler+0x80>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d011      	beq.n	8003bee <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <USART2_IRQHandler+0x84>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 030b 	and.w	r3, r3, #11
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d108      	bne.n	8003bee <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003bdc:	4b17      	ldr	r3, [pc, #92]	; (8003c3c <USART2_IRQHandler+0x88>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d004      	beq.n	8003bee <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003be4:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <USART2_IRQHandler+0x88>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	79fa      	ldrb	r2, [r7, #7]
 8003bea:	4610      	mov	r0, r2
 8003bec:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01a      	beq.n	8003c2e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <USART2_IRQHandler+0x8c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d015      	beq.n	8003c2c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <USART2_IRQHandler+0x8c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	1dfa      	adds	r2, r7, #7
 8003c06:	4610      	mov	r0, r2
 8003c08:	4798      	blx	r3
 8003c0a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003c12:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <USART2_IRQHandler+0x90>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a0b      	ldr	r2, [pc, #44]	; (8003c44 <USART2_IRQHandler+0x90>)
 8003c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e006      	b.n	8003c2e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <USART2_IRQHandler+0x80>)
 8003c22:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003c24:	79fa      	ldrb	r2, [r7, #7]
 8003c26:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <USART2_IRQHandler+0x84>)
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	e000      	b.n	8003c2e <USART2_IRQHandler+0x7a>
      return;
 8003c2c:	bf00      	nop
    }
  }
}
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40004400 	.word	0x40004400
 8003c38:	40004404 	.word	0x40004404
 8003c3c:	20019254 	.word	0x20019254
 8003c40:	20019258 	.word	0x20019258
 8003c44:	4000440c 	.word	0x4000440c

08003c48 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c56:	6013      	str	r3, [r2, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	4000440c 	.word	0x4000440c

08003c68 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003c74:	4b2e      	ldr	r3, [pc, #184]	; (8003d30 <HIF_UART_Init+0xc8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a2d      	ldr	r2, [pc, #180]	; (8003d30 <HIF_UART_Init+0xc8>)
 8003c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003c80:	4b2c      	ldr	r3, [pc, #176]	; (8003d34 <HIF_UART_Init+0xcc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a2b      	ldr	r2, [pc, #172]	; (8003d34 <HIF_UART_Init+0xcc>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003c8c:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <HIF_UART_Init+0xd0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c98:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003ca0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003ca2:	4a25      	ldr	r2, [pc, #148]	; (8003d38 <HIF_UART_Init+0xd0>)
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003ca8:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <HIF_UART_Init+0xd4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003cbc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <HIF_UART_Init+0xd4>)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003cc4:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <HIF_UART_Init+0xd8>)
 8003cc6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003cca:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <HIF_UART_Init+0xdc>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <HIF_UART_Init+0xe0>)
 8003cd4:	2280      	movs	r2, #128	; 0x80
 8003cd6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003cde:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <HIF_UART_Init+0xe4>)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf6:	d302      	bcc.n	8003cfe <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003cf8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003cfc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	4a11      	ldr	r2, [pc, #68]	; (8003d50 <HIF_UART_Init+0xe8>)
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003d0e:	4a11      	ldr	r2, [pc, #68]	; (8003d54 <HIF_UART_Init+0xec>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003d14:	4a10      	ldr	r2, [pc, #64]	; (8003d58 <HIF_UART_Init+0xf0>)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003d1a:	2106      	movs	r1, #6
 8003d1c:	2026      	movs	r0, #38	; 0x26
 8003d1e:	f7ff feab 	bl	8003a78 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003d22:	2026      	movs	r0, #38	; 0x26
 8003d24:	f7ff fe8a 	bl	8003a3c <__NVIC_EnableIRQ>
}
 8003d28:	bf00      	nop
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023840 	.word	0x40023840
 8003d34:	40023830 	.word	0x40023830
 8003d38:	40020020 	.word	0x40020020
 8003d3c:	40020000 	.word	0x40020000
 8003d40:	4000440c 	.word	0x4000440c
 8003d44:	40004410 	.word	0x40004410
 8003d48:	40004414 	.word	0x40004414
 8003d4c:	055d4a80 	.word	0x055d4a80
 8003d50:	40004408 	.word	0x40004408
 8003d54:	20019254 	.word	0x20019254
 8003d58:	20019258 	.word	0x20019258

08003d5c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003d62:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <_DoInit+0xa0>)
 8003d64:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003d66:	22a8      	movs	r2, #168	; 0xa8
 8003d68:	2100      	movs	r1, #0
 8003d6a:	6838      	ldr	r0, [r7, #0]
 8003d6c:	f002 f910 	bl	8005f90 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2203      	movs	r2, #3
 8003d74:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4a20      	ldr	r2, [pc, #128]	; (8003e00 <_DoInit+0xa4>)
 8003d80:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	4a1f      	ldr	r2, [pc, #124]	; (8003e04 <_DoInit+0xa8>)
 8003d86:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d8e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	4a16      	ldr	r2, [pc, #88]	; (8003e00 <_DoInit+0xa4>)
 8003da6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <_DoInit+0xac>)
 8003dac:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2210      	movs	r2, #16
 8003db2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003dc6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003dca:	2300      	movs	r3, #0
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	e00c      	b.n	8003dea <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f1c3 030f 	rsb	r3, r3, #15
 8003dd6:	4a0d      	ldr	r2, [pc, #52]	; (8003e0c <_DoInit+0xb0>)
 8003dd8:	5cd1      	ldrb	r1, [r2, r3]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4413      	add	r3, r2
 8003de0:	460a      	mov	r2, r1
 8003de2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3301      	adds	r3, #1
 8003de8:	607b      	str	r3, [r7, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b0f      	cmp	r3, #15
 8003dee:	d9ef      	bls.n	8003dd0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003df0:	f3bf 8f5f 	dmb	sy
}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	2001925c 	.word	0x2001925c
 8003e00:	080060d8 	.word	0x080060d8
 8003e04:	20019304 	.word	0x20019304
 8003e08:	20019704 	.word	0x20019704
 8003e0c:	08006118 	.word	0x08006118

08003e10 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d905      	bls.n	8003e40 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	e007      	b.n	8003e50 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	69b9      	ldr	r1, [r7, #24]
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	1acb      	subs	r3, r1, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	bf28      	it	cs
 8003e5e:	4613      	movcs	r3, r2
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4293      	cmp	r3, r2
 8003e68:	bf28      	it	cs
 8003e6a:	4613      	movcs	r3, r2
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	4413      	add	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	6978      	ldr	r0, [r7, #20]
 8003e7e:	f002 f879 	bl	8005f74 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003e82:	6a3a      	ldr	r2, [r7, #32]
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	4413      	add	r3, r2
 8003e88:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	4413      	add	r3, r2
 8003e90:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	4413      	add	r3, r2
 8003ea0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d101      	bne.n	8003eb0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003eb0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1b2      	bne.n	8003e26 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3728      	adds	r7, #40	; 0x28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b088      	sub	sp, #32
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d911      	bls.n	8003f12 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	6938      	ldr	r0, [r7, #16]
 8003efe:	f002 f839 	bl	8005f74 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f02:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	441a      	add	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003f10:	e01f      	b.n	8003f52 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	6938      	ldr	r0, [r7, #16]
 8003f26:	f002 f825 	bl	8005f74 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4619      	mov	r1, r3
 8003f42:	6938      	ldr	r0, [r7, #16]
 8003f44:	f002 f816 	bl	8005f74 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f48:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	60da      	str	r2, [r3, #12]
}
 8003f52:	bf00      	nop
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003f5a:	b480      	push	{r7}
 8003f5c:	b087      	sub	sp, #28
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d808      	bhi.n	8003f88 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad2      	subs	r2, r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4413      	add	r3, r2
 8003f82:	3b01      	subs	r3, #1
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e004      	b.n	8003f92 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003f92:	697b      	ldr	r3, [r7, #20]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08c      	sub	sp, #48	; 0x30
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003fac:	4b3e      	ldr	r3, [pc, #248]	; (80040a8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003fae:	623b      	str	r3, [r7, #32]
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b53      	cmp	r3, #83	; 0x53
 8003fb8:	d001      	beq.n	8003fbe <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003fba:	f7ff fecf 	bl	8003d5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4413      	add	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4a37      	ldr	r2, [pc, #220]	; (80040a8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003fcc:	4413      	add	r3, r2
 8003fce:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d92b      	bls.n	8004044 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	bf28      	it	cs
 8003ffe:	4613      	movcs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004008:	4413      	add	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	6939      	ldr	r1, [r7, #16]
 8004010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004012:	f001 ffaf 	bl	8005f74 <memcpy>
    NumBytesRead += NumBytesRem;
 8004016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	4413      	add	r3, r2
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800401e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	4413      	add	r3, r2
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800402e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	4413      	add	r3, r2
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800403c:	429a      	cmp	r2, r3
 800403e:	d101      	bne.n	8004044 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004040:	2300      	movs	r3, #0
 8004042:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4293      	cmp	r3, r2
 8004052:	bf28      	it	cs
 8004054:	4613      	movcs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d019      	beq.n	8004092 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004064:	4413      	add	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	6939      	ldr	r1, [r7, #16]
 800406c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800406e:	f001 ff81 	bl	8005f74 <memcpy>
    NumBytesRead += NumBytesRem;
 8004072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	4413      	add	r3, r2
 8004078:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	4413      	add	r3, r2
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800408a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	4413      	add	r3, r2
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800409c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3730      	adds	r7, #48	; 0x30
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	2001925c 	.word	0x2001925c

080040ac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08c      	sub	sp, #48	; 0x30
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80040b8:	4b3e      	ldr	r3, [pc, #248]	; (80041b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80040ba:	623b      	str	r3, [r7, #32]
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b53      	cmp	r3, #83	; 0x53
 80040c4:	d001      	beq.n	80040ca <SEGGER_RTT_ReadNoLock+0x1e>
 80040c6:	f7ff fe49 	bl	8003d5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4613      	mov	r3, r2
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	4413      	add	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	3360      	adds	r3, #96	; 0x60
 80040d6:	4a37      	ldr	r2, [pc, #220]	; (80041b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80040d8:	4413      	add	r3, r2
 80040da:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80040ec:	2300      	movs	r3, #0
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80040f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d92b      	bls.n	8004150 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4293      	cmp	r3, r2
 8004108:	bf28      	it	cs
 800410a:	4613      	movcs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	4413      	add	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	6939      	ldr	r1, [r7, #16]
 800411c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800411e:	f001 ff29 	bl	8005f74 <memcpy>
    NumBytesRead += NumBytesRem;
 8004122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4413      	add	r3, r2
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4413      	add	r3, r2
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800413a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	4413      	add	r3, r2
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004148:	429a      	cmp	r2, r3
 800414a:	d101      	bne.n	8004150 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800414c:	2300      	movs	r3, #0
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4293      	cmp	r3, r2
 800415e:	bf28      	it	cs
 8004160:	4613      	movcs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d019      	beq.n	800419e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	4413      	add	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	6939      	ldr	r1, [r7, #16]
 8004178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800417a:	f001 fefb 	bl	8005f74 <memcpy>
    NumBytesRead += NumBytesRem;
 800417e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	4413      	add	r3, r2
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	4413      	add	r3, r2
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	4413      	add	r3, r2
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3730      	adds	r7, #48	; 0x30
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	2001925c 	.word	0x2001925c

080041b8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4613      	mov	r3, r2
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4413      	add	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	3360      	adds	r3, #96	; 0x60
 80041d4:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80041d6:	4413      	add	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d029      	beq.n	8004236 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d82e      	bhi.n	8004244 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d013      	beq.n	8004216 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80041ee:	e029      	b.n	8004244 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80041f0:	6978      	ldr	r0, [r7, #20]
 80041f2:	f7ff feb2 	bl	8003f5a <_GetAvailWriteSpace>
 80041f6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d202      	bcs.n	8004206 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004204:	e021      	b.n	800424a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	69b9      	ldr	r1, [r7, #24]
 800420e:	6978      	ldr	r0, [r7, #20]
 8004210:	f7ff fe5b 	bl	8003eca <_WriteNoCheck>
    break;
 8004214:	e019      	b.n	800424a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004216:	6978      	ldr	r0, [r7, #20]
 8004218:	f7ff fe9f 	bl	8003f5a <_GetAvailWriteSpace>
 800421c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4293      	cmp	r3, r2
 8004224:	bf28      	it	cs
 8004226:	4613      	movcs	r3, r2
 8004228:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	69b9      	ldr	r1, [r7, #24]
 800422e:	6978      	ldr	r0, [r7, #20]
 8004230:	f7ff fe4b 	bl	8003eca <_WriteNoCheck>
    break;
 8004234:	e009      	b.n	800424a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	69b9      	ldr	r1, [r7, #24]
 800423a:	6978      	ldr	r0, [r7, #20]
 800423c:	f7ff fde8 	bl	8003e10 <_WriteBlocking>
 8004240:	61f8      	str	r0, [r7, #28]
    break;
 8004242:	e002      	b.n	800424a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
    break;
 8004248:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800424a:	69fb      	ldr	r3, [r7, #28]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3720      	adds	r7, #32
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	2001925c 	.word	0x2001925c

08004258 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b53      	cmp	r3, #83	; 0x53
 8004270:	d001      	beq.n	8004276 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004272:	f7ff fd73 	bl	8003d5c <_DoInit>
  SEGGER_RTT_LOCK();
 8004276:	f3ef 8311 	mrs	r3, BASEPRI
 800427a:	f04f 0120 	mov.w	r1, #32
 800427e:	f381 8811 	msr	BASEPRI, r1
 8004282:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7ff ff95 	bl	80041b8 <SEGGER_RTT_WriteDownBufferNoLock>
 800428e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004296:	697b      	ldr	r3, [r7, #20]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3720      	adds	r7, #32
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	2001925c 	.word	0x2001925c

080042a4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80042b2:	4b3d      	ldr	r3, [pc, #244]	; (80043a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b53      	cmp	r3, #83	; 0x53
 80042be:	d001      	beq.n	80042c4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80042c0:	f7ff fd4c 	bl	8003d5c <_DoInit>
  SEGGER_RTT_LOCK();
 80042c4:	f3ef 8311 	mrs	r3, BASEPRI
 80042c8:	f04f 0120 	mov.w	r1, #32
 80042cc:	f381 8811 	msr	BASEPRI, r1
 80042d0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042d2:	4b35      	ldr	r3, [pc, #212]	; (80043a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80042d4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80042da:	6939      	ldr	r1, [r7, #16]
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	4613      	mov	r3, r2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	4413      	add	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	440b      	add	r3, r1
 80042ea:	3304      	adds	r3, #4
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d008      	beq.n	8004304 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	3301      	adds	r3, #1
 80042f6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	429a      	cmp	r2, r3
 8004300:	dbeb      	blt.n	80042da <SEGGER_RTT_AllocUpBuffer+0x36>
 8004302:	e000      	b.n	8004306 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004304:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	429a      	cmp	r2, r3
 800430e:	da3f      	bge.n	8004390 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004310:	6939      	ldr	r1, [r7, #16]
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	4613      	mov	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	4413      	add	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	440b      	add	r3, r1
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004324:	6939      	ldr	r1, [r7, #16]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	4613      	mov	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4413      	add	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	440b      	add	r3, r1
 8004334:	3304      	adds	r3, #4
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800433a:	6939      	ldr	r1, [r7, #16]
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	4613      	mov	r3, r2
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	4413      	add	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	440b      	add	r3, r1
 8004348:	3320      	adds	r3, #32
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800434e:	6939      	ldr	r1, [r7, #16]
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	4613      	mov	r3, r2
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	4413      	add	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	440b      	add	r3, r1
 800435c:	3328      	adds	r3, #40	; 0x28
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004362:	6939      	ldr	r1, [r7, #16]
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	440b      	add	r3, r1
 8004370:	3324      	adds	r3, #36	; 0x24
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004376:	6939      	ldr	r1, [r7, #16]
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	440b      	add	r3, r1
 8004384:	332c      	adds	r3, #44	; 0x2c
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800438a:	f3bf 8f5f 	dmb	sy
 800438e:	e002      	b.n	8004396 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004394:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800439c:	69fb      	ldr	r3, [r7, #28]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	2001925c 	.word	0x2001925c

080043ac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80043ba:	4b21      	ldr	r3, [pc, #132]	; (8004440 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80043bc:	623b      	str	r3, [r7, #32]
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b53      	cmp	r3, #83	; 0x53
 80043c6:	d001      	beq.n	80043cc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80043c8:	f7ff fcc8 	bl	8003d5c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80043cc:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80043ce:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d82c      	bhi.n	8004430 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80043d6:	f3ef 8311 	mrs	r3, BASEPRI
 80043da:	f04f 0120 	mov.w	r1, #32
 80043de:	f381 8811 	msr	BASEPRI, r1
 80043e2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	3360      	adds	r3, #96	; 0x60
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00e      	beq.n	800441a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2200      	movs	r2, #0
 8004412:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2200      	movs	r2, #0
 8004418:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004420:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
 800442e:	e002      	b.n	8004436 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004438:	4618      	mov	r0, r3
 800443a:	3728      	adds	r7, #40	; 0x28
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	2001925c 	.word	0x2001925c

08004444 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	60fa      	str	r2, [r7, #12]
 800445a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b80      	cmp	r3, #128	; 0x80
 8004460:	d90a      	bls.n	8004478 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004462:	2380      	movs	r3, #128	; 0x80
 8004464:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004466:	e007      	b.n	8004478 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	1c53      	adds	r3, r2, #1
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1c59      	adds	r1, r3, #1
 8004472:	60f9      	str	r1, [r7, #12]
 8004474:	7812      	ldrb	r2, [r2, #0]
 8004476:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	1e5a      	subs	r2, r3, #1
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <_EncodeStr+0x46>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1ee      	bne.n	8004468 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	b2da      	uxtb	r2, r3
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004496:	68fb      	ldr	r3, [r7, #12]
}
 8004498:	4618      	mov	r0, r3
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3307      	adds	r3, #7
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044c2:	4b35      	ldr	r3, [pc, #212]	; (8004598 <_HandleIncomingPacket+0xdc>)
 80044c4:	7e1b      	ldrb	r3, [r3, #24]
 80044c6:	4618      	mov	r0, r3
 80044c8:	1cfb      	adds	r3, r7, #3
 80044ca:	2201      	movs	r2, #1
 80044cc:	4619      	mov	r1, r3
 80044ce:	f7ff fded 	bl	80040ac <SEGGER_RTT_ReadNoLock>
 80044d2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d052      	beq.n	8004580 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	2b80      	cmp	r3, #128	; 0x80
 80044de:	d031      	beq.n	8004544 <_HandleIncomingPacket+0x88>
 80044e0:	2b80      	cmp	r3, #128	; 0x80
 80044e2:	dc40      	bgt.n	8004566 <_HandleIncomingPacket+0xaa>
 80044e4:	2b07      	cmp	r3, #7
 80044e6:	dc15      	bgt.n	8004514 <_HandleIncomingPacket+0x58>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	dd3c      	ble.n	8004566 <_HandleIncomingPacket+0xaa>
 80044ec:	3b01      	subs	r3, #1
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d839      	bhi.n	8004566 <_HandleIncomingPacket+0xaa>
 80044f2:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <_HandleIncomingPacket+0x3c>)
 80044f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f8:	0800451b 	.word	0x0800451b
 80044fc:	08004521 	.word	0x08004521
 8004500:	08004527 	.word	0x08004527
 8004504:	0800452d 	.word	0x0800452d
 8004508:	08004533 	.word	0x08004533
 800450c:	08004539 	.word	0x08004539
 8004510:	0800453f 	.word	0x0800453f
 8004514:	2b7f      	cmp	r3, #127	; 0x7f
 8004516:	d035      	beq.n	8004584 <_HandleIncomingPacket+0xc8>
 8004518:	e025      	b.n	8004566 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800451a:	f000 feed 	bl	80052f8 <SEGGER_SYSVIEW_Start>
      break;
 800451e:	e036      	b.n	800458e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004520:	f000 ffa6 	bl	8005470 <SEGGER_SYSVIEW_Stop>
      break;
 8004524:	e033      	b.n	800458e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004526:	f001 f97f 	bl	8005828 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800452a:	e030      	b.n	800458e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800452c:	f001 f944 	bl	80057b8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004530:	e02d      	b.n	800458e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004532:	f000 ffc3 	bl	80054bc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004536:	e02a      	b.n	800458e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004538:	f001 fc0c 	bl	8005d54 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800453c:	e027      	b.n	800458e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800453e:	f001 fbeb 	bl	8005d18 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004542:	e024      	b.n	800458e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004544:	4b14      	ldr	r3, [pc, #80]	; (8004598 <_HandleIncomingPacket+0xdc>)
 8004546:	7e1b      	ldrb	r3, [r3, #24]
 8004548:	4618      	mov	r0, r3
 800454a:	1cfb      	adds	r3, r7, #3
 800454c:	2201      	movs	r2, #1
 800454e:	4619      	mov	r1, r3
 8004550:	f7ff fdac 	bl	80040ac <SEGGER_RTT_ReadNoLock>
 8004554:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d015      	beq.n	8004588 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	4618      	mov	r0, r3
 8004560:	f001 fb50 	bl	8005c04 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004564:	e010      	b.n	8004588 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	b25b      	sxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	da0e      	bge.n	800458c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800456e:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <_HandleIncomingPacket+0xdc>)
 8004570:	7e1b      	ldrb	r3, [r3, #24]
 8004572:	4618      	mov	r0, r3
 8004574:	1cfb      	adds	r3, r7, #3
 8004576:	2201      	movs	r2, #1
 8004578:	4619      	mov	r1, r3
 800457a:	f7ff fd97 	bl	80040ac <SEGGER_RTT_ReadNoLock>
      }
      break;
 800457e:	e005      	b.n	800458c <_HandleIncomingPacket+0xd0>
    }
  }
 8004580:	bf00      	nop
 8004582:	e004      	b.n	800458e <_HandleIncomingPacket+0xd2>
      break;
 8004584:	bf00      	nop
 8004586:	e002      	b.n	800458e <_HandleIncomingPacket+0xd2>
      break;
 8004588:	bf00      	nop
 800458a:	e000      	b.n	800458e <_HandleIncomingPacket+0xd2>
      break;
 800458c:	bf00      	nop
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	2001a71c 	.word	0x2001a71c

0800459c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800459c:	b580      	push	{r7, lr}
 800459e:	b08c      	sub	sp, #48	; 0x30
 80045a0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80045a2:	2301      	movs	r3, #1
 80045a4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80045a6:	1d3b      	adds	r3, r7, #4
 80045a8:	3301      	adds	r3, #1
 80045aa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b0:	4b32      	ldr	r3, [pc, #200]	; (800467c <_TrySendOverflowPacket+0xe0>)
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b6:	e00b      	b.n	80045d0 <_TrySendOverflowPacket+0x34>
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	09db      	lsrs	r3, r3, #7
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	2b7f      	cmp	r3, #127	; 0x7f
 80045d4:	d8f0      	bhi.n	80045b8 <_TrySendOverflowPacket+0x1c>
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045e6:	4b26      	ldr	r3, [pc, #152]	; (8004680 <_TrySendOverflowPacket+0xe4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80045ec:	4b23      	ldr	r3, [pc, #140]	; (800467c <_TrySendOverflowPacket+0xe0>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	623b      	str	r3, [r7, #32]
 80045fe:	e00b      	b.n	8004618 <_TrySendOverflowPacket+0x7c>
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	6279      	str	r1, [r7, #36]	; 0x24
 800460a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	09db      	lsrs	r3, r3, #7
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	2b7f      	cmp	r3, #127	; 0x7f
 800461c:	d8f0      	bhi.n	8004600 <_TrySendOverflowPacket+0x64>
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	627a      	str	r2, [r7, #36]	; 0x24
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800462e:	4b13      	ldr	r3, [pc, #76]	; (800467c <_TrySendOverflowPacket+0xe0>)
 8004630:	785b      	ldrb	r3, [r3, #1]
 8004632:	4618      	mov	r0, r3
 8004634:	1d3b      	adds	r3, r7, #4
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	461a      	mov	r2, r3
 800463c:	1d3b      	adds	r3, r7, #4
 800463e:	4619      	mov	r1, r3
 8004640:	f7fb fde6 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004644:	4603      	mov	r3, r0
 8004646:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004648:	f7ff fafe 	bl	8003c48 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d009      	beq.n	8004666 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004652:	4a0a      	ldr	r2, [pc, #40]	; (800467c <_TrySendOverflowPacket+0xe0>)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004658:	4b08      	ldr	r3, [pc, #32]	; (800467c <_TrySendOverflowPacket+0xe0>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	3b01      	subs	r3, #1
 800465e:	b2da      	uxtb	r2, r3
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <_TrySendOverflowPacket+0xe0>)
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e004      	b.n	8004670 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <_TrySendOverflowPacket+0xe0>)
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	3301      	adds	r3, #1
 800466c:	4a03      	ldr	r2, [pc, #12]	; (800467c <_TrySendOverflowPacket+0xe0>)
 800466e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004670:	693b      	ldr	r3, [r7, #16]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3730      	adds	r7, #48	; 0x30
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	2001a71c 	.word	0x2001a71c
 8004680:	e0001004 	.word	0xe0001004

08004684 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004690:	4b96      	ldr	r3, [pc, #600]	; (80048ec <_SendPacket+0x268>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d010      	beq.n	80046ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004698:	4b94      	ldr	r3, [pc, #592]	; (80048ec <_SendPacket+0x268>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8130 	beq.w	8004902 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80046a2:	4b92      	ldr	r3, [pc, #584]	; (80048ec <_SendPacket+0x268>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d109      	bne.n	80046be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80046aa:	f7ff ff77 	bl	800459c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80046ae:	4b8f      	ldr	r3, [pc, #572]	; (80048ec <_SendPacket+0x268>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	f040 8127 	bne.w	8004906 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80046b8:	e001      	b.n	80046be <_SendPacket+0x3a>
    goto Send;
 80046ba:	bf00      	nop
 80046bc:	e000      	b.n	80046c0 <_SendPacket+0x3c>
Send:
 80046be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b1f      	cmp	r3, #31
 80046c4:	d809      	bhi.n	80046da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80046c6:	4b89      	ldr	r3, [pc, #548]	; (80048ec <_SendPacket+0x268>)
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f040 8118 	bne.w	800490a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b17      	cmp	r3, #23
 80046de:	d807      	bhi.n	80046f0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	e0c4      	b.n	800487a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2b7f      	cmp	r3, #127	; 0x7f
 80046fc:	d912      	bls.n	8004724 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	09da      	lsrs	r2, r3, #7
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3b01      	subs	r3, #1
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	3a01      	subs	r2, #1
 8004716:	60fa      	str	r2, [r7, #12]
 8004718:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800471c:	b2da      	uxtb	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	e006      	b.n	8004732 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3b01      	subs	r3, #1
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	b2da      	uxtb	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b7e      	cmp	r3, #126	; 0x7e
 8004736:	d807      	bhi.n	8004748 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3b01      	subs	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	e098      	b.n	800487a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800474e:	d212      	bcs.n	8004776 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	09da      	lsrs	r2, r3, #7
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3b01      	subs	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	3a01      	subs	r2, #1
 8004768:	60fa      	str	r2, [r7, #12]
 800476a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800476e:	b2da      	uxtb	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	e081      	b.n	800487a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800477c:	d21d      	bcs.n	80047ba <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	0b9a      	lsrs	r2, r3, #14
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3b01      	subs	r3, #1
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	09db      	lsrs	r3, r3, #7
 8004792:	b2db      	uxtb	r3, r3
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	3a01      	subs	r2, #1
 8004798:	60fa      	str	r2, [r7, #12]
 800479a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	3a01      	subs	r2, #1
 80047ac:	60fa      	str	r2, [r7, #12]
 80047ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	701a      	strb	r2, [r3, #0]
 80047b8:	e05f      	b.n	800487a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047c0:	d228      	bcs.n	8004814 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	0d5a      	lsrs	r2, r3, #21
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	0b9b      	lsrs	r3, r3, #14
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	3a01      	subs	r2, #1
 80047dc:	60fa      	str	r2, [r7, #12]
 80047de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	09db      	lsrs	r3, r3, #7
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	3a01      	subs	r2, #1
 80047f2:	60fa      	str	r2, [r7, #12]
 80047f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	3a01      	subs	r2, #1
 8004806:	60fa      	str	r2, [r7, #12]
 8004808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800480c:	b2da      	uxtb	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	e032      	b.n	800487a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	0f1a      	lsrs	r2, r3, #28
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3b01      	subs	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	0d5b      	lsrs	r3, r3, #21
 8004828:	b2db      	uxtb	r3, r3
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	3a01      	subs	r2, #1
 800482e:	60fa      	str	r2, [r7, #12]
 8004830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004834:	b2da      	uxtb	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	0b9b      	lsrs	r3, r3, #14
 800483e:	b2db      	uxtb	r3, r3
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	3a01      	subs	r2, #1
 8004844:	60fa      	str	r2, [r7, #12]
 8004846:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800484a:	b2da      	uxtb	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	09db      	lsrs	r3, r3, #7
 8004854:	b2db      	uxtb	r3, r3
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	3a01      	subs	r2, #1
 800485a:	60fa      	str	r2, [r7, #12]
 800485c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	3a01      	subs	r2, #1
 800486e:	60fa      	str	r2, [r7, #12]
 8004870:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004874:	b2da      	uxtb	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800487a:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <_SendPacket+0x26c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004880:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <_SendPacket+0x268>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	623b      	str	r3, [r7, #32]
 8004892:	e00b      	b.n	80048ac <_SendPacket+0x228>
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	b2da      	uxtb	r2, r3
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	1c59      	adds	r1, r3, #1
 800489c:	6279      	str	r1, [r7, #36]	; 0x24
 800489e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	09db      	lsrs	r3, r3, #7
 80048aa:	623b      	str	r3, [r7, #32]
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	2b7f      	cmp	r3, #127	; 0x7f
 80048b0:	d8f0      	bhi.n	8004894 <_SendPacket+0x210>
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	627a      	str	r2, [r7, #36]	; 0x24
 80048b8:	6a3a      	ldr	r2, [r7, #32]
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80048c2:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <_SendPacket+0x268>)
 80048c4:	785b      	ldrb	r3, [r3, #1]
 80048c6:	4618      	mov	r0, r3
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	68f9      	ldr	r1, [r7, #12]
 80048d2:	f7fb fc9d 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80048d6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80048d8:	f7ff f9b6 	bl	8003c48 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d008      	beq.n	80048f4 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80048e2:	4a02      	ldr	r2, [pc, #8]	; (80048ec <_SendPacket+0x268>)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	60d3      	str	r3, [r2, #12]
 80048e8:	e010      	b.n	800490c <_SendPacket+0x288>
 80048ea:	bf00      	nop
 80048ec:	2001a71c 	.word	0x2001a71c
 80048f0:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80048f4:	4b19      	ldr	r3, [pc, #100]	; (800495c <_SendPacket+0x2d8>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	3301      	adds	r3, #1
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	4b17      	ldr	r3, [pc, #92]	; (800495c <_SendPacket+0x2d8>)
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	e004      	b.n	800490c <_SendPacket+0x288>
    goto SendDone;
 8004902:	bf00      	nop
 8004904:	e002      	b.n	800490c <_SendPacket+0x288>
      goto SendDone;
 8004906:	bf00      	nop
 8004908:	e000      	b.n	800490c <_SendPacket+0x288>
      goto SendDone;
 800490a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800490c:	4b13      	ldr	r3, [pc, #76]	; (800495c <_SendPacket+0x2d8>)
 800490e:	7e1b      	ldrb	r3, [r3, #24]
 8004910:	4619      	mov	r1, r3
 8004912:	4a13      	ldr	r2, [pc, #76]	; (8004960 <_SendPacket+0x2dc>)
 8004914:	460b      	mov	r3, r1
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	440b      	add	r3, r1
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4413      	add	r3, r2
 800491e:	336c      	adds	r3, #108	; 0x6c
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b0e      	ldr	r3, [pc, #56]	; (800495c <_SendPacket+0x2d8>)
 8004924:	7e1b      	ldrb	r3, [r3, #24]
 8004926:	4618      	mov	r0, r3
 8004928:	490d      	ldr	r1, [pc, #52]	; (8004960 <_SendPacket+0x2dc>)
 800492a:	4603      	mov	r3, r0
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	4403      	add	r3, r0
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	440b      	add	r3, r1
 8004934:	3370      	adds	r3, #112	; 0x70
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d00b      	beq.n	8004954 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800493c:	4b07      	ldr	r3, [pc, #28]	; (800495c <_SendPacket+0x2d8>)
 800493e:	789b      	ldrb	r3, [r3, #2]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d107      	bne.n	8004954 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <_SendPacket+0x2d8>)
 8004946:	2201      	movs	r2, #1
 8004948:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800494a:	f7ff fdb7 	bl	80044bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800494e:	4b03      	ldr	r3, [pc, #12]	; (800495c <_SendPacket+0x2d8>)
 8004950:	2200      	movs	r2, #0
 8004952:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004954:	bf00      	nop
 8004956:	3728      	adds	r7, #40	; 0x28
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	2001a71c 	.word	0x2001a71c
 8004960:	2001925c 	.word	0x2001925c

08004964 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b08a      	sub	sp, #40	; 0x28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	3301      	adds	r3, #1
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d80a      	bhi.n	8004994 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	1c59      	adds	r1, r3, #1
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6051      	str	r1, [r2, #4]
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	2b80      	cmp	r3, #128	; 0x80
 800499a:	d15a      	bne.n	8004a52 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	623b      	str	r3, [r7, #32]
 80049bc:	e00b      	b.n	80049d6 <_StoreChar+0x72>
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	1c59      	adds	r1, r3, #1
 80049c6:	6279      	str	r1, [r7, #36]	; 0x24
 80049c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	09db      	lsrs	r3, r3, #7
 80049d4:	623b      	str	r3, [r7, #32]
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	2b7f      	cmp	r3, #127	; 0x7f
 80049da:	d8f0      	bhi.n	80049be <_StoreChar+0x5a>
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	627a      	str	r2, [r7, #36]	; 0x24
 80049e2:	6a3a      	ldr	r2, [r7, #32]
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	2300      	movs	r3, #0
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	e00b      	b.n	8004a0e <_StoreChar+0xaa>
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	1c59      	adds	r1, r3, #1
 80049fe:	61f9      	str	r1, [r7, #28]
 8004a00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	09db      	lsrs	r3, r3, #7
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b7f      	cmp	r3, #127	; 0x7f
 8004a12:	d8f0      	bhi.n	80049f6 <_StoreChar+0x92>
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	61fa      	str	r2, [r7, #28]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	221a      	movs	r2, #26
 8004a2a:	6939      	ldr	r1, [r7, #16]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fe29 	bl	8004684 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fd34 	bl	80044a4 <_PreparePacket>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	611a      	str	r2, [r3, #16]
  }
}
 8004a52:	bf00      	nop
 8004a54:	3728      	adds	r7, #40	; 0x28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08a      	sub	sp, #40	; 0x28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004a72:	2301      	movs	r3, #1
 8004a74:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004a76:	e007      	b.n	8004a88 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004a78:	6a3a      	ldr	r2, [r7, #32]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a80:	623b      	str	r3, [r7, #32]
    Width++;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3301      	adds	r3, #1
 8004a86:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004a88:	6a3a      	ldr	r2, [r7, #32]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d2f3      	bcs.n	8004a78 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d901      	bls.n	8004a9c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d11f      	bne.n	8004ae6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01c      	beq.n	8004ae6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <_PrintUnsigned+0x66>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <_PrintUnsigned+0x66>
        c = '0';
 8004abc:	2330      	movs	r3, #48	; 0x30
 8004abe:	76fb      	strb	r3, [r7, #27]
 8004ac0:	e001      	b.n	8004ac6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004ac2:	2320      	movs	r3, #32
 8004ac4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ac6:	e007      	b.n	8004ad8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	3b01      	subs	r3, #1
 8004acc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004ace:	7efb      	ldrb	r3, [r7, #27]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff ff46 	bl	8004964 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <_PrintUnsigned+0x8a>
 8004ade:	69fa      	ldr	r2, [r7, #28]
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d3f0      	bcc.n	8004ac8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d903      	bls.n	8004af4 <_PrintUnsigned+0x98>
      NumDigits--;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	e009      	b.n	8004b08 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d200      	bcs.n	8004b08 <_PrintUnsigned+0xac>
        break;
 8004b06:	e005      	b.n	8004b14 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	fb02 f303 	mul.w	r3, r2, r3
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004b12:	e7e8      	b.n	8004ae6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004b2c:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <_PrintUnsigned+0x128>)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	4413      	add	r3, r2
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	4619      	mov	r1, r3
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7ff ff14 	bl	8004964 <_StoreChar>
    Digit /= Base;
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e3      	bne.n	8004b14 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d011      	beq.n	8004b7a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00e      	beq.n	8004b7a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b5c:	e006      	b.n	8004b6c <_PrintUnsigned+0x110>
        FieldWidth--;
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	3b01      	subs	r3, #1
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004b64:	2120      	movs	r1, #32
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7ff fefc 	bl	8004964 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <_PrintUnsigned+0x11e>
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d3f1      	bcc.n	8004b5e <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004b7a:	bf00      	nop
 8004b7c:	3728      	adds	r7, #40	; 0x28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	08006138 	.word	0x08006138

08004b88 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bfb8      	it	lt
 8004b9c:	425b      	neglt	r3, r3
 8004b9e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004ba4:	e007      	b.n	8004bb6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bae:	613b      	str	r3, [r7, #16]
    Width++;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	daf3      	bge.n	8004ba6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d901      	bls.n	8004bca <_PrintInt+0x42>
    Width = NumDigits;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <_PrintInt+0x5e>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	db04      	blt.n	8004be0 <_PrintInt+0x58>
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <_PrintInt+0x5e>
    FieldWidth--;
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <_PrintInt+0x6e>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d016      	beq.n	8004c24 <_PrintInt+0x9c>
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d111      	bne.n	8004c24 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00e      	beq.n	8004c24 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c06:	e006      	b.n	8004c16 <_PrintInt+0x8e>
        FieldWidth--;
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004c0e:	2120      	movs	r1, #32
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f7ff fea7 	bl	8004964 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <_PrintInt+0x9c>
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d3f1      	bcc.n	8004c08 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	da07      	bge.n	8004c3a <_PrintInt+0xb2>
    v = -v;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	425b      	negs	r3, r3
 8004c2e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004c30:	212d      	movs	r1, #45	; 0x2d
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7ff fe96 	bl	8004964 <_StoreChar>
 8004c38:	e008      	b.n	8004c4c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004c44:	212b      	movs	r1, #43	; 0x2b
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff fe8c 	bl	8004964 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d019      	beq.n	8004c8a <_PrintInt+0x102>
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d114      	bne.n	8004c8a <_PrintInt+0x102>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d111      	bne.n	8004c8a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00e      	beq.n	8004c8a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c6c:	e006      	b.n	8004c7c <_PrintInt+0xf4>
        FieldWidth--;
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004c74:	2130      	movs	r1, #48	; 0x30
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff fe74 	bl	8004964 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <_PrintInt+0x102>
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d3f1      	bcc.n	8004c6e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff fedf 	bl	8004a5c <_PrintUnsigned>
}
 8004c9e:	bf00      	nop
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b098      	sub	sp, #96	; 0x60
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8004cb8:	f04f 0120 	mov.w	r1, #32
 8004cbc:	f381 8811 	msr	BASEPRI, r1
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc2:	48b7      	ldr	r0, [pc, #732]	; (8004fa0 <_VPrintTarget+0x2f8>)
 8004cc4:	f7ff fbee 	bl	80044a4 <_PreparePacket>
 8004cc8:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004cca:	4bb5      	ldr	r3, [pc, #724]	; (8004fa0 <_VPrintTarget+0x2f8>)
 8004ccc:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3301      	adds	r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004cee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 81a8 	beq.w	8005048 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cfc:	2b25      	cmp	r3, #37	; 0x25
 8004cfe:	f040 8195 	bne.w	800502c <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004d02:	2300      	movs	r3, #0
 8004d04:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004d06:	2301      	movs	r3, #1
 8004d08:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004d12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d16:	3b23      	subs	r3, #35	; 0x23
 8004d18:	2b0d      	cmp	r3, #13
 8004d1a:	d83f      	bhi.n	8004d9c <_VPrintTarget+0xf4>
 8004d1c:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <_VPrintTarget+0x7c>)
 8004d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d22:	bf00      	nop
 8004d24:	08004d8d 	.word	0x08004d8d
 8004d28:	08004d9d 	.word	0x08004d9d
 8004d2c:	08004d9d 	.word	0x08004d9d
 8004d30:	08004d9d 	.word	0x08004d9d
 8004d34:	08004d9d 	.word	0x08004d9d
 8004d38:	08004d9d 	.word	0x08004d9d
 8004d3c:	08004d9d 	.word	0x08004d9d
 8004d40:	08004d9d 	.word	0x08004d9d
 8004d44:	08004d7d 	.word	0x08004d7d
 8004d48:	08004d9d 	.word	0x08004d9d
 8004d4c:	08004d5d 	.word	0x08004d5d
 8004d50:	08004d9d 	.word	0x08004d9d
 8004d54:	08004d9d 	.word	0x08004d9d
 8004d58:	08004d6d 	.word	0x08004d6d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3301      	adds	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	e01a      	b.n	8004da2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d6e:	f043 0302 	orr.w	r3, r3, #2
 8004d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3301      	adds	r3, #1
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e012      	b.n	8004da2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d7e:	f043 0304 	orr.w	r3, r3, #4
 8004d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3301      	adds	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	e00a      	b.n	8004da2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8e:	f043 0308 	orr.w	r3, r3, #8
 8004d92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	e002      	b.n	8004da2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	653b      	str	r3, [r7, #80]	; 0x50
 8004da0:	bf00      	nop
        }
      } while (v);
 8004da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1b0      	bne.n	8004d0a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004da8:	2300      	movs	r3, #0
 8004daa:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004db4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004db8:	2b2f      	cmp	r3, #47	; 0x2f
 8004dba:	d912      	bls.n	8004de2 <_VPrintTarget+0x13a>
 8004dbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dc0:	2b39      	cmp	r3, #57	; 0x39
 8004dc2:	d80e      	bhi.n	8004de2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dda:	4413      	add	r3, r2
 8004ddc:	3b30      	subs	r3, #48	; 0x30
 8004dde:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004de0:	e7e4      	b.n	8004dac <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004de2:	2300      	movs	r3, #0
 8004de4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004dee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004df2:	2b2e      	cmp	r3, #46	; 0x2e
 8004df4:	d11d      	bne.n	8004e32 <_VPrintTarget+0x18a>
        sFormat++;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e08:	2b2f      	cmp	r3, #47	; 0x2f
 8004e0a:	d912      	bls.n	8004e32 <_VPrintTarget+0x18a>
 8004e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e10:	2b39      	cmp	r3, #57	; 0x39
 8004e12:	d80e      	bhi.n	8004e32 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3301      	adds	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	461a      	mov	r2, r3
 8004e26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3b30      	subs	r3, #48	; 0x30
 8004e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004e30:	e7e4      	b.n	8004dfc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004e3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e3e:	2b6c      	cmp	r3, #108	; 0x6c
 8004e40:	d003      	beq.n	8004e4a <_VPrintTarget+0x1a2>
 8004e42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e46:	2b68      	cmp	r3, #104	; 0x68
 8004e48:	d107      	bne.n	8004e5a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3301      	adds	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004e58:	e7ef      	b.n	8004e3a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004e5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e5e:	2b25      	cmp	r3, #37	; 0x25
 8004e60:	f000 80d8 	beq.w	8005014 <_VPrintTarget+0x36c>
 8004e64:	2b25      	cmp	r3, #37	; 0x25
 8004e66:	f2c0 80dc 	blt.w	8005022 <_VPrintTarget+0x37a>
 8004e6a:	2b78      	cmp	r3, #120	; 0x78
 8004e6c:	f300 80d9 	bgt.w	8005022 <_VPrintTarget+0x37a>
 8004e70:	2b58      	cmp	r3, #88	; 0x58
 8004e72:	f2c0 80d6 	blt.w	8005022 <_VPrintTarget+0x37a>
 8004e76:	3b58      	subs	r3, #88	; 0x58
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	f200 80d2 	bhi.w	8005022 <_VPrintTarget+0x37a>
 8004e7e:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <_VPrintTarget+0x1dc>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004f7b 	.word	0x08004f7b
 8004e88:	08005023 	.word	0x08005023
 8004e8c:	08005023 	.word	0x08005023
 8004e90:	08005023 	.word	0x08005023
 8004e94:	08005023 	.word	0x08005023
 8004e98:	08005023 	.word	0x08005023
 8004e9c:	08005023 	.word	0x08005023
 8004ea0:	08005023 	.word	0x08005023
 8004ea4:	08005023 	.word	0x08005023
 8004ea8:	08005023 	.word	0x08005023
 8004eac:	08005023 	.word	0x08005023
 8004eb0:	08004f09 	.word	0x08004f09
 8004eb4:	08004f2f 	.word	0x08004f2f
 8004eb8:	08005023 	.word	0x08005023
 8004ebc:	08005023 	.word	0x08005023
 8004ec0:	08005023 	.word	0x08005023
 8004ec4:	08005023 	.word	0x08005023
 8004ec8:	08005023 	.word	0x08005023
 8004ecc:	08005023 	.word	0x08005023
 8004ed0:	08005023 	.word	0x08005023
 8004ed4:	08005023 	.word	0x08005023
 8004ed8:	08005023 	.word	0x08005023
 8004edc:	08005023 	.word	0x08005023
 8004ee0:	08005023 	.word	0x08005023
 8004ee4:	08004fef 	.word	0x08004fef
 8004ee8:	08005023 	.word	0x08005023
 8004eec:	08005023 	.word	0x08005023
 8004ef0:	08004fa5 	.word	0x08004fa5
 8004ef4:	08005023 	.word	0x08005023
 8004ef8:	08004f55 	.word	0x08004f55
 8004efc:	08005023 	.word	0x08005023
 8004f00:	08005023 	.word	0x08005023
 8004f04:	08004f7b 	.word	0x08004f7b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	1d19      	adds	r1, r3, #4
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6011      	str	r1, [r2, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8004f1c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004f20:	f107 0310 	add.w	r3, r7, #16
 8004f24:	4611      	mov	r1, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff fd1c 	bl	8004964 <_StoreChar>
        break;
 8004f2c:	e07a      	b.n	8005024 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	1d19      	adds	r1, r3, #4
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6011      	str	r1, [r2, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004f3c:	f107 0010 	add.w	r0, r7, #16
 8004f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f42:	9301      	str	r3, [sp, #4]
 8004f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4a:	220a      	movs	r2, #10
 8004f4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f4e:	f7ff fe1b 	bl	8004b88 <_PrintInt>
        break;
 8004f52:	e067      	b.n	8005024 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	1d19      	adds	r1, r3, #4
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6011      	str	r1, [r2, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004f62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f64:	f107 0010 	add.w	r0, r7, #16
 8004f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f6a:	9301      	str	r3, [sp, #4]
 8004f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f72:	220a      	movs	r2, #10
 8004f74:	f7ff fd72 	bl	8004a5c <_PrintUnsigned>
        break;
 8004f78:	e054      	b.n	8005024 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	1d19      	adds	r1, r3, #4
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6011      	str	r1, [r2, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004f88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f8a:	f107 0010 	add.w	r0, r7, #16
 8004f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f98:	2210      	movs	r2, #16
 8004f9a:	f7ff fd5f 	bl	8004a5c <_PrintUnsigned>
        break;
 8004f9e:	e041      	b.n	8005024 <_VPrintTarget+0x37c>
 8004fa0:	2001a74c 	.word	0x2001a74c
      case 's':
        s = va_arg(*pParamList, const char*);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	1d19      	adds	r1, r3, #4
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6011      	str	r1, [r2, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8004fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <_VPrintTarget+0x314>
          s = "(null)";
 8004fb8:	4b4a      	ldr	r3, [pc, #296]	; (80050e4 <_VPrintTarget+0x43c>)
 8004fba:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8004fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8004fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8004fca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004fd2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004fd6:	f107 0310 	add.w	r3, r7, #16
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff fcc1 	bl	8004964 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fe6:	d9e9      	bls.n	8004fbc <_VPrintTarget+0x314>
        break;
 8004fe8:	e01c      	b.n	8005024 <_VPrintTarget+0x37c>
            break;
 8004fea:	bf00      	nop
        break;
 8004fec:	e01a      	b.n	8005024 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	1d19      	adds	r1, r3, #4
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6011      	str	r1, [r2, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004ffc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ffe:	f107 0010 	add.w	r0, r7, #16
 8005002:	2300      	movs	r3, #0
 8005004:	9301      	str	r3, [sp, #4]
 8005006:	2308      	movs	r3, #8
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	2308      	movs	r3, #8
 800500c:	2210      	movs	r2, #16
 800500e:	f7ff fd25 	bl	8004a5c <_PrintUnsigned>
        break;
 8005012:	e007      	b.n	8005024 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005014:	f107 0310 	add.w	r3, r7, #16
 8005018:	2125      	movs	r1, #37	; 0x25
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff fca2 	bl	8004964 <_StoreChar>
        break;
 8005020:	e000      	b.n	8005024 <_VPrintTarget+0x37c>
      default:
        break;
 8005022:	bf00      	nop
      }
      sFormat++;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3301      	adds	r3, #1
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	e007      	b.n	800503c <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 800502c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005030:	f107 0310 	add.w	r3, r7, #16
 8005034:	4611      	mov	r1, r2
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fc94 	bl	8004964 <_StoreChar>
    }
  } while (*sFormat);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	f47f ae4d 	bne.w	8004ce0 <_VPrintTarget+0x38>
 8005046:	e000      	b.n	800504a <_VPrintTarget+0x3a2>
      break;
 8005048:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d041      	beq.n	80050d4 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005050:	6a3a      	ldr	r2, [r7, #32]
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005060:	e00b      	b.n	800507a <_VPrintTarget+0x3d2>
 8005062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005064:	b2da      	uxtb	r2, r3
 8005066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005068:	1c59      	adds	r1, r3, #1
 800506a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800506c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005076:	09db      	lsrs	r3, r3, #7
 8005078:	63bb      	str	r3, [r7, #56]	; 0x38
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507c:	2b7f      	cmp	r3, #127	; 0x7f
 800507e:	d8f0      	bhi.n	8005062 <_VPrintTarget+0x3ba>
 8005080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800508e:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	637b      	str	r3, [r7, #52]	; 0x34
 8005094:	2300      	movs	r3, #0
 8005096:	633b      	str	r3, [r7, #48]	; 0x30
 8005098:	e00b      	b.n	80050b2 <_VPrintTarget+0x40a>
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	b2da      	uxtb	r2, r3
 800509e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a0:	1c59      	adds	r1, r3, #1
 80050a2:	6379      	str	r1, [r7, #52]	; 0x34
 80050a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	09db      	lsrs	r3, r3, #7
 80050b0:	633b      	str	r3, [r7, #48]	; 0x30
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	2b7f      	cmp	r3, #127	; 0x7f
 80050b6:	d8f0      	bhi.n	800509a <_VPrintTarget+0x3f2>
 80050b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	637a      	str	r2, [r7, #52]	; 0x34
 80050be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c6:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	6979      	ldr	r1, [r7, #20]
 80050cc:	221a      	movs	r2, #26
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff fad8 	bl	8004684 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80050d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d6:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80050da:	bf00      	nop
 80050dc:	3758      	adds	r7, #88	; 0x58
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	080060e4 	.word	0x080060e4

080050e8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80050f6:	2300      	movs	r3, #0
 80050f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050fc:	4917      	ldr	r1, [pc, #92]	; (800515c <SEGGER_SYSVIEW_Init+0x74>)
 80050fe:	4818      	ldr	r0, [pc, #96]	; (8005160 <SEGGER_SYSVIEW_Init+0x78>)
 8005100:	f7ff f8d0 	bl	80042a4 <SEGGER_RTT_AllocUpBuffer>
 8005104:	4603      	mov	r3, r0
 8005106:	b2da      	uxtb	r2, r3
 8005108:	4b16      	ldr	r3, [pc, #88]	; (8005164 <SEGGER_SYSVIEW_Init+0x7c>)
 800510a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800510c:	4b15      	ldr	r3, [pc, #84]	; (8005164 <SEGGER_SYSVIEW_Init+0x7c>)
 800510e:	785a      	ldrb	r2, [r3, #1]
 8005110:	4b14      	ldr	r3, [pc, #80]	; (8005164 <SEGGER_SYSVIEW_Init+0x7c>)
 8005112:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005114:	4b13      	ldr	r3, [pc, #76]	; (8005164 <SEGGER_SYSVIEW_Init+0x7c>)
 8005116:	7e1b      	ldrb	r3, [r3, #24]
 8005118:	4618      	mov	r0, r3
 800511a:	2300      	movs	r3, #0
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	2308      	movs	r3, #8
 8005120:	4a11      	ldr	r2, [pc, #68]	; (8005168 <SEGGER_SYSVIEW_Init+0x80>)
 8005122:	490f      	ldr	r1, [pc, #60]	; (8005160 <SEGGER_SYSVIEW_Init+0x78>)
 8005124:	f7ff f942 	bl	80043ac <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005128:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <SEGGER_SYSVIEW_Init+0x7c>)
 800512a:	2200      	movs	r2, #0
 800512c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800512e:	4b0f      	ldr	r3, [pc, #60]	; (800516c <SEGGER_SYSVIEW_Init+0x84>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a0c      	ldr	r2, [pc, #48]	; (8005164 <SEGGER_SYSVIEW_Init+0x7c>)
 8005134:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005136:	4a0b      	ldr	r2, [pc, #44]	; (8005164 <SEGGER_SYSVIEW_Init+0x7c>)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800513c:	4a09      	ldr	r2, [pc, #36]	; (8005164 <SEGGER_SYSVIEW_Init+0x7c>)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005142:	4a08      	ldr	r2, [pc, #32]	; (8005164 <SEGGER_SYSVIEW_Init+0x7c>)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005148:	4a06      	ldr	r2, [pc, #24]	; (8005164 <SEGGER_SYSVIEW_Init+0x7c>)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800514e:	4b05      	ldr	r3, [pc, #20]	; (8005164 <SEGGER_SYSVIEW_Init+0x7c>)
 8005150:	2200      	movs	r2, #0
 8005152:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005154:	bf00      	nop
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20019714 	.word	0x20019714
 8005160:	080060ec 	.word	0x080060ec
 8005164:	2001a71c 	.word	0x2001a71c
 8005168:	2001a714 	.word	0x2001a714
 800516c:	e0001004 	.word	0xe0001004

08005170 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005178:	4a04      	ldr	r2, [pc, #16]	; (800518c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6113      	str	r3, [r2, #16]
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	2001a71c 	.word	0x2001a71c

08005190 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005198:	f3ef 8311 	mrs	r3, BASEPRI
 800519c:	f04f 0120 	mov.w	r1, #32
 80051a0:	f381 8811 	msr	BASEPRI, r1
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	4808      	ldr	r0, [pc, #32]	; (80051c8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80051a8:	f7ff f97c 	bl	80044a4 <_PreparePacket>
 80051ac:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	68b8      	ldr	r0, [r7, #8]
 80051b4:	f7ff fa66 	bl	8004684 <_SendPacket>
  RECORD_END();
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f383 8811 	msr	BASEPRI, r3
}
 80051be:	bf00      	nop
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	2001a74c 	.word	0x2001a74c

080051cc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80051d6:	f3ef 8311 	mrs	r3, BASEPRI
 80051da:	f04f 0120 	mov.w	r1, #32
 80051de:	f381 8811 	msr	BASEPRI, r1
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	4816      	ldr	r0, [pc, #88]	; (8005240 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80051e6:	f7ff f95d 	bl	80044a4 <_PreparePacket>
 80051ea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	61bb      	str	r3, [r7, #24]
 80051f8:	e00b      	b.n	8005212 <SEGGER_SYSVIEW_RecordU32+0x46>
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	1c59      	adds	r1, r3, #1
 8005202:	61f9      	str	r1, [r7, #28]
 8005204:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	09db      	lsrs	r3, r3, #7
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b7f      	cmp	r3, #127	; 0x7f
 8005216:	d8f0      	bhi.n	80051fa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	61fa      	str	r2, [r7, #28]
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	68f9      	ldr	r1, [r7, #12]
 800522c:	6938      	ldr	r0, [r7, #16]
 800522e:	f7ff fa29 	bl	8004684 <_SendPacket>
  RECORD_END();
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f383 8811 	msr	BASEPRI, r3
}
 8005238:	bf00      	nop
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	2001a74c 	.word	0x2001a74c

08005244 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005244:	b580      	push	{r7, lr}
 8005246:	b08c      	sub	sp, #48	; 0x30
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005250:	f3ef 8311 	mrs	r3, BASEPRI
 8005254:	f04f 0120 	mov.w	r1, #32
 8005258:	f381 8811 	msr	BASEPRI, r1
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	4825      	ldr	r0, [pc, #148]	; (80052f4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005260:	f7ff f920 	bl	80044a4 <_PreparePacket>
 8005264:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28
 8005272:	e00b      	b.n	800528c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	b2da      	uxtb	r2, r3
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	1c59      	adds	r1, r3, #1
 800527c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800527e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	09db      	lsrs	r3, r3, #7
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	2b7f      	cmp	r3, #127	; 0x7f
 8005290:	d8f0      	bhi.n	8005274 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	623b      	str	r3, [r7, #32]
 80052aa:	e00b      	b.n	80052c4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	1c59      	adds	r1, r3, #1
 80052b4:	6279      	str	r1, [r7, #36]	; 0x24
 80052b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	09db      	lsrs	r3, r3, #7
 80052c2:	623b      	str	r3, [r7, #32]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	2b7f      	cmp	r3, #127	; 0x7f
 80052c8:	d8f0      	bhi.n	80052ac <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	627a      	str	r2, [r7, #36]	; 0x24
 80052d0:	6a3a      	ldr	r2, [r7, #32]
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	6979      	ldr	r1, [r7, #20]
 80052de:	69b8      	ldr	r0, [r7, #24]
 80052e0:	f7ff f9d0 	bl	8004684 <_SendPacket>
  RECORD_END();
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f383 8811 	msr	BASEPRI, r3
}
 80052ea:	bf00      	nop
 80052ec:	3730      	adds	r7, #48	; 0x30
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	2001a74c 	.word	0x2001a74c

080052f8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08c      	sub	sp, #48	; 0x30
 80052fc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80052fe:	4b59      	ldr	r3, [pc, #356]	; (8005464 <SEGGER_SYSVIEW_Start+0x16c>)
 8005300:	2201      	movs	r2, #1
 8005302:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005304:	f3ef 8311 	mrs	r3, BASEPRI
 8005308:	f04f 0120 	mov.w	r1, #32
 800530c:	f381 8811 	msr	BASEPRI, r1
 8005310:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005312:	4b54      	ldr	r3, [pc, #336]	; (8005464 <SEGGER_SYSVIEW_Start+0x16c>)
 8005314:	785b      	ldrb	r3, [r3, #1]
 8005316:	220a      	movs	r2, #10
 8005318:	4953      	ldr	r1, [pc, #332]	; (8005468 <SEGGER_SYSVIEW_Start+0x170>)
 800531a:	4618      	mov	r0, r3
 800531c:	f7fa ff78 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005326:	f7fe fc8f 	bl	8003c48 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800532a:	200a      	movs	r0, #10
 800532c:	f7ff ff30 	bl	8005190 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005330:	f3ef 8311 	mrs	r3, BASEPRI
 8005334:	f04f 0120 	mov.w	r1, #32
 8005338:	f381 8811 	msr	BASEPRI, r1
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	484b      	ldr	r0, [pc, #300]	; (800546c <SEGGER_SYSVIEW_Start+0x174>)
 8005340:	f7ff f8b0 	bl	80044a4 <_PreparePacket>
 8005344:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800534e:	4b45      	ldr	r3, [pc, #276]	; (8005464 <SEGGER_SYSVIEW_Start+0x16c>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
 8005354:	e00b      	b.n	800536e <SEGGER_SYSVIEW_Start+0x76>
 8005356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005358:	b2da      	uxtb	r2, r3
 800535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535c:	1c59      	adds	r1, r3, #1
 800535e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005360:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	09db      	lsrs	r3, r3, #7
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	2b7f      	cmp	r3, #127	; 0x7f
 8005372:	d8f0      	bhi.n	8005356 <SEGGER_SYSVIEW_Start+0x5e>
 8005374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	62fa      	str	r2, [r7, #44]	; 0x2c
 800537a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]
 8005380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005382:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
 8005388:	4b36      	ldr	r3, [pc, #216]	; (8005464 <SEGGER_SYSVIEW_Start+0x16c>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	623b      	str	r3, [r7, #32]
 800538e:	e00b      	b.n	80053a8 <SEGGER_SYSVIEW_Start+0xb0>
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	b2da      	uxtb	r2, r3
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	1c59      	adds	r1, r3, #1
 8005398:	6279      	str	r1, [r7, #36]	; 0x24
 800539a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	09db      	lsrs	r3, r3, #7
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	2b7f      	cmp	r3, #127	; 0x7f
 80053ac:	d8f0      	bhi.n	8005390 <SEGGER_SYSVIEW_Start+0x98>
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	627a      	str	r2, [r7, #36]	; 0x24
 80053b4:	6a3a      	ldr	r2, [r7, #32]
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	4b28      	ldr	r3, [pc, #160]	; (8005464 <SEGGER_SYSVIEW_Start+0x16c>)
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	61bb      	str	r3, [r7, #24]
 80053c8:	e00b      	b.n	80053e2 <SEGGER_SYSVIEW_Start+0xea>
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	1c59      	adds	r1, r3, #1
 80053d2:	61f9      	str	r1, [r7, #28]
 80053d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	09db      	lsrs	r3, r3, #7
 80053e0:	61bb      	str	r3, [r7, #24]
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	2b7f      	cmp	r3, #127	; 0x7f
 80053e6:	d8f0      	bhi.n	80053ca <SEGGER_SYSVIEW_Start+0xd2>
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	61fa      	str	r2, [r7, #28]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	2300      	movs	r3, #0
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	e00b      	b.n	800541a <SEGGER_SYSVIEW_Start+0x122>
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	b2da      	uxtb	r2, r3
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	1c59      	adds	r1, r3, #1
 800540a:	6179      	str	r1, [r7, #20]
 800540c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	09db      	lsrs	r3, r3, #7
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b7f      	cmp	r3, #127	; 0x7f
 800541e:	d8f0      	bhi.n	8005402 <SEGGER_SYSVIEW_Start+0x10a>
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	617a      	str	r2, [r7, #20]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005430:	2218      	movs	r2, #24
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff f925 	bl	8004684 <_SendPacket>
      RECORD_END();
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005440:	4b08      	ldr	r3, [pc, #32]	; (8005464 <SEGGER_SYSVIEW_Start+0x16c>)
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005448:	4b06      	ldr	r3, [pc, #24]	; (8005464 <SEGGER_SYSVIEW_Start+0x16c>)
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800544e:	f000 f9eb 	bl	8005828 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005452:	f000 f9b1 	bl	80057b8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005456:	f000 fc7d 	bl	8005d54 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800545a:	bf00      	nop
 800545c:	3730      	adds	r7, #48	; 0x30
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	2001a71c 	.word	0x2001a71c
 8005468:	0800612c 	.word	0x0800612c
 800546c:	2001a74c 	.word	0x2001a74c

08005470 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005476:	f3ef 8311 	mrs	r3, BASEPRI
 800547a:	f04f 0120 	mov.w	r1, #32
 800547e:	f381 8811 	msr	BASEPRI, r1
 8005482:	607b      	str	r3, [r7, #4]
 8005484:	480b      	ldr	r0, [pc, #44]	; (80054b4 <SEGGER_SYSVIEW_Stop+0x44>)
 8005486:	f7ff f80d 	bl	80044a4 <_PreparePacket>
 800548a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800548c:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <SEGGER_SYSVIEW_Stop+0x48>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d007      	beq.n	80054a4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005494:	220b      	movs	r2, #11
 8005496:	6839      	ldr	r1, [r7, #0]
 8005498:	6838      	ldr	r0, [r7, #0]
 800549a:	f7ff f8f3 	bl	8004684 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <SEGGER_SYSVIEW_Stop+0x48>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f383 8811 	msr	BASEPRI, r3
}
 80054aa:	bf00      	nop
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	2001a74c 	.word	0x2001a74c
 80054b8:	2001a71c 	.word	0x2001a71c

080054bc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08c      	sub	sp, #48	; 0x30
 80054c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80054c2:	f3ef 8311 	mrs	r3, BASEPRI
 80054c6:	f04f 0120 	mov.w	r1, #32
 80054ca:	f381 8811 	msr	BASEPRI, r1
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	4845      	ldr	r0, [pc, #276]	; (80055e8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80054d2:	f7fe ffe7 	bl	80044a4 <_PreparePacket>
 80054d6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054e0:	4b42      	ldr	r3, [pc, #264]	; (80055ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e6:	e00b      	b.n	8005500 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	1c59      	adds	r1, r3, #1
 80054f0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	09db      	lsrs	r3, r3, #7
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	2b7f      	cmp	r3, #127	; 0x7f
 8005504:	d8f0      	bhi.n	80054e8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800550c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
 800551a:	4b34      	ldr	r3, [pc, #208]	; (80055ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	623b      	str	r3, [r7, #32]
 8005520:	e00b      	b.n	800553a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	1c59      	adds	r1, r3, #1
 800552a:	6279      	str	r1, [r7, #36]	; 0x24
 800552c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	701a      	strb	r2, [r3, #0]
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	09db      	lsrs	r3, r3, #7
 8005538:	623b      	str	r3, [r7, #32]
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	2b7f      	cmp	r3, #127	; 0x7f
 800553e:	d8f0      	bhi.n	8005522 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	627a      	str	r2, [r7, #36]	; 0x24
 8005546:	6a3a      	ldr	r2, [r7, #32]
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	4b25      	ldr	r3, [pc, #148]	; (80055ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	e00b      	b.n	8005574 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	b2da      	uxtb	r2, r3
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	1c59      	adds	r1, r3, #1
 8005564:	61f9      	str	r1, [r7, #28]
 8005566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	09db      	lsrs	r3, r3, #7
 8005572:	61bb      	str	r3, [r7, #24]
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b7f      	cmp	r3, #127	; 0x7f
 8005578:	d8f0      	bhi.n	800555c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	61fa      	str	r2, [r7, #28]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	2300      	movs	r3, #0
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	e00b      	b.n	80055ac <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	b2da      	uxtb	r2, r3
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	1c59      	adds	r1, r3, #1
 800559c:	6179      	str	r1, [r7, #20]
 800559e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	09db      	lsrs	r3, r3, #7
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	2b7f      	cmp	r3, #127	; 0x7f
 80055b0:	d8f0      	bhi.n	8005594 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	617a      	str	r2, [r7, #20]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80055c2:	2218      	movs	r2, #24
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	68b8      	ldr	r0, [r7, #8]
 80055c8:	f7ff f85c 	bl	8004684 <_SendPacket>
  RECORD_END();
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80055d2:	4b06      	ldr	r3, [pc, #24]	; (80055ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80055da:	4b04      	ldr	r3, [pc, #16]	; (80055ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	4798      	blx	r3
  }
}
 80055e0:	bf00      	nop
 80055e2:	3730      	adds	r7, #48	; 0x30
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	2001a74c 	.word	0x2001a74c
 80055ec:	2001a71c 	.word	0x2001a71c

080055f0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b092      	sub	sp, #72	; 0x48
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80055f8:	f3ef 8311 	mrs	r3, BASEPRI
 80055fc:	f04f 0120 	mov.w	r1, #32
 8005600:	f381 8811 	msr	BASEPRI, r1
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	486a      	ldr	r0, [pc, #424]	; (80057b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005608:	f7fe ff4c 	bl	80044a4 <_PreparePacket>
 800560c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	647b      	str	r3, [r7, #68]	; 0x44
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4b66      	ldr	r3, [pc, #408]	; (80057b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	643b      	str	r3, [r7, #64]	; 0x40
 8005622:	e00b      	b.n	800563c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005626:	b2da      	uxtb	r2, r3
 8005628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800562a:	1c59      	adds	r1, r3, #1
 800562c:	6479      	str	r1, [r7, #68]	; 0x44
 800562e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005638:	09db      	lsrs	r3, r3, #7
 800563a:	643b      	str	r3, [r7, #64]	; 0x40
 800563c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563e:	2b7f      	cmp	r3, #127	; 0x7f
 8005640:	d8f0      	bhi.n	8005624 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	647a      	str	r2, [r7, #68]	; 0x44
 8005648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005650:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	63bb      	str	r3, [r7, #56]	; 0x38
 800565c:	e00b      	b.n	8005676 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	b2da      	uxtb	r2, r3
 8005662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005664:	1c59      	adds	r1, r3, #1
 8005666:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005668:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	701a      	strb	r2, [r3, #0]
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	09db      	lsrs	r3, r3, #7
 8005674:	63bb      	str	r3, [r7, #56]	; 0x38
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	2b7f      	cmp	r3, #127	; 0x7f
 800567a:	d8f0      	bhi.n	800565e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800567c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	4619      	mov	r1, r3
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f7fe fed5 	bl	8004444 <_EncodeStr>
 800569a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800569c:	2209      	movs	r2, #9
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	6938      	ldr	r0, [r7, #16]
 80056a2:	f7fe ffef 	bl	8004684 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b40      	ldr	r3, [pc, #256]	; (80057b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	633b      	str	r3, [r7, #48]	; 0x30
 80056ba:	e00b      	b.n	80056d4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c2:	1c59      	adds	r1, r3, #1
 80056c4:	6379      	str	r1, [r7, #52]	; 0x34
 80056c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	09db      	lsrs	r3, r3, #7
 80056d2:	633b      	str	r3, [r7, #48]	; 0x30
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	2b7f      	cmp	r3, #127	; 0x7f
 80056d8:	d8f0      	bhi.n	80056bc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80056da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	637a      	str	r2, [r7, #52]	; 0x34
 80056e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f4:	e00b      	b.n	800570e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	1c59      	adds	r1, r3, #1
 80056fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	09db      	lsrs	r3, r3, #7
 800570c:	62bb      	str	r3, [r7, #40]	; 0x28
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	2b7f      	cmp	r3, #127	; 0x7f
 8005712:	d8f0      	bhi.n	80056f6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	62fa      	str	r2, [r7, #44]	; 0x2c
 800571a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005722:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	623b      	str	r3, [r7, #32]
 800572e:	e00b      	b.n	8005748 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	b2da      	uxtb	r2, r3
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	1c59      	adds	r1, r3, #1
 8005738:	6279      	str	r1, [r7, #36]	; 0x24
 800573a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	09db      	lsrs	r3, r3, #7
 8005746:	623b      	str	r3, [r7, #32]
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2b7f      	cmp	r3, #127	; 0x7f
 800574c:	d8f0      	bhi.n	8005730 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	627a      	str	r2, [r7, #36]	; 0x24
 8005754:	6a3a      	ldr	r2, [r7, #32]
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	2300      	movs	r3, #0
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	e00b      	b.n	8005780 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	b2da      	uxtb	r2, r3
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	1c59      	adds	r1, r3, #1
 8005770:	61f9      	str	r1, [r7, #28]
 8005772:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	09db      	lsrs	r3, r3, #7
 800577e:	61bb      	str	r3, [r7, #24]
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b7f      	cmp	r3, #127	; 0x7f
 8005784:	d8f0      	bhi.n	8005768 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	61fa      	str	r2, [r7, #28]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005796:	2215      	movs	r2, #21
 8005798:	68f9      	ldr	r1, [r7, #12]
 800579a:	6938      	ldr	r0, [r7, #16]
 800579c:	f7fe ff72 	bl	8004684 <_SendPacket>
  RECORD_END();
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f383 8811 	msr	BASEPRI, r3
}
 80057a6:	bf00      	nop
 80057a8:	3748      	adds	r7, #72	; 0x48
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	2001a74c 	.word	0x2001a74c
 80057b4:	2001a71c 	.word	0x2001a71c

080057b8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80057bc:	4b07      	ldr	r3, [pc, #28]	; (80057dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80057ce:	4b03      	ldr	r3, [pc, #12]	; (80057dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	4798      	blx	r3
  }
}
 80057d6:	bf00      	nop
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	2001a71c 	.word	0x2001a71c

080057e0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057e8:	f3ef 8311 	mrs	r3, BASEPRI
 80057ec:	f04f 0120 	mov.w	r1, #32
 80057f0:	f381 8811 	msr	BASEPRI, r1
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	480b      	ldr	r0, [pc, #44]	; (8005824 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80057f8:	f7fe fe54 	bl	80044a4 <_PreparePacket>
 80057fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057fe:	2280      	movs	r2, #128	; 0x80
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	6938      	ldr	r0, [r7, #16]
 8005804:	f7fe fe1e 	bl	8004444 <_EncodeStr>
 8005808:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800580a:	220e      	movs	r2, #14
 800580c:	68f9      	ldr	r1, [r7, #12]
 800580e:	6938      	ldr	r0, [r7, #16]
 8005810:	f7fe ff38 	bl	8004684 <_SendPacket>
  RECORD_END();
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f383 8811 	msr	BASEPRI, r3
}
 800581a:	bf00      	nop
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	2001a74c 	.word	0x2001a74c

08005828 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005828:	b590      	push	{r4, r7, lr}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800582e:	4b15      	ldr	r3, [pc, #84]	; (8005884 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01a      	beq.n	800586c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005836:	4b13      	ldr	r3, [pc, #76]	; (8005884 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d015      	beq.n	800586c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005840:	4b10      	ldr	r3, [pc, #64]	; (8005884 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4798      	blx	r3
 8005848:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800584c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800584e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	000a      	movs	r2, r1
 800585c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800585e:	4613      	mov	r3, r2
 8005860:	461a      	mov	r2, r3
 8005862:	4621      	mov	r1, r4
 8005864:	200d      	movs	r0, #13
 8005866:	f7ff fced 	bl	8005244 <SEGGER_SYSVIEW_RecordU32x2>
 800586a:	e006      	b.n	800587a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800586c:	4b06      	ldr	r3, [pc, #24]	; (8005888 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4619      	mov	r1, r3
 8005872:	200c      	movs	r0, #12
 8005874:	f7ff fcaa 	bl	80051cc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	bd90      	pop	{r4, r7, pc}
 8005882:	bf00      	nop
 8005884:	2001a71c 	.word	0x2001a71c
 8005888:	e0001004 	.word	0xe0001004

0800588c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005892:	f3ef 8311 	mrs	r3, BASEPRI
 8005896:	f04f 0120 	mov.w	r1, #32
 800589a:	f381 8811 	msr	BASEPRI, r1
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	4819      	ldr	r0, [pc, #100]	; (8005908 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80058a2:	f7fe fdff 	bl	80044a4 <_PreparePacket>
 80058a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80058ac:	4b17      	ldr	r3, [pc, #92]	; (800590c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	e00b      	b.n	80058d8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	1c59      	adds	r1, r3, #1
 80058c8:	6179      	str	r1, [r7, #20]
 80058ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	09db      	lsrs	r3, r3, #7
 80058d6:	613b      	str	r3, [r7, #16]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2b7f      	cmp	r3, #127	; 0x7f
 80058dc:	d8f0      	bhi.n	80058c0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	617a      	str	r2, [r7, #20]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80058ee:	2202      	movs	r2, #2
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	68b8      	ldr	r0, [r7, #8]
 80058f4:	f7fe fec6 	bl	8004684 <_SendPacket>
  RECORD_END();
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f383 8811 	msr	BASEPRI, r3
}
 80058fe:	bf00      	nop
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	2001a74c 	.word	0x2001a74c
 800590c:	e000ed04 	.word	0xe000ed04

08005910 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005916:	f3ef 8311 	mrs	r3, BASEPRI
 800591a:	f04f 0120 	mov.w	r1, #32
 800591e:	f381 8811 	msr	BASEPRI, r1
 8005922:	607b      	str	r3, [r7, #4]
 8005924:	4807      	ldr	r0, [pc, #28]	; (8005944 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005926:	f7fe fdbd 	bl	80044a4 <_PreparePacket>
 800592a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800592c:	2203      	movs	r2, #3
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	6838      	ldr	r0, [r7, #0]
 8005932:	f7fe fea7 	bl	8004684 <_SendPacket>
  RECORD_END();
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f383 8811 	msr	BASEPRI, r3
}
 800593c:	bf00      	nop
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	2001a74c 	.word	0x2001a74c

08005948 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800594e:	f3ef 8311 	mrs	r3, BASEPRI
 8005952:	f04f 0120 	mov.w	r1, #32
 8005956:	f381 8811 	msr	BASEPRI, r1
 800595a:	607b      	str	r3, [r7, #4]
 800595c:	4807      	ldr	r0, [pc, #28]	; (800597c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800595e:	f7fe fda1 	bl	80044a4 <_PreparePacket>
 8005962:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005964:	2212      	movs	r2, #18
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6838      	ldr	r0, [r7, #0]
 800596a:	f7fe fe8b 	bl	8004684 <_SendPacket>
  RECORD_END();
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f383 8811 	msr	BASEPRI, r3
}
 8005974:	bf00      	nop
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	2001a74c 	.word	0x2001a74c

08005980 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005986:	f3ef 8311 	mrs	r3, BASEPRI
 800598a:	f04f 0120 	mov.w	r1, #32
 800598e:	f381 8811 	msr	BASEPRI, r1
 8005992:	607b      	str	r3, [r7, #4]
 8005994:	4807      	ldr	r0, [pc, #28]	; (80059b4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005996:	f7fe fd85 	bl	80044a4 <_PreparePacket>
 800599a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800599c:	2211      	movs	r2, #17
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6838      	ldr	r0, [r7, #0]
 80059a2:	f7fe fe6f 	bl	8004684 <_SendPacket>
  RECORD_END();
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f383 8811 	msr	BASEPRI, r3
}
 80059ac:	bf00      	nop
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	2001a74c 	.word	0x2001a74c

080059b8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059c0:	f3ef 8311 	mrs	r3, BASEPRI
 80059c4:	f04f 0120 	mov.w	r1, #32
 80059c8:	f381 8811 	msr	BASEPRI, r1
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	4819      	ldr	r0, [pc, #100]	; (8005a34 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80059d0:	f7fe fd68 	bl	80044a4 <_PreparePacket>
 80059d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80059da:	4b17      	ldr	r3, [pc, #92]	; (8005a38 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	61bb      	str	r3, [r7, #24]
 80059ec:	e00b      	b.n	8005a06 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	1c59      	adds	r1, r3, #1
 80059f6:	61f9      	str	r1, [r7, #28]
 80059f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	09db      	lsrs	r3, r3, #7
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2b7f      	cmp	r3, #127	; 0x7f
 8005a0a:	d8f0      	bhi.n	80059ee <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	61fa      	str	r2, [r7, #28]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	6938      	ldr	r0, [r7, #16]
 8005a22:	f7fe fe2f 	bl	8004684 <_SendPacket>
  RECORD_END();
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f383 8811 	msr	BASEPRI, r3
}
 8005a2c:	bf00      	nop
 8005a2e:	3720      	adds	r7, #32
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	2001a74c 	.word	0x2001a74c
 8005a38:	2001a71c 	.word	0x2001a71c

08005a3c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b088      	sub	sp, #32
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a44:	f3ef 8311 	mrs	r3, BASEPRI
 8005a48:	f04f 0120 	mov.w	r1, #32
 8005a4c:	f381 8811 	msr	BASEPRI, r1
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	4819      	ldr	r0, [pc, #100]	; (8005ab8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005a54:	f7fe fd26 	bl	80044a4 <_PreparePacket>
 8005a58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a5e:	4b17      	ldr	r3, [pc, #92]	; (8005abc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	61bb      	str	r3, [r7, #24]
 8005a70:	e00b      	b.n	8005a8a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	1c59      	adds	r1, r3, #1
 8005a7a:	61f9      	str	r1, [r7, #28]
 8005a7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	09db      	lsrs	r3, r3, #7
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a8e:	d8f0      	bhi.n	8005a72 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	61fa      	str	r2, [r7, #28]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005aa0:	2204      	movs	r2, #4
 8005aa2:	68f9      	ldr	r1, [r7, #12]
 8005aa4:	6938      	ldr	r0, [r7, #16]
 8005aa6:	f7fe fded 	bl	8004684 <_SendPacket>
  RECORD_END();
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f383 8811 	msr	BASEPRI, r3
}
 8005ab0:	bf00      	nop
 8005ab2:	3720      	adds	r7, #32
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	2001a74c 	.word	0x2001a74c
 8005abc:	2001a71c 	.word	0x2001a71c

08005ac0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8005acc:	f04f 0120 	mov.w	r1, #32
 8005ad0:	f381 8811 	msr	BASEPRI, r1
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	4819      	ldr	r0, [pc, #100]	; (8005b3c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005ad8:	f7fe fce4 	bl	80044a4 <_PreparePacket>
 8005adc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ae2:	4b17      	ldr	r3, [pc, #92]	; (8005b40 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	e00b      	b.n	8005b0e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	1c59      	adds	r1, r3, #1
 8005afe:	61f9      	str	r1, [r7, #28]
 8005b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	09db      	lsrs	r3, r3, #7
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2b7f      	cmp	r3, #127	; 0x7f
 8005b12:	d8f0      	bhi.n	8005af6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	61fa      	str	r2, [r7, #28]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005b24:	2206      	movs	r2, #6
 8005b26:	68f9      	ldr	r1, [r7, #12]
 8005b28:	6938      	ldr	r0, [r7, #16]
 8005b2a:	f7fe fdab 	bl	8004684 <_SendPacket>
  RECORD_END();
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f383 8811 	msr	BASEPRI, r3
}
 8005b34:	bf00      	nop
 8005b36:	3720      	adds	r7, #32
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	2001a74c 	.word	0x2001a74c
 8005b40:	2001a71c 	.word	0x2001a71c

08005b44 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08a      	sub	sp, #40	; 0x28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b4e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b52:	f04f 0120 	mov.w	r1, #32
 8005b56:	f381 8811 	msr	BASEPRI, r1
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	4827      	ldr	r0, [pc, #156]	; (8005bfc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005b5e:	f7fe fca1 	bl	80044a4 <_PreparePacket>
 8005b62:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b68:	4b25      	ldr	r3, [pc, #148]	; (8005c00 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	623b      	str	r3, [r7, #32]
 8005b7a:	e00b      	b.n	8005b94 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	1c59      	adds	r1, r3, #1
 8005b84:	6279      	str	r1, [r7, #36]	; 0x24
 8005b86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	09db      	lsrs	r3, r3, #7
 8005b92:	623b      	str	r3, [r7, #32]
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	2b7f      	cmp	r3, #127	; 0x7f
 8005b98:	d8f0      	bhi.n	8005b7c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	627a      	str	r2, [r7, #36]	; 0x24
 8005ba0:	6a3a      	ldr	r2, [r7, #32]
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	61fb      	str	r3, [r7, #28]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	e00b      	b.n	8005bcc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	1c59      	adds	r1, r3, #1
 8005bbc:	61f9      	str	r1, [r7, #28]
 8005bbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	09db      	lsrs	r3, r3, #7
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b7f      	cmp	r3, #127	; 0x7f
 8005bd0:	d8f0      	bhi.n	8005bb4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	61fa      	str	r2, [r7, #28]
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005be2:	2207      	movs	r2, #7
 8005be4:	68f9      	ldr	r1, [r7, #12]
 8005be6:	6938      	ldr	r0, [r7, #16]
 8005be8:	f7fe fd4c 	bl	8004684 <_SendPacket>
  RECORD_END();
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f383 8811 	msr	BASEPRI, r3
}
 8005bf2:	bf00      	nop
 8005bf4:	3728      	adds	r7, #40	; 0x28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	2001a74c 	.word	0x2001a74c
 8005c00:	2001a71c 	.word	0x2001a71c

08005c04 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08c      	sub	sp, #48	; 0x30
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005c0e:	4b40      	ldr	r3, [pc, #256]	; (8005d10 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d077      	beq.n	8005d06 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005c16:	4b3e      	ldr	r3, [pc, #248]	; (8005d10 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c20:	e008      	b.n	8005c34 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d007      	beq.n	8005c3e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	3301      	adds	r3, #1
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d3f2      	bcc.n	8005c22 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005c3c:	e000      	b.n	8005c40 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005c3e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d055      	beq.n	8005cf2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c46:	f3ef 8311 	mrs	r3, BASEPRI
 8005c4a:	f04f 0120 	mov.w	r1, #32
 8005c4e:	f381 8811 	msr	BASEPRI, r1
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	482f      	ldr	r0, [pc, #188]	; (8005d14 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005c56:	f7fe fc25 	bl	80044a4 <_PreparePacket>
 8005c5a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	623b      	str	r3, [r7, #32]
 8005c68:	e00b      	b.n	8005c82 <SEGGER_SYSVIEW_SendModule+0x7e>
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	1c59      	adds	r1, r3, #1
 8005c72:	6279      	str	r1, [r7, #36]	; 0x24
 8005c74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	09db      	lsrs	r3, r3, #7
 8005c80:	623b      	str	r3, [r7, #32]
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	2b7f      	cmp	r3, #127	; 0x7f
 8005c86:	d8f0      	bhi.n	8005c6a <SEGGER_SYSVIEW_SendModule+0x66>
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	627a      	str	r2, [r7, #36]	; 0x24
 8005c8e:	6a3a      	ldr	r2, [r7, #32]
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	e00b      	b.n	8005cbc <SEGGER_SYSVIEW_SendModule+0xb8>
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	1c59      	adds	r1, r3, #1
 8005cac:	61f9      	str	r1, [r7, #28]
 8005cae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	09db      	lsrs	r3, r3, #7
 8005cba:	61bb      	str	r3, [r7, #24]
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc0:	d8f0      	bhi.n	8005ca4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	61fa      	str	r2, [r7, #28]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2280      	movs	r2, #128	; 0x80
 8005cd8:	4619      	mov	r1, r3
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7fe fbb2 	bl	8004444 <_EncodeStr>
 8005ce0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005ce2:	2216      	movs	r2, #22
 8005ce4:	68f9      	ldr	r1, [r7, #12]
 8005ce6:	6938      	ldr	r0, [r7, #16]
 8005ce8:	f7fe fccc 	bl	8004684 <_SendPacket>
      RECORD_END();
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d006      	beq.n	8005d06 <SEGGER_SYSVIEW_SendModule+0x102>
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	4798      	blx	r3
    }
  }
}
 8005d06:	bf00      	nop
 8005d08:	3730      	adds	r7, #48	; 0x30
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	2001a744 	.word	0x2001a744
 8005d14:	2001a74c 	.word	0x2001a74c

08005d18 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00f      	beq.n	8005d46 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005d26:	4b0a      	ldr	r3, [pc, #40]	; (8005d50 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1f2      	bne.n	8005d2c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	2001a744 	.word	0x2001a744

08005d54 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005d5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d5e:	f04f 0120 	mov.w	r1, #32
 8005d62:	f381 8811 	msr	BASEPRI, r1
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	4817      	ldr	r0, [pc, #92]	; (8005dc8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005d6a:	f7fe fb9b 	bl	80044a4 <_PreparePacket>
 8005d6e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	4b14      	ldr	r3, [pc, #80]	; (8005dcc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	e00b      	b.n	8005d98 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	1c59      	adds	r1, r3, #1
 8005d88:	6179      	str	r1, [r7, #20]
 8005d8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	09db      	lsrs	r3, r3, #7
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d9c:	d8f0      	bhi.n	8005d80 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	617a      	str	r2, [r7, #20]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005dae:	221b      	movs	r2, #27
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	68b8      	ldr	r0, [r7, #8]
 8005db4:	f7fe fc66 	bl	8004684 <_SendPacket>
  RECORD_END();
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f383 8811 	msr	BASEPRI, r3
}
 8005dbe:	bf00      	nop
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	2001a74c 	.word	0x2001a74c
 8005dcc:	2001a748 	.word	0x2001a748

08005dd0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005dd0:	b40f      	push	{r0, r1, r2, r3}
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005dd8:	f107 0314 	add.w	r3, r7, #20
 8005ddc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005dde:	1d3b      	adds	r3, r7, #4
 8005de0:	461a      	mov	r2, r3
 8005de2:	2100      	movs	r1, #0
 8005de4:	6938      	ldr	r0, [r7, #16]
 8005de6:	f7fe ff5f 	bl	8004ca8 <_VPrintTarget>
  va_end(ParamList);
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005df4:	b004      	add	sp, #16
 8005df6:	4770      	bx	lr

08005df8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08a      	sub	sp, #40	; 0x28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e00:	f3ef 8311 	mrs	r3, BASEPRI
 8005e04:	f04f 0120 	mov.w	r1, #32
 8005e08:	f381 8811 	msr	BASEPRI, r1
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	4827      	ldr	r0, [pc, #156]	; (8005eac <SEGGER_SYSVIEW_Warn+0xb4>)
 8005e10:	f7fe fb48 	bl	80044a4 <_PreparePacket>
 8005e14:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e16:	2280      	movs	r2, #128	; 0x80
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	6938      	ldr	r0, [r7, #16]
 8005e1c:	f7fe fb12 	bl	8004444 <_EncodeStr>
 8005e20:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
 8005e26:	2301      	movs	r3, #1
 8005e28:	623b      	str	r3, [r7, #32]
 8005e2a:	e00b      	b.n	8005e44 <SEGGER_SYSVIEW_Warn+0x4c>
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	1c59      	adds	r1, r3, #1
 8005e34:	6279      	str	r1, [r7, #36]	; 0x24
 8005e36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	09db      	lsrs	r3, r3, #7
 8005e42:	623b      	str	r3, [r7, #32]
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	2b7f      	cmp	r3, #127	; 0x7f
 8005e48:	d8f0      	bhi.n	8005e2c <SEGGER_SYSVIEW_Warn+0x34>
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	627a      	str	r2, [r7, #36]	; 0x24
 8005e50:	6a3a      	ldr	r2, [r7, #32]
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	61fb      	str	r3, [r7, #28]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61bb      	str	r3, [r7, #24]
 8005e62:	e00b      	b.n	8005e7c <SEGGER_SYSVIEW_Warn+0x84>
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	1c59      	adds	r1, r3, #1
 8005e6c:	61f9      	str	r1, [r7, #28]
 8005e6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	09db      	lsrs	r3, r3, #7
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e80:	d8f0      	bhi.n	8005e64 <SEGGER_SYSVIEW_Warn+0x6c>
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	61fa      	str	r2, [r7, #28]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e92:	221a      	movs	r2, #26
 8005e94:	68f9      	ldr	r1, [r7, #12]
 8005e96:	6938      	ldr	r0, [r7, #16]
 8005e98:	f7fe fbf4 	bl	8004684 <_SendPacket>
  RECORD_END();
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f383 8811 	msr	BASEPRI, r3
}
 8005ea2:	bf00      	nop
 8005ea4:	3728      	adds	r7, #40	; 0x28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	2001a74c 	.word	0x2001a74c

08005eb0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005eb4:	4b13      	ldr	r3, [pc, #76]	; (8005f04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005eb6:	7e1b      	ldrb	r3, [r3, #24]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4a13      	ldr	r2, [pc, #76]	; (8005f08 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	440b      	add	r3, r1
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	336c      	adds	r3, #108	; 0x6c
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	4b0e      	ldr	r3, [pc, #56]	; (8005f04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005ecc:	7e1b      	ldrb	r3, [r3, #24]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	490d      	ldr	r1, [pc, #52]	; (8005f08 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	4403      	add	r3, r0
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	440b      	add	r3, r1
 8005edc:	3370      	adds	r3, #112	; 0x70
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d00b      	beq.n	8005efc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005ee4:	4b07      	ldr	r3, [pc, #28]	; (8005f04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005ee6:	789b      	ldrb	r3, [r3, #2]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d107      	bne.n	8005efc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005eec:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005ef2:	f7fe fae3 	bl	80044bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005ef6:	4b03      	ldr	r3, [pc, #12]	; (8005f04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005efc:	4b01      	ldr	r3, [pc, #4]	; (8005f04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	2001a71c 	.word	0x2001a71c
 8005f08:	2001925c 	.word	0x2001925c

08005f0c <__libc_init_array>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	4d0d      	ldr	r5, [pc, #52]	; (8005f44 <__libc_init_array+0x38>)
 8005f10:	4c0d      	ldr	r4, [pc, #52]	; (8005f48 <__libc_init_array+0x3c>)
 8005f12:	1b64      	subs	r4, r4, r5
 8005f14:	10a4      	asrs	r4, r4, #2
 8005f16:	2600      	movs	r6, #0
 8005f18:	42a6      	cmp	r6, r4
 8005f1a:	d109      	bne.n	8005f30 <__libc_init_array+0x24>
 8005f1c:	4d0b      	ldr	r5, [pc, #44]	; (8005f4c <__libc_init_array+0x40>)
 8005f1e:	4c0c      	ldr	r4, [pc, #48]	; (8005f50 <__libc_init_array+0x44>)
 8005f20:	f000 f83e 	bl	8005fa0 <_init>
 8005f24:	1b64      	subs	r4, r4, r5
 8005f26:	10a4      	asrs	r4, r4, #2
 8005f28:	2600      	movs	r6, #0
 8005f2a:	42a6      	cmp	r6, r4
 8005f2c:	d105      	bne.n	8005f3a <__libc_init_array+0x2e>
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
 8005f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f34:	4798      	blx	r3
 8005f36:	3601      	adds	r6, #1
 8005f38:	e7ee      	b.n	8005f18 <__libc_init_array+0xc>
 8005f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f3e:	4798      	blx	r3
 8005f40:	3601      	adds	r6, #1
 8005f42:	e7f2      	b.n	8005f2a <__libc_init_array+0x1e>
 8005f44:	08006150 	.word	0x08006150
 8005f48:	08006150 	.word	0x08006150
 8005f4c:	08006150 	.word	0x08006150
 8005f50:	08006154 	.word	0x08006154

08005f54 <memcmp>:
 8005f54:	b510      	push	{r4, lr}
 8005f56:	3901      	subs	r1, #1
 8005f58:	4402      	add	r2, r0
 8005f5a:	4290      	cmp	r0, r2
 8005f5c:	d101      	bne.n	8005f62 <memcmp+0xe>
 8005f5e:	2000      	movs	r0, #0
 8005f60:	e005      	b.n	8005f6e <memcmp+0x1a>
 8005f62:	7803      	ldrb	r3, [r0, #0]
 8005f64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005f68:	42a3      	cmp	r3, r4
 8005f6a:	d001      	beq.n	8005f70 <memcmp+0x1c>
 8005f6c:	1b18      	subs	r0, r3, r4
 8005f6e:	bd10      	pop	{r4, pc}
 8005f70:	3001      	adds	r0, #1
 8005f72:	e7f2      	b.n	8005f5a <memcmp+0x6>

08005f74 <memcpy>:
 8005f74:	440a      	add	r2, r1
 8005f76:	4291      	cmp	r1, r2
 8005f78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005f7c:	d100      	bne.n	8005f80 <memcpy+0xc>
 8005f7e:	4770      	bx	lr
 8005f80:	b510      	push	{r4, lr}
 8005f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f8a:	4291      	cmp	r1, r2
 8005f8c:	d1f9      	bne.n	8005f82 <memcpy+0xe>
 8005f8e:	bd10      	pop	{r4, pc}

08005f90 <memset>:
 8005f90:	4402      	add	r2, r0
 8005f92:	4603      	mov	r3, r0
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d100      	bne.n	8005f9a <memset+0xa>
 8005f98:	4770      	bx	lr
 8005f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f9e:	e7f9      	b.n	8005f94 <memset+0x4>

08005fa0 <_init>:
 8005fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa2:	bf00      	nop
 8005fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa6:	bc08      	pop	{r3}
 8005fa8:	469e      	mov	lr, r3
 8005faa:	4770      	bx	lr

08005fac <_fini>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	bf00      	nop
 8005fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb2:	bc08      	pop	{r3}
 8005fb4:	469e      	mov	lr, r3
 8005fb6:	4770      	bx	lr
