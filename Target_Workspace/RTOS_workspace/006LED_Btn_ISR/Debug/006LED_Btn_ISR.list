
006LED_Btn_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006840  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08006a10  08006a10  00016a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c54  08006c54  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c54  08006c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c5c  08006c5c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a824  2000001c  08006c80  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a840  08006c80  0002a840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014126  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dfc  00000000  00000000  00034172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00036f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  000381e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002398d  00000000  00000000  000392d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016004  00000000  00000000  0005cc65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dba29  00000000  00000000  00072c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c7c  00000000  00000000  0014e6e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080069f8 	.word	0x080069f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	080069f8 	.word	0x080069f8

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	2001926c 	.word	0x2001926c

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b8:	f000 b974 	b.w	80005a4 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468e      	mov	lr, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14d      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4694      	mov	ip, r2
 80002e6:	d969      	bls.n	80003bc <__udivmoddi4+0xe8>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b152      	cbz	r2, 8000304 <__udivmoddi4+0x30>
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	f1c2 0120 	rsb	r1, r2, #32
 80002f6:	fa20 f101 	lsr.w	r1, r0, r1
 80002fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000302:	4094      	lsls	r4, r2
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	0c21      	lsrs	r1, r4, #16
 800030a:	fbbe f6f8 	udiv	r6, lr, r8
 800030e:	fa1f f78c 	uxth.w	r7, ip
 8000312:	fb08 e316 	mls	r3, r8, r6, lr
 8000316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800031a:	fb06 f107 	mul.w	r1, r6, r7
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800032a:	f080 811f 	bcs.w	800056c <__udivmoddi4+0x298>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 811c 	bls.w	800056c <__udivmoddi4+0x298>
 8000334:	3e02      	subs	r6, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a5b      	subs	r3, r3, r1
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000340:	fb08 3310 	mls	r3, r8, r0, r3
 8000344:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000348:	fb00 f707 	mul.w	r7, r0, r7
 800034c:	42a7      	cmp	r7, r4
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x92>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000358:	f080 810a 	bcs.w	8000570 <__udivmoddi4+0x29c>
 800035c:	42a7      	cmp	r7, r4
 800035e:	f240 8107 	bls.w	8000570 <__udivmoddi4+0x29c>
 8000362:	4464      	add	r4, ip
 8000364:	3802      	subs	r0, #2
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	1be4      	subs	r4, r4, r7
 800036c:	2600      	movs	r6, #0
 800036e:	b11d      	cbz	r5, 8000378 <__udivmoddi4+0xa4>
 8000370:	40d4      	lsrs	r4, r2
 8000372:	2300      	movs	r3, #0
 8000374:	e9c5 4300 	strd	r4, r3, [r5]
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0xc2>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80ef 	beq.w	8000566 <__udivmoddi4+0x292>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x160>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xd4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80f9 	bhi.w	800059a <__udivmoddi4+0x2c6>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0303 	sbc.w	r3, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	469e      	mov	lr, r3
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e0      	beq.n	8000378 <__udivmoddi4+0xa4>
 80003b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ba:	e7dd      	b.n	8000378 <__udivmoddi4+0xa4>
 80003bc:	b902      	cbnz	r2, 80003c0 <__udivmoddi4+0xec>
 80003be:	deff      	udf	#255	; 0xff
 80003c0:	fab2 f282 	clz	r2, r2
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	f040 8092 	bne.w	80004ee <__udivmoddi4+0x21a>
 80003ca:	eba1 010c 	sub.w	r1, r1, ip
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	2601      	movs	r6, #1
 80003d8:	0c20      	lsrs	r0, r4, #16
 80003da:	fbb1 f3f7 	udiv	r3, r1, r7
 80003de:	fb07 1113 	mls	r1, r7, r3, r1
 80003e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e6:	fb0e f003 	mul.w	r0, lr, r3
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x12c>
 80003ee:	eb1c 0101 	adds.w	r1, ip, r1
 80003f2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x12a>
 80003f8:	4288      	cmp	r0, r1
 80003fa:	f200 80cb 	bhi.w	8000594 <__udivmoddi4+0x2c0>
 80003fe:	4643      	mov	r3, r8
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f7 	udiv	r0, r1, r7
 8000408:	fb07 1110 	mls	r1, r7, r0, r1
 800040c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000410:	fb0e fe00 	mul.w	lr, lr, r0
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x156>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x154>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2ca>
 8000428:	4608      	mov	r0, r1
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000432:	e79c      	b.n	800036e <__udivmoddi4+0x9a>
 8000434:	f1c6 0720 	rsb	r7, r6, #32
 8000438:	40b3      	lsls	r3, r6
 800043a:	fa22 fc07 	lsr.w	ip, r2, r7
 800043e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000442:	fa20 f407 	lsr.w	r4, r0, r7
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	431c      	orrs	r4, r3
 800044c:	40f9      	lsrs	r1, r7
 800044e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000452:	fa00 f306 	lsl.w	r3, r0, r6
 8000456:	fbb1 f8f9 	udiv	r8, r1, r9
 800045a:	0c20      	lsrs	r0, r4, #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fb09 1118 	mls	r1, r9, r8, r1
 8000464:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000468:	fb08 f00e 	mul.w	r0, r8, lr
 800046c:	4288      	cmp	r0, r1
 800046e:	fa02 f206 	lsl.w	r2, r2, r6
 8000472:	d90b      	bls.n	800048c <__udivmoddi4+0x1b8>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800047c:	f080 8088 	bcs.w	8000590 <__udivmoddi4+0x2bc>
 8000480:	4288      	cmp	r0, r1
 8000482:	f240 8085 	bls.w	8000590 <__udivmoddi4+0x2bc>
 8000486:	f1a8 0802 	sub.w	r8, r8, #2
 800048a:	4461      	add	r1, ip
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f9 	udiv	r0, r1, r9
 8000494:	fb09 1110 	mls	r1, r9, r0, r1
 8000498:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800049c:	fb00 fe0e 	mul.w	lr, r0, lr
 80004a0:	458e      	cmp	lr, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x1e2>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004ac:	d26c      	bcs.n	8000588 <__udivmoddi4+0x2b4>
 80004ae:	458e      	cmp	lr, r1
 80004b0:	d96a      	bls.n	8000588 <__udivmoddi4+0x2b4>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ba:	fba0 9402 	umull	r9, r4, r0, r2
 80004be:	eba1 010e 	sub.w	r1, r1, lr
 80004c2:	42a1      	cmp	r1, r4
 80004c4:	46c8      	mov	r8, r9
 80004c6:	46a6      	mov	lr, r4
 80004c8:	d356      	bcc.n	8000578 <__udivmoddi4+0x2a4>
 80004ca:	d053      	beq.n	8000574 <__udivmoddi4+0x2a0>
 80004cc:	b15d      	cbz	r5, 80004e6 <__udivmoddi4+0x212>
 80004ce:	ebb3 0208 	subs.w	r2, r3, r8
 80004d2:	eb61 010e 	sbc.w	r1, r1, lr
 80004d6:	fa01 f707 	lsl.w	r7, r1, r7
 80004da:	fa22 f306 	lsr.w	r3, r2, r6
 80004de:	40f1      	lsrs	r1, r6
 80004e0:	431f      	orrs	r7, r3
 80004e2:	e9c5 7100 	strd	r7, r1, [r5]
 80004e6:	2600      	movs	r6, #0
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	40d8      	lsrs	r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa21 f303 	lsr.w	r3, r1, r3
 80004fc:	4091      	lsls	r1, r2
 80004fe:	4301      	orrs	r1, r0
 8000500:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000504:	fa1f fe8c 	uxth.w	lr, ip
 8000508:	fbb3 f0f7 	udiv	r0, r3, r7
 800050c:	fb07 3610 	mls	r6, r7, r0, r3
 8000510:	0c0b      	lsrs	r3, r1, #16
 8000512:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000516:	fb00 f60e 	mul.w	r6, r0, lr
 800051a:	429e      	cmp	r6, r3
 800051c:	fa04 f402 	lsl.w	r4, r4, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x260>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052a:	d22f      	bcs.n	800058c <__udivmoddi4+0x2b8>
 800052c:	429e      	cmp	r6, r3
 800052e:	d92d      	bls.n	800058c <__udivmoddi4+0x2b8>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1b9b      	subs	r3, r3, r6
 8000536:	b289      	uxth	r1, r1
 8000538:	fbb3 f6f7 	udiv	r6, r3, r7
 800053c:	fb07 3316 	mls	r3, r7, r6, r3
 8000540:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000544:	fb06 f30e 	mul.w	r3, r6, lr
 8000548:	428b      	cmp	r3, r1
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x28a>
 800054c:	eb1c 0101 	adds.w	r1, ip, r1
 8000550:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000554:	d216      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000556:	428b      	cmp	r3, r1
 8000558:	d914      	bls.n	8000584 <__udivmoddi4+0x2b0>
 800055a:	3e02      	subs	r6, #2
 800055c:	4461      	add	r1, ip
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000564:	e738      	b.n	80003d8 <__udivmoddi4+0x104>
 8000566:	462e      	mov	r6, r5
 8000568:	4628      	mov	r0, r5
 800056a:	e705      	b.n	8000378 <__udivmoddi4+0xa4>
 800056c:	4606      	mov	r6, r0
 800056e:	e6e3      	b.n	8000338 <__udivmoddi4+0x64>
 8000570:	4618      	mov	r0, r3
 8000572:	e6f8      	b.n	8000366 <__udivmoddi4+0x92>
 8000574:	454b      	cmp	r3, r9
 8000576:	d2a9      	bcs.n	80004cc <__udivmoddi4+0x1f8>
 8000578:	ebb9 0802 	subs.w	r8, r9, r2
 800057c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000580:	3801      	subs	r0, #1
 8000582:	e7a3      	b.n	80004cc <__udivmoddi4+0x1f8>
 8000584:	4646      	mov	r6, r8
 8000586:	e7ea      	b.n	800055e <__udivmoddi4+0x28a>
 8000588:	4620      	mov	r0, r4
 800058a:	e794      	b.n	80004b6 <__udivmoddi4+0x1e2>
 800058c:	4640      	mov	r0, r8
 800058e:	e7d1      	b.n	8000534 <__udivmoddi4+0x260>
 8000590:	46d0      	mov	r8, sl
 8000592:	e77b      	b.n	800048c <__udivmoddi4+0x1b8>
 8000594:	3b02      	subs	r3, #2
 8000596:	4461      	add	r1, ip
 8000598:	e732      	b.n	8000400 <__udivmoddi4+0x12c>
 800059a:	4630      	mov	r0, r6
 800059c:	e709      	b.n	80003b2 <__udivmoddi4+0xde>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x156>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fb71 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f877 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8e7 	bl	8000788 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 80005ba:	482e      	ldr	r0, [pc, #184]	; (8000674 <main+0xcc>)
 80005bc:	f003 fec4 	bl	8004348 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 80005c0:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <main+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a2c      	ldr	r2, [pc, #176]	; (8000678 <main+0xd0>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005cc:	f003 fc2a 	bl	8003e24 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 80005d0:	4b2a      	ldr	r3, [pc, #168]	; (800067c <main+0xd4>)
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2303      	movs	r3, #3
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	22c8      	movs	r2, #200	; 0xc8
 80005dc:	4928      	ldr	r1, [pc, #160]	; (8000680 <main+0xd8>)
 80005de:	4829      	ldr	r0, [pc, #164]	; (8000684 <main+0xdc>)
 80005e0:	f002 f820 	bl	8002624 <xTaskCreate>
 80005e4:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d00a      	beq.n	8000602 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f0:	f383 8811 	msr	BASEPRI, r3
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	f3bf 8f4f 	dsb	sy
 80005fc:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005fe:	bf00      	nop
 8000600:	e7fe      	b.n	8000600 <main+0x58>

  next_task_handle = ledg_task_handle;
 8000602:	4b1e      	ldr	r3, [pc, #120]	; (800067c <main+0xd4>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a20      	ldr	r2, [pc, #128]	; (8000688 <main+0xe0>)
 8000608:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <main+0xe4>)
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2302      	movs	r3, #2
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	22c8      	movs	r2, #200	; 0xc8
 8000616:	491e      	ldr	r1, [pc, #120]	; (8000690 <main+0xe8>)
 8000618:	481e      	ldr	r0, [pc, #120]	; (8000694 <main+0xec>)
 800061a:	f002 f803 	bl	8002624 <xTaskCreate>
 800061e:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d00a      	beq.n	800063c <main+0x94>
        __asm volatile
 8000626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800062a:	f383 8811 	msr	BASEPRI, r3
 800062e:	f3bf 8f6f 	isb	sy
 8000632:	f3bf 8f4f 	dsb	sy
 8000636:	607b      	str	r3, [r7, #4]
    }
 8000638:	bf00      	nop
 800063a:	e7fe      	b.n	800063a <main+0x92>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 1, &ledr_task_handle);
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <main+0xf0>)
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2301      	movs	r3, #1
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	22c8      	movs	r2, #200	; 0xc8
 8000648:	4914      	ldr	r1, [pc, #80]	; (800069c <main+0xf4>)
 800064a:	4815      	ldr	r0, [pc, #84]	; (80006a0 <main+0xf8>)
 800064c:	f001 ffea 	bl	8002624 <xTaskCreate>
 8000650:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d00a      	beq.n	800066e <main+0xc6>
        __asm volatile
 8000658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065c:	f383 8811 	msr	BASEPRI, r3
 8000660:	f3bf 8f6f 	isb	sy
 8000664:	f3bf 8f4f 	dsb	sy
 8000668:	603b      	str	r3, [r7, #0]
    }
 800066a:	bf00      	nop
 800066c:	e7fe      	b.n	800066c <main+0xc4>



  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800066e:	f002 f9e7 	bl	8002a40 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000672:	e7fe      	b.n	8000672 <main+0xca>
 8000674:	0007a120 	.word	0x0007a120
 8000678:	e0001000 	.word	0xe0001000
 800067c:	20000038 	.word	0x20000038
 8000680:	08006a10 	.word	0x08006a10
 8000684:	08000901 	.word	0x08000901
 8000688:	20000044 	.word	0x20000044
 800068c:	2000003c 	.word	0x2000003c
 8000690:	08006a20 	.word	0x08006a20
 8000694:	08000981 	.word	0x08000981
 8000698:	20000040 	.word	0x20000040
 800069c:	08006a30 	.word	0x08006a30
 80006a0:	080009ed 	.word	0x080009ed

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2234      	movs	r2, #52	; 0x34
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f006 f998 	bl	80069e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <SystemClock_Config+0xdc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a2b      	ldr	r2, [pc, #172]	; (8000780 <SystemClock_Config+0xdc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <SystemClock_Config+0xdc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemClock_Config+0xe0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a25      	ldr	r2, [pc, #148]	; (8000784 <SystemClock_Config+0xe0>)
 80006ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemClock_Config+0xe0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000718:	23b4      	movs	r3, #180	; 0xb4
 800071a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4618      	mov	r0, r3
 800072e:	f001 f979 	bl	8001a24 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000738:	f000 f99c 	bl	8000a74 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800073c:	f000 fdba 	bl	80012b4 <HAL_PWREx_EnableOverDrive>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000746:	f000 f995 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000756:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000760:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	2105      	movs	r1, #5
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fdf3 	bl	8001354 <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000774:	f000 f97e 	bl	8000a74 <Error_Handler>
  }
}
 8000778:	bf00      	nop
 800077a:	3750      	adds	r7, #80	; 0x50
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b39      	ldr	r3, [pc, #228]	; (8000888 <MX_GPIO_Init+0x100>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a38      	ldr	r2, [pc, #224]	; (8000888 <MX_GPIO_Init+0x100>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b36      	ldr	r3, [pc, #216]	; (8000888 <MX_GPIO_Init+0x100>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b32      	ldr	r3, [pc, #200]	; (8000888 <MX_GPIO_Init+0x100>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a31      	ldr	r2, [pc, #196]	; (8000888 <MX_GPIO_Init+0x100>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <MX_GPIO_Init+0x100>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <MX_GPIO_Init+0x100>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a2a      	ldr	r2, [pc, #168]	; (8000888 <MX_GPIO_Init+0x100>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <MX_GPIO_Init+0x100>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b24      	ldr	r3, [pc, #144]	; (8000888 <MX_GPIO_Init+0x100>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a23      	ldr	r2, [pc, #140]	; (8000888 <MX_GPIO_Init+0x100>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_GPIO_Init+0x100>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2120      	movs	r1, #32
 8000812:	481e      	ldr	r0, [pc, #120]	; (800088c <MX_GPIO_Init+0x104>)
 8000814:	f000 fcf6 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4818      	ldr	r0, [pc, #96]	; (8000890 <MX_GPIO_Init+0x108>)
 8000830:	f000 fb54 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000834:	230c      	movs	r3, #12
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000844:	2307      	movs	r3, #7
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	480f      	ldr	r0, [pc, #60]	; (800088c <MX_GPIO_Init+0x104>)
 8000850:	f000 fb44 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000854:	2320      	movs	r3, #32
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4808      	ldr	r0, [pc, #32]	; (800088c <MX_GPIO_Init+0x104>)
 800086c:	f000 fb36 	bl	8000edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2106      	movs	r1, #6
 8000874:	2028      	movs	r0, #40	; 0x28
 8000876:	f000 fb07 	bl	8000e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800087a:	2028      	movs	r0, #40	; 0x28
 800087c:	f000 fb20 	bl	8000ec0 <HAL_NVIC_EnableIRQ>

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000
 8000890:	40020800 	.word	0x40020800

08000894 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */


void button_interrupt_handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken = pdFALSE;
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]


	traceISR_ENTER();
 800089e:	f005 fd11 	bl	80062c4 <SEGGER_SYSVIEW_RecordEnterISR>
    SEGGER_SYSVIEW_PrintfTarget("Entering xTaskNotifyFromISR ...");
 80008a2:	4813      	ldr	r0, [pc, #76]	; (80008f0 <button_interrupt_handler+0x5c>)
 80008a4:	f005 ffc0 	bl	8006828 <SEGGER_SYSVIEW_PrintfTarget>
	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&pxHigherPriorityTaskWoken);
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <button_interrupt_handler+0x60>)
 80008aa:	6818      	ldr	r0, [r3, #0]
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	2300      	movs	r3, #0
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2300      	movs	r3, #0
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	f002 fc3d 	bl	8003138 <xTaskGenericNotifyFromISR>
    SEGGER_SYSVIEW_PrintfTarget("Exiting xTaskNotifyFromISR ...");
 80008be:	480e      	ldr	r0, [pc, #56]	; (80008f8 <button_interrupt_handler+0x64>)
 80008c0:	f005 ffb2 	bl	8006828 <SEGGER_SYSVIEW_PrintfTarget>

	/* once the ISR exits, the below macro makes higher priority task which got unblocked to resume on the CPU */
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00a      	beq.n	80008e0 <button_interrupt_handler+0x4c>
 80008ca:	f005 fd59 	bl	8006380 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <button_interrupt_handler+0x68>)
 80008d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	f3bf 8f4f 	dsb	sy
 80008da:	f3bf 8f6f 	isb	sy
 80008de:	e001      	b.n	80008e4 <button_interrupt_handler+0x50>
 80008e0:	f005 fd32 	bl	8006348 <SEGGER_SYSVIEW_RecordExitISR>

	traceISR_EXIT();
 80008e4:	f005 fd30 	bl	8006348 <SEGGER_SYSVIEW_RecordExitISR>

}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	08006a40 	.word	0x08006a40
 80008f4:	20000044 	.word	0x20000044
 80008f8:	08006a60 	.word	0x08006a60
 80008fc:	e000ed04 	.word	0xe000ed04

08000900 <led_green_handler>:


static void led_green_handler(void* parameters)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000908:	4816      	ldr	r0, [pc, #88]	; (8000964 <led_green_handler+0x64>)
 800090a:	f005 ff8d 	bl	8006828 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 800090e:	2120      	movs	r1, #32
 8000910:	4815      	ldr	r0, [pc, #84]	; (8000968 <led_green_handler+0x68>)
 8000912:	f000 fc90 	bl	8001236 <HAL_GPIO_TogglePin>
        SEGGER_SYSVIEW_PrintfTarget("Entering xTaskNotifyWait ...");
 8000916:	4815      	ldr	r0, [pc, #84]	; (800096c <led_green_handler+0x6c>)
 8000918:	f005 ff86 	bl	8006828 <SEGGER_SYSVIEW_PrintfTarget>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 800091c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2300      	movs	r3, #0
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2000      	movs	r0, #0
 800092a:	f002 fb7d 	bl	8003028 <xTaskGenericNotifyWait>
 800092e:	60f8      	str	r0, [r7, #12]
        SEGGER_SYSVIEW_PrintfTarget("Exiting xTaskNotifyWait ...");
 8000930:	480f      	ldr	r0, [pc, #60]	; (8000970 <led_green_handler+0x70>)
 8000932:	f005 ff79 	bl	8006828 <SEGGER_SYSVIEW_PrintfTarget>
		if(status == pdTRUE){
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d1e5      	bne.n	8000908 <led_green_handler+0x8>
			portENTER_CRITICAL();
 800093c:	f002 ff3a 	bl	80037b4 <vPortEnterCritical>
			next_task_handle = ledo_task_handle;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <led_green_handler+0x74>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <led_green_handler+0x78>)
 8000946:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_PIN,GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2120      	movs	r1, #32
 800094c:	4806      	ldr	r0, [pc, #24]	; (8000968 <led_green_handler+0x68>)
 800094e:	f000 fc59 	bl	8001204 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <led_green_handler+0x7c>)
 8000954:	f005 ff68 	bl	8006828 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000958:	f002 ff5c 	bl	8003814 <vPortExitCritical>
			vTaskDelete(NULL);
 800095c:	2000      	movs	r0, #0
 800095e:	f001 ffc5 	bl	80028ec <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000962:	e7d1      	b.n	8000908 <led_green_handler+0x8>
 8000964:	08006a80 	.word	0x08006a80
 8000968:	40020000 	.word	0x40020000
 800096c:	08006a94 	.word	0x08006a94
 8000970:	08006ab4 	.word	0x08006ab4
 8000974:	2000003c 	.word	0x2000003c
 8000978:	20000044 	.word	0x20000044
 800097c:	08006ad0 	.word	0x08006ad0

08000980 <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af02      	add	r7, sp, #8
 8000986:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000988:	4812      	ldr	r0, [pc, #72]	; (80009d4 <led_orange_handler+0x54>)
 800098a:	f005 ff4d 	bl	8006828 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN );
        SEGGER_SYSVIEW_PrintfTarget("Entering xTaskNotifyWait ...");
 800098e:	4812      	ldr	r0, [pc, #72]	; (80009d8 <led_orange_handler+0x58>)
 8000990:	f005 ff4a 	bl	8006828 <SEGGER_SYSVIEW_PrintfTarget>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000994:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2300      	movs	r3, #0
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	2000      	movs	r0, #0
 80009a2:	f002 fb41 	bl	8003028 <xTaskGenericNotifyWait>
 80009a6:	60f8      	str	r0, [r7, #12]
        SEGGER_SYSVIEW_PrintfTarget("Exiting xTaskNotifyWait ...");
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <led_orange_handler+0x5c>)
 80009aa:	f005 ff3d 	bl	8006828 <SEGGER_SYSVIEW_PrintfTarget>
		if(status == pdTRUE){
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d1e9      	bne.n	8000988 <led_orange_handler+0x8>
			portENTER_CRITICAL();
 80009b4:	f002 fefe 	bl	80037b4 <vPortEnterCritical>
			next_task_handle = ledr_task_handle;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <led_orange_handler+0x60>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <led_orange_handler+0x64>)
 80009be:	6013      	str	r3, [r2, #0]
			//HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN,GPIO_PIN_SET);
			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <led_orange_handler+0x68>)
 80009c2:	f005 ff31 	bl	8006828 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 80009c6:	f002 ff25 	bl	8003814 <vPortExitCritical>
			vTaskDelete(NULL);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f001 ff8e 	bl	80028ec <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80009d0:	e7da      	b.n	8000988 <led_orange_handler+0x8>
 80009d2:	bf00      	nop
 80009d4:	08006ae8 	.word	0x08006ae8
 80009d8:	08006a94 	.word	0x08006a94
 80009dc:	08006ab4 	.word	0x08006ab4
 80009e0:	20000040 	.word	0x20000040
 80009e4:	20000044 	.word	0x20000044
 80009e8:	08006afc 	.word	0x08006afc

080009ec <led_red_handler>:
	}
}


static void led_red_handler(void* parameters)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80009f4:	4811      	ldr	r0, [pc, #68]	; (8000a3c <led_red_handler+0x50>)
 80009f6:	f005 ff17 	bl	8006828 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
        SEGGER_SYSVIEW_PrintfTarget("Entering xTaskNotifyWait ...");
 80009fa:	4811      	ldr	r0, [pc, #68]	; (8000a40 <led_red_handler+0x54>)
 80009fc:	f005 ff14 	bl	8006828 <SEGGER_SYSVIEW_PrintfTarget>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000a00:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2300      	movs	r3, #0
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f002 fb0b 	bl	8003028 <xTaskGenericNotifyWait>
 8000a12:	60f8      	str	r0, [r7, #12]
        SEGGER_SYSVIEW_PrintfTarget("Exiting xTaskNotifyWait ...");
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <led_red_handler+0x58>)
 8000a16:	f005 ff07 	bl	8006828 <SEGGER_SYSVIEW_PrintfTarget>
		if(status == pdTRUE){
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d1e9      	bne.n	80009f4 <led_red_handler+0x8>
			portENTER_CRITICAL();
 8000a20:	f002 fec8 	bl	80037b4 <vPortEnterCritical>
			next_task_handle = NULL;
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <led_red_handler+0x5c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOD, LED_RED_PIN,GPIO_PIN_SET);
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <led_red_handler+0x60>)
 8000a2c:	f005 fefc 	bl	8006828 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000a30:	f002 fef0 	bl	8003814 <vPortExitCritical>
			vTaskDelete(NULL);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f001 ff59 	bl	80028ec <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a3a:	e7db      	b.n	80009f4 <led_red_handler+0x8>
 8000a3c:	08006b14 	.word	0x08006b14
 8000a40:	08006a94 	.word	0x08006a94
 8000a44:	08006ab4 	.word	0x08006ab4
 8000a48:	20000044 	.word	0x20000044
 8000a4c:	08006b28 	.word	0x08006b28

08000a50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a62:	f000 f939 	bl	8000cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40001000 	.word	0x40001000

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <HAL_MspInit+0x4c>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x4c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000abe:	f002 fdfb 	bl	80036b8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	; 0x38
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <HAL_InitTick+0xe4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a32      	ldr	r2, [pc, #200]	; (8000bb4 <HAL_InitTick+0xe4>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6413      	str	r3, [r2, #64]	; 0x40
 8000af0:	4b30      	ldr	r3, [pc, #192]	; (8000bb4 <HAL_InitTick+0xe4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f003 0310 	and.w	r3, r3, #16
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000afc:	f107 0210 	add.w	r2, r7, #16
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fd2a 	bl	8001560 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d103      	bne.n	8000b1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b16:	f000 fd0f 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8000b1a:	6378      	str	r0, [r7, #52]	; 0x34
 8000b1c:	e004      	b.n	8000b28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b1e:	f000 fd0b 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8000b22:	4603      	mov	r3, r0
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <HAL_InitTick+0xe8>)
 8000b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b30:	0c9b      	lsrs	r3, r3, #18
 8000b32:	3b01      	subs	r3, #1
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <HAL_InitTick+0xec>)
 8000b38:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <HAL_InitTick+0xf0>)
 8000b3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <HAL_InitTick+0xec>)
 8000b3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b44:	4a1d      	ldr	r2, [pc, #116]	; (8000bbc <HAL_InitTick+0xec>)
 8000b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <HAL_InitTick+0xec>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <HAL_InitTick+0xec>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <HAL_InitTick+0xec>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b5c:	4817      	ldr	r0, [pc, #92]	; (8000bbc <HAL_InitTick+0xec>)
 8000b5e:	f001 f9ff 	bl	8001f60 <HAL_TIM_Base_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d11b      	bne.n	8000ba8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b70:	4812      	ldr	r0, [pc, #72]	; (8000bbc <HAL_InitTick+0xec>)
 8000b72:	f001 fa4f 	bl	8002014 <HAL_TIM_Base_Start_IT>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d111      	bne.n	8000ba8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b84:	2036      	movs	r0, #54	; 0x36
 8000b86:	f000 f99b 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d808      	bhi.n	8000ba2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	2036      	movs	r0, #54	; 0x36
 8000b96:	f000 f977 	bl	8000e88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <HAL_InitTick+0xf4>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	e002      	b.n	8000ba8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3738      	adds	r7, #56	; 0x38
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	431bde83 	.word	0x431bde83
 8000bbc:	20000048 	.word	0x20000048
 8000bc0:	40001000 	.word	0x40001000
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	button_interrupt_handler();
 8000bf8:	f7ff fe4c 	bl	8000894 <button_interrupt_handler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bfc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c00:	f000 fb34 	bl	800126c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <TIM6_DAC_IRQHandler+0x10>)
 8000c0e:	f001 fa71 	bl	80020f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000048 	.word	0x20000048

08000c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c46:	490e      	ldr	r1, [pc, #56]	; (8000c80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c48:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c5c:	4c0b      	ldr	r4, [pc, #44]	; (8000c8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c6a:	f7ff ffd7 	bl	8000c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f005 fe79 	bl	8006964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fc99 	bl	80005a8 <main>
  bx  lr    
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c84:	08006c64 	.word	0x08006c64
  ldr r2, =_sbss
 8000c88:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c8c:	2001a840 	.word	0x2001a840

08000c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <HAL_Init+0x40>)
 8000c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <HAL_Init+0x40>)
 8000caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_Init+0x40>)
 8000cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f8d8 	bl	8000e72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff ff04 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff feda 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023c00 	.word	0x40023c00

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000090 	.word	0x20000090

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000090 	.word	0x20000090

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ff4c 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9a:	f7ff ff61 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000e9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	6978      	ldr	r0, [r7, #20]
 8000ea6:	f7ff ffb1 	bl	8000e0c <NVIC_EncodePriority>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff80 	bl	8000db8 <__NVIC_SetPriority>
}
 8000eb8:	bf00      	nop
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff54 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	e165      	b.n	80011c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	f040 8154 	bne.w	80011be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d005      	beq.n	8000f2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d130      	bne.n	8000f90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	091b      	lsrs	r3, r3, #4
 8000f7a:	f003 0201 	and.w	r2, r3, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d017      	beq.n	8000fcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d123      	bne.n	8001020 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	08da      	lsrs	r2, r3, #3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3208      	adds	r2, #8
 8000fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	f003 0307 	and.w	r3, r3, #7
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	691a      	ldr	r2, [r3, #16]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	08da      	lsrs	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3208      	adds	r2, #8
 800101a:	69b9      	ldr	r1, [r7, #24]
 800101c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0203 	and.w	r2, r3, #3
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 80ae 	beq.w	80011be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b5d      	ldr	r3, [pc, #372]	; (80011dc <HAL_GPIO_Init+0x300>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a5c      	ldr	r2, [pc, #368]	; (80011dc <HAL_GPIO_Init+0x300>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b5a      	ldr	r3, [pc, #360]	; (80011dc <HAL_GPIO_Init+0x300>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107e:	4a58      	ldr	r2, [pc, #352]	; (80011e0 <HAL_GPIO_Init+0x304>)
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3302      	adds	r3, #2
 8001086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4f      	ldr	r2, [pc, #316]	; (80011e4 <HAL_GPIO_Init+0x308>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d025      	beq.n	80010f6 <HAL_GPIO_Init+0x21a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <HAL_GPIO_Init+0x30c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01f      	beq.n	80010f2 <HAL_GPIO_Init+0x216>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4d      	ldr	r2, [pc, #308]	; (80011ec <HAL_GPIO_Init+0x310>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x212>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4c      	ldr	r2, [pc, #304]	; (80011f0 <HAL_GPIO_Init+0x314>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x20e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4b      	ldr	r2, [pc, #300]	; (80011f4 <HAL_GPIO_Init+0x318>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x20a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4a      	ldr	r2, [pc, #296]	; (80011f8 <HAL_GPIO_Init+0x31c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x206>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a49      	ldr	r2, [pc, #292]	; (80011fc <HAL_GPIO_Init+0x320>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x202>
 80010da:	2306      	movs	r3, #6
 80010dc:	e00c      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010de:	2307      	movs	r3, #7
 80010e0:	e00a      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010e2:	2305      	movs	r3, #5
 80010e4:	e008      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010e6:	2304      	movs	r3, #4
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010ea:	2303      	movs	r3, #3
 80010ec:	e004      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e002      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010f6:	2300      	movs	r3, #0
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	f002 0203 	and.w	r2, r2, #3
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	4093      	lsls	r3, r2
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001108:	4935      	ldr	r1, [pc, #212]	; (80011e0 <HAL_GPIO_Init+0x304>)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3302      	adds	r3, #2
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001116:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <HAL_GPIO_Init+0x324>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113a:	4a31      	ldr	r2, [pc, #196]	; (8001200 <HAL_GPIO_Init+0x324>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001140:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <HAL_GPIO_Init+0x324>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001164:	4a26      	ldr	r2, [pc, #152]	; (8001200 <HAL_GPIO_Init+0x324>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <HAL_GPIO_Init+0x324>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800118e:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <HAL_GPIO_Init+0x324>)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_GPIO_Init+0x324>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b8:	4a11      	ldr	r2, [pc, #68]	; (8001200 <HAL_GPIO_Init+0x324>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3301      	adds	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	2b0f      	cmp	r3, #15
 80011c8:	f67f ae96 	bls.w	8000ef8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40013800 	.word	0x40013800
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020400 	.word	0x40020400
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40021400 	.word	0x40021400
 80011fc:	40021800 	.word	0x40021800
 8001200:	40013c00 	.word	0x40013c00

08001204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
 8001210:	4613      	mov	r3, r2
 8001212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001214:	787b      	ldrb	r3, [r7, #1]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001220:	e003      	b.n	800122a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	041a      	lsls	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001248:	887a      	ldrh	r2, [r7, #2]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	041a      	lsls	r2, r3, #16
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43d9      	mvns	r1, r3
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	400b      	ands	r3, r1
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	4013      	ands	r3, r2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d006      	beq.n	8001290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f806 	bl	800129c <HAL_GPIO_EXTI_Callback>
  }
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <HAL_PWREx_EnableOverDrive+0x90>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_PWREx_EnableOverDrive+0x90>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_PWREx_EnableOverDrive+0x90>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_PWREx_EnableOverDrive+0x94>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e0:	f7ff fd0e 	bl	8000d00 <HAL_GetTick>
 80012e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012e6:	e009      	b.n	80012fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012e8:	f7ff fd0a 	bl	8000d00 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012f6:	d901      	bls.n	80012fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e01f      	b.n	800133c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_PWREx_EnableOverDrive+0x98>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001308:	d1ee      	bne.n	80012e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_PWREx_EnableOverDrive+0x9c>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001310:	f7ff fcf6 	bl	8000d00 <HAL_GetTick>
 8001314:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001316:	e009      	b.n	800132c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001318:	f7ff fcf2 	bl	8000d00 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001326:	d901      	bls.n	800132c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e007      	b.n	800133c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_PWREx_EnableOverDrive+0x98>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001338:	d1ee      	bne.n	8001318 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	420e0040 	.word	0x420e0040
 800134c:	40007000 	.word	0x40007000
 8001350:	420e0044 	.word	0x420e0044

08001354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e0cc      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001368:	4b68      	ldr	r3, [pc, #416]	; (800150c <HAL_RCC_ClockConfig+0x1b8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d90c      	bls.n	8001390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001376:	4b65      	ldr	r3, [pc, #404]	; (800150c <HAL_RCC_ClockConfig+0x1b8>)
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800137e:	4b63      	ldr	r3, [pc, #396]	; (800150c <HAL_RCC_ClockConfig+0x1b8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d001      	beq.n	8001390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e0b8      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d020      	beq.n	80013de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013a8:	4b59      	ldr	r3, [pc, #356]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	4a58      	ldr	r2, [pc, #352]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013c0:	4b53      	ldr	r3, [pc, #332]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	4a52      	ldr	r2, [pc, #328]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013cc:	4b50      	ldr	r3, [pc, #320]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	494d      	ldr	r1, [pc, #308]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d044      	beq.n	8001474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d107      	bne.n	8001402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d119      	bne.n	8001432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e07f      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d003      	beq.n	8001412 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800140e:	2b03      	cmp	r3, #3
 8001410:	d107      	bne.n	8001422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001412:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d109      	bne.n	8001432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e06f      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001422:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e067      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001432:	4b37      	ldr	r3, [pc, #220]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f023 0203 	bic.w	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4934      	ldr	r1, [pc, #208]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	4313      	orrs	r3, r2
 8001442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001444:	f7ff fc5c 	bl	8000d00 <HAL_GetTick>
 8001448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144a:	e00a      	b.n	8001462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800144c:	f7ff fc58 	bl	8000d00 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	; 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e04f      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001462:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 020c 	and.w	r2, r3, #12
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	429a      	cmp	r2, r3
 8001472:	d1eb      	bne.n	800144c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_RCC_ClockConfig+0x1b8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d20c      	bcs.n	800149c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001482:	4b22      	ldr	r3, [pc, #136]	; (800150c <HAL_RCC_ClockConfig+0x1b8>)
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_RCC_ClockConfig+0x1b8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d001      	beq.n	800149c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e032      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4916      	ldr	r1, [pc, #88]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d009      	beq.n	80014da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	490e      	ldr	r1, [pc, #56]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014da:	f000 f873 	bl	80015c4 <HAL_RCC_GetSysClockFreq>
 80014de:	4602      	mov	r2, r0
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	490a      	ldr	r1, [pc, #40]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 80014ec:	5ccb      	ldrb	r3, [r1, r3]
 80014ee:	fa22 f303 	lsr.w	r3, r2, r3
 80014f2:	4a09      	ldr	r2, [pc, #36]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_RCC_ClockConfig+0x1c8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fae8 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023c00 	.word	0x40023c00
 8001510:	40023800 	.word	0x40023800
 8001514:	08006c00 	.word	0x08006c00
 8001518:	20000000 	.word	0x20000000
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <HAL_RCC_GetHCLKFreq+0x14>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000000 	.word	0x20000000

08001538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800153c:	f7ff fff0 	bl	8001520 <HAL_RCC_GetHCLKFreq>
 8001540:	4602      	mov	r2, r0
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	0a9b      	lsrs	r3, r3, #10
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	4903      	ldr	r1, [pc, #12]	; (800155c <HAL_RCC_GetPCLK1Freq+0x24>)
 800154e:	5ccb      	ldrb	r3, [r1, r3]
 8001550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001554:	4618      	mov	r0, r3
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	08006c10 	.word	0x08006c10

08001560 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	220f      	movs	r2, #15
 800156e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_RCC_GetClockConfig+0x5c>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 0203 	and.w	r2, r3, #3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_RCC_GetClockConfig+0x5c>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_RCC_GetClockConfig+0x5c>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_GetClockConfig+0x5c>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	08db      	lsrs	r3, r3, #3
 800159a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <HAL_RCC_GetClockConfig+0x60>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 020f 	and.w	r2, r3, #15
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	601a      	str	r2, [r3, #0]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015c8:	b0ae      	sub	sp, #184	; 0xb8
 80015ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ea:	4bcb      	ldr	r3, [pc, #812]	; (8001918 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	f200 8206 	bhi.w	8001a04 <HAL_RCC_GetSysClockFreq+0x440>
 80015f8:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fe:	bf00      	nop
 8001600:	08001635 	.word	0x08001635
 8001604:	08001a05 	.word	0x08001a05
 8001608:	08001a05 	.word	0x08001a05
 800160c:	08001a05 	.word	0x08001a05
 8001610:	0800163d 	.word	0x0800163d
 8001614:	08001a05 	.word	0x08001a05
 8001618:	08001a05 	.word	0x08001a05
 800161c:	08001a05 	.word	0x08001a05
 8001620:	08001645 	.word	0x08001645
 8001624:	08001a05 	.word	0x08001a05
 8001628:	08001a05 	.word	0x08001a05
 800162c:	08001a05 	.word	0x08001a05
 8001630:	08001835 	.word	0x08001835
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001634:	4bb9      	ldr	r3, [pc, #740]	; (800191c <HAL_RCC_GetSysClockFreq+0x358>)
 8001636:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800163a:	e1e7      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800163c:	4bb8      	ldr	r3, [pc, #736]	; (8001920 <HAL_RCC_GetSysClockFreq+0x35c>)
 800163e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001642:	e1e3      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001644:	4bb4      	ldr	r3, [pc, #720]	; (8001918 <HAL_RCC_GetSysClockFreq+0x354>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800164c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001650:	4bb1      	ldr	r3, [pc, #708]	; (8001918 <HAL_RCC_GetSysClockFreq+0x354>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d071      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800165c:	4bae      	ldr	r3, [pc, #696]	; (8001918 <HAL_RCC_GetSysClockFreq+0x354>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	099b      	lsrs	r3, r3, #6
 8001662:	2200      	movs	r2, #0
 8001664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001668:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800166c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800167e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001682:	4622      	mov	r2, r4
 8001684:	462b      	mov	r3, r5
 8001686:	f04f 0000 	mov.w	r0, #0
 800168a:	f04f 0100 	mov.w	r1, #0
 800168e:	0159      	lsls	r1, r3, #5
 8001690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001694:	0150      	lsls	r0, r2, #5
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4621      	mov	r1, r4
 800169c:	1a51      	subs	r1, r2, r1
 800169e:	6439      	str	r1, [r7, #64]	; 0x40
 80016a0:	4629      	mov	r1, r5
 80016a2:	eb63 0301 	sbc.w	r3, r3, r1
 80016a6:	647b      	str	r3, [r7, #68]	; 0x44
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80016b4:	4649      	mov	r1, r9
 80016b6:	018b      	lsls	r3, r1, #6
 80016b8:	4641      	mov	r1, r8
 80016ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016be:	4641      	mov	r1, r8
 80016c0:	018a      	lsls	r2, r1, #6
 80016c2:	4641      	mov	r1, r8
 80016c4:	1a51      	subs	r1, r2, r1
 80016c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80016c8:	4649      	mov	r1, r9
 80016ca:	eb63 0301 	sbc.w	r3, r3, r1
 80016ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80016dc:	4649      	mov	r1, r9
 80016de:	00cb      	lsls	r3, r1, #3
 80016e0:	4641      	mov	r1, r8
 80016e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016e6:	4641      	mov	r1, r8
 80016e8:	00ca      	lsls	r2, r1, #3
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	4603      	mov	r3, r0
 80016f0:	4622      	mov	r2, r4
 80016f2:	189b      	adds	r3, r3, r2
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
 80016f6:	462b      	mov	r3, r5
 80016f8:	460a      	mov	r2, r1
 80016fa:	eb42 0303 	adc.w	r3, r2, r3
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800170c:	4629      	mov	r1, r5
 800170e:	024b      	lsls	r3, r1, #9
 8001710:	4621      	mov	r1, r4
 8001712:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001716:	4621      	mov	r1, r4
 8001718:	024a      	lsls	r2, r1, #9
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001722:	2200      	movs	r2, #0
 8001724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001728:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800172c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001730:	f7fe fdb8 	bl	80002a4 <__aeabi_uldivmod>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4613      	mov	r3, r2
 800173a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800173e:	e067      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001740:	4b75      	ldr	r3, [pc, #468]	; (8001918 <HAL_RCC_GetSysClockFreq+0x354>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	099b      	lsrs	r3, r3, #6
 8001746:	2200      	movs	r2, #0
 8001748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800174c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001750:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001758:	67bb      	str	r3, [r7, #120]	; 0x78
 800175a:	2300      	movs	r3, #0
 800175c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800175e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001762:	4622      	mov	r2, r4
 8001764:	462b      	mov	r3, r5
 8001766:	f04f 0000 	mov.w	r0, #0
 800176a:	f04f 0100 	mov.w	r1, #0
 800176e:	0159      	lsls	r1, r3, #5
 8001770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001774:	0150      	lsls	r0, r2, #5
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4621      	mov	r1, r4
 800177c:	1a51      	subs	r1, r2, r1
 800177e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001780:	4629      	mov	r1, r5
 8001782:	eb63 0301 	sbc.w	r3, r3, r1
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001794:	4649      	mov	r1, r9
 8001796:	018b      	lsls	r3, r1, #6
 8001798:	4641      	mov	r1, r8
 800179a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800179e:	4641      	mov	r1, r8
 80017a0:	018a      	lsls	r2, r1, #6
 80017a2:	4641      	mov	r1, r8
 80017a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80017a8:	4649      	mov	r1, r9
 80017aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017c2:	4692      	mov	sl, r2
 80017c4:	469b      	mov	fp, r3
 80017c6:	4623      	mov	r3, r4
 80017c8:	eb1a 0303 	adds.w	r3, sl, r3
 80017cc:	623b      	str	r3, [r7, #32]
 80017ce:	462b      	mov	r3, r5
 80017d0:	eb4b 0303 	adc.w	r3, fp, r3
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017e2:	4629      	mov	r1, r5
 80017e4:	028b      	lsls	r3, r1, #10
 80017e6:	4621      	mov	r1, r4
 80017e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017ec:	4621      	mov	r1, r4
 80017ee:	028a      	lsls	r2, r1, #10
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017f8:	2200      	movs	r2, #0
 80017fa:	673b      	str	r3, [r7, #112]	; 0x70
 80017fc:	677a      	str	r2, [r7, #116]	; 0x74
 80017fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001802:	f7fe fd4f 	bl	80002a4 <__aeabi_uldivmod>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4613      	mov	r3, r2
 800180c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001810:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_RCC_GetSysClockFreq+0x354>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	0c1b      	lsrs	r3, r3, #16
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	3301      	adds	r3, #1
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001832:	e0eb      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001834:	4b38      	ldr	r3, [pc, #224]	; (8001918 <HAL_RCC_GetSysClockFreq+0x354>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800183c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001840:	4b35      	ldr	r3, [pc, #212]	; (8001918 <HAL_RCC_GetSysClockFreq+0x354>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d06b      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184c:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_RCC_GetSysClockFreq+0x354>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	099b      	lsrs	r3, r3, #6
 8001852:	2200      	movs	r2, #0
 8001854:	66bb      	str	r3, [r7, #104]	; 0x68
 8001856:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800185a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800185e:	663b      	str	r3, [r7, #96]	; 0x60
 8001860:	2300      	movs	r3, #0
 8001862:	667b      	str	r3, [r7, #100]	; 0x64
 8001864:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001868:	4622      	mov	r2, r4
 800186a:	462b      	mov	r3, r5
 800186c:	f04f 0000 	mov.w	r0, #0
 8001870:	f04f 0100 	mov.w	r1, #0
 8001874:	0159      	lsls	r1, r3, #5
 8001876:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187a:	0150      	lsls	r0, r2, #5
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4621      	mov	r1, r4
 8001882:	1a51      	subs	r1, r2, r1
 8001884:	61b9      	str	r1, [r7, #24]
 8001886:	4629      	mov	r1, r5
 8001888:	eb63 0301 	sbc.w	r3, r3, r1
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800189a:	4659      	mov	r1, fp
 800189c:	018b      	lsls	r3, r1, #6
 800189e:	4651      	mov	r1, sl
 80018a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a4:	4651      	mov	r1, sl
 80018a6:	018a      	lsls	r2, r1, #6
 80018a8:	4651      	mov	r1, sl
 80018aa:	ebb2 0801 	subs.w	r8, r2, r1
 80018ae:	4659      	mov	r1, fp
 80018b0:	eb63 0901 	sbc.w	r9, r3, r1
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018c8:	4690      	mov	r8, r2
 80018ca:	4699      	mov	r9, r3
 80018cc:	4623      	mov	r3, r4
 80018ce:	eb18 0303 	adds.w	r3, r8, r3
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	462b      	mov	r3, r5
 80018d6:	eb49 0303 	adc.w	r3, r9, r3
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018e8:	4629      	mov	r1, r5
 80018ea:	024b      	lsls	r3, r1, #9
 80018ec:	4621      	mov	r1, r4
 80018ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018f2:	4621      	mov	r1, r4
 80018f4:	024a      	lsls	r2, r1, #9
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018fe:	2200      	movs	r2, #0
 8001900:	65bb      	str	r3, [r7, #88]	; 0x58
 8001902:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001904:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001908:	f7fe fccc 	bl	80002a4 <__aeabi_uldivmod>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4613      	mov	r3, r2
 8001912:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001916:	e065      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x420>
 8001918:	40023800 	.word	0x40023800
 800191c:	00f42400 	.word	0x00f42400
 8001920:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001924:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x458>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	099b      	lsrs	r3, r3, #6
 800192a:	2200      	movs	r2, #0
 800192c:	4618      	mov	r0, r3
 800192e:	4611      	mov	r1, r2
 8001930:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001934:	653b      	str	r3, [r7, #80]	; 0x50
 8001936:	2300      	movs	r3, #0
 8001938:	657b      	str	r3, [r7, #84]	; 0x54
 800193a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800193e:	4642      	mov	r2, r8
 8001940:	464b      	mov	r3, r9
 8001942:	f04f 0000 	mov.w	r0, #0
 8001946:	f04f 0100 	mov.w	r1, #0
 800194a:	0159      	lsls	r1, r3, #5
 800194c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001950:	0150      	lsls	r0, r2, #5
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4641      	mov	r1, r8
 8001958:	1a51      	subs	r1, r2, r1
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	4649      	mov	r1, r9
 800195e:	eb63 0301 	sbc.w	r3, r3, r1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001970:	4659      	mov	r1, fp
 8001972:	018b      	lsls	r3, r1, #6
 8001974:	4651      	mov	r1, sl
 8001976:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800197a:	4651      	mov	r1, sl
 800197c:	018a      	lsls	r2, r1, #6
 800197e:	4651      	mov	r1, sl
 8001980:	1a54      	subs	r4, r2, r1
 8001982:	4659      	mov	r1, fp
 8001984:	eb63 0501 	sbc.w	r5, r3, r1
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	00eb      	lsls	r3, r5, #3
 8001992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001996:	00e2      	lsls	r2, r4, #3
 8001998:	4614      	mov	r4, r2
 800199a:	461d      	mov	r5, r3
 800199c:	4643      	mov	r3, r8
 800199e:	18e3      	adds	r3, r4, r3
 80019a0:	603b      	str	r3, [r7, #0]
 80019a2:	464b      	mov	r3, r9
 80019a4:	eb45 0303 	adc.w	r3, r5, r3
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019b6:	4629      	mov	r1, r5
 80019b8:	028b      	lsls	r3, r1, #10
 80019ba:	4621      	mov	r1, r4
 80019bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019c0:	4621      	mov	r1, r4
 80019c2:	028a      	lsls	r2, r1, #10
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019cc:	2200      	movs	r2, #0
 80019ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80019d0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80019d6:	f7fe fc65 	bl	80002a4 <__aeabi_uldivmod>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4613      	mov	r3, r2
 80019e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x458>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	0f1b      	lsrs	r3, r3, #28
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80019f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a02:	e003      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	37b8      	adds	r7, #184	; 0xb8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	00f42400 	.word	0x00f42400

08001a24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e28d      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8083 	beq.w	8001b4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a44:	4b94      	ldr	r3, [pc, #592]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d019      	beq.n	8001a84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a50:	4b91      	ldr	r3, [pc, #580]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a5c:	4b8e      	ldr	r3, [pc, #568]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a68:	d00c      	beq.n	8001a84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6a:	4b8b      	ldr	r3, [pc, #556]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a72:	2b0c      	cmp	r3, #12
 8001a74:	d112      	bne.n	8001a9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a76:	4b88      	ldr	r3, [pc, #544]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a82:	d10b      	bne.n	8001a9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	4b84      	ldr	r3, [pc, #528]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d05b      	beq.n	8001b48 <HAL_RCC_OscConfig+0x124>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d157      	bne.n	8001b48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e25a      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d106      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x90>
 8001aa6:	4b7c      	ldr	r3, [pc, #496]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a7b      	ldr	r2, [pc, #492]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e01d      	b.n	8001af0 <HAL_RCC_OscConfig+0xcc>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xb4>
 8001abe:	4b76      	ldr	r3, [pc, #472]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a75      	ldr	r2, [pc, #468]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b73      	ldr	r3, [pc, #460]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a72      	ldr	r2, [pc, #456]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e00b      	b.n	8001af0 <HAL_RCC_OscConfig+0xcc>
 8001ad8:	4b6f      	ldr	r3, [pc, #444]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a6e      	ldr	r2, [pc, #440]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b6c      	ldr	r3, [pc, #432]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a6b      	ldr	r2, [pc, #428]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff f902 	bl	8000d00 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff f8fe 	bl	8000d00 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e21f      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	4b61      	ldr	r3, [pc, #388]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0xdc>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff f8ee 	bl	8000d00 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff f8ea 	bl	8000d00 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e20b      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	4b57      	ldr	r3, [pc, #348]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x104>
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d06f      	beq.n	8001c36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b56:	4b50      	ldr	r3, [pc, #320]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d017      	beq.n	8001b92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b62:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d105      	bne.n	8001b7a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b6e:	4b4a      	ldr	r3, [pc, #296]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00b      	beq.n	8001b92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7a:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d11c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b86:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d116      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b92:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <HAL_RCC_OscConfig+0x186>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e1d3      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001baa:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4937      	ldr	r1, [pc, #220]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	e03a      	b.n	8001c36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d020      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc8:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <HAL_RCC_OscConfig+0x278>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bce:	f7ff f897 	bl	8000d00 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd6:	f7ff f893 	bl	8000d00 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e1b4      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf4:	4b28      	ldr	r3, [pc, #160]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4925      	ldr	r1, [pc, #148]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
 8001c08:	e015      	b.n	8001c36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0a:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_RCC_OscConfig+0x278>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff f876 	bl	8000d00 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c18:	f7ff f872 	bl	8000d00 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e193      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d036      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d016      	beq.n	8001c78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_RCC_OscConfig+0x27c>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff f856 	bl	8000d00 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c58:	f7ff f852 	bl	8000d00 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e173      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x234>
 8001c76:	e01b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_RCC_OscConfig+0x27c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7ff f83f 	bl	8000d00 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c84:	e00e      	b.n	8001ca4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c86:	f7ff f83b 	bl	8000d00 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d907      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e15c      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	42470000 	.word	0x42470000
 8001ca0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca4:	4b8a      	ldr	r3, [pc, #552]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1ea      	bne.n	8001c86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 8097 	beq.w	8001dec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc2:	4b83      	ldr	r3, [pc, #524]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10f      	bne.n	8001cee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	4b7f      	ldr	r3, [pc, #508]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a7e      	ldr	r2, [pc, #504]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cde:	4b7c      	ldr	r3, [pc, #496]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cea:	2301      	movs	r3, #1
 8001cec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cee:	4b79      	ldr	r3, [pc, #484]	; (8001ed4 <HAL_RCC_OscConfig+0x4b0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d118      	bne.n	8001d2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfa:	4b76      	ldr	r3, [pc, #472]	; (8001ed4 <HAL_RCC_OscConfig+0x4b0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a75      	ldr	r2, [pc, #468]	; (8001ed4 <HAL_RCC_OscConfig+0x4b0>)
 8001d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d06:	f7fe fffb 	bl	8000d00 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0e:	f7fe fff7 	bl	8000d00 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e118      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	4b6c      	ldr	r3, [pc, #432]	; (8001ed4 <HAL_RCC_OscConfig+0x4b0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x31e>
 8001d34:	4b66      	ldr	r3, [pc, #408]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	4a65      	ldr	r2, [pc, #404]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d40:	e01c      	b.n	8001d7c <HAL_RCC_OscConfig+0x358>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b05      	cmp	r3, #5
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x340>
 8001d4a:	4b61      	ldr	r3, [pc, #388]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	4a60      	ldr	r2, [pc, #384]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	6713      	str	r3, [r2, #112]	; 0x70
 8001d56:	4b5e      	ldr	r3, [pc, #376]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	4a5d      	ldr	r2, [pc, #372]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6713      	str	r3, [r2, #112]	; 0x70
 8001d62:	e00b      	b.n	8001d7c <HAL_RCC_OscConfig+0x358>
 8001d64:	4b5a      	ldr	r3, [pc, #360]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d68:	4a59      	ldr	r2, [pc, #356]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d70:	4b57      	ldr	r3, [pc, #348]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d74:	4a56      	ldr	r2, [pc, #344]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001d76:	f023 0304 	bic.w	r3, r3, #4
 8001d7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d015      	beq.n	8001db0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7fe ffbc 	bl	8000d00 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7fe ffb8 	bl	8000d00 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e0d7      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da2:	4b4b      	ldr	r3, [pc, #300]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0ee      	beq.n	8001d8c <HAL_RCC_OscConfig+0x368>
 8001dae:	e014      	b.n	8001dda <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7fe ffa6 	bl	8000d00 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db8:	f7fe ffa2 	bl	8000d00 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e0c1      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dce:	4b40      	ldr	r3, [pc, #256]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1ee      	bne.n	8001db8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d105      	bne.n	8001dec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de0:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	4a3a      	ldr	r2, [pc, #232]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80ad 	beq.w	8001f50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001df6:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d060      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d145      	bne.n	8001e96 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0a:	4b33      	ldr	r3, [pc, #204]	; (8001ed8 <HAL_RCC_OscConfig+0x4b4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7fe ff76 	bl	8000d00 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e18:	f7fe ff72 	bl	8000d00 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e093      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2a:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69da      	ldr	r2, [r3, #28]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4c:	085b      	lsrs	r3, r3, #1
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	041b      	lsls	r3, r3, #16
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	061b      	lsls	r3, r3, #24
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	071b      	lsls	r3, r3, #28
 8001e62:	491b      	ldr	r1, [pc, #108]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <HAL_RCC_OscConfig+0x4b4>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7fe ff47 	bl	8000d00 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e76:	f7fe ff43 	bl	8000d00 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e064      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x452>
 8001e94:	e05c      	b.n	8001f50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_RCC_OscConfig+0x4b4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7fe ff30 	bl	8000d00 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7fe ff2c 	bl	8000d00 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e04d      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_OscConfig+0x4ac>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x480>
 8001ec2:	e045      	b.n	8001f50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d107      	bne.n	8001edc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e040      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_RCC_OscConfig+0x538>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d030      	beq.n	8001f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d129      	bne.n	8001f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d122      	bne.n	8001f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d119      	bne.n	8001f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	085b      	lsrs	r3, r3, #1
 8001f24:	3b01      	subs	r3, #1
 8001f26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d10f      	bne.n	8001f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d107      	bne.n	8001f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e041      	b.n	8001ff6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f839 	bl	8001ffe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f000 f9d8 	bl	8002354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d001      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e04e      	b.n	80020ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a23      	ldr	r2, [pc, #140]	; (80020d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d022      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x80>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002056:	d01d      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x80>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <HAL_TIM_Base_Start_IT+0xc8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d018      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x80>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d013      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x80>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00e      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x80>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d009      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x80>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a19      	ldr	r2, [pc, #100]	; (80020ec <HAL_TIM_Base_Start_IT+0xd8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d004      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x80>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d111      	bne.n	80020b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d010      	beq.n	80020c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b6:	e007      	b.n	80020c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40010000 	.word	0x40010000
 80020dc:	40000400 	.word	0x40000400
 80020e0:	40000800 	.word	0x40000800
 80020e4:	40000c00 	.word	0x40000c00
 80020e8:	40010400 	.word	0x40010400
 80020ec:	40014000 	.word	0x40014000
 80020f0:	40001800 	.word	0x40001800

080020f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b02      	cmp	r3, #2
 8002108:	d122      	bne.n	8002150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b02      	cmp	r3, #2
 8002116:	d11b      	bne.n	8002150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0202 	mvn.w	r2, #2
 8002120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f8ee 	bl	8002318 <HAL_TIM_IC_CaptureCallback>
 800213c:	e005      	b.n	800214a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f8e0 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f8f1 	bl	800232c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b04      	cmp	r3, #4
 800215c:	d122      	bne.n	80021a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b04      	cmp	r3, #4
 800216a:	d11b      	bne.n	80021a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0204 	mvn.w	r2, #4
 8002174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f8c4 	bl	8002318 <HAL_TIM_IC_CaptureCallback>
 8002190:	e005      	b.n	800219e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f8b6 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f8c7 	bl	800232c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d122      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d11b      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0208 	mvn.w	r2, #8
 80021c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2204      	movs	r2, #4
 80021ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f89a 	bl	8002318 <HAL_TIM_IC_CaptureCallback>
 80021e4:	e005      	b.n	80021f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f88c 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f89d 	bl	800232c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b10      	cmp	r3, #16
 8002204:	d122      	bne.n	800224c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	2b10      	cmp	r3, #16
 8002212:	d11b      	bne.n	800224c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0210 	mvn.w	r2, #16
 800221c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2208      	movs	r2, #8
 8002222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f870 	bl	8002318 <HAL_TIM_IC_CaptureCallback>
 8002238:	e005      	b.n	8002246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f862 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f873 	bl	800232c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d10e      	bne.n	8002278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d107      	bne.n	8002278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0201 	mvn.w	r2, #1
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fbec 	bl	8000a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002282:	2b80      	cmp	r3, #128	; 0x80
 8002284:	d10e      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002290:	2b80      	cmp	r3, #128	; 0x80
 8002292:	d107      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f902 	bl	80024a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ae:	2b40      	cmp	r3, #64	; 0x40
 80022b0:	d10e      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022bc:	2b40      	cmp	r3, #64	; 0x40
 80022be:	d107      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f838 	bl	8002340 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b20      	cmp	r3, #32
 80022dc:	d10e      	bne.n	80022fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d107      	bne.n	80022fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0220 	mvn.w	r2, #32
 80022f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f8cc 	bl	8002494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a40      	ldr	r2, [pc, #256]	; (8002468 <TIM_Base_SetConfig+0x114>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d013      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002372:	d00f      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a3d      	ldr	r2, [pc, #244]	; (800246c <TIM_Base_SetConfig+0x118>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d00b      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a3c      	ldr	r2, [pc, #240]	; (8002470 <TIM_Base_SetConfig+0x11c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d007      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a3b      	ldr	r2, [pc, #236]	; (8002474 <TIM_Base_SetConfig+0x120>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d003      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a3a      	ldr	r2, [pc, #232]	; (8002478 <TIM_Base_SetConfig+0x124>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d108      	bne.n	80023a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a2f      	ldr	r2, [pc, #188]	; (8002468 <TIM_Base_SetConfig+0x114>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02b      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b4:	d027      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a2c      	ldr	r2, [pc, #176]	; (800246c <TIM_Base_SetConfig+0x118>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d023      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a2b      	ldr	r2, [pc, #172]	; (8002470 <TIM_Base_SetConfig+0x11c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d01f      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a2a      	ldr	r2, [pc, #168]	; (8002474 <TIM_Base_SetConfig+0x120>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01b      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a29      	ldr	r2, [pc, #164]	; (8002478 <TIM_Base_SetConfig+0x124>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d017      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a28      	ldr	r2, [pc, #160]	; (800247c <TIM_Base_SetConfig+0x128>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a27      	ldr	r2, [pc, #156]	; (8002480 <TIM_Base_SetConfig+0x12c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00f      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a26      	ldr	r2, [pc, #152]	; (8002484 <TIM_Base_SetConfig+0x130>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00b      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a25      	ldr	r2, [pc, #148]	; (8002488 <TIM_Base_SetConfig+0x134>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a24      	ldr	r2, [pc, #144]	; (800248c <TIM_Base_SetConfig+0x138>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d003      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a23      	ldr	r2, [pc, #140]	; (8002490 <TIM_Base_SetConfig+0x13c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d108      	bne.n	8002418 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800240c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <TIM_Base_SetConfig+0x114>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d003      	beq.n	800244c <TIM_Base_SetConfig+0xf8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <TIM_Base_SetConfig+0x124>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d103      	bne.n	8002454 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	615a      	str	r2, [r3, #20]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40010000 	.word	0x40010000
 800246c:	40000400 	.word	0x40000400
 8002470:	40000800 	.word	0x40000800
 8002474:	40000c00 	.word	0x40000c00
 8002478:	40010400 	.word	0x40010400
 800247c:	40014000 	.word	0x40014000
 8002480:	40014400 	.word	0x40014400
 8002484:	40014800 	.word	0x40014800
 8002488:	40001800 	.word	0x40001800
 800248c:	40001c00 	.word	0x40001c00
 8002490:	40002000 	.word	0x40002000

08002494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f103 0208 	add.w	r2, r3, #8
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024d4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f103 0208 	add.w	r2, r3, #8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f103 0208 	add.w	r2, r3, #8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	601a      	str	r2, [r3, #0]
}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002574:	d103      	bne.n	800257e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e00c      	b.n	8002598 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3308      	adds	r3, #8
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	e002      	b.n	800258c <vListInsert+0x2e>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	429a      	cmp	r2, r3
 8002596:	d2f6      	bcs.n	8002586 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	601a      	str	r2, [r3, #0]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6892      	ldr	r2, [r2, #8]
 80025e6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6852      	ldr	r2, [r2, #4]
 80025f0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d103      	bne.n	8002604 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	1e5a      	subs	r2, r3, #1
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002624:	b580      	push	{r7, lr}
 8002626:	b08c      	sub	sp, #48	; 0x30
 8002628:	af04      	add	r7, sp, #16
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	4613      	mov	r3, r2
 8002632:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4618      	mov	r0, r3
 800263a:	f001 f9e7 	bl	8003a0c <pvPortMalloc>
 800263e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00e      	beq.n	8002664 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002646:	2058      	movs	r0, #88	; 0x58
 8002648:	f001 f9e0 	bl	8003a0c <pvPortMalloc>
 800264c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
 800265a:	e005      	b.n	8002668 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800265c:	6978      	ldr	r0, [r7, #20]
 800265e:	f001 fab5 	bl	8003bcc <vPortFree>
 8002662:	e001      	b.n	8002668 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002664:	2300      	movs	r3, #0
 8002666:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d013      	beq.n	8002696 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800266e:	88fa      	ldrh	r2, [r7, #6]
 8002670:	2300      	movs	r3, #0
 8002672:	9303      	str	r3, [sp, #12]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	9302      	str	r3, [sp, #8]
 8002678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267a:	9301      	str	r3, [sp, #4]
 800267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f80e 	bl	80026a6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800268a:	69f8      	ldr	r0, [r7, #28]
 800268c:	f000 f8a2 	bl	80027d4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002690:	2301      	movs	r3, #1
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	e002      	b.n	800269c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800269a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800269c:	69bb      	ldr	r3, [r7, #24]
    }
 800269e:	4618      	mov	r0, r3
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b088      	sub	sp, #32
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	461a      	mov	r2, r3
 80026be:	21a5      	movs	r1, #165	; 0xa5
 80026c0:	f004 f992 	bl	80069e8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026ce:	3b01      	subs	r3, #1
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f023 0307 	bic.w	r3, r3, #7
 80026dc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <prvInitialiseNewTask+0x58>
        __asm volatile
 80026e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	617b      	str	r3, [r7, #20]
    }
 80026fa:	bf00      	nop
 80026fc:	e7fe      	b.n	80026fc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01f      	beq.n	8002744 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	e012      	b.n	8002730 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	4413      	add	r3, r2
 8002710:	7819      	ldrb	r1, [r3, #0]
 8002712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	4413      	add	r3, r2
 8002718:	3334      	adds	r3, #52	; 0x34
 800271a:	460a      	mov	r2, r1
 800271c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	4413      	add	r3, r2
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d006      	beq.n	8002738 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3301      	adds	r3, #1
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b09      	cmp	r3, #9
 8002734:	d9e9      	bls.n	800270a <prvInitialiseNewTask+0x64>
 8002736:	e000      	b.n	800273a <prvInitialiseNewTask+0x94>
            {
                break;
 8002738:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800273a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002742:	e003      	b.n	800274c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	2b04      	cmp	r3, #4
 8002750:	d901      	bls.n	8002756 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002752:	2304      	movs	r3, #4
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800275c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002760:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	2200      	movs	r2, #0
 8002766:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	3304      	adds	r3, #4
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fec5 	bl	80024fc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	3318      	adds	r3, #24
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fec0 	bl	80024fc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002780:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	f1c3 0205 	rsb	r2, r3, #5
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002790:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002794:	3350      	adds	r3, #80	; 0x50
 8002796:	2204      	movs	r2, #4
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f004 f924 	bl	80069e8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	3354      	adds	r3, #84	; 0x54
 80027a4:	2201      	movs	r2, #1
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f004 f91d 	bl	80069e8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	68f9      	ldr	r1, [r7, #12]
 80027b2:	69b8      	ldr	r0, [r7, #24]
 80027b4:	f000 fe4e 	bl	8003454 <pxPortInitialiseStack>
 80027b8:	4602      	mov	r2, r0
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027ca:	bf00      	nop
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80027d4:	b5b0      	push	{r4, r5, r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af02      	add	r7, sp, #8
 80027da:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80027dc:	f000 ffea 	bl	80037b4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80027e0:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <prvAddNewTaskToReadyList+0xfc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	4a3a      	ldr	r2, [pc, #232]	; (80028d0 <prvAddNewTaskToReadyList+0xfc>)
 80027e8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80027ea:	4b3a      	ldr	r3, [pc, #232]	; (80028d4 <prvAddNewTaskToReadyList+0x100>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80027f2:	4a38      	ldr	r2, [pc, #224]	; (80028d4 <prvAddNewTaskToReadyList+0x100>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027f8:	4b35      	ldr	r3, [pc, #212]	; (80028d0 <prvAddNewTaskToReadyList+0xfc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d110      	bne.n	8002822 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002800:	f000 fb78 	bl	8002ef4 <prvInitialiseTaskLists>
 8002804:	e00d      	b.n	8002822 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002806:	4b34      	ldr	r3, [pc, #208]	; (80028d8 <prvAddNewTaskToReadyList+0x104>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800280e:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <prvAddNewTaskToReadyList+0x100>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	429a      	cmp	r2, r3
 800281a:	d802      	bhi.n	8002822 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800281c:	4a2d      	ldr	r2, [pc, #180]	; (80028d4 <prvAddNewTaskToReadyList+0x100>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002822:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <prvAddNewTaskToReadyList+0x108>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3301      	adds	r3, #1
 8002828:	4a2c      	ldr	r2, [pc, #176]	; (80028dc <prvAddNewTaskToReadyList+0x108>)
 800282a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800282c:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <prvAddNewTaskToReadyList+0x108>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d016      	beq.n	8002868 <prvAddNewTaskToReadyList+0x94>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4618      	mov	r0, r3
 800283e:	f003 fdd7 	bl	80063f0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	461d      	mov	r5, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	461c      	mov	r4, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	1ae3      	subs	r3, r4, r3
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	462b      	mov	r3, r5
 8002864:	f001 fb80 	bl	8003f68 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4618      	mov	r0, r3
 800286c:	f003 fe44 	bl	80064f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	2201      	movs	r2, #1
 8002876:	409a      	lsls	r2, r3
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <prvAddNewTaskToReadyList+0x10c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4313      	orrs	r3, r2
 800287e:	4a18      	ldr	r2, [pc, #96]	; (80028e0 <prvAddNewTaskToReadyList+0x10c>)
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <prvAddNewTaskToReadyList+0x110>)
 8002890:	441a      	add	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	4619      	mov	r1, r3
 8002898:	4610      	mov	r0, r2
 800289a:	f7ff fe3c 	bl	8002516 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800289e:	f000 ffb9 	bl	8003814 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <prvAddNewTaskToReadyList+0x104>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00e      	beq.n	80028c8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <prvAddNewTaskToReadyList+0x100>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d207      	bcs.n	80028c8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <prvAddNewTaskToReadyList+0x114>)
 80028ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bdb0      	pop	{r4, r5, r7, pc}
 80028d0:	2000016c 	.word	0x2000016c
 80028d4:	20000094 	.word	0x20000094
 80028d8:	20000178 	.word	0x20000178
 80028dc:	20000188 	.word	0x20000188
 80028e0:	20000174 	.word	0x20000174
 80028e4:	20000098 	.word	0x20000098
 80028e8:	e000ed04 	.word	0xe000ed04

080028ec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80028f4:	f000 ff5e 	bl	80037b4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <vTaskDelete+0x18>
 80028fe:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <vTaskDelete+0x12c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	e000      	b.n	8002906 <vTaskDelete+0x1a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3304      	adds	r3, #4
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fe5f 	bl	80025d0 <uxListRemove>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d115      	bne.n	8002944 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291c:	493f      	ldr	r1, [pc, #252]	; (8002a1c <vTaskDelete+0x130>)
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <vTaskDelete+0x58>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	2201      	movs	r2, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43da      	mvns	r2, r3
 800293a:	4b39      	ldr	r3, [pc, #228]	; (8002a20 <vTaskDelete+0x134>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4013      	ands	r3, r2
 8002940:	4a37      	ldr	r2, [pc, #220]	; (8002a20 <vTaskDelete+0x134>)
 8002942:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	3318      	adds	r3, #24
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fe3d 	bl	80025d0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002956:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <vTaskDelete+0x138>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	4a31      	ldr	r2, [pc, #196]	; (8002a24 <vTaskDelete+0x138>)
 800295e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002960:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <vTaskDelete+0x12c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	429a      	cmp	r2, r3
 8002968:	d118      	bne.n	800299c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3304      	adds	r3, #4
 800296e:	4619      	mov	r1, r3
 8002970:	482d      	ldr	r0, [pc, #180]	; (8002a28 <vTaskDelete+0x13c>)
 8002972:	f7ff fdd0 	bl	8002516 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002976:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <vTaskDelete+0x140>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3301      	adds	r3, #1
 800297c:	4a2b      	ldr	r2, [pc, #172]	; (8002a2c <vTaskDelete+0x140>)
 800297e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fe5a 	bl	800663c <SEGGER_SYSVIEW_ShrinkId>
 8002988:	4603      	mov	r3, r0
 800298a:	4619      	mov	r1, r3
 800298c:	2022      	movs	r0, #34	; 0x22
 800298e:	f002 fff9 	bl	8005984 <SEGGER_SYSVIEW_RecordU32>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4618      	mov	r0, r3
 8002996:	f001 fb4f 	bl	8004038 <SYSVIEW_DeleteTask>
 800299a:	e016      	b.n	80029ca <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800299c:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <vTaskDelete+0x144>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <vTaskDelete+0x144>)
 80029a4:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f003 fe47 	bl	800663c <SEGGER_SYSVIEW_ShrinkId>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4619      	mov	r1, r3
 80029b2:	2022      	movs	r0, #34	; 0x22
 80029b4:	f002 ffe6 	bl	8005984 <SEGGER_SYSVIEW_RecordU32>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f001 fb3c 	bl	8004038 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fb05 	bl	8002fd0 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80029c6:	f000 fb13 	bl	8002ff0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80029ca:	f000 ff23 	bl	8003814 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <vTaskDelete+0x148>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d01b      	beq.n	8002a0e <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <vTaskDelete+0x12c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d116      	bne.n	8002a0e <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80029e0:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <vTaskDelete+0x14c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <vTaskDelete+0x112>
        __asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	60bb      	str	r3, [r7, #8]
    }
 80029fa:	bf00      	nop
 80029fc:	e7fe      	b.n	80029fc <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 80029fe:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <vTaskDelete+0x150>)
 8002a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000094 	.word	0x20000094
 8002a1c:	20000098 	.word	0x20000098
 8002a20:	20000174 	.word	0x20000174
 8002a24:	20000188 	.word	0x20000188
 8002a28:	20000140 	.word	0x20000140
 8002a2c:	20000154 	.word	0x20000154
 8002a30:	2000016c 	.word	0x2000016c
 8002a34:	20000178 	.word	0x20000178
 8002a38:	20000194 	.word	0x20000194
 8002a3c:	e000ed04 	.word	0xe000ed04

08002a40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002a46:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <vTaskStartScheduler+0x98>)
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2282      	movs	r2, #130	; 0x82
 8002a52:	4922      	ldr	r1, [pc, #136]	; (8002adc <vTaskStartScheduler+0x9c>)
 8002a54:	4822      	ldr	r0, [pc, #136]	; (8002ae0 <vTaskStartScheduler+0xa0>)
 8002a56:	f7ff fde5 	bl	8002624 <xTaskCreate>
 8002a5a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d124      	bne.n	8002aac <vTaskStartScheduler+0x6c>
        __asm volatile
 8002a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a66:	f383 8811 	msr	BASEPRI, r3
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	f3bf 8f4f 	dsb	sy
 8002a72:	60bb      	str	r3, [r7, #8]
    }
 8002a74:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a76:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <vTaskStartScheduler+0xa4>)
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a7c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <vTaskStartScheduler+0xa8>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <vTaskStartScheduler+0xac>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002a8a:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <vTaskStartScheduler+0xb0>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <vTaskStartScheduler+0x98>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d102      	bne.n	8002a9c <vTaskStartScheduler+0x5c>
 8002a96:	f003 fc8f 	bl	80063b8 <SEGGER_SYSVIEW_OnIdle>
 8002a9a:	e004      	b.n	8002aa6 <vTaskStartScheduler+0x66>
 8002a9c:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <vTaskStartScheduler+0xb0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 fce7 	bl	8006474 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002aa6:	f000 fd65 	bl	8003574 <xPortStartScheduler>
 8002aaa:	e00e      	b.n	8002aca <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab2:	d10a      	bne.n	8002aca <vTaskStartScheduler+0x8a>
        __asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	607b      	str	r3, [r7, #4]
    }
 8002ac6:	bf00      	nop
 8002ac8:	e7fe      	b.n	8002ac8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <vTaskStartScheduler+0xb4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000190 	.word	0x20000190
 8002adc:	08006b3c 	.word	0x08006b3c
 8002ae0:	08002ec5 	.word	0x08002ec5
 8002ae4:	2000018c 	.word	0x2000018c
 8002ae8:	20000178 	.word	0x20000178
 8002aec:	20000170 	.word	0x20000170
 8002af0:	20000094 	.word	0x20000094
 8002af4:	2000000c 	.word	0x2000000c

08002af8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002afc:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <vTaskSuspendAll+0x18>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3301      	adds	r3, #1
 8002b02:	4a03      	ldr	r2, [pc, #12]	; (8002b10 <vTaskSuspendAll+0x18>)
 8002b04:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	20000194 	.word	0x20000194

08002b14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b22:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <xTaskResumeAll+0x11c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <xTaskResumeAll+0x2c>
        __asm volatile
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	603b      	str	r3, [r7, #0]
    }
 8002b3c:	bf00      	nop
 8002b3e:	e7fe      	b.n	8002b3e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b40:	f000 fe38 	bl	80037b4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b44:	4b3a      	ldr	r3, [pc, #232]	; (8002c30 <xTaskResumeAll+0x11c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	4a39      	ldr	r2, [pc, #228]	; (8002c30 <xTaskResumeAll+0x11c>)
 8002b4c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b4e:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <xTaskResumeAll+0x11c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d165      	bne.n	8002c22 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b56:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <xTaskResumeAll+0x120>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d061      	beq.n	8002c22 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b5e:	e032      	b.n	8002bc6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b60:	4b35      	ldr	r3, [pc, #212]	; (8002c38 <xTaskResumeAll+0x124>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3318      	adds	r3, #24
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fd2f 	bl	80025d0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3304      	adds	r3, #4
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fd2a 	bl	80025d0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 fcba 	bl	80064f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	2201      	movs	r2, #1
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <xTaskResumeAll+0x128>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	4a2a      	ldr	r2, [pc, #168]	; (8002c3c <xTaskResumeAll+0x128>)
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <xTaskResumeAll+0x12c>)
 8002ba4:	441a      	add	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	4619      	mov	r1, r3
 8002bac:	4610      	mov	r0, r2
 8002bae:	f7ff fcb2 	bl	8002516 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb6:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <xTaskResumeAll+0x130>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d302      	bcc.n	8002bc6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002bc0:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <xTaskResumeAll+0x134>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <xTaskResumeAll+0x124>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1c8      	bne.n	8002b60 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002bd4:	f000 fa0c 	bl	8002ff0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002bd8:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <xTaskResumeAll+0x138>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002be4:	f000 f848 	bl	8002c78 <xTaskIncrementTick>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <xTaskResumeAll+0x134>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f1      	bne.n	8002be4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <xTaskResumeAll+0x138>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <xTaskResumeAll+0x134>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <xTaskResumeAll+0x13c>)
 8002c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c22:	f000 fdf7 	bl	8003814 <vPortExitCritical>

    return xAlreadyYielded;
 8002c26:	68bb      	ldr	r3, [r7, #8]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000194 	.word	0x20000194
 8002c34:	2000016c 	.word	0x2000016c
 8002c38:	2000012c 	.word	0x2000012c
 8002c3c:	20000174 	.word	0x20000174
 8002c40:	20000098 	.word	0x20000098
 8002c44:	20000094 	.word	0x20000094
 8002c48:	20000180 	.word	0x20000180
 8002c4c:	2000017c 	.word	0x2000017c
 8002c50:	e000ed04 	.word	0xe000ed04

08002c54 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c5a:	f000 fe97 	bl	800398c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <xTaskGetTickCountFromISR+0x20>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002c68:	683b      	ldr	r3, [r7, #0]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000170 	.word	0x20000170

08002c78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c82:	4b50      	ldr	r3, [pc, #320]	; (8002dc4 <xTaskIncrementTick+0x14c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 8092 	bne.w	8002db0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c8c:	4b4e      	ldr	r3, [pc, #312]	; (8002dc8 <xTaskIncrementTick+0x150>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3301      	adds	r3, #1
 8002c92:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c94:	4a4c      	ldr	r2, [pc, #304]	; (8002dc8 <xTaskIncrementTick+0x150>)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d120      	bne.n	8002ce2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ca0:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <xTaskIncrementTick+0x154>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <xTaskIncrementTick+0x48>
        __asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	603b      	str	r3, [r7, #0]
    }
 8002cbc:	bf00      	nop
 8002cbe:	e7fe      	b.n	8002cbe <xTaskIncrementTick+0x46>
 8002cc0:	4b42      	ldr	r3, [pc, #264]	; (8002dcc <xTaskIncrementTick+0x154>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	4b42      	ldr	r3, [pc, #264]	; (8002dd0 <xTaskIncrementTick+0x158>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a40      	ldr	r2, [pc, #256]	; (8002dcc <xTaskIncrementTick+0x154>)
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4a40      	ldr	r2, [pc, #256]	; (8002dd0 <xTaskIncrementTick+0x158>)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <xTaskIncrementTick+0x15c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	4a3e      	ldr	r2, [pc, #248]	; (8002dd4 <xTaskIncrementTick+0x15c>)
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	f000 f987 	bl	8002ff0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <xTaskIncrementTick+0x160>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d34c      	bcc.n	8002d86 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cec:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <xTaskIncrementTick+0x154>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cf6:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <xTaskIncrementTick+0x160>)
 8002cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cfc:	601a      	str	r2, [r3, #0]
                    break;
 8002cfe:	e042      	b.n	8002d86 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d00:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <xTaskIncrementTick+0x154>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d203      	bcs.n	8002d20 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d18:	4a2f      	ldr	r2, [pc, #188]	; (8002dd8 <xTaskIncrementTick+0x160>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d1e:	e032      	b.n	8002d86 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fc53 	bl	80025d0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d004      	beq.n	8002d3c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	3318      	adds	r3, #24
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fc4a 	bl	80025d0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f003 fbda 	bl	80064f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	2201      	movs	r2, #1
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <xTaskIncrementTick+0x164>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <xTaskIncrementTick+0x164>)
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4a1f      	ldr	r2, [pc, #124]	; (8002de0 <xTaskIncrementTick+0x168>)
 8002d64:	441a      	add	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f7ff fbd2 	bl	8002516 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d76:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <xTaskIncrementTick+0x16c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3b5      	bcc.n	8002cec <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002d80:	2301      	movs	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d84:	e7b2      	b.n	8002cec <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <xTaskIncrementTick+0x16c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8c:	4914      	ldr	r1, [pc, #80]	; (8002de0 <xTaskIncrementTick+0x168>)
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d901      	bls.n	8002da2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <xTaskIncrementTick+0x170>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002daa:	2301      	movs	r3, #1
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e004      	b.n	8002dba <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <xTaskIncrementTick+0x174>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <xTaskIncrementTick+0x174>)
 8002db8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002dba:	697b      	ldr	r3, [r7, #20]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000194 	.word	0x20000194
 8002dc8:	20000170 	.word	0x20000170
 8002dcc:	20000124 	.word	0x20000124
 8002dd0:	20000128 	.word	0x20000128
 8002dd4:	20000184 	.word	0x20000184
 8002dd8:	2000018c 	.word	0x2000018c
 8002ddc:	20000174 	.word	0x20000174
 8002de0:	20000098 	.word	0x20000098
 8002de4:	20000094 	.word	0x20000094
 8002de8:	20000180 	.word	0x20000180
 8002dec:	2000017c 	.word	0x2000017c

08002df0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002df6:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <vTaskSwitchContext+0xbc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002dfe:	4b2c      	ldr	r3, [pc, #176]	; (8002eb0 <vTaskSwitchContext+0xc0>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002e04:	e04d      	b.n	8002ea2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002e06:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <vTaskSwitchContext+0xc0>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e0c:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <vTaskSwitchContext+0xc4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002e1a:	7afb      	ldrb	r3, [r7, #11]
 8002e1c:	f1c3 031f 	rsb	r3, r3, #31
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	4925      	ldr	r1, [pc, #148]	; (8002eb8 <vTaskSwitchContext+0xc8>)
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	607b      	str	r3, [r7, #4]
    }
 8002e48:	bf00      	nop
 8002e4a:	e7fe      	b.n	8002e4a <vTaskSwitchContext+0x5a>
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <vTaskSwitchContext+0xc8>)
 8002e58:	4413      	add	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d104      	bne.n	8002e7c <vTaskSwitchContext+0x8c>
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <vTaskSwitchContext+0xcc>)
 8002e84:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <vTaskSwitchContext+0xcc>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <vTaskSwitchContext+0xd0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d102      	bne.n	8002e98 <vTaskSwitchContext+0xa8>
 8002e92:	f003 fa91 	bl	80063b8 <SEGGER_SYSVIEW_OnIdle>
}
 8002e96:	e004      	b.n	8002ea2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002e98:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <vTaskSwitchContext+0xcc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fae9 	bl	8006474 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002ea2:	bf00      	nop
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000194 	.word	0x20000194
 8002eb0:	20000180 	.word	0x20000180
 8002eb4:	20000174 	.word	0x20000174
 8002eb8:	20000098 	.word	0x20000098
 8002ebc:	20000094 	.word	0x20000094
 8002ec0:	20000190 	.word	0x20000190

08002ec4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ecc:	f000 f852 	bl	8002f74 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <prvIdleTask+0x28>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d9f9      	bls.n	8002ecc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <prvIdleTask+0x2c>)
 8002eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ee8:	e7f0      	b.n	8002ecc <prvIdleTask+0x8>
 8002eea:	bf00      	nop
 8002eec:	20000098 	.word	0x20000098
 8002ef0:	e000ed04 	.word	0xe000ed04

08002ef4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002efa:	2300      	movs	r3, #0
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	e00c      	b.n	8002f1a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <prvInitialiseTaskLists+0x60>)
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fad4 	bl	80024bc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3301      	adds	r3, #1
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d9ef      	bls.n	8002f00 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002f20:	480d      	ldr	r0, [pc, #52]	; (8002f58 <prvInitialiseTaskLists+0x64>)
 8002f22:	f7ff facb 	bl	80024bc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002f26:	480d      	ldr	r0, [pc, #52]	; (8002f5c <prvInitialiseTaskLists+0x68>)
 8002f28:	f7ff fac8 	bl	80024bc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002f2c:	480c      	ldr	r0, [pc, #48]	; (8002f60 <prvInitialiseTaskLists+0x6c>)
 8002f2e:	f7ff fac5 	bl	80024bc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002f32:	480c      	ldr	r0, [pc, #48]	; (8002f64 <prvInitialiseTaskLists+0x70>)
 8002f34:	f7ff fac2 	bl	80024bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002f38:	480b      	ldr	r0, [pc, #44]	; (8002f68 <prvInitialiseTaskLists+0x74>)
 8002f3a:	f7ff fabf 	bl	80024bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <prvInitialiseTaskLists+0x78>)
 8002f40:	4a05      	ldr	r2, [pc, #20]	; (8002f58 <prvInitialiseTaskLists+0x64>)
 8002f42:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <prvInitialiseTaskLists+0x7c>)
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <prvInitialiseTaskLists+0x68>)
 8002f48:	601a      	str	r2, [r3, #0]
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000098 	.word	0x20000098
 8002f58:	200000fc 	.word	0x200000fc
 8002f5c:	20000110 	.word	0x20000110
 8002f60:	2000012c 	.word	0x2000012c
 8002f64:	20000140 	.word	0x20000140
 8002f68:	20000158 	.word	0x20000158
 8002f6c:	20000124 	.word	0x20000124
 8002f70:	20000128 	.word	0x20000128

08002f74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f7a:	e019      	b.n	8002fb0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002f7c:	f000 fc1a 	bl	80037b4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f80:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <prvCheckTasksWaitingTermination+0x50>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fb1f 	bl	80025d0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002f92:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <prvCheckTasksWaitingTermination+0x54>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <prvCheckTasksWaitingTermination+0x54>)
 8002f9a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <prvCheckTasksWaitingTermination+0x58>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <prvCheckTasksWaitingTermination+0x58>)
 8002fa4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002fa6:	f000 fc35 	bl	8003814 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f810 	bl	8002fd0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <prvCheckTasksWaitingTermination+0x58>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e1      	bne.n	8002f7c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000140 	.word	0x20000140
 8002fc8:	2000016c 	.word	0x2000016c
 8002fcc:	20000154 	.word	0x20000154

08002fd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fdf5 	bl	8003bcc <vPortFree>
                vPortFree( pxTCB );
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fdf2 	bl	8003bcc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <prvResetNextTaskUnblockTime+0x30>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d104      	bne.n	8003008 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <prvResetNextTaskUnblockTime+0x34>)
 8003000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003004:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003006:	e005      	b.n	8003014 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <prvResetNextTaskUnblockTime+0x30>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <prvResetNextTaskUnblockTime+0x34>)
 8003012:	6013      	str	r3, [r2, #0]
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	20000124 	.word	0x20000124
 8003024:	2000018c 	.word	0x2000018c

08003028 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	613b      	str	r3, [r7, #16]
    }
 800304e:	bf00      	nop
 8003050:	e7fe      	b.n	8003050 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003052:	f000 fbaf 	bl	80037b4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003056:	4b36      	ldr	r3, [pc, #216]	; (8003130 <xTaskGenericNotifyWait+0x108>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	3354      	adds	r3, #84	; 0x54
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d022      	beq.n	80030ae <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003068:	4b31      	ldr	r3, [pc, #196]	; (8003130 <xTaskGenericNotifyWait+0x108>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	3214      	adds	r2, #20
 8003070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	43d2      	mvns	r2, r2
 8003078:	4011      	ands	r1, r2
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	3214      	adds	r2, #20
 800307e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003082:	4b2b      	ldr	r3, [pc, #172]	; (8003130 <xTaskGenericNotifyWait+0x108>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4413      	add	r3, r2
 800308a:	3354      	adds	r3, #84	; 0x54
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003096:	2101      	movs	r1, #1
 8003098:	6a38      	ldr	r0, [r7, #32]
 800309a:	f000 f963 	bl	8003364 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800309e:	4b25      	ldr	r3, [pc, #148]	; (8003134 <xTaskGenericNotifyWait+0x10c>)
 80030a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80030ae:	f000 fbb1 	bl	8003814 <vPortExitCritical>

        taskENTER_CRITICAL();
 80030b2:	f000 fb7f 	bl	80037b4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	2040      	movs	r0, #64	; 0x40
 80030c4:	f002 fcf4 	bl	8005ab0 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80030ce:	4b18      	ldr	r3, [pc, #96]	; (8003130 <xTaskGenericNotifyWait+0x108>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	3214      	adds	r2, #20
 80030d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80030de:	4b14      	ldr	r3, [pc, #80]	; (8003130 <xTaskGenericNotifyWait+0x108>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4413      	add	r3, r2
 80030e6:	3354      	adds	r3, #84	; 0x54
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d002      	beq.n	80030f6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e00e      	b.n	8003114 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80030f6:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <xTaskGenericNotifyWait+0x108>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	3214      	adds	r2, #20
 80030fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	43d2      	mvns	r2, r2
 8003106:	4011      	ands	r1, r2
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	3214      	adds	r2, #20
 800310c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003110:	2301      	movs	r3, #1
 8003112:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <xTaskGenericNotifyWait+0x108>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	3354      	adds	r3, #84	; 0x54
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003122:	f000 fb77 	bl	8003814 <vPortExitCritical>

        return xReturn;
 8003126:	697b      	ldr	r3, [r7, #20]
    }
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000094 	.word	0x20000094
 8003134:	e000ed04 	.word	0xe000ed04

08003138 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003138:	b580      	push	{r7, lr}
 800313a:	b092      	sub	sp, #72	; 0x48
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003146:	2301      	movs	r3, #1
 8003148:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10a      	bne.n	8003166 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8003162:	bf00      	nop
 8003164:	e7fe      	b.n	8003164 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003182:	f000 fc03 	bl	800398c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	63bb      	str	r3, [r7, #56]	; 0x38

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800318a:	f3ef 8211 	mrs	r2, BASEPRI
 800318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	627a      	str	r2, [r7, #36]	; 0x24
 80031a0:	623b      	str	r3, [r7, #32]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80031a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d006      	beq.n	80031ba <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	3214      	adds	r2, #20
 80031b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80031ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4413      	add	r3, r2
 80031c0:	3354      	adds	r3, #84	; 0x54
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80031c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4413      	add	r3, r2
 80031ce:	3354      	adds	r3, #84	; 0x54
 80031d0:	2202      	movs	r2, #2
 80031d2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d83b      	bhi.n	8003252 <xTaskGenericNotifyFromISR+0x11a>
 80031da:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <xTaskGenericNotifyFromISR+0xa8>)
 80031dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e0:	08003271 	.word	0x08003271
 80031e4:	080031f5 	.word	0x080031f5
 80031e8:	08003211 	.word	0x08003211
 80031ec:	08003229 	.word	0x08003229
 80031f0:	08003237 	.word	0x08003237
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	3214      	adds	r2, #20
 80031fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	ea42 0103 	orr.w	r1, r2, r3
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	3214      	adds	r2, #20
 800320a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800320e:	e032      	b.n	8003276 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	3214      	adds	r2, #20
 8003216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321a:	1c59      	adds	r1, r3, #1
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	3214      	adds	r2, #20
 8003222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003226:	e026      	b.n	8003276 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	3214      	adds	r2, #20
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003234:	e01f      	b.n	8003276 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003236:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800323a:	2b02      	cmp	r3, #2
 800323c:	d006      	beq.n	800324c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800323e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	3214      	adds	r2, #20
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800324a:	e014      	b.n	8003276 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800324c:	2300      	movs	r3, #0
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8003250:	e011      	b.n	8003276 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003252:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <xTaskGenericNotifyFromISR+0x210>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00c      	beq.n	8003274 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	61fb      	str	r3, [r7, #28]
    }
 800326c:	bf00      	nop
 800326e:	e7fe      	b.n	800326e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003270:	bf00      	nop
 8003272:	e000      	b.n	8003276 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8003274:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	4618      	mov	r0, r3
 800327a:	f003 f9df 	bl	800663c <SEGGER_SYSVIEW_ShrinkId>
 800327e:	78f9      	ldrb	r1, [r7, #3]
 8003280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003282:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003284:	9201      	str	r2, [sp, #4]
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	460b      	mov	r3, r1
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4601      	mov	r1, r0
 800328e:	203f      	movs	r0, #63	; 0x3f
 8003290:	f002 fca0 	bl	8005bd4 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003294:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003298:	2b01      	cmp	r3, #1
 800329a:	d149      	bne.n	8003330 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800329c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	61bb      	str	r3, [r7, #24]
    }
 80032b6:	bf00      	nop
 80032b8:	e7fe      	b.n	80032b8 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ba:	4b24      	ldr	r3, [pc, #144]	; (800334c <xTaskGenericNotifyFromISR+0x214>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d120      	bne.n	8003304 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c4:	3304      	adds	r3, #4
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff f982 	bl	80025d0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80032cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ce:	4618      	mov	r0, r3
 80032d0:	f003 f912 	bl	80064f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	2201      	movs	r2, #1
 80032da:	409a      	lsls	r2, r3
 80032dc:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <xTaskGenericNotifyFromISR+0x218>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	4a1b      	ldr	r2, [pc, #108]	; (8003350 <xTaskGenericNotifyFromISR+0x218>)
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4a18      	ldr	r2, [pc, #96]	; (8003354 <xTaskGenericNotifyFromISR+0x21c>)
 80032f4:	441a      	add	r2, r3
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	3304      	adds	r3, #4
 80032fa:	4619      	mov	r1, r3
 80032fc:	4610      	mov	r0, r2
 80032fe:	f7ff f90a 	bl	8002516 <vListInsertEnd>
 8003302:	e005      	b.n	8003310 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	3318      	adds	r3, #24
 8003308:	4619      	mov	r1, r3
 800330a:	4813      	ldr	r0, [pc, #76]	; (8003358 <xTaskGenericNotifyFromISR+0x220>)
 800330c:	f7ff f903 	bl	8002516 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <xTaskGenericNotifyFromISR+0x224>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	429a      	cmp	r2, r3
 800331c:	d908      	bls.n	8003330 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800331e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800332a:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <xTaskGenericNotifyFromISR+0x228>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003332:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800333a:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800333c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800333e:	4618      	mov	r0, r3
 8003340:	3740      	adds	r7, #64	; 0x40
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000170 	.word	0x20000170
 800334c:	20000194 	.word	0x20000194
 8003350:	20000174 	.word	0x20000174
 8003354:	20000098 	.word	0x20000098
 8003358:	2000012c 	.word	0x2000012c
 800335c:	20000094 	.word	0x20000094
 8003360:	20000180 	.word	0x20000180

08003364 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800336e:	4b32      	ldr	r3, [pc, #200]	; (8003438 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003374:	4b31      	ldr	r3, [pc, #196]	; (800343c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3304      	adds	r3, #4
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff f928 	bl	80025d0 <uxListRemove>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003386:	4b2d      	ldr	r3, [pc, #180]	; (800343c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	2201      	movs	r2, #1
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43da      	mvns	r2, r3
 8003394:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4013      	ands	r3, r2
 800339a:	4a29      	ldr	r2, [pc, #164]	; (8003440 <prvAddCurrentTaskToDelayedList+0xdc>)
 800339c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033a4:	d110      	bne.n	80033c8 <prvAddCurrentTaskToDelayedList+0x64>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80033ac:	4b23      	ldr	r3, [pc, #140]	; (800343c <prvAddCurrentTaskToDelayedList+0xd8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	211b      	movs	r1, #27
 80033b2:	4618      	mov	r0, r3
 80033b4:	f003 f8e2 	bl	800657c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033b8:	4b20      	ldr	r3, [pc, #128]	; (800343c <prvAddCurrentTaskToDelayedList+0xd8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3304      	adds	r3, #4
 80033be:	4619      	mov	r1, r3
 80033c0:	4820      	ldr	r0, [pc, #128]	; (8003444 <prvAddCurrentTaskToDelayedList+0xe0>)
 80033c2:	f7ff f8a8 	bl	8002516 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80033c6:	e032      	b.n	800342e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <prvAddCurrentTaskToDelayedList+0xd8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d20f      	bcs.n	8003400 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80033e0:	4b16      	ldr	r3, [pc, #88]	; (800343c <prvAddCurrentTaskToDelayedList+0xd8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2104      	movs	r1, #4
 80033e6:	4618      	mov	r0, r3
 80033e8:	f003 f8c8 	bl	800657c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ec:	4b16      	ldr	r3, [pc, #88]	; (8003448 <prvAddCurrentTaskToDelayedList+0xe4>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <prvAddCurrentTaskToDelayedList+0xd8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3304      	adds	r3, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	4610      	mov	r0, r2
 80033fa:	f7ff f8b0 	bl	800255e <vListInsert>
}
 80033fe:	e016      	b.n	800342e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2104      	movs	r1, #4
 8003406:	4618      	mov	r0, r3
 8003408:	f003 f8b8 	bl	800657c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800340c:	4b0f      	ldr	r3, [pc, #60]	; (800344c <prvAddCurrentTaskToDelayedList+0xe8>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3304      	adds	r3, #4
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f7ff f8a0 	bl	800255e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800341e:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <prvAddCurrentTaskToDelayedList+0xec>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	429a      	cmp	r2, r3
 8003426:	d202      	bcs.n	800342e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003428:	4a09      	ldr	r2, [pc, #36]	; (8003450 <prvAddCurrentTaskToDelayedList+0xec>)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	6013      	str	r3, [r2, #0]
}
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000170 	.word	0x20000170
 800343c:	20000094 	.word	0x20000094
 8003440:	20000174 	.word	0x20000174
 8003444:	20000158 	.word	0x20000158
 8003448:	20000128 	.word	0x20000128
 800344c:	20000124 	.word	0x20000124
 8003450:	2000018c 	.word	0x2000018c

08003454 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3b04      	subs	r3, #4
 8003464:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800346c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3b04      	subs	r3, #4
 8003472:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f023 0201 	bic.w	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	3b04      	subs	r3, #4
 8003482:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003484:	4a0c      	ldr	r2, [pc, #48]	; (80034b8 <pxPortInitialiseStack+0x64>)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	3b14      	subs	r3, #20
 800348e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3b04      	subs	r3, #4
 800349a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f06f 0202 	mvn.w	r2, #2
 80034a2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3b20      	subs	r3, #32
 80034a8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80034aa:	68fb      	ldr	r3, [r7, #12]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	080034bd 	.word	0x080034bd

080034bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80034c6:	4b12      	ldr	r3, [pc, #72]	; (8003510 <prvTaskExitError+0x54>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ce:	d00a      	beq.n	80034e6 <prvTaskExitError+0x2a>
        __asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60fb      	str	r3, [r7, #12]
    }
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <prvTaskExitError+0x28>
        __asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	60bb      	str	r3, [r7, #8]
    }
 80034f8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80034fa:	bf00      	nop
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0fc      	beq.n	80034fc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	20000010 	.word	0x20000010
	...

08003520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <pxCurrentTCBConst2>)
 8003522:	6819      	ldr	r1, [r3, #0]
 8003524:	6808      	ldr	r0, [r1, #0]
 8003526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352a:	f380 8809 	msr	PSP, r0
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f04f 0000 	mov.w	r0, #0
 8003536:	f380 8811 	msr	BASEPRI, r0
 800353a:	4770      	bx	lr
 800353c:	f3af 8000 	nop.w

08003540 <pxCurrentTCBConst2>:
 8003540:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop

08003548 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003548:	4808      	ldr	r0, [pc, #32]	; (800356c <prvPortStartFirstTask+0x24>)
 800354a:	6800      	ldr	r0, [r0, #0]
 800354c:	6800      	ldr	r0, [r0, #0]
 800354e:	f380 8808 	msr	MSP, r0
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f380 8814 	msr	CONTROL, r0
 800355a:	b662      	cpsie	i
 800355c:	b661      	cpsie	f
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	df00      	svc	0
 8003568:	bf00      	nop
 800356a:	0000      	.short	0x0000
 800356c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003570:	bf00      	nop
 8003572:	bf00      	nop

08003574 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800357a:	4b46      	ldr	r3, [pc, #280]	; (8003694 <xPortStartScheduler+0x120>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a46      	ldr	r2, [pc, #280]	; (8003698 <xPortStartScheduler+0x124>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d10a      	bne.n	800359a <xPortStartScheduler+0x26>
        __asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	613b      	str	r3, [r7, #16]
    }
 8003596:	bf00      	nop
 8003598:	e7fe      	b.n	8003598 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800359a:	4b3e      	ldr	r3, [pc, #248]	; (8003694 <xPortStartScheduler+0x120>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a3f      	ldr	r2, [pc, #252]	; (800369c <xPortStartScheduler+0x128>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d10a      	bne.n	80035ba <xPortStartScheduler+0x46>
        __asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	60fb      	str	r3, [r7, #12]
    }
 80035b6:	bf00      	nop
 80035b8:	e7fe      	b.n	80035b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035ba:	4b39      	ldr	r3, [pc, #228]	; (80036a0 <xPortStartScheduler+0x12c>)
 80035bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	22ff      	movs	r2, #255	; 0xff
 80035ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <xPortStartScheduler+0x130>)
 80035e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035e2:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <xPortStartScheduler+0x134>)
 80035e4:	2207      	movs	r2, #7
 80035e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035e8:	e009      	b.n	80035fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80035ea:	4b2f      	ldr	r3, [pc, #188]	; (80036a8 <xPortStartScheduler+0x134>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	4a2d      	ldr	r2, [pc, #180]	; (80036a8 <xPortStartScheduler+0x134>)
 80035f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003606:	2b80      	cmp	r3, #128	; 0x80
 8003608:	d0ef      	beq.n	80035ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800360a:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <xPortStartScheduler+0x134>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f1c3 0307 	rsb	r3, r3, #7
 8003612:	2b04      	cmp	r3, #4
 8003614:	d00a      	beq.n	800362c <xPortStartScheduler+0xb8>
        __asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	60bb      	str	r3, [r7, #8]
    }
 8003628:	bf00      	nop
 800362a:	e7fe      	b.n	800362a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800362c:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <xPortStartScheduler+0x134>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <xPortStartScheduler+0x134>)
 8003634:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003636:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <xPortStartScheduler+0x134>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800363e:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <xPortStartScheduler+0x134>)
 8003640:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800364a:	4b18      	ldr	r3, [pc, #96]	; (80036ac <xPortStartScheduler+0x138>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a17      	ldr	r2, [pc, #92]	; (80036ac <xPortStartScheduler+0x138>)
 8003650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003654:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003656:	4b15      	ldr	r3, [pc, #84]	; (80036ac <xPortStartScheduler+0x138>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a14      	ldr	r2, [pc, #80]	; (80036ac <xPortStartScheduler+0x138>)
 800365c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003660:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003662:	f000 f963 	bl	800392c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <xPortStartScheduler+0x13c>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800366c:	f000 f982 	bl	8003974 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003670:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <xPortStartScheduler+0x140>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0f      	ldr	r2, [pc, #60]	; (80036b4 <xPortStartScheduler+0x140>)
 8003676:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800367a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800367c:	f7ff ff64 	bl	8003548 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003680:	f7ff fbb6 	bl	8002df0 <vTaskSwitchContext>
    prvTaskExitError();
 8003684:	f7ff ff1a 	bl	80034bc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	e000ed00 	.word	0xe000ed00
 8003698:	410fc271 	.word	0x410fc271
 800369c:	410fc270 	.word	0x410fc270
 80036a0:	e000e400 	.word	0xe000e400
 80036a4:	20000198 	.word	0x20000198
 80036a8:	2000019c 	.word	0x2000019c
 80036ac:	e000ed20 	.word	0xe000ed20
 80036b0:	20000010 	.word	0x20000010
 80036b4:	e000ef34 	.word	0xe000ef34

080036b8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80036be:	4b37      	ldr	r3, [pc, #220]	; (800379c <vInitPrioGroupValue+0xe4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a37      	ldr	r2, [pc, #220]	; (80037a0 <vInitPrioGroupValue+0xe8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d10a      	bne.n	80036de <vInitPrioGroupValue+0x26>
        __asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	613b      	str	r3, [r7, #16]
    }
 80036da:	bf00      	nop
 80036dc:	e7fe      	b.n	80036dc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80036de:	4b2f      	ldr	r3, [pc, #188]	; (800379c <vInitPrioGroupValue+0xe4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a30      	ldr	r2, [pc, #192]	; (80037a4 <vInitPrioGroupValue+0xec>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d10a      	bne.n	80036fe <vInitPrioGroupValue+0x46>
        __asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	60fb      	str	r3, [r7, #12]
    }
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036fe:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <vInitPrioGroupValue+0xf0>)
 8003700:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	22ff      	movs	r2, #255	; 0xff
 800370e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003720:	b2da      	uxtb	r2, r3
 8003722:	4b22      	ldr	r3, [pc, #136]	; (80037ac <vInitPrioGroupValue+0xf4>)
 8003724:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003726:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <vInitPrioGroupValue+0xf8>)
 8003728:	2207      	movs	r2, #7
 800372a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800372c:	e009      	b.n	8003742 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <vInitPrioGroupValue+0xf8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3b01      	subs	r3, #1
 8003734:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <vInitPrioGroupValue+0xf8>)
 8003736:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	b2db      	uxtb	r3, r3
 8003740:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	2b80      	cmp	r3, #128	; 0x80
 800374c:	d0ef      	beq.n	800372e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800374e:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <vInitPrioGroupValue+0xf8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f1c3 0307 	rsb	r3, r3, #7
 8003756:	2b04      	cmp	r3, #4
 8003758:	d00a      	beq.n	8003770 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	60bb      	str	r3, [r7, #8]
    }
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <vInitPrioGroupValue+0xf8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	4a0e      	ldr	r2, [pc, #56]	; (80037b0 <vInitPrioGroupValue+0xf8>)
 8003778:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <vInitPrioGroupValue+0xf8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003782:	4a0b      	ldr	r2, [pc, #44]	; (80037b0 <vInitPrioGroupValue+0xf8>)
 8003784:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	b2da      	uxtb	r2, r3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	e000ed00 	.word	0xe000ed00
 80037a0:	410fc271 	.word	0x410fc271
 80037a4:	410fc270 	.word	0x410fc270
 80037a8:	e000e400 	.word	0xe000e400
 80037ac:	20000198 	.word	0x20000198
 80037b0:	2000019c 	.word	0x2000019c

080037b4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
        __asm volatile
 80037ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	607b      	str	r3, [r7, #4]
    }
 80037cc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80037ce:	4b0f      	ldr	r3, [pc, #60]	; (800380c <vPortEnterCritical+0x58>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3301      	adds	r3, #1
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <vPortEnterCritical+0x58>)
 80037d6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <vPortEnterCritical+0x58>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d10f      	bne.n	8003800 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <vPortEnterCritical+0x5c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <vPortEnterCritical+0x4c>
        __asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	603b      	str	r3, [r7, #0]
    }
 80037fc:	bf00      	nop
 80037fe:	e7fe      	b.n	80037fe <vPortEnterCritical+0x4a>
    }
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	20000010 	.word	0x20000010
 8003810:	e000ed04 	.word	0xe000ed04

08003814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <vPortExitCritical+0x50>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <vPortExitCritical+0x24>
        __asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	607b      	str	r3, [r7, #4]
    }
 8003834:	bf00      	nop
 8003836:	e7fe      	b.n	8003836 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <vPortExitCritical+0x50>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3b01      	subs	r3, #1
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <vPortExitCritical+0x50>)
 8003840:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003842:	4b08      	ldr	r3, [pc, #32]	; (8003864 <vPortExitCritical+0x50>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d105      	bne.n	8003856 <vPortExitCritical+0x42>
 800384a:	2300      	movs	r3, #0
 800384c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	f383 8811 	msr	BASEPRI, r3
    }
 8003854:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000010 	.word	0x20000010
	...

08003870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003870:	f3ef 8009 	mrs	r0, PSP
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <pxCurrentTCBConst>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	f01e 0f10 	tst.w	lr, #16
 8003880:	bf08      	it	eq
 8003882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388a:	6010      	str	r0, [r2, #0]
 800388c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003894:	f380 8811 	msr	BASEPRI, r0
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f7ff faa6 	bl	8002df0 <vTaskSwitchContext>
 80038a4:	f04f 0000 	mov.w	r0, #0
 80038a8:	f380 8811 	msr	BASEPRI, r0
 80038ac:	bc09      	pop	{r0, r3}
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	6808      	ldr	r0, [r1, #0]
 80038b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b6:	f01e 0f10 	tst.w	lr, #16
 80038ba:	bf08      	it	eq
 80038bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038c0:	f380 8809 	msr	PSP, r0
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	f3af 8000 	nop.w

080038d0 <pxCurrentTCBConst>:
 80038d0:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop

080038d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
        __asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	607b      	str	r3, [r7, #4]
    }
 80038f0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80038f2:	f002 fce7 	bl	80062c4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80038f6:	f7ff f9bf 	bl	8002c78 <xTaskIncrementTick>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d006      	beq.n	800390e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003900:	f002 fd3e 	bl	8006380 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <SysTick_Handler+0x50>)
 8003906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	e001      	b.n	8003912 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800390e:	f002 fd1b 	bl	8006348 <SEGGER_SYSVIEW_RecordExitISR>
 8003912:	2300      	movs	r3, #0
 8003914:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	f383 8811 	msr	BASEPRI, r3
    }
 800391c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <vPortSetupTimerInterrupt+0x34>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <vPortSetupTimerInterrupt+0x38>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <vPortSetupTimerInterrupt+0x3c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0a      	ldr	r2, [pc, #40]	; (800396c <vPortSetupTimerInterrupt+0x40>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	099b      	lsrs	r3, r3, #6
 8003948:	4a09      	ldr	r2, [pc, #36]	; (8003970 <vPortSetupTimerInterrupt+0x44>)
 800394a:	3b01      	subs	r3, #1
 800394c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800394e:	4b04      	ldr	r3, [pc, #16]	; (8003960 <vPortSetupTimerInterrupt+0x34>)
 8003950:	2207      	movs	r2, #7
 8003952:	601a      	str	r2, [r3, #0]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	e000e010 	.word	0xe000e010
 8003964:	e000e018 	.word	0xe000e018
 8003968:	20000000 	.word	0x20000000
 800396c:	10624dd3 	.word	0x10624dd3
 8003970:	e000e014 	.word	0xe000e014

08003974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003984 <vPortEnableVFP+0x10>
 8003978:	6801      	ldr	r1, [r0, #0]
 800397a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800397e:	6001      	str	r1, [r0, #0]
 8003980:	4770      	bx	lr
 8003982:	0000      	.short	0x0000
 8003984:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop

0800398c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003992:	f3ef 8305 	mrs	r3, IPSR
 8003996:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b0f      	cmp	r3, #15
 800399c:	d914      	bls.n	80039c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800399e:	4a17      	ldr	r2, [pc, #92]	; (80039fc <vPortValidateInterruptPriority+0x70>)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80039a8:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <vPortValidateInterruptPriority+0x74>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	7afa      	ldrb	r2, [r7, #11]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d20a      	bcs.n	80039c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	607b      	str	r3, [r7, #4]
    }
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <vPortValidateInterruptPriority+0x78>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <vPortValidateInterruptPriority+0x7c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d90a      	bls.n	80039ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	603b      	str	r3, [r7, #0]
    }
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <vPortValidateInterruptPriority+0x60>
    }
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000e3f0 	.word	0xe000e3f0
 8003a00:	20000198 	.word	0x20000198
 8003a04:	e000ed0c 	.word	0xe000ed0c
 8003a08:	2000019c 	.word	0x2000019c

08003a0c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	; 0x28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003a18:	f7ff f86e 	bl	8002af8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003a1c:	4b65      	ldr	r3, [pc, #404]	; (8003bb4 <pvPortMalloc+0x1a8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003a24:	f000 f934 	bl	8003c90 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a28:	4b63      	ldr	r3, [pc, #396]	; (8003bb8 <pvPortMalloc+0x1ac>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f040 80a7 	bne.w	8003b84 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d02d      	beq.n	8003a98 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d227      	bcs.n	8003a98 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003a48:	2208      	movs	r2, #8
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d021      	beq.n	8003a9e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f023 0307 	bic.w	r3, r3, #7
 8003a60:	3308      	adds	r3, #8
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d214      	bcs.n	8003a92 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f023 0307 	bic.w	r3, r3, #7
 8003a6e:	3308      	adds	r3, #8
 8003a70:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d010      	beq.n	8003a9e <pvPortMalloc+0x92>
        __asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	617b      	str	r3, [r7, #20]
    }
 8003a8e:	bf00      	nop
 8003a90:	e7fe      	b.n	8003a90 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a96:	e002      	b.n	8003a9e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	e000      	b.n	8003aa0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a9e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d06e      	beq.n	8003b84 <pvPortMalloc+0x178>
 8003aa6:	4b45      	ldr	r3, [pc, #276]	; (8003bbc <pvPortMalloc+0x1b0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d869      	bhi.n	8003b84 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003ab0:	4b43      	ldr	r3, [pc, #268]	; (8003bc0 <pvPortMalloc+0x1b4>)
 8003ab2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003ab4:	4b42      	ldr	r3, [pc, #264]	; (8003bc0 <pvPortMalloc+0x1b4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003aba:	e004      	b.n	8003ac6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d903      	bls.n	8003ad8 <pvPortMalloc+0xcc>
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f1      	bne.n	8003abc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003ad8:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <pvPortMalloc+0x1a8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d050      	beq.n	8003b84 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	4413      	add	r3, r2
 8003aea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	1ad2      	subs	r2, r2, r3
 8003afc:	2308      	movs	r3, #8
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d91f      	bls.n	8003b44 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <pvPortMalloc+0x120>
        __asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	613b      	str	r3, [r7, #16]
    }
 8003b28:	bf00      	nop
 8003b2a:	e7fe      	b.n	8003b2a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	1ad2      	subs	r2, r2, r3
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b3e:	69b8      	ldr	r0, [r7, #24]
 8003b40:	f000 f908 	bl	8003d54 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b44:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <pvPortMalloc+0x1b0>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <pvPortMalloc+0x1b0>)
 8003b50:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b52:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <pvPortMalloc+0x1b0>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <pvPortMalloc+0x1b8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d203      	bcs.n	8003b66 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b5e:	4b17      	ldr	r3, [pc, #92]	; (8003bbc <pvPortMalloc+0x1b0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a18      	ldr	r2, [pc, #96]	; (8003bc4 <pvPortMalloc+0x1b8>)
 8003b64:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <pvPortMalloc+0x1ac>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003b7a:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <pvPortMalloc+0x1bc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	4a11      	ldr	r2, [pc, #68]	; (8003bc8 <pvPortMalloc+0x1bc>)
 8003b82:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003b84:	f7fe ffc6 	bl	8002b14 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <pvPortMalloc+0x19c>
        __asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	60fb      	str	r3, [r7, #12]
    }
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <pvPortMalloc+0x19a>
    return pvReturn;
 8003ba8:	69fb      	ldr	r3, [r7, #28]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3728      	adds	r7, #40	; 0x28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200191a8 	.word	0x200191a8
 8003bb8:	200191bc 	.word	0x200191bc
 8003bbc:	200191ac 	.word	0x200191ac
 8003bc0:	200191a0 	.word	0x200191a0
 8003bc4:	200191b0 	.word	0x200191b0
 8003bc8:	200191b4 	.word	0x200191b4

08003bcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04d      	beq.n	8003c7a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003bde:	2308      	movs	r3, #8
 8003be0:	425b      	negs	r3, r3
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4413      	add	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	4b24      	ldr	r3, [pc, #144]	; (8003c84 <vPortFree+0xb8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <vPortFree+0x44>
        __asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	60fb      	str	r3, [r7, #12]
    }
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <vPortFree+0x62>
        __asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	60bb      	str	r3, [r7, #8]
    }
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <vPortFree+0xb8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01e      	beq.n	8003c7a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d11a      	bne.n	8003c7a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <vPortFree+0xb8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	401a      	ands	r2, r3
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003c54:	f7fe ff50 	bl	8002af8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <vPortFree+0xbc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4413      	add	r3, r2
 8003c62:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <vPortFree+0xbc>)
 8003c64:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c66:	6938      	ldr	r0, [r7, #16]
 8003c68:	f000 f874 	bl	8003d54 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <vPortFree+0xc0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	4a06      	ldr	r2, [pc, #24]	; (8003c8c <vPortFree+0xc0>)
 8003c74:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003c76:	f7fe ff4d 	bl	8002b14 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003c7a:	bf00      	nop
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	200191bc 	.word	0x200191bc
 8003c88:	200191ac 	.word	0x200191ac
 8003c8c:	200191b8 	.word	0x200191b8

08003c90 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c96:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8003c9a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003c9c:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <prvHeapInit+0xac>)
 8003c9e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00c      	beq.n	8003cc4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3307      	adds	r3, #7
 8003cae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0307 	bic.w	r3, r3, #7
 8003cb6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <prvHeapInit+0xac>)
 8003cc0:	4413      	add	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003cc8:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <prvHeapInit+0xb0>)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003cce:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <prvHeapInit+0xb0>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	4413      	add	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003cdc:	2208      	movs	r2, #8
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0307 	bic.w	r3, r3, #7
 8003cea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <prvHeapInit+0xb4>)
 8003cf0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003cf2:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <prvHeapInit+0xb4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <prvHeapInit+0xb4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	1ad2      	subs	r2, r2, r3
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <prvHeapInit+0xb4>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <prvHeapInit+0xb8>)
 8003d1e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <prvHeapInit+0xbc>)
 8003d26:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <prvHeapInit+0xc0>)
 8003d2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d2e:	601a      	str	r2, [r3, #0]
}
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	200001a0 	.word	0x200001a0
 8003d40:	200191a0 	.word	0x200191a0
 8003d44:	200191a8 	.word	0x200191a8
 8003d48:	200191b0 	.word	0x200191b0
 8003d4c:	200191ac 	.word	0x200191ac
 8003d50:	200191bc 	.word	0x200191bc

08003d54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d5c:	4b28      	ldr	r3, [pc, #160]	; (8003e00 <prvInsertBlockIntoFreeList+0xac>)
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e002      	b.n	8003d68 <prvInsertBlockIntoFreeList+0x14>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d8f7      	bhi.n	8003d62 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d108      	bne.n	8003d96 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	441a      	add	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	441a      	add	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d118      	bne.n	8003ddc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <prvInsertBlockIntoFreeList+0xb0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d00d      	beq.n	8003dd2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	441a      	add	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e008      	b.n	8003de4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <prvInsertBlockIntoFreeList+0xb0>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e003      	b.n	8003de4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d002      	beq.n	8003df2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	200191a0 	.word	0x200191a0
 8003e04:	200191a8 	.word	0x200191a8

08003e08 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003e0c:	4803      	ldr	r0, [pc, #12]	; (8003e1c <_cbSendSystemDesc+0x14>)
 8003e0e:	f002 fa03 	bl	8006218 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003e12:	4803      	ldr	r0, [pc, #12]	; (8003e20 <_cbSendSystemDesc+0x18>)
 8003e14:	f002 fa00 	bl	8006218 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003e18:	bf00      	nop
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	08006b44 	.word	0x08006b44
 8003e20:	08006b7c 	.word	0x08006b7c

08003e24 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <SEGGER_SYSVIEW_Conf+0x20>)
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <SEGGER_SYSVIEW_Conf+0x20>)
 8003e2e:	6819      	ldr	r1, [r3, #0]
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <SEGGER_SYSVIEW_Conf+0x24>)
 8003e32:	4a06      	ldr	r2, [pc, #24]	; (8003e4c <SEGGER_SYSVIEW_Conf+0x28>)
 8003e34:	f001 fd34 	bl	80058a0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003e38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003e3c:	f001 fd74 	bl	8005928 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003e40:	bf00      	nop
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20000000 	.word	0x20000000
 8003e48:	08003e09 	.word	0x08003e09
 8003e4c:	08006c18 	.word	0x08006c18

08003e50 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003e56:	2300      	movs	r3, #0
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	e033      	b.n	8003ec4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003e5c:	491e      	ldr	r1, [pc, #120]	; (8003ed8 <_cbSendTaskList+0x88>)
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	491a      	ldr	r1, [pc, #104]	; (8003ed8 <_cbSendTaskList+0x88>)
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	6819      	ldr	r1, [r3, #0]
 8003e7e:	4c16      	ldr	r4, [pc, #88]	; (8003ed8 <_cbSendTaskList+0x88>)
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4423      	add	r3, r4
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	681c      	ldr	r4, [r3, #0]
 8003e90:	4d11      	ldr	r5, [pc, #68]	; (8003ed8 <_cbSendTaskList+0x88>)
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	442b      	add	r3, r5
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	681d      	ldr	r5, [r3, #0]
 8003ea2:	4e0d      	ldr	r6, [pc, #52]	; (8003ed8 <_cbSendTaskList+0x88>)
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4433      	add	r3, r6
 8003eb0:	3310      	adds	r3, #16
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	462b      	mov	r3, r5
 8003eb8:	4622      	mov	r2, r4
 8003eba:	f000 f979 	bl	80041b0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	607b      	str	r3, [r7, #4]
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <_cbSendTaskList+0x8c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d3c6      	bcc.n	8003e5c <_cbSendTaskList+0xc>
  }
}
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed8:	200191c0 	.word	0x200191c0
 8003edc:	20019260 	.word	0x20019260

08003ee0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003ee8:	f7fe feb4 	bl	8002c54 <xTaskGetTickCountFromISR>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2200      	movs	r2, #0
 8003ef0:	469a      	mov	sl, r3
 8003ef2:	4693      	mov	fp, r2
 8003ef4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003ef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	f04f 0a00 	mov.w	sl, #0
 8003f04:	f04f 0b00 	mov.w	fp, #0
 8003f08:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003f0c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003f10:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003f14:	4652      	mov	r2, sl
 8003f16:	465b      	mov	r3, fp
 8003f18:	1a14      	subs	r4, r2, r0
 8003f1a:	eb63 0501 	sbc.w	r5, r3, r1
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	00ab      	lsls	r3, r5, #2
 8003f28:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003f2c:	00a2      	lsls	r2, r4, #2
 8003f2e:	4614      	mov	r4, r2
 8003f30:	461d      	mov	r5, r3
 8003f32:	eb14 0800 	adds.w	r8, r4, r0
 8003f36:	eb45 0901 	adc.w	r9, r5, r1
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f4e:	4690      	mov	r8, r2
 8003f50:	4699      	mov	r9, r3
 8003f52:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003f56:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003f68 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003f76:	2205      	movs	r2, #5
 8003f78:	492b      	ldr	r1, [pc, #172]	; (8004028 <SYSVIEW_AddTask+0xc0>)
 8003f7a:	68b8      	ldr	r0, [r7, #8]
 8003f7c:	f002 fd16 	bl	80069ac <memcmp>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d04b      	beq.n	800401e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003f86:	4b29      	ldr	r3, [pc, #164]	; (800402c <SYSVIEW_AddTask+0xc4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b07      	cmp	r3, #7
 8003f8c:	d903      	bls.n	8003f96 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003f8e:	4828      	ldr	r0, [pc, #160]	; (8004030 <SYSVIEW_AddTask+0xc8>)
 8003f90:	f002 fc5e 	bl	8006850 <SEGGER_SYSVIEW_Warn>
    return;
 8003f94:	e044      	b.n	8004020 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003f96:	4b25      	ldr	r3, [pc, #148]	; (800402c <SYSVIEW_AddTask+0xc4>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4926      	ldr	r1, [pc, #152]	; (8004034 <SYSVIEW_AddTask+0xcc>)
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <SYSVIEW_AddTask+0xc4>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4921      	ldr	r1, [pc, #132]	; (8004034 <SYSVIEW_AddTask+0xcc>)
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	3304      	adds	r3, #4
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	; (800402c <SYSVIEW_AddTask+0xc4>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	491b      	ldr	r1, [pc, #108]	; (8004034 <SYSVIEW_AddTask+0xcc>)
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003fd6:	4b15      	ldr	r3, [pc, #84]	; (800402c <SYSVIEW_AddTask+0xc4>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4916      	ldr	r1, [pc, #88]	; (8004034 <SYSVIEW_AddTask+0xcc>)
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003fec:	4b0f      	ldr	r3, [pc, #60]	; (800402c <SYSVIEW_AddTask+0xc4>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4910      	ldr	r1, [pc, #64]	; (8004034 <SYSVIEW_AddTask+0xcc>)
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3310      	adds	r3, #16
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004002:	4b0a      	ldr	r3, [pc, #40]	; (800402c <SYSVIEW_AddTask+0xc4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3301      	adds	r3, #1
 8004008:	4a08      	ldr	r2, [pc, #32]	; (800402c <SYSVIEW_AddTask+0xc4>)
 800400a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f8ca 	bl	80041b0 <SYSVIEW_SendTaskInfo>
 800401c:	e000      	b.n	8004020 <SYSVIEW_AddTask+0xb8>
    return;
 800401e:	bf00      	nop

}
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	08006b8c 	.word	0x08006b8c
 800402c:	20019260 	.word	0x20019260
 8004030:	08006b94 	.word	0x08006b94
 8004034:	200191c0 	.word	0x200191c0

08004038 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004040:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <SYSVIEW_DeleteTask+0x170>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80ab 	beq.w	80041a0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	e00d      	b.n	800406c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004050:	4956      	ldr	r1, [pc, #344]	; (80041ac <SYSVIEW_DeleteTask+0x174>)
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	429a      	cmp	r2, r3
 8004064:	d008      	beq.n	8004078 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3301      	adds	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	4b4e      	ldr	r3, [pc, #312]	; (80041a8 <SYSVIEW_DeleteTask+0x170>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	429a      	cmp	r2, r3
 8004074:	d3ec      	bcc.n	8004050 <SYSVIEW_DeleteTask+0x18>
 8004076:	e000      	b.n	800407a <SYSVIEW_DeleteTask+0x42>
      break;
 8004078:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800407a:	4b4b      	ldr	r3, [pc, #300]	; (80041a8 <SYSVIEW_DeleteTask+0x170>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3b01      	subs	r3, #1
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	429a      	cmp	r2, r3
 8004084:	d111      	bne.n	80040aa <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4a46      	ldr	r2, [pc, #280]	; (80041ac <SYSVIEW_DeleteTask+0x174>)
 8004092:	4413      	add	r3, r2
 8004094:	2214      	movs	r2, #20
 8004096:	2100      	movs	r1, #0
 8004098:	4618      	mov	r0, r3
 800409a:	f002 fca5 	bl	80069e8 <memset>
    _NumTasks--;
 800409e:	4b42      	ldr	r3, [pc, #264]	; (80041a8 <SYSVIEW_DeleteTask+0x170>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	4a40      	ldr	r2, [pc, #256]	; (80041a8 <SYSVIEW_DeleteTask+0x170>)
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	e07b      	b.n	80041a2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80040aa:	4b3f      	ldr	r3, [pc, #252]	; (80041a8 <SYSVIEW_DeleteTask+0x170>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d276      	bcs.n	80041a2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80040b4:	4b3c      	ldr	r3, [pc, #240]	; (80041a8 <SYSVIEW_DeleteTask+0x170>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	1e5a      	subs	r2, r3, #1
 80040ba:	493c      	ldr	r1, [pc, #240]	; (80041ac <SYSVIEW_DeleteTask+0x174>)
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	6819      	ldr	r1, [r3, #0]
 80040c8:	4838      	ldr	r0, [pc, #224]	; (80041ac <SYSVIEW_DeleteTask+0x174>)
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4403      	add	r3, r0
 80040d6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80040d8:	4b33      	ldr	r3, [pc, #204]	; (80041a8 <SYSVIEW_DeleteTask+0x170>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	1e5a      	subs	r2, r3, #1
 80040de:	4933      	ldr	r1, [pc, #204]	; (80041ac <SYSVIEW_DeleteTask+0x174>)
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	3304      	adds	r3, #4
 80040ec:	6819      	ldr	r1, [r3, #0]
 80040ee:	482f      	ldr	r0, [pc, #188]	; (80041ac <SYSVIEW_DeleteTask+0x174>)
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4403      	add	r3, r0
 80040fc:	3304      	adds	r3, #4
 80040fe:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004100:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <SYSVIEW_DeleteTask+0x170>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	1e5a      	subs	r2, r3, #1
 8004106:	4929      	ldr	r1, [pc, #164]	; (80041ac <SYSVIEW_DeleteTask+0x174>)
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	3308      	adds	r3, #8
 8004114:	6819      	ldr	r1, [r3, #0]
 8004116:	4825      	ldr	r0, [pc, #148]	; (80041ac <SYSVIEW_DeleteTask+0x174>)
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4403      	add	r3, r0
 8004124:	3308      	adds	r3, #8
 8004126:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004128:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <SYSVIEW_DeleteTask+0x170>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	1e5a      	subs	r2, r3, #1
 800412e:	491f      	ldr	r1, [pc, #124]	; (80041ac <SYSVIEW_DeleteTask+0x174>)
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	330c      	adds	r3, #12
 800413c:	6819      	ldr	r1, [r3, #0]
 800413e:	481b      	ldr	r0, [pc, #108]	; (80041ac <SYSVIEW_DeleteTask+0x174>)
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4403      	add	r3, r0
 800414c:	330c      	adds	r3, #12
 800414e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004150:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <SYSVIEW_DeleteTask+0x170>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	1e5a      	subs	r2, r3, #1
 8004156:	4915      	ldr	r1, [pc, #84]	; (80041ac <SYSVIEW_DeleteTask+0x174>)
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	3310      	adds	r3, #16
 8004164:	6819      	ldr	r1, [r3, #0]
 8004166:	4811      	ldr	r0, [pc, #68]	; (80041ac <SYSVIEW_DeleteTask+0x174>)
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4403      	add	r3, r0
 8004174:	3310      	adds	r3, #16
 8004176:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <SYSVIEW_DeleteTask+0x170>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	1e5a      	subs	r2, r3, #1
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4a09      	ldr	r2, [pc, #36]	; (80041ac <SYSVIEW_DeleteTask+0x174>)
 8004188:	4413      	add	r3, r2
 800418a:	2214      	movs	r2, #20
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f002 fc2a 	bl	80069e8 <memset>
    _NumTasks--;
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <SYSVIEW_DeleteTask+0x170>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3b01      	subs	r3, #1
 800419a:	4a03      	ldr	r2, [pc, #12]	; (80041a8 <SYSVIEW_DeleteTask+0x170>)
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e000      	b.n	80041a2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80041a0:	bf00      	nop
  }
}
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20019260 	.word	0x20019260
 80041ac:	200191c0 	.word	0x200191c0

080041b0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08a      	sub	sp, #40	; 0x28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80041be:	f107 0314 	add.w	r3, r7, #20
 80041c2:	2214      	movs	r2, #20
 80041c4:	2100      	movs	r1, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f002 fc0e 	bl	80069e8 <memset>
  TaskInfo.TaskID     = TaskID;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80041e0:	f107 0314 	add.w	r3, r7, #20
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 ff1f 	bl	8006028 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80041ea:	bf00      	nop
 80041ec:	3728      	adds	r7, #40	; 0x28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <__NVIC_EnableIRQ>:
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	2b00      	cmp	r3, #0
 8004204:	db0b      	blt.n	800421e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	f003 021f 	and.w	r2, r3, #31
 800420c:	4907      	ldr	r1, [pc, #28]	; (800422c <__NVIC_EnableIRQ+0x38>)
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	2001      	movs	r0, #1
 8004216:	fa00 f202 	lsl.w	r2, r0, r2
 800421a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	e000e100 	.word	0xe000e100

08004230 <__NVIC_SetPriority>:
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	6039      	str	r1, [r7, #0]
 800423a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004240:	2b00      	cmp	r3, #0
 8004242:	db0a      	blt.n	800425a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	490c      	ldr	r1, [pc, #48]	; (800427c <__NVIC_SetPriority+0x4c>)
 800424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424e:	0112      	lsls	r2, r2, #4
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	440b      	add	r3, r1
 8004254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004258:	e00a      	b.n	8004270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	4908      	ldr	r1, [pc, #32]	; (8004280 <__NVIC_SetPriority+0x50>)
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	3b04      	subs	r3, #4
 8004268:	0112      	lsls	r2, r2, #4
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	440b      	add	r3, r1
 800426e:	761a      	strb	r2, [r3, #24]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	e000e100 	.word	0xe000e100
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800428a:	f002 fb3d 	bl	8006908 <SEGGER_SYSVIEW_IsStarted>
 800428e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004296:	f001 fd4b 	bl	8005d30 <SEGGER_SYSVIEW_Start>
  }
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <_cbOnUARTRx+0x3c>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d806      	bhi.n	80042c4 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <_cbOnUARTRx+0x3c>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	3301      	adds	r3, #1
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <_cbOnUARTRx+0x3c>)
 80042c0:	701a      	strb	r2, [r3, #0]
    goto Done;
 80042c2:	e009      	b.n	80042d8 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80042c4:	f7ff ffde 	bl	8004284 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <_cbOnUARTRx+0x3c>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4618      	mov	r0, r3
 80042ce:	1dfb      	adds	r3, r7, #7
 80042d0:	2201      	movs	r2, #1
 80042d2:	4619      	mov	r1, r3
 80042d4:	f000 fb9c 	bl	8004a10 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80042d8:	bf00      	nop
}
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000014 	.word	0x20000014

080042e4 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80042ec:	4b14      	ldr	r3, [pc, #80]	; (8004340 <_cbOnUARTTx+0x5c>)
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d80f      	bhi.n	8004314 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80042f4:	4b12      	ldr	r3, [pc, #72]	; (8004340 <_cbOnUARTTx+0x5c>)
 80042f6:	785b      	ldrb	r3, [r3, #1]
 80042f8:	461a      	mov	r2, r3
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <_cbOnUARTTx+0x60>)
 80042fc:	5c9a      	ldrb	r2, [r3, r2]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004302:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <_cbOnUARTTx+0x5c>)
 8004304:	785b      	ldrb	r3, [r3, #1]
 8004306:	3301      	adds	r3, #1
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <_cbOnUARTTx+0x5c>)
 800430c:	705a      	strb	r2, [r3, #1]
    r = 1;
 800430e:	2301      	movs	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004312:	e00f      	b.n	8004334 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004314:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <_cbOnUARTTx+0x5c>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fa1b 	bl	8004758 <SEGGER_RTT_ReadUpBufferNoLock>
 8004322:	4603      	mov	r3, r0
 8004324:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	da02      	bge.n	8004332 <_cbOnUARTTx+0x4e>
    r = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e000      	b.n	8004334 <_cbOnUARTTx+0x50>
  }
Done:
 8004332:	bf00      	nop
  return r;
 8004334:	68fb      	ldr	r3, [r7, #12]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000014 	.word	0x20000014
 8004344:	08006c20 	.word	0x08006c20

08004348 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004350:	4a04      	ldr	r2, [pc, #16]	; (8004364 <SEGGER_UART_init+0x1c>)
 8004352:	4905      	ldr	r1, [pc, #20]	; (8004368 <SEGGER_UART_init+0x20>)
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f863 	bl	8004420 <HIF_UART_Init>
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	080042a5 	.word	0x080042a5
 8004368:	080042e5 	.word	0x080042e5

0800436c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004372:	4b1e      	ldr	r3, [pc, #120]	; (80043ec <USART2_IRQHandler+0x80>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d011      	beq.n	80043a6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004382:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <USART2_IRQHandler+0x84>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f003 030b 	and.w	r3, r3, #11
 8004390:	2b00      	cmp	r3, #0
 8004392:	d108      	bne.n	80043a6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004394:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <USART2_IRQHandler+0x88>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800439c:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <USART2_IRQHandler+0x88>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	79fa      	ldrb	r2, [r7, #7]
 80043a2:	4610      	mov	r0, r2
 80043a4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01a      	beq.n	80043e6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80043b0:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <USART2_IRQHandler+0x8c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d015      	beq.n	80043e4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80043b8:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <USART2_IRQHandler+0x8c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	1dfa      	adds	r2, r7, #7
 80043be:	4610      	mov	r0, r2
 80043c0:	4798      	blx	r3
 80043c2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80043ca:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <USART2_IRQHandler+0x90>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a0b      	ldr	r2, [pc, #44]	; (80043fc <USART2_IRQHandler+0x90>)
 80043d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e006      	b.n	80043e6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80043d8:	4b04      	ldr	r3, [pc, #16]	; (80043ec <USART2_IRQHandler+0x80>)
 80043da:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80043dc:	79fa      	ldrb	r2, [r7, #7]
 80043de:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <USART2_IRQHandler+0x84>)
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	e000      	b.n	80043e6 <USART2_IRQHandler+0x7a>
      return;
 80043e4:	bf00      	nop
    }
  }
}
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40004400 	.word	0x40004400
 80043f0:	40004404 	.word	0x40004404
 80043f4:	20019264 	.word	0x20019264
 80043f8:	20019268 	.word	0x20019268
 80043fc:	4000440c 	.word	0x4000440c

08004400 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a04      	ldr	r2, [pc, #16]	; (800441c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800440a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440e:	6013      	str	r3, [r2, #0]
}
 8004410:	bf00      	nop
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	4000440c 	.word	0x4000440c

08004420 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 800442c:	4b2e      	ldr	r3, [pc, #184]	; (80044e8 <HIF_UART_Init+0xc8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a2d      	ldr	r2, [pc, #180]	; (80044e8 <HIF_UART_Init+0xc8>)
 8004432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004436:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004438:	4b2c      	ldr	r3, [pc, #176]	; (80044ec <HIF_UART_Init+0xcc>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2b      	ldr	r2, [pc, #172]	; (80044ec <HIF_UART_Init+0xcc>)
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004444:	4b2a      	ldr	r3, [pc, #168]	; (80044f0 <HIF_UART_Init+0xd0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004450:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004458:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800445a:	4a25      	ldr	r2, [pc, #148]	; (80044f0 <HIF_UART_Init+0xd0>)
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004460:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <HIF_UART_Init+0xd4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800446c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004474:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004476:	4a1f      	ldr	r2, [pc, #124]	; (80044f4 <HIF_UART_Init+0xd4>)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800447c:	4b1e      	ldr	r3, [pc, #120]	; (80044f8 <HIF_UART_Init+0xd8>)
 800447e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004482:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004484:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <HIF_UART_Init+0xdc>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800448a:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <HIF_UART_Init+0xe0>)
 800448c:	2280      	movs	r2, #128	; 0x80
 800448e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004496:	4a1b      	ldr	r2, [pc, #108]	; (8004504 <HIF_UART_Init+0xe4>)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	fbb2 f3f3 	udiv	r3, r2, r3
 800449e:	3301      	adds	r3, #1
 80044a0:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	085b      	lsrs	r3, r3, #1
 80044a6:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ae:	d302      	bcc.n	80044b6 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80044b0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80044b4:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	4a11      	ldr	r2, [pc, #68]	; (8004508 <HIF_UART_Init+0xe8>)
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80044c6:	4a11      	ldr	r2, [pc, #68]	; (800450c <HIF_UART_Init+0xec>)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80044cc:	4a10      	ldr	r2, [pc, #64]	; (8004510 <HIF_UART_Init+0xf0>)
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80044d2:	2106      	movs	r1, #6
 80044d4:	2026      	movs	r0, #38	; 0x26
 80044d6:	f7ff feab 	bl	8004230 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80044da:	2026      	movs	r0, #38	; 0x26
 80044dc:	f7ff fe8a 	bl	80041f4 <__NVIC_EnableIRQ>
}
 80044e0:	bf00      	nop
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40023840 	.word	0x40023840
 80044ec:	40023830 	.word	0x40023830
 80044f0:	40020020 	.word	0x40020020
 80044f4:	40020000 	.word	0x40020000
 80044f8:	4000440c 	.word	0x4000440c
 80044fc:	40004410 	.word	0x40004410
 8004500:	40004414 	.word	0x40004414
 8004504:	055d4a80 	.word	0x055d4a80
 8004508:	40004408 	.word	0x40004408
 800450c:	20019264 	.word	0x20019264
 8004510:	20019268 	.word	0x20019268

08004514 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800451a:	4b26      	ldr	r3, [pc, #152]	; (80045b4 <_DoInit+0xa0>)
 800451c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800451e:	22a8      	movs	r2, #168	; 0xa8
 8004520:	2100      	movs	r1, #0
 8004522:	6838      	ldr	r0, [r7, #0]
 8004524:	f002 fa60 	bl	80069e8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2203      	movs	r2, #3
 800452c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2203      	movs	r2, #3
 8004532:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	4a20      	ldr	r2, [pc, #128]	; (80045b8 <_DoInit+0xa4>)
 8004538:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	4a1f      	ldr	r2, [pc, #124]	; (80045bc <_DoInit+0xa8>)
 800453e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004546:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2200      	movs	r2, #0
 800454c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2200      	movs	r2, #0
 8004552:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2200      	movs	r2, #0
 8004558:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <_DoInit+0xa4>)
 800455e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	4a17      	ldr	r2, [pc, #92]	; (80045c0 <_DoInit+0xac>)
 8004564:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2210      	movs	r2, #16
 800456a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2200      	movs	r2, #0
 8004570:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2200      	movs	r2, #0
 8004576:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2200      	movs	r2, #0
 800457c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800457e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004582:	2300      	movs	r3, #0
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	e00c      	b.n	80045a2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f1c3 030f 	rsb	r3, r3, #15
 800458e:	4a0d      	ldr	r2, [pc, #52]	; (80045c4 <_DoInit+0xb0>)
 8004590:	5cd1      	ldrb	r1, [r2, r3]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4413      	add	r3, r2
 8004598:	460a      	mov	r2, r1
 800459a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3301      	adds	r3, #1
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b0f      	cmp	r3, #15
 80045a6:	d9ef      	bls.n	8004588 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80045a8:	f3bf 8f5f 	dmb	sy
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	2001926c 	.word	0x2001926c
 80045b8:	08006be4 	.word	0x08006be4
 80045bc:	20019314 	.word	0x20019314
 80045c0:	20019714 	.word	0x20019714
 80045c4:	08006c24 	.word	0x08006c24

080045c8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	; 0x28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80045d4:	2300      	movs	r3, #0
 80045d6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d905      	bls.n	80045f8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
 80045f6:	e007      	b.n	8004608 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	69b9      	ldr	r1, [r7, #24]
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	1acb      	subs	r3, r1, r3
 8004602:	4413      	add	r3, r2
 8004604:	3b01      	subs	r3, #1
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004612:	4293      	cmp	r3, r2
 8004614:	bf28      	it	cs
 8004616:	4613      	movcs	r3, r2
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800461a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4293      	cmp	r3, r2
 8004620:	bf28      	it	cs
 8004622:	4613      	movcs	r3, r2
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	6978      	ldr	r0, [r7, #20]
 8004636:	f002 f9c9 	bl	80069cc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800463a:	6a3a      	ldr	r2, [r7, #32]
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	4413      	add	r3, r2
 8004640:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	4413      	add	r3, r2
 8004648:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	4413      	add	r3, r2
 8004658:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	429a      	cmp	r2, r3
 8004662:	d101      	bne.n	8004668 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004664:	2300      	movs	r3, #0
 8004666:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004668:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1b2      	bne.n	80045de <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004678:	6a3b      	ldr	r3, [r7, #32]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3728      	adds	r7, #40	; 0x28
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d911      	bls.n	80046ca <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	4413      	add	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	6938      	ldr	r0, [r7, #16]
 80046b6:	f002 f989 	bl	80069cc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046ba:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	441a      	add	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80046c8:	e01f      	b.n	800470a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	4413      	add	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	6938      	ldr	r0, [r7, #16]
 80046de:	f002 f975 	bl	80069cc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	4413      	add	r3, r2
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4619      	mov	r1, r3
 80046fa:	6938      	ldr	r0, [r7, #16]
 80046fc:	f002 f966 	bl	80069cc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004700:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	60da      	str	r2, [r3, #12]
}
 800470a:	bf00      	nop
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004712:	b480      	push	{r7}
 8004714:	b087      	sub	sp, #28
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	429a      	cmp	r2, r3
 800472c:	d808      	bhi.n	8004740 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad2      	subs	r2, r2, r3
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4413      	add	r3, r2
 800473a:	3b01      	subs	r3, #1
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e004      	b.n	800474a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	617b      	str	r3, [r7, #20]
  }
  return r;
 800474a:	697b      	ldr	r3, [r7, #20]
}
 800474c:	4618      	mov	r0, r3
 800474e:	371c      	adds	r7, #28
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004758:	b580      	push	{r7, lr}
 800475a:	b08c      	sub	sp, #48	; 0x30
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004764:	4b3e      	ldr	r3, [pc, #248]	; (8004860 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004766:	623b      	str	r3, [r7, #32]
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b53      	cmp	r3, #83	; 0x53
 8004770:	d001      	beq.n	8004776 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004772:	f7ff fecf 	bl	8004514 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	4613      	mov	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4413      	add	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4a37      	ldr	r2, [pc, #220]	; (8004860 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004784:	4413      	add	r3, r2
 8004786:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004798:	2300      	movs	r3, #0
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800479c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d92b      	bls.n	80047fc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4293      	cmp	r3, r2
 80047b4:	bf28      	it	cs
 80047b6:	4613      	movcs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	4413      	add	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	6939      	ldr	r1, [r7, #16]
 80047c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047ca:	f002 f8ff 	bl	80069cc <memcpy>
    NumBytesRead += NumBytesRem;
 80047ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	4413      	add	r3, r2
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80047d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	4413      	add	r3, r2
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80047e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	4413      	add	r3, r2
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d101      	bne.n	80047fc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80047f8:	2300      	movs	r3, #0
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4293      	cmp	r3, r2
 800480a:	bf28      	it	cs
 800480c:	4613      	movcs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d019      	beq.n	800484a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	4413      	add	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	6939      	ldr	r1, [r7, #16]
 8004824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004826:	f002 f8d1 	bl	80069cc <memcpy>
    NumBytesRead += NumBytesRem;
 800482a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4413      	add	r3, r2
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	4413      	add	r3, r2
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	4413      	add	r3, r2
 8004848:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004854:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004858:	4618      	mov	r0, r3
 800485a:	3730      	adds	r7, #48	; 0x30
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	2001926c 	.word	0x2001926c

08004864 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b08c      	sub	sp, #48	; 0x30
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004870:	4b3e      	ldr	r3, [pc, #248]	; (800496c <SEGGER_RTT_ReadNoLock+0x108>)
 8004872:	623b      	str	r3, [r7, #32]
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b53      	cmp	r3, #83	; 0x53
 800487c:	d001      	beq.n	8004882 <SEGGER_RTT_ReadNoLock+0x1e>
 800487e:	f7ff fe49 	bl	8004514 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4613      	mov	r3, r2
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	4413      	add	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	3360      	adds	r3, #96	; 0x60
 800488e:	4a37      	ldr	r2, [pc, #220]	; (800496c <SEGGER_RTT_ReadNoLock+0x108>)
 8004890:	4413      	add	r3, r2
 8004892:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80048a4:	2300      	movs	r3, #0
 80048a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80048a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d92b      	bls.n	8004908 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4293      	cmp	r3, r2
 80048c0:	bf28      	it	cs
 80048c2:	4613      	movcs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	4413      	add	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	6939      	ldr	r1, [r7, #16]
 80048d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048d6:	f002 f879 	bl	80069cc <memcpy>
    NumBytesRead += NumBytesRem;
 80048da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	4413      	add	r3, r2
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80048e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	4413      	add	r3, r2
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80048f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	4413      	add	r3, r2
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004900:	429a      	cmp	r2, r3
 8004902:	d101      	bne.n	8004908 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004904:	2300      	movs	r3, #0
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4293      	cmp	r3, r2
 8004916:	bf28      	it	cs
 8004918:	4613      	movcs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d019      	beq.n	8004956 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	4413      	add	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	6939      	ldr	r1, [r7, #16]
 8004930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004932:	f002 f84b 	bl	80069cc <memcpy>
    NumBytesRead += NumBytesRem;
 8004936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4413      	add	r3, r2
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800493e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	4413      	add	r3, r2
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800494e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	4413      	add	r3, r2
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004960:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004964:	4618      	mov	r0, r3
 8004966:	3730      	adds	r7, #48	; 0x30
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	2001926c 	.word	0x2001926c

08004970 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4613      	mov	r3, r2
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	4413      	add	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	3360      	adds	r3, #96	; 0x60
 800498c:	4a1f      	ldr	r2, [pc, #124]	; (8004a0c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800498e:	4413      	add	r3, r2
 8004990:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d029      	beq.n	80049ee <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800499a:	2b02      	cmp	r3, #2
 800499c:	d82e      	bhi.n	80049fc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d013      	beq.n	80049ce <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80049a6:	e029      	b.n	80049fc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80049a8:	6978      	ldr	r0, [r7, #20]
 80049aa:	f7ff feb2 	bl	8004712 <_GetAvailWriteSpace>
 80049ae:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d202      	bcs.n	80049be <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80049bc:	e021      	b.n	8004a02 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	69b9      	ldr	r1, [r7, #24]
 80049c6:	6978      	ldr	r0, [r7, #20]
 80049c8:	f7ff fe5b 	bl	8004682 <_WriteNoCheck>
    break;
 80049cc:	e019      	b.n	8004a02 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80049ce:	6978      	ldr	r0, [r7, #20]
 80049d0:	f7ff fe9f 	bl	8004712 <_GetAvailWriteSpace>
 80049d4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	4293      	cmp	r3, r2
 80049dc:	bf28      	it	cs
 80049de:	4613      	movcs	r3, r2
 80049e0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	69b9      	ldr	r1, [r7, #24]
 80049e6:	6978      	ldr	r0, [r7, #20]
 80049e8:	f7ff fe4b 	bl	8004682 <_WriteNoCheck>
    break;
 80049ec:	e009      	b.n	8004a02 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	69b9      	ldr	r1, [r7, #24]
 80049f2:	6978      	ldr	r0, [r7, #20]
 80049f4:	f7ff fde8 	bl	80045c8 <_WriteBlocking>
 80049f8:	61f8      	str	r0, [r7, #28]
    break;
 80049fa:	e002      	b.n	8004a02 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61fb      	str	r3, [r7, #28]
    break;
 8004a00:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004a02:	69fb      	ldr	r3, [r7, #28]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	2001926c 	.word	0x2001926c

08004a10 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b53      	cmp	r3, #83	; 0x53
 8004a28:	d001      	beq.n	8004a2e <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004a2a:	f7ff fd73 	bl	8004514 <_DoInit>
  SEGGER_RTT_LOCK();
 8004a2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004a32:	f04f 0120 	mov.w	r1, #32
 8004a36:	f381 8811 	msr	BASEPRI, r1
 8004a3a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f7ff ff95 	bl	8004970 <SEGGER_RTT_WriteDownBufferNoLock>
 8004a46:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004a4e:	697b      	ldr	r3, [r7, #20]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	2001926c 	.word	0x2001926c

08004a5c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004a6a:	4b3d      	ldr	r3, [pc, #244]	; (8004b60 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b53      	cmp	r3, #83	; 0x53
 8004a76:	d001      	beq.n	8004a7c <SEGGER_RTT_AllocUpBuffer+0x20>
 8004a78:	f7ff fd4c 	bl	8004514 <_DoInit>
  SEGGER_RTT_LOCK();
 8004a7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004a80:	f04f 0120 	mov.w	r1, #32
 8004a84:	f381 8811 	msr	BASEPRI, r1
 8004a88:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a8a:	4b35      	ldr	r3, [pc, #212]	; (8004b60 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004a8c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004a92:	6939      	ldr	r1, [r7, #16]
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	4613      	mov	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	4413      	add	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	440b      	add	r3, r1
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	3301      	adds	r3, #1
 8004aae:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	dbeb      	blt.n	8004a92 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004aba:	e000      	b.n	8004abe <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004abc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	da3f      	bge.n	8004b48 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004ac8:	6939      	ldr	r1, [r7, #16]
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	4613      	mov	r3, r2
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	4413      	add	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	440b      	add	r3, r1
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004adc:	6939      	ldr	r1, [r7, #16]
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4413      	add	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	440b      	add	r3, r1
 8004aec:	3304      	adds	r3, #4
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004af2:	6939      	ldr	r1, [r7, #16]
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	4613      	mov	r3, r2
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	440b      	add	r3, r1
 8004b00:	3320      	adds	r3, #32
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004b06:	6939      	ldr	r1, [r7, #16]
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	4413      	add	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	440b      	add	r3, r1
 8004b14:	3328      	adds	r3, #40	; 0x28
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004b1a:	6939      	ldr	r1, [r7, #16]
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	4413      	add	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	440b      	add	r3, r1
 8004b28:	3324      	adds	r3, #36	; 0x24
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004b2e:	6939      	ldr	r1, [r7, #16]
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	4613      	mov	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	440b      	add	r3, r1
 8004b3c:	332c      	adds	r3, #44	; 0x2c
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b42:	f3bf 8f5f 	dmb	sy
 8004b46:	e002      	b.n	8004b4e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b4c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004b54:	69fb      	ldr	r3, [r7, #28]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3720      	adds	r7, #32
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	2001926c 	.word	0x2001926c

08004b64 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004b72:	4b21      	ldr	r3, [pc, #132]	; (8004bf8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004b74:	623b      	str	r3, [r7, #32]
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b53      	cmp	r3, #83	; 0x53
 8004b7e:	d001      	beq.n	8004b84 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004b80:	f7ff fcc8 	bl	8004514 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b84:	4b1c      	ldr	r3, [pc, #112]	; (8004bf8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004b86:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d82c      	bhi.n	8004be8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b92:	f04f 0120 	mov.w	r1, #32
 8004b96:	f381 8811 	msr	BASEPRI, r1
 8004b9a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	4413      	add	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	3360      	adds	r3, #96	; 0x60
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00e      	beq.n	8004bd2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004bd8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
 8004be6:	e002      	b.n	8004bee <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3728      	adds	r7, #40	; 0x28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	2001926c 	.word	0x2001926c

08004bfc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	60fa      	str	r2, [r7, #12]
 8004c12:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b80      	cmp	r3, #128	; 0x80
 8004c18:	d90a      	bls.n	8004c30 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004c1e:	e007      	b.n	8004c30 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	1c53      	adds	r3, r2, #1
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1c59      	adds	r1, r3, #1
 8004c2a:	60f9      	str	r1, [r7, #12]
 8004c2c:	7812      	ldrb	r2, [r2, #0]
 8004c2e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	1e5a      	subs	r2, r3, #1
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <_EncodeStr+0x46>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1ee      	bne.n	8004c20 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3307      	adds	r3, #7
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c7a:	4b35      	ldr	r3, [pc, #212]	; (8004d50 <_HandleIncomingPacket+0xdc>)
 8004c7c:	7e1b      	ldrb	r3, [r3, #24]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	1cfb      	adds	r3, r7, #3
 8004c82:	2201      	movs	r2, #1
 8004c84:	4619      	mov	r1, r3
 8004c86:	f7ff fded 	bl	8004864 <SEGGER_RTT_ReadNoLock>
 8004c8a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d052      	beq.n	8004d38 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004c92:	78fb      	ldrb	r3, [r7, #3]
 8004c94:	2b80      	cmp	r3, #128	; 0x80
 8004c96:	d031      	beq.n	8004cfc <_HandleIncomingPacket+0x88>
 8004c98:	2b80      	cmp	r3, #128	; 0x80
 8004c9a:	dc40      	bgt.n	8004d1e <_HandleIncomingPacket+0xaa>
 8004c9c:	2b07      	cmp	r3, #7
 8004c9e:	dc15      	bgt.n	8004ccc <_HandleIncomingPacket+0x58>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	dd3c      	ble.n	8004d1e <_HandleIncomingPacket+0xaa>
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	2b06      	cmp	r3, #6
 8004ca8:	d839      	bhi.n	8004d1e <_HandleIncomingPacket+0xaa>
 8004caa:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <_HandleIncomingPacket+0x3c>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004cd3 	.word	0x08004cd3
 8004cb4:	08004cd9 	.word	0x08004cd9
 8004cb8:	08004cdf 	.word	0x08004cdf
 8004cbc:	08004ce5 	.word	0x08004ce5
 8004cc0:	08004ceb 	.word	0x08004ceb
 8004cc4:	08004cf1 	.word	0x08004cf1
 8004cc8:	08004cf7 	.word	0x08004cf7
 8004ccc:	2b7f      	cmp	r3, #127	; 0x7f
 8004cce:	d035      	beq.n	8004d3c <_HandleIncomingPacket+0xc8>
 8004cd0:	e025      	b.n	8004d1e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004cd2:	f001 f82d 	bl	8005d30 <SEGGER_SYSVIEW_Start>
      break;
 8004cd6:	e036      	b.n	8004d46 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004cd8:	f001 f8e6 	bl	8005ea8 <SEGGER_SYSVIEW_Stop>
      break;
 8004cdc:	e033      	b.n	8004d46 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004cde:	f001 fabf 	bl	8006260 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004ce2:	e030      	b.n	8004d46 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004ce4:	f001 fa84 	bl	80061f0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004ce8:	e02d      	b.n	8004d46 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004cea:	f001 f903 	bl	8005ef4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004cee:	e02a      	b.n	8004d46 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004cf0:	f001 fd5c 	bl	80067ac <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004cf4:	e027      	b.n	8004d46 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004cf6:	f001 fd3b 	bl	8006770 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004cfa:	e024      	b.n	8004d46 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004cfc:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <_HandleIncomingPacket+0xdc>)
 8004cfe:	7e1b      	ldrb	r3, [r3, #24]
 8004d00:	4618      	mov	r0, r3
 8004d02:	1cfb      	adds	r3, r7, #3
 8004d04:	2201      	movs	r2, #1
 8004d06:	4619      	mov	r1, r3
 8004d08:	f7ff fdac 	bl	8004864 <SEGGER_RTT_ReadNoLock>
 8004d0c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d015      	beq.n	8004d40 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 fca0 	bl	800665c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004d1c:	e010      	b.n	8004d40 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	b25b      	sxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	da0e      	bge.n	8004d44 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d26:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <_HandleIncomingPacket+0xdc>)
 8004d28:	7e1b      	ldrb	r3, [r3, #24]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	1cfb      	adds	r3, r7, #3
 8004d2e:	2201      	movs	r2, #1
 8004d30:	4619      	mov	r1, r3
 8004d32:	f7ff fd97 	bl	8004864 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004d36:	e005      	b.n	8004d44 <_HandleIncomingPacket+0xd0>
    }
  }
 8004d38:	bf00      	nop
 8004d3a:	e004      	b.n	8004d46 <_HandleIncomingPacket+0xd2>
      break;
 8004d3c:	bf00      	nop
 8004d3e:	e002      	b.n	8004d46 <_HandleIncomingPacket+0xd2>
      break;
 8004d40:	bf00      	nop
 8004d42:	e000      	b.n	8004d46 <_HandleIncomingPacket+0xd2>
      break;
 8004d44:	bf00      	nop
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	2001a72c 	.word	0x2001a72c

08004d54 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08c      	sub	sp, #48	; 0x30
 8004d58:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004d5e:	1d3b      	adds	r3, r7, #4
 8004d60:	3301      	adds	r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d68:	4b32      	ldr	r3, [pc, #200]	; (8004e34 <_TrySendOverflowPacket+0xe0>)
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6e:	e00b      	b.n	8004d88 <_TrySendOverflowPacket+0x34>
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d76:	1c59      	adds	r1, r3, #1
 8004d78:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	09db      	lsrs	r3, r3, #7
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d8c:	d8f0      	bhi.n	8004d70 <_TrySendOverflowPacket+0x1c>
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d9e:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <_TrySendOverflowPacket+0xe4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004da4:	4b23      	ldr	r3, [pc, #140]	; (8004e34 <_TrySendOverflowPacket+0xe0>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	623b      	str	r3, [r7, #32]
 8004db6:	e00b      	b.n	8004dd0 <_TrySendOverflowPacket+0x7c>
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	1c59      	adds	r1, r3, #1
 8004dc0:	6279      	str	r1, [r7, #36]	; 0x24
 8004dc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	09db      	lsrs	r3, r3, #7
 8004dce:	623b      	str	r3, [r7, #32]
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd4:	d8f0      	bhi.n	8004db8 <_TrySendOverflowPacket+0x64>
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	627a      	str	r2, [r7, #36]	; 0x24
 8004ddc:	6a3a      	ldr	r2, [r7, #32]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004de6:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <_TrySendOverflowPacket+0xe0>)
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	4618      	mov	r0, r3
 8004dec:	1d3b      	adds	r3, r7, #4
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	1d3b      	adds	r3, r7, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	f7fb fa0a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004e00:	f7ff fafe 	bl	8004400 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004e0a:	4a0a      	ldr	r2, [pc, #40]	; (8004e34 <_TrySendOverflowPacket+0xe0>)
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004e10:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <_TrySendOverflowPacket+0xe0>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <_TrySendOverflowPacket+0xe0>)
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	e004      	b.n	8004e28 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004e1e:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <_TrySendOverflowPacket+0xe0>)
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	3301      	adds	r3, #1
 8004e24:	4a03      	ldr	r2, [pc, #12]	; (8004e34 <_TrySendOverflowPacket+0xe0>)
 8004e26:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004e28:	693b      	ldr	r3, [r7, #16]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3730      	adds	r7, #48	; 0x30
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	2001a72c 	.word	0x2001a72c
 8004e38:	e0001004 	.word	0xe0001004

08004e3c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08a      	sub	sp, #40	; 0x28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004e48:	4b96      	ldr	r3, [pc, #600]	; (80050a4 <_SendPacket+0x268>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d010      	beq.n	8004e72 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004e50:	4b94      	ldr	r3, [pc, #592]	; (80050a4 <_SendPacket+0x268>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8130 	beq.w	80050ba <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004e5a:	4b92      	ldr	r3, [pc, #584]	; (80050a4 <_SendPacket+0x268>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d109      	bne.n	8004e76 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004e62:	f7ff ff77 	bl	8004d54 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004e66:	4b8f      	ldr	r3, [pc, #572]	; (80050a4 <_SendPacket+0x268>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	f040 8127 	bne.w	80050be <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004e70:	e001      	b.n	8004e76 <_SendPacket+0x3a>
    goto Send;
 8004e72:	bf00      	nop
 8004e74:	e000      	b.n	8004e78 <_SendPacket+0x3c>
Send:
 8004e76:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b1f      	cmp	r3, #31
 8004e7c:	d809      	bhi.n	8004e92 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004e7e:	4b89      	ldr	r3, [pc, #548]	; (80050a4 <_SendPacket+0x268>)
 8004e80:	69da      	ldr	r2, [r3, #28]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 8118 	bne.w	80050c2 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b17      	cmp	r3, #23
 8004e96:	d807      	bhi.n	8004ea8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	e0c4      	b.n	8005032 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8004eb4:	d912      	bls.n	8004edc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	09da      	lsrs	r2, r3, #7
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	3a01      	subs	r2, #1
 8004ece:	60fa      	str	r2, [r7, #12]
 8004ed0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	e006      	b.n	8004eea <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b7e      	cmp	r3, #126	; 0x7e
 8004eee:	d807      	bhi.n	8004f00 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	e098      	b.n	8005032 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f06:	d212      	bcs.n	8004f2e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	09da      	lsrs	r2, r3, #7
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	3a01      	subs	r2, #1
 8004f20:	60fa      	str	r2, [r7, #12]
 8004f22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	e081      	b.n	8005032 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f34:	d21d      	bcs.n	8004f72 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	0b9a      	lsrs	r2, r3, #14
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	09db      	lsrs	r3, r3, #7
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	3a01      	subs	r2, #1
 8004f50:	60fa      	str	r2, [r7, #12]
 8004f52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	3a01      	subs	r2, #1
 8004f64:	60fa      	str	r2, [r7, #12]
 8004f66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	701a      	strb	r2, [r3, #0]
 8004f70:	e05f      	b.n	8005032 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f78:	d228      	bcs.n	8004fcc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	0d5a      	lsrs	r2, r3, #21
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	0b9b      	lsrs	r3, r3, #14
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	3a01      	subs	r2, #1
 8004f94:	60fa      	str	r2, [r7, #12]
 8004f96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	09db      	lsrs	r3, r3, #7
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	3a01      	subs	r2, #1
 8004faa:	60fa      	str	r2, [r7, #12]
 8004fac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	3a01      	subs	r2, #1
 8004fbe:	60fa      	str	r2, [r7, #12]
 8004fc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	e032      	b.n	8005032 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	0f1a      	lsrs	r2, r3, #28
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	0d5b      	lsrs	r3, r3, #21
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	3a01      	subs	r2, #1
 8004fe6:	60fa      	str	r2, [r7, #12]
 8004fe8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	0b9b      	lsrs	r3, r3, #14
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	3a01      	subs	r2, #1
 8004ffc:	60fa      	str	r2, [r7, #12]
 8004ffe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005002:	b2da      	uxtb	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	09db      	lsrs	r3, r3, #7
 800500c:	b2db      	uxtb	r3, r3
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	3a01      	subs	r2, #1
 8005012:	60fa      	str	r2, [r7, #12]
 8005014:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005018:	b2da      	uxtb	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	3a01      	subs	r2, #1
 8005026:	60fa      	str	r2, [r7, #12]
 8005028:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800502c:	b2da      	uxtb	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005032:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <_SendPacket+0x26c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005038:	4b1a      	ldr	r3, [pc, #104]	; (80050a4 <_SendPacket+0x268>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	623b      	str	r3, [r7, #32]
 800504a:	e00b      	b.n	8005064 <_SendPacket+0x228>
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	b2da      	uxtb	r2, r3
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	1c59      	adds	r1, r3, #1
 8005054:	6279      	str	r1, [r7, #36]	; 0x24
 8005056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	09db      	lsrs	r3, r3, #7
 8005062:	623b      	str	r3, [r7, #32]
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	2b7f      	cmp	r3, #127	; 0x7f
 8005068:	d8f0      	bhi.n	800504c <_SendPacket+0x210>
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	627a      	str	r2, [r7, #36]	; 0x24
 8005070:	6a3a      	ldr	r2, [r7, #32]
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800507a:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <_SendPacket+0x268>)
 800507c:	785b      	ldrb	r3, [r3, #1]
 800507e:	4618      	mov	r0, r3
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	461a      	mov	r2, r3
 8005088:	68f9      	ldr	r1, [r7, #12]
 800508a:	f7fb f8c1 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800508e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005090:	f7ff f9b6 	bl	8004400 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d008      	beq.n	80050ac <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800509a:	4a02      	ldr	r2, [pc, #8]	; (80050a4 <_SendPacket+0x268>)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	60d3      	str	r3, [r2, #12]
 80050a0:	e010      	b.n	80050c4 <_SendPacket+0x288>
 80050a2:	bf00      	nop
 80050a4:	2001a72c 	.word	0x2001a72c
 80050a8:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80050ac:	4b19      	ldr	r3, [pc, #100]	; (8005114 <_SendPacket+0x2d8>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	4b17      	ldr	r3, [pc, #92]	; (8005114 <_SendPacket+0x2d8>)
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	e004      	b.n	80050c4 <_SendPacket+0x288>
    goto SendDone;
 80050ba:	bf00      	nop
 80050bc:	e002      	b.n	80050c4 <_SendPacket+0x288>
      goto SendDone;
 80050be:	bf00      	nop
 80050c0:	e000      	b.n	80050c4 <_SendPacket+0x288>
      goto SendDone;
 80050c2:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80050c4:	4b13      	ldr	r3, [pc, #76]	; (8005114 <_SendPacket+0x2d8>)
 80050c6:	7e1b      	ldrb	r3, [r3, #24]
 80050c8:	4619      	mov	r1, r3
 80050ca:	4a13      	ldr	r2, [pc, #76]	; (8005118 <_SendPacket+0x2dc>)
 80050cc:	460b      	mov	r3, r1
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	440b      	add	r3, r1
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	336c      	adds	r3, #108	; 0x6c
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <_SendPacket+0x2d8>)
 80050dc:	7e1b      	ldrb	r3, [r3, #24]
 80050de:	4618      	mov	r0, r3
 80050e0:	490d      	ldr	r1, [pc, #52]	; (8005118 <_SendPacket+0x2dc>)
 80050e2:	4603      	mov	r3, r0
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	4403      	add	r3, r0
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	440b      	add	r3, r1
 80050ec:	3370      	adds	r3, #112	; 0x70
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d00b      	beq.n	800510c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80050f4:	4b07      	ldr	r3, [pc, #28]	; (8005114 <_SendPacket+0x2d8>)
 80050f6:	789b      	ldrb	r3, [r3, #2]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d107      	bne.n	800510c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80050fc:	4b05      	ldr	r3, [pc, #20]	; (8005114 <_SendPacket+0x2d8>)
 80050fe:	2201      	movs	r2, #1
 8005100:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005102:	f7ff fdb7 	bl	8004c74 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005106:	4b03      	ldr	r3, [pc, #12]	; (8005114 <_SendPacket+0x2d8>)
 8005108:	2200      	movs	r2, #0
 800510a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800510c:	bf00      	nop
 800510e:	3728      	adds	r7, #40	; 0x28
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	2001a72c 	.word	0x2001a72c
 8005118:	2001926c 	.word	0x2001926c

0800511c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	; 0x28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	3301      	adds	r3, #1
 8005132:	2b80      	cmp	r3, #128	; 0x80
 8005134:	d80a      	bhi.n	800514c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	1c59      	adds	r1, r3, #1
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6051      	str	r1, [r2, #4]
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b80      	cmp	r3, #128	; 0x80
 8005152:	d15a      	bne.n	800520a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	623b      	str	r3, [r7, #32]
 8005174:	e00b      	b.n	800518e <_StoreChar+0x72>
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	b2da      	uxtb	r2, r3
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	1c59      	adds	r1, r3, #1
 800517e:	6279      	str	r1, [r7, #36]	; 0x24
 8005180:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	09db      	lsrs	r3, r3, #7
 800518c:	623b      	str	r3, [r7, #32]
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	2b7f      	cmp	r3, #127	; 0x7f
 8005192:	d8f0      	bhi.n	8005176 <_StoreChar+0x5a>
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	627a      	str	r2, [r7, #36]	; 0x24
 800519a:	6a3a      	ldr	r2, [r7, #32]
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	61fb      	str	r3, [r7, #28]
 80051a8:	2300      	movs	r3, #0
 80051aa:	61bb      	str	r3, [r7, #24]
 80051ac:	e00b      	b.n	80051c6 <_StoreChar+0xaa>
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	1c59      	adds	r1, r3, #1
 80051b6:	61f9      	str	r1, [r7, #28]
 80051b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	09db      	lsrs	r3, r3, #7
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b7f      	cmp	r3, #127	; 0x7f
 80051ca:	d8f0      	bhi.n	80051ae <_StoreChar+0x92>
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	61fa      	str	r2, [r7, #28]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	221a      	movs	r2, #26
 80051e2:	6939      	ldr	r1, [r7, #16]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff fe29 	bl	8004e3c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff fd34 	bl	8004c5c <_PreparePacket>
 80051f4:	4602      	mov	r2, r0
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	611a      	str	r2, [r3, #16]
  }
}
 800520a:	bf00      	nop
 800520c:	3728      	adds	r7, #40	; 0x28
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	; 0x28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005226:	2301      	movs	r3, #1
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800522a:	2301      	movs	r3, #1
 800522c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800522e:	e007      	b.n	8005240 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005230:	6a3a      	ldr	r2, [r7, #32]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	623b      	str	r3, [r7, #32]
    Width++;
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3301      	adds	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005240:	6a3a      	ldr	r2, [r7, #32]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	429a      	cmp	r2, r3
 8005246:	d2f3      	bcs.n	8005230 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	429a      	cmp	r2, r3
 800524e:	d901      	bls.n	8005254 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d11f      	bne.n	800529e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01c      	beq.n	800529e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <_PrintUnsigned+0x66>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d102      	bne.n	800527a <_PrintUnsigned+0x66>
        c = '0';
 8005274:	2330      	movs	r3, #48	; 0x30
 8005276:	76fb      	strb	r3, [r7, #27]
 8005278:	e001      	b.n	800527e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800527a:	2320      	movs	r3, #32
 800527c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800527e:	e007      	b.n	8005290 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	3b01      	subs	r3, #1
 8005284:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005286:	7efb      	ldrb	r3, [r7, #27]
 8005288:	4619      	mov	r1, r3
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f7ff ff46 	bl	800511c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <_PrintUnsigned+0x8a>
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	429a      	cmp	r2, r3
 800529c:	d3f0      	bcc.n	8005280 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d903      	bls.n	80052ac <_PrintUnsigned+0x98>
      NumDigits--;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	603b      	str	r3, [r7, #0]
 80052aa:	e009      	b.n	80052c0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b4:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d200      	bcs.n	80052c0 <_PrintUnsigned+0xac>
        break;
 80052be:	e005      	b.n	80052cc <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	fb02 f303 	mul.w	r3, r2, r3
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80052ca:	e7e8      	b.n	800529e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052da:	fb02 f303 	mul.w	r3, r2, r3
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80052e4:	4a15      	ldr	r2, [pc, #84]	; (800533c <_PrintUnsigned+0x128>)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	4413      	add	r3, r2
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	4619      	mov	r1, r3
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff ff14 	bl	800511c <_StoreChar>
    Digit /= Base;
 80052f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e3      	bne.n	80052cc <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d011      	beq.n	8005332 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00e      	beq.n	8005332 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005314:	e006      	b.n	8005324 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	3b01      	subs	r3, #1
 800531a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 800531c:	2120      	movs	r1, #32
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff fefc 	bl	800511c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <_PrintUnsigned+0x11e>
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	429a      	cmp	r2, r3
 8005330:	d3f1      	bcc.n	8005316 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005332:	bf00      	nop
 8005334:	3728      	adds	r7, #40	; 0x28
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	08006c44 	.word	0x08006c44

08005340 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af02      	add	r7, sp, #8
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	bfb8      	it	lt
 8005354:	425b      	neglt	r3, r3
 8005356:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005358:	2301      	movs	r3, #1
 800535a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800535c:	e007      	b.n	800536e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	fb92 f3f3 	sdiv	r3, r2, r3
 8005366:	613b      	str	r3, [r7, #16]
    Width++;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	3301      	adds	r3, #1
 800536c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	429a      	cmp	r2, r3
 8005374:	daf3      	bge.n	800535e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	429a      	cmp	r2, r3
 800537c:	d901      	bls.n	8005382 <_PrintInt+0x42>
    Width = NumDigits;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <_PrintInt+0x5e>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	db04      	blt.n	8005398 <_PrintInt+0x58>
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <_PrintInt+0x5e>
    FieldWidth--;
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	3b01      	subs	r3, #1
 800539c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <_PrintInt+0x6e>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d016      	beq.n	80053dc <_PrintInt+0x9c>
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d111      	bne.n	80053dc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00e      	beq.n	80053dc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80053be:	e006      	b.n	80053ce <_PrintInt+0x8e>
        FieldWidth--;
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80053c6:	2120      	movs	r1, #32
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f7ff fea7 	bl	800511c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <_PrintInt+0x9c>
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d3f1      	bcc.n	80053c0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	da07      	bge.n	80053f2 <_PrintInt+0xb2>
    v = -v;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	425b      	negs	r3, r3
 80053e6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80053e8:	212d      	movs	r1, #45	; 0x2d
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f7ff fe96 	bl	800511c <_StoreChar>
 80053f0:	e008      	b.n	8005404 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80053fc:	212b      	movs	r1, #43	; 0x2b
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff fe8c 	bl	800511c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d019      	beq.n	8005442 <_PrintInt+0x102>
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d114      	bne.n	8005442 <_PrintInt+0x102>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d111      	bne.n	8005442 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00e      	beq.n	8005442 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005424:	e006      	b.n	8005434 <_PrintInt+0xf4>
        FieldWidth--;
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	3b01      	subs	r3, #1
 800542a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800542c:	2130      	movs	r1, #48	; 0x30
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7ff fe74 	bl	800511c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <_PrintInt+0x102>
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	429a      	cmp	r2, r3
 8005440:	d3f1      	bcc.n	8005426 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f7ff fedf 	bl	8005214 <_PrintUnsigned>
}
 8005456:	bf00      	nop
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b098      	sub	sp, #96	; 0x60
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800546c:	f3ef 8311 	mrs	r3, BASEPRI
 8005470:	f04f 0120 	mov.w	r1, #32
 8005474:	f381 8811 	msr	BASEPRI, r1
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800547a:	48b7      	ldr	r0, [pc, #732]	; (8005758 <_VPrintTarget+0x2f8>)
 800547c:	f7ff fbee 	bl	8004c5c <_PreparePacket>
 8005480:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005482:	4bb5      	ldr	r3, [pc, #724]	; (8005758 <_VPrintTarget+0x2f8>)
 8005484:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005486:	2300      	movs	r3, #0
 8005488:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	3301      	adds	r3, #1
 8005492:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3301      	adds	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80054a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 81a8 	beq.w	8005800 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80054b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054b4:	2b25      	cmp	r3, #37	; 0x25
 80054b6:	f040 8195 	bne.w	80057e4 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80054ba:	2300      	movs	r3, #0
 80054bc:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80054be:	2301      	movs	r3, #1
 80054c0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80054ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054ce:	3b23      	subs	r3, #35	; 0x23
 80054d0:	2b0d      	cmp	r3, #13
 80054d2:	d83f      	bhi.n	8005554 <_VPrintTarget+0xf4>
 80054d4:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <_VPrintTarget+0x7c>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	08005545 	.word	0x08005545
 80054e0:	08005555 	.word	0x08005555
 80054e4:	08005555 	.word	0x08005555
 80054e8:	08005555 	.word	0x08005555
 80054ec:	08005555 	.word	0x08005555
 80054f0:	08005555 	.word	0x08005555
 80054f4:	08005555 	.word	0x08005555
 80054f8:	08005555 	.word	0x08005555
 80054fc:	08005535 	.word	0x08005535
 8005500:	08005555 	.word	0x08005555
 8005504:	08005515 	.word	0x08005515
 8005508:	08005555 	.word	0x08005555
 800550c:	08005555 	.word	0x08005555
 8005510:	08005525 	.word	0x08005525
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	64bb      	str	r3, [r7, #72]	; 0x48
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3301      	adds	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	e01a      	b.n	800555a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005526:	f043 0302 	orr.w	r3, r3, #2
 800552a:	64bb      	str	r3, [r7, #72]	; 0x48
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3301      	adds	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	e012      	b.n	800555a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005536:	f043 0304 	orr.w	r3, r3, #4
 800553a:	64bb      	str	r3, [r7, #72]	; 0x48
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3301      	adds	r3, #1
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	e00a      	b.n	800555a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005546:	f043 0308 	orr.w	r3, r3, #8
 800554a:	64bb      	str	r3, [r7, #72]	; 0x48
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	3301      	adds	r3, #1
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e002      	b.n	800555a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005554:	2300      	movs	r3, #0
 8005556:	653b      	str	r3, [r7, #80]	; 0x50
 8005558:	bf00      	nop
        }
      } while (v);
 800555a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1b0      	bne.n	80054c2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005560:	2300      	movs	r3, #0
 8005562:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800556c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005570:	2b2f      	cmp	r3, #47	; 0x2f
 8005572:	d912      	bls.n	800559a <_VPrintTarget+0x13a>
 8005574:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005578:	2b39      	cmp	r3, #57	; 0x39
 800557a:	d80e      	bhi.n	800559a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3301      	adds	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	461a      	mov	r2, r3
 800558e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005592:	4413      	add	r3, r2
 8005594:	3b30      	subs	r3, #48	; 0x30
 8005596:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005598:	e7e4      	b.n	8005564 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800559a:	2300      	movs	r3, #0
 800559c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80055a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055aa:	2b2e      	cmp	r3, #46	; 0x2e
 80055ac:	d11d      	bne.n	80055ea <_VPrintTarget+0x18a>
        sFormat++;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3301      	adds	r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80055bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055c0:	2b2f      	cmp	r3, #47	; 0x2f
 80055c2:	d912      	bls.n	80055ea <_VPrintTarget+0x18a>
 80055c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055c8:	2b39      	cmp	r3, #57	; 0x39
 80055ca:	d80e      	bhi.n	80055ea <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3301      	adds	r3, #1
 80055d0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80055d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	461a      	mov	r2, r3
 80055de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055e2:	4413      	add	r3, r2
 80055e4:	3b30      	subs	r3, #48	; 0x30
 80055e6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80055e8:	e7e4      	b.n	80055b4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80055f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055f6:	2b6c      	cmp	r3, #108	; 0x6c
 80055f8:	d003      	beq.n	8005602 <_VPrintTarget+0x1a2>
 80055fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055fe:	2b68      	cmp	r3, #104	; 0x68
 8005600:	d107      	bne.n	8005612 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3301      	adds	r3, #1
 800560e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005610:	e7ef      	b.n	80055f2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005612:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005616:	2b25      	cmp	r3, #37	; 0x25
 8005618:	f000 80d8 	beq.w	80057cc <_VPrintTarget+0x36c>
 800561c:	2b25      	cmp	r3, #37	; 0x25
 800561e:	f2c0 80dc 	blt.w	80057da <_VPrintTarget+0x37a>
 8005622:	2b78      	cmp	r3, #120	; 0x78
 8005624:	f300 80d9 	bgt.w	80057da <_VPrintTarget+0x37a>
 8005628:	2b58      	cmp	r3, #88	; 0x58
 800562a:	f2c0 80d6 	blt.w	80057da <_VPrintTarget+0x37a>
 800562e:	3b58      	subs	r3, #88	; 0x58
 8005630:	2b20      	cmp	r3, #32
 8005632:	f200 80d2 	bhi.w	80057da <_VPrintTarget+0x37a>
 8005636:	a201      	add	r2, pc, #4	; (adr r2, 800563c <_VPrintTarget+0x1dc>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	08005733 	.word	0x08005733
 8005640:	080057db 	.word	0x080057db
 8005644:	080057db 	.word	0x080057db
 8005648:	080057db 	.word	0x080057db
 800564c:	080057db 	.word	0x080057db
 8005650:	080057db 	.word	0x080057db
 8005654:	080057db 	.word	0x080057db
 8005658:	080057db 	.word	0x080057db
 800565c:	080057db 	.word	0x080057db
 8005660:	080057db 	.word	0x080057db
 8005664:	080057db 	.word	0x080057db
 8005668:	080056c1 	.word	0x080056c1
 800566c:	080056e7 	.word	0x080056e7
 8005670:	080057db 	.word	0x080057db
 8005674:	080057db 	.word	0x080057db
 8005678:	080057db 	.word	0x080057db
 800567c:	080057db 	.word	0x080057db
 8005680:	080057db 	.word	0x080057db
 8005684:	080057db 	.word	0x080057db
 8005688:	080057db 	.word	0x080057db
 800568c:	080057db 	.word	0x080057db
 8005690:	080057db 	.word	0x080057db
 8005694:	080057db 	.word	0x080057db
 8005698:	080057db 	.word	0x080057db
 800569c:	080057a7 	.word	0x080057a7
 80056a0:	080057db 	.word	0x080057db
 80056a4:	080057db 	.word	0x080057db
 80056a8:	0800575d 	.word	0x0800575d
 80056ac:	080057db 	.word	0x080057db
 80056b0:	0800570d 	.word	0x0800570d
 80056b4:	080057db 	.word	0x080057db
 80056b8:	080057db 	.word	0x080057db
 80056bc:	08005733 	.word	0x08005733
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	1d19      	adds	r1, r3, #4
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6011      	str	r1, [r2, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80056ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 80056d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80056d8:	f107 0310 	add.w	r3, r7, #16
 80056dc:	4611      	mov	r1, r2
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff fd1c 	bl	800511c <_StoreChar>
        break;
 80056e4:	e07a      	b.n	80057dc <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	1d19      	adds	r1, r3, #4
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6011      	str	r1, [r2, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80056f4:	f107 0010 	add.w	r0, r7, #16
 80056f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056fa:	9301      	str	r3, [sp, #4]
 80056fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005702:	220a      	movs	r2, #10
 8005704:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005706:	f7ff fe1b 	bl	8005340 <_PrintInt>
        break;
 800570a:	e067      	b.n	80057dc <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	1d19      	adds	r1, r3, #4
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6011      	str	r1, [r2, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800571a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800571c:	f107 0010 	add.w	r0, r7, #16
 8005720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005722:	9301      	str	r3, [sp, #4]
 8005724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572a:	220a      	movs	r2, #10
 800572c:	f7ff fd72 	bl	8005214 <_PrintUnsigned>
        break;
 8005730:	e054      	b.n	80057dc <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	1d19      	adds	r1, r3, #4
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6011      	str	r1, [r2, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005740:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005742:	f107 0010 	add.w	r0, r7, #16
 8005746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005750:	2210      	movs	r2, #16
 8005752:	f7ff fd5f 	bl	8005214 <_PrintUnsigned>
        break;
 8005756:	e041      	b.n	80057dc <_VPrintTarget+0x37c>
 8005758:	2001a75c 	.word	0x2001a75c
      case 's':
        s = va_arg(*pParamList, const char*);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	1d19      	adds	r1, r3, #4
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6011      	str	r1, [r2, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 800576a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <_VPrintTarget+0x314>
          s = "(null)";
 8005770:	4b4a      	ldr	r3, [pc, #296]	; (800589c <_VPrintTarget+0x43c>)
 8005772:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 800577c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800577e:	3301      	adds	r3, #1
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005782:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00b      	beq.n	80057a2 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800578a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800578e:	f107 0310 	add.w	r3, r7, #16
 8005792:	4611      	mov	r1, r2
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff fcc1 	bl	800511c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	2b7f      	cmp	r3, #127	; 0x7f
 800579e:	d9e9      	bls.n	8005774 <_VPrintTarget+0x314>
        break;
 80057a0:	e01c      	b.n	80057dc <_VPrintTarget+0x37c>
            break;
 80057a2:	bf00      	nop
        break;
 80057a4:	e01a      	b.n	80057dc <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	1d19      	adds	r1, r3, #4
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6011      	str	r1, [r2, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80057b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057b6:	f107 0010 	add.w	r0, r7, #16
 80057ba:	2300      	movs	r3, #0
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	2308      	movs	r3, #8
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	2308      	movs	r3, #8
 80057c4:	2210      	movs	r2, #16
 80057c6:	f7ff fd25 	bl	8005214 <_PrintUnsigned>
        break;
 80057ca:	e007      	b.n	80057dc <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80057cc:	f107 0310 	add.w	r3, r7, #16
 80057d0:	2125      	movs	r1, #37	; 0x25
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff fca2 	bl	800511c <_StoreChar>
        break;
 80057d8:	e000      	b.n	80057dc <_VPrintTarget+0x37c>
      default:
        break;
 80057da:	bf00      	nop
      }
      sFormat++;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3301      	adds	r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	e007      	b.n	80057f4 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80057e4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80057e8:	f107 0310 	add.w	r3, r7, #16
 80057ec:	4611      	mov	r1, r2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff fc94 	bl	800511c <_StoreChar>
    }
  } while (*sFormat);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f47f ae4d 	bne.w	8005498 <_VPrintTarget+0x38>
 80057fe:	e000      	b.n	8005802 <_VPrintTarget+0x3a2>
      break;
 8005800:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d041      	beq.n	800588c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005808:	6a3a      	ldr	r2, [r7, #32]
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	63bb      	str	r3, [r7, #56]	; 0x38
 8005818:	e00b      	b.n	8005832 <_VPrintTarget+0x3d2>
 800581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581c:	b2da      	uxtb	r2, r3
 800581e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005820:	1c59      	adds	r1, r3, #1
 8005822:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005824:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	09db      	lsrs	r3, r3, #7
 8005830:	63bb      	str	r3, [r7, #56]	; 0x38
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	2b7f      	cmp	r3, #127	; 0x7f
 8005836:	d8f0      	bhi.n	800581a <_VPrintTarget+0x3ba>
 8005838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800583e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005846:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
 800584c:	2300      	movs	r3, #0
 800584e:	633b      	str	r3, [r7, #48]	; 0x30
 8005850:	e00b      	b.n	800586a <_VPrintTarget+0x40a>
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	b2da      	uxtb	r2, r3
 8005856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005858:	1c59      	adds	r1, r3, #1
 800585a:	6379      	str	r1, [r7, #52]	; 0x34
 800585c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	09db      	lsrs	r3, r3, #7
 8005868:	633b      	str	r3, [r7, #48]	; 0x30
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	2b7f      	cmp	r3, #127	; 0x7f
 800586e:	d8f0      	bhi.n	8005852 <_VPrintTarget+0x3f2>
 8005870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	637a      	str	r2, [r7, #52]	; 0x34
 8005876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	6979      	ldr	r1, [r7, #20]
 8005884:	221a      	movs	r2, #26
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fad8 	bl	8004e3c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005892:	bf00      	nop
 8005894:	3758      	adds	r7, #88	; 0x58
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	08006bf0 	.word	0x08006bf0

080058a0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80058ae:	2300      	movs	r3, #0
 80058b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058b4:	4917      	ldr	r1, [pc, #92]	; (8005914 <SEGGER_SYSVIEW_Init+0x74>)
 80058b6:	4818      	ldr	r0, [pc, #96]	; (8005918 <SEGGER_SYSVIEW_Init+0x78>)
 80058b8:	f7ff f8d0 	bl	8004a5c <SEGGER_RTT_AllocUpBuffer>
 80058bc:	4603      	mov	r3, r0
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	4b16      	ldr	r3, [pc, #88]	; (800591c <SEGGER_SYSVIEW_Init+0x7c>)
 80058c2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80058c4:	4b15      	ldr	r3, [pc, #84]	; (800591c <SEGGER_SYSVIEW_Init+0x7c>)
 80058c6:	785a      	ldrb	r2, [r3, #1]
 80058c8:	4b14      	ldr	r3, [pc, #80]	; (800591c <SEGGER_SYSVIEW_Init+0x7c>)
 80058ca:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80058cc:	4b13      	ldr	r3, [pc, #76]	; (800591c <SEGGER_SYSVIEW_Init+0x7c>)
 80058ce:	7e1b      	ldrb	r3, [r3, #24]
 80058d0:	4618      	mov	r0, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	2308      	movs	r3, #8
 80058d8:	4a11      	ldr	r2, [pc, #68]	; (8005920 <SEGGER_SYSVIEW_Init+0x80>)
 80058da:	490f      	ldr	r1, [pc, #60]	; (8005918 <SEGGER_SYSVIEW_Init+0x78>)
 80058dc:	f7ff f942 	bl	8004b64 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80058e0:	4b0e      	ldr	r3, [pc, #56]	; (800591c <SEGGER_SYSVIEW_Init+0x7c>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80058e6:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <SEGGER_SYSVIEW_Init+0x84>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a0c      	ldr	r2, [pc, #48]	; (800591c <SEGGER_SYSVIEW_Init+0x7c>)
 80058ec:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80058ee:	4a0b      	ldr	r2, [pc, #44]	; (800591c <SEGGER_SYSVIEW_Init+0x7c>)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80058f4:	4a09      	ldr	r2, [pc, #36]	; (800591c <SEGGER_SYSVIEW_Init+0x7c>)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80058fa:	4a08      	ldr	r2, [pc, #32]	; (800591c <SEGGER_SYSVIEW_Init+0x7c>)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005900:	4a06      	ldr	r2, [pc, #24]	; (800591c <SEGGER_SYSVIEW_Init+0x7c>)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005906:	4b05      	ldr	r3, [pc, #20]	; (800591c <SEGGER_SYSVIEW_Init+0x7c>)
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20019724 	.word	0x20019724
 8005918:	08006bf8 	.word	0x08006bf8
 800591c:	2001a72c 	.word	0x2001a72c
 8005920:	2001a724 	.word	0x2001a724
 8005924:	e0001004 	.word	0xe0001004

08005928 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005930:	4a04      	ldr	r2, [pc, #16]	; (8005944 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6113      	str	r3, [r2, #16]
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	2001a72c 	.word	0x2001a72c

08005948 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005950:	f3ef 8311 	mrs	r3, BASEPRI
 8005954:	f04f 0120 	mov.w	r1, #32
 8005958:	f381 8811 	msr	BASEPRI, r1
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	4808      	ldr	r0, [pc, #32]	; (8005980 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005960:	f7ff f97c 	bl	8004c5c <_PreparePacket>
 8005964:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	68b8      	ldr	r0, [r7, #8]
 800596c:	f7ff fa66 	bl	8004e3c <_SendPacket>
  RECORD_END();
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f383 8811 	msr	BASEPRI, r3
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	2001a75c 	.word	0x2001a75c

08005984 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800598e:	f3ef 8311 	mrs	r3, BASEPRI
 8005992:	f04f 0120 	mov.w	r1, #32
 8005996:	f381 8811 	msr	BASEPRI, r1
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	4816      	ldr	r0, [pc, #88]	; (80059f8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800599e:	f7ff f95d 	bl	8004c5c <_PreparePacket>
 80059a2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	61bb      	str	r3, [r7, #24]
 80059b0:	e00b      	b.n	80059ca <SEGGER_SYSVIEW_RecordU32+0x46>
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	1c59      	adds	r1, r3, #1
 80059ba:	61f9      	str	r1, [r7, #28]
 80059bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	09db      	lsrs	r3, r3, #7
 80059c8:	61bb      	str	r3, [r7, #24]
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	2b7f      	cmp	r3, #127	; 0x7f
 80059ce:	d8f0      	bhi.n	80059b2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	61fa      	str	r2, [r7, #28]
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	68f9      	ldr	r1, [r7, #12]
 80059e4:	6938      	ldr	r0, [r7, #16]
 80059e6:	f7ff fa29 	bl	8004e3c <_SendPacket>
  RECORD_END();
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f383 8811 	msr	BASEPRI, r3
}
 80059f0:	bf00      	nop
 80059f2:	3720      	adds	r7, #32
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	2001a75c 	.word	0x2001a75c

080059fc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08c      	sub	sp, #48	; 0x30
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a08:	f3ef 8311 	mrs	r3, BASEPRI
 8005a0c:	f04f 0120 	mov.w	r1, #32
 8005a10:	f381 8811 	msr	BASEPRI, r1
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	4825      	ldr	r0, [pc, #148]	; (8005aac <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005a18:	f7ff f920 	bl	8004c5c <_PreparePacket>
 8005a1c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2a:	e00b      	b.n	8005a44 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	1c59      	adds	r1, r3, #1
 8005a34:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	09db      	lsrs	r3, r3, #7
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	2b7f      	cmp	r3, #127	; 0x7f
 8005a48:	d8f0      	bhi.n	8005a2c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	623b      	str	r3, [r7, #32]
 8005a62:	e00b      	b.n	8005a7c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	1c59      	adds	r1, r3, #1
 8005a6c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	09db      	lsrs	r3, r3, #7
 8005a7a:	623b      	str	r3, [r7, #32]
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a80:	d8f0      	bhi.n	8005a64 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	627a      	str	r2, [r7, #36]	; 0x24
 8005a88:	6a3a      	ldr	r2, [r7, #32]
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	6979      	ldr	r1, [r7, #20]
 8005a96:	69b8      	ldr	r0, [r7, #24]
 8005a98:	f7ff f9d0 	bl	8004e3c <_SendPacket>
  RECORD_END();
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f383 8811 	msr	BASEPRI, r3
}
 8005aa2:	bf00      	nop
 8005aa4:	3730      	adds	r7, #48	; 0x30
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	2001a75c 	.word	0x2001a75c

08005ab0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b090      	sub	sp, #64	; 0x40
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005abe:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac2:	f04f 0120 	mov.w	r1, #32
 8005ac6:	f381 8811 	msr	BASEPRI, r1
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	4840      	ldr	r0, [pc, #256]	; (8005bd0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005ace:	f7ff f8c5 	bl	8004c5c <_PreparePacket>
 8005ad2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ae0:	e00b      	b.n	8005afa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae8:	1c59      	adds	r1, r3, #1
 8005aea:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005aec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	701a      	strb	r2, [r3, #0]
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	09db      	lsrs	r3, r3, #7
 8005af8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	2b7f      	cmp	r3, #127	; 0x7f
 8005afe:	d8f0      	bhi.n	8005ae2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	637b      	str	r3, [r7, #52]	; 0x34
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	633b      	str	r3, [r7, #48]	; 0x30
 8005b18:	e00b      	b.n	8005b32 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b20:	1c59      	adds	r1, r3, #1
 8005b22:	6379      	str	r1, [r7, #52]	; 0x34
 8005b24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	09db      	lsrs	r3, r3, #7
 8005b30:	633b      	str	r3, [r7, #48]	; 0x30
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	2b7f      	cmp	r3, #127	; 0x7f
 8005b36:	d8f0      	bhi.n	8005b1a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	637a      	str	r2, [r7, #52]	; 0x34
 8005b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b50:	e00b      	b.n	8005b6a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	1c59      	adds	r1, r3, #1
 8005b5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	09db      	lsrs	r3, r3, #7
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b6e:	d8f0      	bhi.n	8005b52 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24
 8005b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b86:	623b      	str	r3, [r7, #32]
 8005b88:	e00b      	b.n	8005ba2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	1c59      	adds	r1, r3, #1
 8005b92:	6279      	str	r1, [r7, #36]	; 0x24
 8005b94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	09db      	lsrs	r3, r3, #7
 8005ba0:	623b      	str	r3, [r7, #32]
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba6:	d8f0      	bhi.n	8005b8a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	627a      	str	r2, [r7, #36]	; 0x24
 8005bae:	6a3a      	ldr	r2, [r7, #32]
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	701a      	strb	r2, [r3, #0]
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	6979      	ldr	r1, [r7, #20]
 8005bbc:	69b8      	ldr	r0, [r7, #24]
 8005bbe:	f7ff f93d 	bl	8004e3c <_SendPacket>
  RECORD_END();
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	f383 8811 	msr	BASEPRI, r3
}
 8005bc8:	bf00      	nop
 8005bca:	3740      	adds	r7, #64	; 0x40
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	2001a75c 	.word	0x2001a75c

08005bd4 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b092      	sub	sp, #72	; 0x48
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8005be2:	f3ef 8311 	mrs	r3, BASEPRI
 8005be6:	f04f 0120 	mov.w	r1, #32
 8005bea:	f381 8811 	msr	BASEPRI, r1
 8005bee:	61fb      	str	r3, [r7, #28]
 8005bf0:	484e      	ldr	r0, [pc, #312]	; (8005d2c <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8005bf2:	f7ff f833 	bl	8004c5c <_PreparePacket>
 8005bf6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	643b      	str	r3, [r7, #64]	; 0x40
 8005c04:	e00b      	b.n	8005c1e <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8005c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0c:	1c59      	adds	r1, r3, #1
 8005c0e:	6479      	str	r1, [r7, #68]	; 0x44
 8005c10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c1a:	09db      	lsrs	r3, r3, #7
 8005c1c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c20:	2b7f      	cmp	r3, #127	; 0x7f
 8005c22:	d8f0      	bhi.n	8005c06 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8005c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	647a      	str	r2, [r7, #68]	; 0x44
 8005c2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c3c:	e00b      	b.n	8005c56 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c44:	1c59      	adds	r1, r3, #1
 8005c46:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005c48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	09db      	lsrs	r3, r3, #7
 8005c54:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	2b7f      	cmp	r3, #127	; 0x7f
 8005c5a:	d8f0      	bhi.n	8005c3e <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8005c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	701a      	strb	r2, [r3, #0]
 8005c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	633b      	str	r3, [r7, #48]	; 0x30
 8005c74:	e00b      	b.n	8005c8e <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7c:	1c59      	adds	r1, r3, #1
 8005c7e:	6379      	str	r1, [r7, #52]	; 0x34
 8005c80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	09db      	lsrs	r3, r3, #7
 8005c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	2b7f      	cmp	r3, #127	; 0x7f
 8005c92:	d8f0      	bhi.n	8005c76 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8005c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	637a      	str	r2, [r7, #52]	; 0x34
 8005c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cac:	e00b      	b.n	8005cc6 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb4:	1c59      	adds	r1, r3, #1
 8005cb6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	09db      	lsrs	r3, r3, #7
 8005cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cca:	d8f0      	bhi.n	8005cae <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce2:	623b      	str	r3, [r7, #32]
 8005ce4:	e00b      	b.n	8005cfe <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	1c59      	adds	r1, r3, #1
 8005cee:	6279      	str	r1, [r7, #36]	; 0x24
 8005cf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	09db      	lsrs	r3, r3, #7
 8005cfc:	623b      	str	r3, [r7, #32]
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2b7f      	cmp	r3, #127	; 0x7f
 8005d02:	d8f0      	bhi.n	8005ce6 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	627a      	str	r2, [r7, #36]	; 0x24
 8005d0a:	6a3a      	ldr	r2, [r7, #32]
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	6979      	ldr	r1, [r7, #20]
 8005d18:	69b8      	ldr	r0, [r7, #24]
 8005d1a:	f7ff f88f 	bl	8004e3c <_SendPacket>
  RECORD_END();
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f383 8811 	msr	BASEPRI, r3
}
 8005d24:	bf00      	nop
 8005d26:	3748      	adds	r7, #72	; 0x48
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	2001a75c 	.word	0x2001a75c

08005d30 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08c      	sub	sp, #48	; 0x30
 8005d34:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005d36:	4b59      	ldr	r3, [pc, #356]	; (8005e9c <SEGGER_SYSVIEW_Start+0x16c>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005d3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d40:	f04f 0120 	mov.w	r1, #32
 8005d44:	f381 8811 	msr	BASEPRI, r1
 8005d48:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005d4a:	4b54      	ldr	r3, [pc, #336]	; (8005e9c <SEGGER_SYSVIEW_Start+0x16c>)
 8005d4c:	785b      	ldrb	r3, [r3, #1]
 8005d4e:	220a      	movs	r2, #10
 8005d50:	4953      	ldr	r1, [pc, #332]	; (8005ea0 <SEGGER_SYSVIEW_Start+0x170>)
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fa fa5c 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005d5e:	f7fe fb4f 	bl	8004400 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005d62:	200a      	movs	r0, #10
 8005d64:	f7ff fdf0 	bl	8005948 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d68:	f3ef 8311 	mrs	r3, BASEPRI
 8005d6c:	f04f 0120 	mov.w	r1, #32
 8005d70:	f381 8811 	msr	BASEPRI, r1
 8005d74:	60bb      	str	r3, [r7, #8]
 8005d76:	484b      	ldr	r0, [pc, #300]	; (8005ea4 <SEGGER_SYSVIEW_Start+0x174>)
 8005d78:	f7fe ff70 	bl	8004c5c <_PreparePacket>
 8005d7c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d86:	4b45      	ldr	r3, [pc, #276]	; (8005e9c <SEGGER_SYSVIEW_Start+0x16c>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d8c:	e00b      	b.n	8005da6 <SEGGER_SYSVIEW_Start+0x76>
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	1c59      	adds	r1, r3, #1
 8005d96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	09db      	lsrs	r3, r3, #7
 8005da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	2b7f      	cmp	r3, #127	; 0x7f
 8005daa:	d8f0      	bhi.n	8005d8e <SEGGER_SYSVIEW_Start+0x5e>
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc0:	4b36      	ldr	r3, [pc, #216]	; (8005e9c <SEGGER_SYSVIEW_Start+0x16c>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	623b      	str	r3, [r7, #32]
 8005dc6:	e00b      	b.n	8005de0 <SEGGER_SYSVIEW_Start+0xb0>
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	1c59      	adds	r1, r3, #1
 8005dd0:	6279      	str	r1, [r7, #36]	; 0x24
 8005dd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	09db      	lsrs	r3, r3, #7
 8005dde:	623b      	str	r3, [r7, #32]
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	2b7f      	cmp	r3, #127	; 0x7f
 8005de4:	d8f0      	bhi.n	8005dc8 <SEGGER_SYSVIEW_Start+0x98>
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	627a      	str	r2, [r7, #36]	; 0x24
 8005dec:	6a3a      	ldr	r2, [r7, #32]
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	4b28      	ldr	r3, [pc, #160]	; (8005e9c <SEGGER_SYSVIEW_Start+0x16c>)
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	61bb      	str	r3, [r7, #24]
 8005e00:	e00b      	b.n	8005e1a <SEGGER_SYSVIEW_Start+0xea>
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	1c59      	adds	r1, r3, #1
 8005e0a:	61f9      	str	r1, [r7, #28]
 8005e0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	09db      	lsrs	r3, r3, #7
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e1e:	d8f0      	bhi.n	8005e02 <SEGGER_SYSVIEW_Start+0xd2>
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	61fa      	str	r2, [r7, #28]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	2300      	movs	r3, #0
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	e00b      	b.n	8005e52 <SEGGER_SYSVIEW_Start+0x122>
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	1c59      	adds	r1, r3, #1
 8005e42:	6179      	str	r1, [r7, #20]
 8005e44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	09db      	lsrs	r3, r3, #7
 8005e50:	613b      	str	r3, [r7, #16]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	2b7f      	cmp	r3, #127	; 0x7f
 8005e56:	d8f0      	bhi.n	8005e3a <SEGGER_SYSVIEW_Start+0x10a>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	617a      	str	r2, [r7, #20]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005e68:	2218      	movs	r2, #24
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7fe ffe5 	bl	8004e3c <_SendPacket>
      RECORD_END();
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005e78:	4b08      	ldr	r3, [pc, #32]	; (8005e9c <SEGGER_SYSVIEW_Start+0x16c>)
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <SEGGER_SYSVIEW_Start+0x16c>)
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005e86:	f000 f9eb 	bl	8006260 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005e8a:	f000 f9b1 	bl	80061f0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005e8e:	f000 fc8d 	bl	80067ac <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005e92:	bf00      	nop
 8005e94:	3730      	adds	r7, #48	; 0x30
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	2001a72c 	.word	0x2001a72c
 8005ea0:	08006c38 	.word	0x08006c38
 8005ea4:	2001a75c 	.word	0x2001a75c

08005ea8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005eae:	f3ef 8311 	mrs	r3, BASEPRI
 8005eb2:	f04f 0120 	mov.w	r1, #32
 8005eb6:	f381 8811 	msr	BASEPRI, r1
 8005eba:	607b      	str	r3, [r7, #4]
 8005ebc:	480b      	ldr	r0, [pc, #44]	; (8005eec <SEGGER_SYSVIEW_Stop+0x44>)
 8005ebe:	f7fe fecd 	bl	8004c5c <_PreparePacket>
 8005ec2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d007      	beq.n	8005edc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005ecc:	220b      	movs	r2, #11
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	6838      	ldr	r0, [r7, #0]
 8005ed2:	f7fe ffb3 	bl	8004e3c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005ed6:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f383 8811 	msr	BASEPRI, r3
}
 8005ee2:	bf00      	nop
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	2001a75c 	.word	0x2001a75c
 8005ef0:	2001a72c 	.word	0x2001a72c

08005ef4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08c      	sub	sp, #48	; 0x30
 8005ef8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005efa:	f3ef 8311 	mrs	r3, BASEPRI
 8005efe:	f04f 0120 	mov.w	r1, #32
 8005f02:	f381 8811 	msr	BASEPRI, r1
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	4845      	ldr	r0, [pc, #276]	; (8006020 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005f0a:	f7fe fea7 	bl	8004c5c <_PreparePacket>
 8005f0e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f18:	4b42      	ldr	r3, [pc, #264]	; (8006024 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f1e:	e00b      	b.n	8005f38 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	1c59      	adds	r1, r3, #1
 8005f28:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f34:	09db      	lsrs	r3, r3, #7
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f3c:	d8f0      	bhi.n	8005f20 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
 8005f52:	4b34      	ldr	r3, [pc, #208]	; (8006024 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	623b      	str	r3, [r7, #32]
 8005f58:	e00b      	b.n	8005f72 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	1c59      	adds	r1, r3, #1
 8005f62:	6279      	str	r1, [r7, #36]	; 0x24
 8005f64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	09db      	lsrs	r3, r3, #7
 8005f70:	623b      	str	r3, [r7, #32]
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	2b7f      	cmp	r3, #127	; 0x7f
 8005f76:	d8f0      	bhi.n	8005f5a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	627a      	str	r2, [r7, #36]	; 0x24
 8005f7e:	6a3a      	ldr	r2, [r7, #32]
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	61fb      	str	r3, [r7, #28]
 8005f8c:	4b25      	ldr	r3, [pc, #148]	; (8006024 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	e00b      	b.n	8005fac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	1c59      	adds	r1, r3, #1
 8005f9c:	61f9      	str	r1, [r7, #28]
 8005f9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	09db      	lsrs	r3, r3, #7
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2b7f      	cmp	r3, #127	; 0x7f
 8005fb0:	d8f0      	bhi.n	8005f94 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	61fa      	str	r2, [r7, #28]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	e00b      	b.n	8005fe4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	1c59      	adds	r1, r3, #1
 8005fd4:	6179      	str	r1, [r7, #20]
 8005fd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	09db      	lsrs	r3, r3, #7
 8005fe2:	613b      	str	r3, [r7, #16]
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe8:	d8f0      	bhi.n	8005fcc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	617a      	str	r2, [r7, #20]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ffa:	2218      	movs	r2, #24
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	68b8      	ldr	r0, [r7, #8]
 8006000:	f7fe ff1c 	bl	8004e3c <_SendPacket>
  RECORD_END();
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800600a:	4b06      	ldr	r3, [pc, #24]	; (8006024 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006012:	4b04      	ldr	r3, [pc, #16]	; (8006024 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	4798      	blx	r3
  }
}
 8006018:	bf00      	nop
 800601a:	3730      	adds	r7, #48	; 0x30
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	2001a75c 	.word	0x2001a75c
 8006024:	2001a72c 	.word	0x2001a72c

08006028 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b092      	sub	sp, #72	; 0x48
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006030:	f3ef 8311 	mrs	r3, BASEPRI
 8006034:	f04f 0120 	mov.w	r1, #32
 8006038:	f381 8811 	msr	BASEPRI, r1
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	486a      	ldr	r0, [pc, #424]	; (80061e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006040:	f7fe fe0c 	bl	8004c5c <_PreparePacket>
 8006044:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	647b      	str	r3, [r7, #68]	; 0x44
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4b66      	ldr	r3, [pc, #408]	; (80061ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	643b      	str	r3, [r7, #64]	; 0x40
 800605a:	e00b      	b.n	8006074 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800605c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800605e:	b2da      	uxtb	r2, r3
 8006060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006062:	1c59      	adds	r1, r3, #1
 8006064:	6479      	str	r1, [r7, #68]	; 0x44
 8006066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006070:	09db      	lsrs	r3, r3, #7
 8006072:	643b      	str	r3, [r7, #64]	; 0x40
 8006074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006076:	2b7f      	cmp	r3, #127	; 0x7f
 8006078:	d8f0      	bhi.n	800605c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800607a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	647a      	str	r2, [r7, #68]	; 0x44
 8006080:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006088:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	63bb      	str	r3, [r7, #56]	; 0x38
 8006094:	e00b      	b.n	80060ae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	b2da      	uxtb	r2, r3
 800609a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609c:	1c59      	adds	r1, r3, #1
 800609e:	63f9      	str	r1, [r7, #60]	; 0x3c
 80060a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	09db      	lsrs	r3, r3, #7
 80060ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	2b7f      	cmp	r3, #127	; 0x7f
 80060b2:	d8f0      	bhi.n	8006096 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80060b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80060ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	4619      	mov	r1, r3
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f7fe fd95 	bl	8004bfc <_EncodeStr>
 80060d2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80060d4:	2209      	movs	r2, #9
 80060d6:	68f9      	ldr	r1, [r7, #12]
 80060d8:	6938      	ldr	r0, [r7, #16]
 80060da:	f7fe feaf 	bl	8004e3c <_SendPacket>
  //
  pPayload = pPayloadStart;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	637b      	str	r3, [r7, #52]	; 0x34
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4b40      	ldr	r3, [pc, #256]	; (80061ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	633b      	str	r3, [r7, #48]	; 0x30
 80060f2:	e00b      	b.n	800610c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fa:	1c59      	adds	r1, r3, #1
 80060fc:	6379      	str	r1, [r7, #52]	; 0x34
 80060fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	09db      	lsrs	r3, r3, #7
 800610a:	633b      	str	r3, [r7, #48]	; 0x30
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	2b7f      	cmp	r3, #127	; 0x7f
 8006110:	d8f0      	bhi.n	80060f4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	637a      	str	r2, [r7, #52]	; 0x34
 8006118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006120:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	62bb      	str	r3, [r7, #40]	; 0x28
 800612c:	e00b      	b.n	8006146 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	b2da      	uxtb	r2, r3
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	1c59      	adds	r1, r3, #1
 8006136:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006138:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	09db      	lsrs	r3, r3, #7
 8006144:	62bb      	str	r3, [r7, #40]	; 0x28
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	2b7f      	cmp	r3, #127	; 0x7f
 800614a:	d8f0      	bhi.n	800612e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	623b      	str	r3, [r7, #32]
 8006166:	e00b      	b.n	8006180 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	b2da      	uxtb	r2, r3
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	1c59      	adds	r1, r3, #1
 8006170:	6279      	str	r1, [r7, #36]	; 0x24
 8006172:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	09db      	lsrs	r3, r3, #7
 800617e:	623b      	str	r3, [r7, #32]
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	2b7f      	cmp	r3, #127	; 0x7f
 8006184:	d8f0      	bhi.n	8006168 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	627a      	str	r2, [r7, #36]	; 0x24
 800618c:	6a3a      	ldr	r2, [r7, #32]
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	2300      	movs	r3, #0
 800619c:	61bb      	str	r3, [r7, #24]
 800619e:	e00b      	b.n	80061b8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	1c59      	adds	r1, r3, #1
 80061a8:	61f9      	str	r1, [r7, #28]
 80061aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	09db      	lsrs	r3, r3, #7
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	2b7f      	cmp	r3, #127	; 0x7f
 80061bc:	d8f0      	bhi.n	80061a0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	61fa      	str	r2, [r7, #28]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80061ce:	2215      	movs	r2, #21
 80061d0:	68f9      	ldr	r1, [r7, #12]
 80061d2:	6938      	ldr	r0, [r7, #16]
 80061d4:	f7fe fe32 	bl	8004e3c <_SendPacket>
  RECORD_END();
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f383 8811 	msr	BASEPRI, r3
}
 80061de:	bf00      	nop
 80061e0:	3748      	adds	r7, #72	; 0x48
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	2001a75c 	.word	0x2001a75c
 80061ec:	2001a72c 	.word	0x2001a72c

080061f0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80061f4:	4b07      	ldr	r3, [pc, #28]	; (8006214 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80061fc:	4b05      	ldr	r3, [pc, #20]	; (8006214 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006206:	4b03      	ldr	r3, [pc, #12]	; (8006214 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	4798      	blx	r3
  }
}
 800620e:	bf00      	nop
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	2001a72c 	.word	0x2001a72c

08006218 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006220:	f3ef 8311 	mrs	r3, BASEPRI
 8006224:	f04f 0120 	mov.w	r1, #32
 8006228:	f381 8811 	msr	BASEPRI, r1
 800622c:	617b      	str	r3, [r7, #20]
 800622e:	480b      	ldr	r0, [pc, #44]	; (800625c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006230:	f7fe fd14 	bl	8004c5c <_PreparePacket>
 8006234:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006236:	2280      	movs	r2, #128	; 0x80
 8006238:	6879      	ldr	r1, [r7, #4]
 800623a:	6938      	ldr	r0, [r7, #16]
 800623c:	f7fe fcde 	bl	8004bfc <_EncodeStr>
 8006240:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006242:	220e      	movs	r2, #14
 8006244:	68f9      	ldr	r1, [r7, #12]
 8006246:	6938      	ldr	r0, [r7, #16]
 8006248:	f7fe fdf8 	bl	8004e3c <_SendPacket>
  RECORD_END();
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f383 8811 	msr	BASEPRI, r3
}
 8006252:	bf00      	nop
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	2001a75c 	.word	0x2001a75c

08006260 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006260:	b590      	push	{r4, r7, lr}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006266:	4b15      	ldr	r3, [pc, #84]	; (80062bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01a      	beq.n	80062a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800626e:	4b13      	ldr	r3, [pc, #76]	; (80062bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d015      	beq.n	80062a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006278:	4b10      	ldr	r3, [pc, #64]	; (80062bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4798      	blx	r3
 8006280:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006284:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006286:	e9d7 0100 	ldrd	r0, r1, [r7]
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	f04f 0300 	mov.w	r3, #0
 8006292:	000a      	movs	r2, r1
 8006294:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006296:	4613      	mov	r3, r2
 8006298:	461a      	mov	r2, r3
 800629a:	4621      	mov	r1, r4
 800629c:	200d      	movs	r0, #13
 800629e:	f7ff fbad 	bl	80059fc <SEGGER_SYSVIEW_RecordU32x2>
 80062a2:	e006      	b.n	80062b2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80062a4:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4619      	mov	r1, r3
 80062aa:	200c      	movs	r0, #12
 80062ac:	f7ff fb6a 	bl	8005984 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd90      	pop	{r4, r7, pc}
 80062ba:	bf00      	nop
 80062bc:	2001a72c 	.word	0x2001a72c
 80062c0:	e0001004 	.word	0xe0001004

080062c4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062ca:	f3ef 8311 	mrs	r3, BASEPRI
 80062ce:	f04f 0120 	mov.w	r1, #32
 80062d2:	f381 8811 	msr	BASEPRI, r1
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	4819      	ldr	r0, [pc, #100]	; (8006340 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80062da:	f7fe fcbf 	bl	8004c5c <_PreparePacket>
 80062de:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80062e4:	4b17      	ldr	r3, [pc, #92]	; (8006344 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ec:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	e00b      	b.n	8006310 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	1c59      	adds	r1, r3, #1
 8006300:	6179      	str	r1, [r7, #20]
 8006302:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	09db      	lsrs	r3, r3, #7
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	2b7f      	cmp	r3, #127	; 0x7f
 8006314:	d8f0      	bhi.n	80062f8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	617a      	str	r2, [r7, #20]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006326:	2202      	movs	r2, #2
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	68b8      	ldr	r0, [r7, #8]
 800632c:	f7fe fd86 	bl	8004e3c <_SendPacket>
  RECORD_END();
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f383 8811 	msr	BASEPRI, r3
}
 8006336:	bf00      	nop
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	2001a75c 	.word	0x2001a75c
 8006344:	e000ed04 	.word	0xe000ed04

08006348 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800634e:	f3ef 8311 	mrs	r3, BASEPRI
 8006352:	f04f 0120 	mov.w	r1, #32
 8006356:	f381 8811 	msr	BASEPRI, r1
 800635a:	607b      	str	r3, [r7, #4]
 800635c:	4807      	ldr	r0, [pc, #28]	; (800637c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800635e:	f7fe fc7d 	bl	8004c5c <_PreparePacket>
 8006362:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006364:	2203      	movs	r2, #3
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6838      	ldr	r0, [r7, #0]
 800636a:	f7fe fd67 	bl	8004e3c <_SendPacket>
  RECORD_END();
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f383 8811 	msr	BASEPRI, r3
}
 8006374:	bf00      	nop
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	2001a75c 	.word	0x2001a75c

08006380 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006386:	f3ef 8311 	mrs	r3, BASEPRI
 800638a:	f04f 0120 	mov.w	r1, #32
 800638e:	f381 8811 	msr	BASEPRI, r1
 8006392:	607b      	str	r3, [r7, #4]
 8006394:	4807      	ldr	r0, [pc, #28]	; (80063b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006396:	f7fe fc61 	bl	8004c5c <_PreparePacket>
 800639a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800639c:	2212      	movs	r2, #18
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6838      	ldr	r0, [r7, #0]
 80063a2:	f7fe fd4b 	bl	8004e3c <_SendPacket>
  RECORD_END();
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f383 8811 	msr	BASEPRI, r3
}
 80063ac:	bf00      	nop
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	2001a75c 	.word	0x2001a75c

080063b8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063be:	f3ef 8311 	mrs	r3, BASEPRI
 80063c2:	f04f 0120 	mov.w	r1, #32
 80063c6:	f381 8811 	msr	BASEPRI, r1
 80063ca:	607b      	str	r3, [r7, #4]
 80063cc:	4807      	ldr	r0, [pc, #28]	; (80063ec <SEGGER_SYSVIEW_OnIdle+0x34>)
 80063ce:	f7fe fc45 	bl	8004c5c <_PreparePacket>
 80063d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80063d4:	2211      	movs	r2, #17
 80063d6:	6839      	ldr	r1, [r7, #0]
 80063d8:	6838      	ldr	r0, [r7, #0]
 80063da:	f7fe fd2f 	bl	8004e3c <_SendPacket>
  RECORD_END();
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f383 8811 	msr	BASEPRI, r3
}
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	2001a75c 	.word	0x2001a75c

080063f0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063f8:	f3ef 8311 	mrs	r3, BASEPRI
 80063fc:	f04f 0120 	mov.w	r1, #32
 8006400:	f381 8811 	msr	BASEPRI, r1
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	4819      	ldr	r0, [pc, #100]	; (800646c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006408:	f7fe fc28 	bl	8004c5c <_PreparePacket>
 800640c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006412:	4b17      	ldr	r3, [pc, #92]	; (8006470 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	e00b      	b.n	800643e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	b2da      	uxtb	r2, r3
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	1c59      	adds	r1, r3, #1
 800642e:	61f9      	str	r1, [r7, #28]
 8006430:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	09db      	lsrs	r3, r3, #7
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b7f      	cmp	r3, #127	; 0x7f
 8006442:	d8f0      	bhi.n	8006426 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	61fa      	str	r2, [r7, #28]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006454:	2208      	movs	r2, #8
 8006456:	68f9      	ldr	r1, [r7, #12]
 8006458:	6938      	ldr	r0, [r7, #16]
 800645a:	f7fe fcef 	bl	8004e3c <_SendPacket>
  RECORD_END();
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f383 8811 	msr	BASEPRI, r3
}
 8006464:	bf00      	nop
 8006466:	3720      	adds	r7, #32
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	2001a75c 	.word	0x2001a75c
 8006470:	2001a72c 	.word	0x2001a72c

08006474 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800647c:	f3ef 8311 	mrs	r3, BASEPRI
 8006480:	f04f 0120 	mov.w	r1, #32
 8006484:	f381 8811 	msr	BASEPRI, r1
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	4819      	ldr	r0, [pc, #100]	; (80064f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800648c:	f7fe fbe6 	bl	8004c5c <_PreparePacket>
 8006490:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006496:	4b17      	ldr	r3, [pc, #92]	; (80064f4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	61bb      	str	r3, [r7, #24]
 80064a8:	e00b      	b.n	80064c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	1c59      	adds	r1, r3, #1
 80064b2:	61f9      	str	r1, [r7, #28]
 80064b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	09db      	lsrs	r3, r3, #7
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	2b7f      	cmp	r3, #127	; 0x7f
 80064c6:	d8f0      	bhi.n	80064aa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	61fa      	str	r2, [r7, #28]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80064d8:	2204      	movs	r2, #4
 80064da:	68f9      	ldr	r1, [r7, #12]
 80064dc:	6938      	ldr	r0, [r7, #16]
 80064de:	f7fe fcad 	bl	8004e3c <_SendPacket>
  RECORD_END();
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f383 8811 	msr	BASEPRI, r3
}
 80064e8:	bf00      	nop
 80064ea:	3720      	adds	r7, #32
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	2001a75c 	.word	0x2001a75c
 80064f4:	2001a72c 	.word	0x2001a72c

080064f8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006500:	f3ef 8311 	mrs	r3, BASEPRI
 8006504:	f04f 0120 	mov.w	r1, #32
 8006508:	f381 8811 	msr	BASEPRI, r1
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	4819      	ldr	r0, [pc, #100]	; (8006574 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006510:	f7fe fba4 	bl	8004c5c <_PreparePacket>
 8006514:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800651a:	4b17      	ldr	r3, [pc, #92]	; (8006578 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	61bb      	str	r3, [r7, #24]
 800652c:	e00b      	b.n	8006546 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	b2da      	uxtb	r2, r3
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	1c59      	adds	r1, r3, #1
 8006536:	61f9      	str	r1, [r7, #28]
 8006538:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	701a      	strb	r2, [r3, #0]
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	09db      	lsrs	r3, r3, #7
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2b7f      	cmp	r3, #127	; 0x7f
 800654a:	d8f0      	bhi.n	800652e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	61fa      	str	r2, [r7, #28]
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	701a      	strb	r2, [r3, #0]
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800655c:	2206      	movs	r2, #6
 800655e:	68f9      	ldr	r1, [r7, #12]
 8006560:	6938      	ldr	r0, [r7, #16]
 8006562:	f7fe fc6b 	bl	8004e3c <_SendPacket>
  RECORD_END();
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f383 8811 	msr	BASEPRI, r3
}
 800656c:	bf00      	nop
 800656e:	3720      	adds	r7, #32
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	2001a75c 	.word	0x2001a75c
 8006578:	2001a72c 	.word	0x2001a72c

0800657c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800657c:	b580      	push	{r7, lr}
 800657e:	b08a      	sub	sp, #40	; 0x28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006586:	f3ef 8311 	mrs	r3, BASEPRI
 800658a:	f04f 0120 	mov.w	r1, #32
 800658e:	f381 8811 	msr	BASEPRI, r1
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	4827      	ldr	r0, [pc, #156]	; (8006634 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006596:	f7fe fb61 	bl	8004c5c <_PreparePacket>
 800659a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80065a0:	4b25      	ldr	r3, [pc, #148]	; (8006638 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	623b      	str	r3, [r7, #32]
 80065b2:	e00b      	b.n	80065cc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	1c59      	adds	r1, r3, #1
 80065bc:	6279      	str	r1, [r7, #36]	; 0x24
 80065be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	09db      	lsrs	r3, r3, #7
 80065ca:	623b      	str	r3, [r7, #32]
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	2b7f      	cmp	r3, #127	; 0x7f
 80065d0:	d8f0      	bhi.n	80065b4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	627a      	str	r2, [r7, #36]	; 0x24
 80065d8:	6a3a      	ldr	r2, [r7, #32]
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	61fb      	str	r3, [r7, #28]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	e00b      	b.n	8006604 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	1c59      	adds	r1, r3, #1
 80065f4:	61f9      	str	r1, [r7, #28]
 80065f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	09db      	lsrs	r3, r3, #7
 8006602:	61bb      	str	r3, [r7, #24]
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	2b7f      	cmp	r3, #127	; 0x7f
 8006608:	d8f0      	bhi.n	80065ec <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	61fa      	str	r2, [r7, #28]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800661a:	2207      	movs	r2, #7
 800661c:	68f9      	ldr	r1, [r7, #12]
 800661e:	6938      	ldr	r0, [r7, #16]
 8006620:	f7fe fc0c 	bl	8004e3c <_SendPacket>
  RECORD_END();
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f383 8811 	msr	BASEPRI, r3
}
 800662a:	bf00      	nop
 800662c:	3728      	adds	r7, #40	; 0x28
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	2001a75c 	.word	0x2001a75c
 8006638:	2001a72c 	.word	0x2001a72c

0800663c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006644:	4b04      	ldr	r3, [pc, #16]	; (8006658 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	1ad3      	subs	r3, r2, r3
}
 800664c:	4618      	mov	r0, r3
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	2001a72c 	.word	0x2001a72c

0800665c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b08c      	sub	sp, #48	; 0x30
 8006660:	af00      	add	r7, sp, #0
 8006662:	4603      	mov	r3, r0
 8006664:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006666:	4b40      	ldr	r3, [pc, #256]	; (8006768 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d077      	beq.n	800675e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800666e:	4b3e      	ldr	r3, [pc, #248]	; (8006768 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006674:	2300      	movs	r3, #0
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
 8006678:	e008      	b.n	800668c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800667a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d007      	beq.n	8006696 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	3301      	adds	r3, #1
 800668a:	62bb      	str	r3, [r7, #40]	; 0x28
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006690:	429a      	cmp	r2, r3
 8006692:	d3f2      	bcc.n	800667a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006694:	e000      	b.n	8006698 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006696:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	2b00      	cmp	r3, #0
 800669c:	d055      	beq.n	800674a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800669e:	f3ef 8311 	mrs	r3, BASEPRI
 80066a2:	f04f 0120 	mov.w	r1, #32
 80066a6:	f381 8811 	msr	BASEPRI, r1
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	482f      	ldr	r0, [pc, #188]	; (800676c <SEGGER_SYSVIEW_SendModule+0x110>)
 80066ae:	f7fe fad5 	bl	8004c5c <_PreparePacket>
 80066b2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	623b      	str	r3, [r7, #32]
 80066c0:	e00b      	b.n	80066da <SEGGER_SYSVIEW_SendModule+0x7e>
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	1c59      	adds	r1, r3, #1
 80066ca:	6279      	str	r1, [r7, #36]	; 0x24
 80066cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	09db      	lsrs	r3, r3, #7
 80066d8:	623b      	str	r3, [r7, #32]
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	2b7f      	cmp	r3, #127	; 0x7f
 80066de:	d8f0      	bhi.n	80066c2 <SEGGER_SYSVIEW_SendModule+0x66>
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	627a      	str	r2, [r7, #36]	; 0x24
 80066e6:	6a3a      	ldr	r2, [r7, #32]
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	61fb      	str	r3, [r7, #28]
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	e00b      	b.n	8006714 <SEGGER_SYSVIEW_SendModule+0xb8>
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	1c59      	adds	r1, r3, #1
 8006704:	61f9      	str	r1, [r7, #28]
 8006706:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	09db      	lsrs	r3, r3, #7
 8006712:	61bb      	str	r3, [r7, #24]
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b7f      	cmp	r3, #127	; 0x7f
 8006718:	d8f0      	bhi.n	80066fc <SEGGER_SYSVIEW_SendModule+0xa0>
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	61fa      	str	r2, [r7, #28]
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	b2d2      	uxtb	r2, r2
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800672a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2280      	movs	r2, #128	; 0x80
 8006730:	4619      	mov	r1, r3
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7fe fa62 	bl	8004bfc <_EncodeStr>
 8006738:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800673a:	2216      	movs	r2, #22
 800673c:	68f9      	ldr	r1, [r7, #12]
 800673e:	6938      	ldr	r0, [r7, #16]
 8006740:	f7fe fb7c 	bl	8004e3c <_SendPacket>
      RECORD_END();
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d006      	beq.n	800675e <SEGGER_SYSVIEW_SendModule+0x102>
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4798      	blx	r3
    }
  }
}
 800675e:	bf00      	nop
 8006760:	3730      	adds	r7, #48	; 0x30
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	2001a754 	.word	0x2001a754
 800676c:	2001a75c 	.word	0x2001a75c

08006770 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006776:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00f      	beq.n	800679e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800677e:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1f2      	bne.n	8006784 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	2001a754 	.word	0x2001a754

080067ac <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80067b2:	f3ef 8311 	mrs	r3, BASEPRI
 80067b6:	f04f 0120 	mov.w	r1, #32
 80067ba:	f381 8811 	msr	BASEPRI, r1
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	4817      	ldr	r0, [pc, #92]	; (8006820 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80067c2:	f7fe fa4b 	bl	8004c5c <_PreparePacket>
 80067c6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	4b14      	ldr	r3, [pc, #80]	; (8006824 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	613b      	str	r3, [r7, #16]
 80067d6:	e00b      	b.n	80067f0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	1c59      	adds	r1, r3, #1
 80067e0:	6179      	str	r1, [r7, #20]
 80067e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	09db      	lsrs	r3, r3, #7
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2b7f      	cmp	r3, #127	; 0x7f
 80067f4:	d8f0      	bhi.n	80067d8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	617a      	str	r2, [r7, #20]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006806:	221b      	movs	r2, #27
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	68b8      	ldr	r0, [r7, #8]
 800680c:	f7fe fb16 	bl	8004e3c <_SendPacket>
  RECORD_END();
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f383 8811 	msr	BASEPRI, r3
}
 8006816:	bf00      	nop
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	2001a75c 	.word	0x2001a75c
 8006824:	2001a758 	.word	0x2001a758

08006828 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006828:	b40f      	push	{r0, r1, r2, r3}
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006830:	f107 0314 	add.w	r3, r7, #20
 8006834:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006836:	1d3b      	adds	r3, r7, #4
 8006838:	461a      	mov	r2, r3
 800683a:	2100      	movs	r1, #0
 800683c:	6938      	ldr	r0, [r7, #16]
 800683e:	f7fe fe0f 	bl	8005460 <_VPrintTarget>
  va_end(ParamList);
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800684c:	b004      	add	sp, #16
 800684e:	4770      	bx	lr

08006850 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006850:	b580      	push	{r7, lr}
 8006852:	b08a      	sub	sp, #40	; 0x28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006858:	f3ef 8311 	mrs	r3, BASEPRI
 800685c:	f04f 0120 	mov.w	r1, #32
 8006860:	f381 8811 	msr	BASEPRI, r1
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	4827      	ldr	r0, [pc, #156]	; (8006904 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006868:	f7fe f9f8 	bl	8004c5c <_PreparePacket>
 800686c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800686e:	2280      	movs	r2, #128	; 0x80
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	6938      	ldr	r0, [r7, #16]
 8006874:	f7fe f9c2 	bl	8004bfc <_EncodeStr>
 8006878:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
 800687e:	2301      	movs	r3, #1
 8006880:	623b      	str	r3, [r7, #32]
 8006882:	e00b      	b.n	800689c <SEGGER_SYSVIEW_Warn+0x4c>
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	b2da      	uxtb	r2, r3
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	1c59      	adds	r1, r3, #1
 800688c:	6279      	str	r1, [r7, #36]	; 0x24
 800688e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	09db      	lsrs	r3, r3, #7
 800689a:	623b      	str	r3, [r7, #32]
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	2b7f      	cmp	r3, #127	; 0x7f
 80068a0:	d8f0      	bhi.n	8006884 <SEGGER_SYSVIEW_Warn+0x34>
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	627a      	str	r2, [r7, #36]	; 0x24
 80068a8:	6a3a      	ldr	r2, [r7, #32]
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	2300      	movs	r3, #0
 80068b8:	61bb      	str	r3, [r7, #24]
 80068ba:	e00b      	b.n	80068d4 <SEGGER_SYSVIEW_Warn+0x84>
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	1c59      	adds	r1, r3, #1
 80068c4:	61f9      	str	r1, [r7, #28]
 80068c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	09db      	lsrs	r3, r3, #7
 80068d2:	61bb      	str	r3, [r7, #24]
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2b7f      	cmp	r3, #127	; 0x7f
 80068d8:	d8f0      	bhi.n	80068bc <SEGGER_SYSVIEW_Warn+0x6c>
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	61fa      	str	r2, [r7, #28]
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80068ea:	221a      	movs	r2, #26
 80068ec:	68f9      	ldr	r1, [r7, #12]
 80068ee:	6938      	ldr	r0, [r7, #16]
 80068f0:	f7fe faa4 	bl	8004e3c <_SendPacket>
  RECORD_END();
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f383 8811 	msr	BASEPRI, r3
}
 80068fa:	bf00      	nop
 80068fc:	3728      	adds	r7, #40	; 0x28
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	2001a75c 	.word	0x2001a75c

08006908 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800690c:	4b13      	ldr	r3, [pc, #76]	; (800695c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800690e:	7e1b      	ldrb	r3, [r3, #24]
 8006910:	4619      	mov	r1, r3
 8006912:	4a13      	ldr	r2, [pc, #76]	; (8006960 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006914:	460b      	mov	r3, r1
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	440b      	add	r3, r1
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	4413      	add	r3, r2
 800691e:	336c      	adds	r3, #108	; 0x6c
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4b0e      	ldr	r3, [pc, #56]	; (800695c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006924:	7e1b      	ldrb	r3, [r3, #24]
 8006926:	4618      	mov	r0, r3
 8006928:	490d      	ldr	r1, [pc, #52]	; (8006960 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800692a:	4603      	mov	r3, r0
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	4403      	add	r3, r0
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	440b      	add	r3, r1
 8006934:	3370      	adds	r3, #112	; 0x70
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	d00b      	beq.n	8006954 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800693c:	4b07      	ldr	r3, [pc, #28]	; (800695c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800693e:	789b      	ldrb	r3, [r3, #2]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d107      	bne.n	8006954 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006944:	4b05      	ldr	r3, [pc, #20]	; (800695c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006946:	2201      	movs	r2, #1
 8006948:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800694a:	f7fe f993 	bl	8004c74 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800694e:	4b03      	ldr	r3, [pc, #12]	; (800695c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006950:	2200      	movs	r2, #0
 8006952:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006954:	4b01      	ldr	r3, [pc, #4]	; (800695c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006956:	781b      	ldrb	r3, [r3, #0]
}
 8006958:	4618      	mov	r0, r3
 800695a:	bd80      	pop	{r7, pc}
 800695c:	2001a72c 	.word	0x2001a72c
 8006960:	2001926c 	.word	0x2001926c

08006964 <__libc_init_array>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	4d0d      	ldr	r5, [pc, #52]	; (800699c <__libc_init_array+0x38>)
 8006968:	4c0d      	ldr	r4, [pc, #52]	; (80069a0 <__libc_init_array+0x3c>)
 800696a:	1b64      	subs	r4, r4, r5
 800696c:	10a4      	asrs	r4, r4, #2
 800696e:	2600      	movs	r6, #0
 8006970:	42a6      	cmp	r6, r4
 8006972:	d109      	bne.n	8006988 <__libc_init_array+0x24>
 8006974:	4d0b      	ldr	r5, [pc, #44]	; (80069a4 <__libc_init_array+0x40>)
 8006976:	4c0c      	ldr	r4, [pc, #48]	; (80069a8 <__libc_init_array+0x44>)
 8006978:	f000 f83e 	bl	80069f8 <_init>
 800697c:	1b64      	subs	r4, r4, r5
 800697e:	10a4      	asrs	r4, r4, #2
 8006980:	2600      	movs	r6, #0
 8006982:	42a6      	cmp	r6, r4
 8006984:	d105      	bne.n	8006992 <__libc_init_array+0x2e>
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	f855 3b04 	ldr.w	r3, [r5], #4
 800698c:	4798      	blx	r3
 800698e:	3601      	adds	r6, #1
 8006990:	e7ee      	b.n	8006970 <__libc_init_array+0xc>
 8006992:	f855 3b04 	ldr.w	r3, [r5], #4
 8006996:	4798      	blx	r3
 8006998:	3601      	adds	r6, #1
 800699a:	e7f2      	b.n	8006982 <__libc_init_array+0x1e>
 800699c:	08006c5c 	.word	0x08006c5c
 80069a0:	08006c5c 	.word	0x08006c5c
 80069a4:	08006c5c 	.word	0x08006c5c
 80069a8:	08006c60 	.word	0x08006c60

080069ac <memcmp>:
 80069ac:	b510      	push	{r4, lr}
 80069ae:	3901      	subs	r1, #1
 80069b0:	4402      	add	r2, r0
 80069b2:	4290      	cmp	r0, r2
 80069b4:	d101      	bne.n	80069ba <memcmp+0xe>
 80069b6:	2000      	movs	r0, #0
 80069b8:	e005      	b.n	80069c6 <memcmp+0x1a>
 80069ba:	7803      	ldrb	r3, [r0, #0]
 80069bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80069c0:	42a3      	cmp	r3, r4
 80069c2:	d001      	beq.n	80069c8 <memcmp+0x1c>
 80069c4:	1b18      	subs	r0, r3, r4
 80069c6:	bd10      	pop	{r4, pc}
 80069c8:	3001      	adds	r0, #1
 80069ca:	e7f2      	b.n	80069b2 <memcmp+0x6>

080069cc <memcpy>:
 80069cc:	440a      	add	r2, r1
 80069ce:	4291      	cmp	r1, r2
 80069d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80069d4:	d100      	bne.n	80069d8 <memcpy+0xc>
 80069d6:	4770      	bx	lr
 80069d8:	b510      	push	{r4, lr}
 80069da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069e2:	4291      	cmp	r1, r2
 80069e4:	d1f9      	bne.n	80069da <memcpy+0xe>
 80069e6:	bd10      	pop	{r4, pc}

080069e8 <memset>:
 80069e8:	4402      	add	r2, r0
 80069ea:	4603      	mov	r3, r0
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d100      	bne.n	80069f2 <memset+0xa>
 80069f0:	4770      	bx	lr
 80069f2:	f803 1b01 	strb.w	r1, [r3], #1
 80069f6:	e7f9      	b.n	80069ec <memset+0x4>

080069f8 <_init>:
 80069f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fa:	bf00      	nop
 80069fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fe:	bc08      	pop	{r3}
 8006a00:	469e      	mov	lr, r3
 8006a02:	4770      	bx	lr

08006a04 <_fini>:
 8006a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a06:	bf00      	nop
 8006a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0a:	bc08      	pop	{r3}
 8006a0c:	469e      	mov	lr, r3
 8006a0e:	4770      	bx	lr
