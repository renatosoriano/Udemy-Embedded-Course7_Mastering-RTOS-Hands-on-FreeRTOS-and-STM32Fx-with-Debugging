
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef8  08005ef8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f00  08005f00  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f00  08005f00  00015f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f04  08005f04  00015f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a814  2000001c  08005f24  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a830  08005f24  0002a830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ce8  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db8  00000000  00000000  00033d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00036af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  00037d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023981  00000000  00000000  00038e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f83  00000000  00000000  0005c7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db9b5  00000000  00000000  0007273c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e0f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c3c  00000000  00000000  0014e144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005d50 	.word	0x08005d50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08005d50 	.word	0x08005d50

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	2001925c 	.word	0x2001925c

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b8:	f000 b974 	b.w	80005a4 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468e      	mov	lr, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14d      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4694      	mov	ip, r2
 80002e6:	d969      	bls.n	80003bc <__udivmoddi4+0xe8>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b152      	cbz	r2, 8000304 <__udivmoddi4+0x30>
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	f1c2 0120 	rsb	r1, r2, #32
 80002f6:	fa20 f101 	lsr.w	r1, r0, r1
 80002fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000302:	4094      	lsls	r4, r2
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	0c21      	lsrs	r1, r4, #16
 800030a:	fbbe f6f8 	udiv	r6, lr, r8
 800030e:	fa1f f78c 	uxth.w	r7, ip
 8000312:	fb08 e316 	mls	r3, r8, r6, lr
 8000316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800031a:	fb06 f107 	mul.w	r1, r6, r7
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800032a:	f080 811f 	bcs.w	800056c <__udivmoddi4+0x298>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 811c 	bls.w	800056c <__udivmoddi4+0x298>
 8000334:	3e02      	subs	r6, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a5b      	subs	r3, r3, r1
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000340:	fb08 3310 	mls	r3, r8, r0, r3
 8000344:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000348:	fb00 f707 	mul.w	r7, r0, r7
 800034c:	42a7      	cmp	r7, r4
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x92>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000358:	f080 810a 	bcs.w	8000570 <__udivmoddi4+0x29c>
 800035c:	42a7      	cmp	r7, r4
 800035e:	f240 8107 	bls.w	8000570 <__udivmoddi4+0x29c>
 8000362:	4464      	add	r4, ip
 8000364:	3802      	subs	r0, #2
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	1be4      	subs	r4, r4, r7
 800036c:	2600      	movs	r6, #0
 800036e:	b11d      	cbz	r5, 8000378 <__udivmoddi4+0xa4>
 8000370:	40d4      	lsrs	r4, r2
 8000372:	2300      	movs	r3, #0
 8000374:	e9c5 4300 	strd	r4, r3, [r5]
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0xc2>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80ef 	beq.w	8000566 <__udivmoddi4+0x292>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x160>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xd4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80f9 	bhi.w	800059a <__udivmoddi4+0x2c6>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0303 	sbc.w	r3, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	469e      	mov	lr, r3
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e0      	beq.n	8000378 <__udivmoddi4+0xa4>
 80003b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ba:	e7dd      	b.n	8000378 <__udivmoddi4+0xa4>
 80003bc:	b902      	cbnz	r2, 80003c0 <__udivmoddi4+0xec>
 80003be:	deff      	udf	#255	; 0xff
 80003c0:	fab2 f282 	clz	r2, r2
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	f040 8092 	bne.w	80004ee <__udivmoddi4+0x21a>
 80003ca:	eba1 010c 	sub.w	r1, r1, ip
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	2601      	movs	r6, #1
 80003d8:	0c20      	lsrs	r0, r4, #16
 80003da:	fbb1 f3f7 	udiv	r3, r1, r7
 80003de:	fb07 1113 	mls	r1, r7, r3, r1
 80003e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e6:	fb0e f003 	mul.w	r0, lr, r3
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x12c>
 80003ee:	eb1c 0101 	adds.w	r1, ip, r1
 80003f2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x12a>
 80003f8:	4288      	cmp	r0, r1
 80003fa:	f200 80cb 	bhi.w	8000594 <__udivmoddi4+0x2c0>
 80003fe:	4643      	mov	r3, r8
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f7 	udiv	r0, r1, r7
 8000408:	fb07 1110 	mls	r1, r7, r0, r1
 800040c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000410:	fb0e fe00 	mul.w	lr, lr, r0
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x156>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x154>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2ca>
 8000428:	4608      	mov	r0, r1
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000432:	e79c      	b.n	800036e <__udivmoddi4+0x9a>
 8000434:	f1c6 0720 	rsb	r7, r6, #32
 8000438:	40b3      	lsls	r3, r6
 800043a:	fa22 fc07 	lsr.w	ip, r2, r7
 800043e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000442:	fa20 f407 	lsr.w	r4, r0, r7
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	431c      	orrs	r4, r3
 800044c:	40f9      	lsrs	r1, r7
 800044e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000452:	fa00 f306 	lsl.w	r3, r0, r6
 8000456:	fbb1 f8f9 	udiv	r8, r1, r9
 800045a:	0c20      	lsrs	r0, r4, #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fb09 1118 	mls	r1, r9, r8, r1
 8000464:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000468:	fb08 f00e 	mul.w	r0, r8, lr
 800046c:	4288      	cmp	r0, r1
 800046e:	fa02 f206 	lsl.w	r2, r2, r6
 8000472:	d90b      	bls.n	800048c <__udivmoddi4+0x1b8>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800047c:	f080 8088 	bcs.w	8000590 <__udivmoddi4+0x2bc>
 8000480:	4288      	cmp	r0, r1
 8000482:	f240 8085 	bls.w	8000590 <__udivmoddi4+0x2bc>
 8000486:	f1a8 0802 	sub.w	r8, r8, #2
 800048a:	4461      	add	r1, ip
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f9 	udiv	r0, r1, r9
 8000494:	fb09 1110 	mls	r1, r9, r0, r1
 8000498:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800049c:	fb00 fe0e 	mul.w	lr, r0, lr
 80004a0:	458e      	cmp	lr, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x1e2>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004ac:	d26c      	bcs.n	8000588 <__udivmoddi4+0x2b4>
 80004ae:	458e      	cmp	lr, r1
 80004b0:	d96a      	bls.n	8000588 <__udivmoddi4+0x2b4>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ba:	fba0 9402 	umull	r9, r4, r0, r2
 80004be:	eba1 010e 	sub.w	r1, r1, lr
 80004c2:	42a1      	cmp	r1, r4
 80004c4:	46c8      	mov	r8, r9
 80004c6:	46a6      	mov	lr, r4
 80004c8:	d356      	bcc.n	8000578 <__udivmoddi4+0x2a4>
 80004ca:	d053      	beq.n	8000574 <__udivmoddi4+0x2a0>
 80004cc:	b15d      	cbz	r5, 80004e6 <__udivmoddi4+0x212>
 80004ce:	ebb3 0208 	subs.w	r2, r3, r8
 80004d2:	eb61 010e 	sbc.w	r1, r1, lr
 80004d6:	fa01 f707 	lsl.w	r7, r1, r7
 80004da:	fa22 f306 	lsr.w	r3, r2, r6
 80004de:	40f1      	lsrs	r1, r6
 80004e0:	431f      	orrs	r7, r3
 80004e2:	e9c5 7100 	strd	r7, r1, [r5]
 80004e6:	2600      	movs	r6, #0
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	40d8      	lsrs	r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa21 f303 	lsr.w	r3, r1, r3
 80004fc:	4091      	lsls	r1, r2
 80004fe:	4301      	orrs	r1, r0
 8000500:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000504:	fa1f fe8c 	uxth.w	lr, ip
 8000508:	fbb3 f0f7 	udiv	r0, r3, r7
 800050c:	fb07 3610 	mls	r6, r7, r0, r3
 8000510:	0c0b      	lsrs	r3, r1, #16
 8000512:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000516:	fb00 f60e 	mul.w	r6, r0, lr
 800051a:	429e      	cmp	r6, r3
 800051c:	fa04 f402 	lsl.w	r4, r4, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x260>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052a:	d22f      	bcs.n	800058c <__udivmoddi4+0x2b8>
 800052c:	429e      	cmp	r6, r3
 800052e:	d92d      	bls.n	800058c <__udivmoddi4+0x2b8>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1b9b      	subs	r3, r3, r6
 8000536:	b289      	uxth	r1, r1
 8000538:	fbb3 f6f7 	udiv	r6, r3, r7
 800053c:	fb07 3316 	mls	r3, r7, r6, r3
 8000540:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000544:	fb06 f30e 	mul.w	r3, r6, lr
 8000548:	428b      	cmp	r3, r1
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x28a>
 800054c:	eb1c 0101 	adds.w	r1, ip, r1
 8000550:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000554:	d216      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000556:	428b      	cmp	r3, r1
 8000558:	d914      	bls.n	8000584 <__udivmoddi4+0x2b0>
 800055a:	3e02      	subs	r6, #2
 800055c:	4461      	add	r1, ip
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000564:	e738      	b.n	80003d8 <__udivmoddi4+0x104>
 8000566:	462e      	mov	r6, r5
 8000568:	4628      	mov	r0, r5
 800056a:	e705      	b.n	8000378 <__udivmoddi4+0xa4>
 800056c:	4606      	mov	r6, r0
 800056e:	e6e3      	b.n	8000338 <__udivmoddi4+0x64>
 8000570:	4618      	mov	r0, r3
 8000572:	e6f8      	b.n	8000366 <__udivmoddi4+0x92>
 8000574:	454b      	cmp	r3, r9
 8000576:	d2a9      	bcs.n	80004cc <__udivmoddi4+0x1f8>
 8000578:	ebb9 0802 	subs.w	r8, r9, r2
 800057c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000580:	3801      	subs	r0, #1
 8000582:	e7a3      	b.n	80004cc <__udivmoddi4+0x1f8>
 8000584:	4646      	mov	r6, r8
 8000586:	e7ea      	b.n	800055e <__udivmoddi4+0x28a>
 8000588:	4620      	mov	r0, r4
 800058a:	e794      	b.n	80004b6 <__udivmoddi4+0x1e2>
 800058c:	4640      	mov	r0, r8
 800058e:	e7d1      	b.n	8000534 <__udivmoddi4+0x260>
 8000590:	46d0      	mov	r8, sl
 8000592:	e77b      	b.n	800048c <__udivmoddi4+0x1b8>
 8000594:	3b02      	subs	r3, #2
 8000596:	4461      	add	r1, ip
 8000598:	e732      	b.n	8000400 <__udivmoddi4+0x12c>
 800059a:	4630      	mov	r0, r6
 800059c:	e709      	b.n	80003b2 <__udivmoddi4+0xde>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x156>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 faa1 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f86d 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8dd 	bl	8000774 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 80005ba:	482d      	ldr	r0, [pc, #180]	; (8000670 <main+0xc8>)
 80005bc:	f003 fa20 	bl	8003a00 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 80005c0:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <main+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a2b      	ldr	r2, [pc, #172]	; (8000674 <main+0xcc>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005cc:	f003 f842 	bl	8003654 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2302      	movs	r3, #2
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	22c8      	movs	r2, #200	; 0xc8
 80005de:	4926      	ldr	r1, [pc, #152]	; (8000678 <main+0xd0>)
 80005e0:	4826      	ldr	r0, [pc, #152]	; (800067c <main+0xd4>)
 80005e2:	f001 fefc 	bl	80023de <xTaskCreate>
 80005e6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d00a      	beq.n	8000604 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f2:	f383 8811 	msr	BASEPRI, r3
 80005f6:	f3bf 8f6f 	isb	sy
 80005fa:	f3bf 8f4f 	dsb	sy
 80005fe:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000600:	bf00      	nop
 8000602:	e7fe      	b.n	8000602 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2302      	movs	r3, #2
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	22c8      	movs	r2, #200	; 0xc8
 8000612:	491b      	ldr	r1, [pc, #108]	; (8000680 <main+0xd8>)
 8000614:	481b      	ldr	r0, [pc, #108]	; (8000684 <main+0xdc>)
 8000616:	f001 fee2 	bl	80023de <xTaskCreate>
 800061a:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d00a      	beq.n	8000638 <main+0x90>
        __asm volatile
 8000622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000626:	f383 8811 	msr	BASEPRI, r3
 800062a:	f3bf 8f6f 	isb	sy
 800062e:	f3bf 8f4f 	dsb	sy
 8000632:	617b      	str	r3, [r7, #20]
    }
 8000634:	bf00      	nop
 8000636:	e7fe      	b.n	8000636 <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	2302      	movs	r3, #2
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2300      	movs	r3, #0
 8000642:	22c8      	movs	r2, #200	; 0xc8
 8000644:	4910      	ldr	r1, [pc, #64]	; (8000688 <main+0xe0>)
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <main+0xe4>)
 8000648:	f001 fec9 	bl	80023de <xTaskCreate>
 800064c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00a      	beq.n	800066a <main+0xc2>
        __asm volatile
 8000654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	613b      	str	r3, [r7, #16]
    }
 8000666:	bf00      	nop
 8000668:	e7fe      	b.n	8000668 <main+0xc0>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800066a:	f002 f81b 	bl	80026a4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066e:	e7fe      	b.n	800066e <main+0xc6>
 8000670:	0007a120 	.word	0x0007a120
 8000674:	e0001000 	.word	0xe0001000
 8000678:	08005d68 	.word	0x08005d68
 800067c:	08000871 	.word	0x08000871
 8000680:	08005d78 	.word	0x08005d78
 8000684:	080008a9 	.word	0x080008a9
 8000688:	08005d88 	.word	0x08005d88
 800068c:	0800088d 	.word	0x0800088d

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fb4e 	bl	8005d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <SystemClock_Config+0xdc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a2b      	ldr	r2, [pc, #172]	; (800076c <SystemClock_Config+0xdc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <SystemClock_Config+0xdc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <SystemClock_Config+0xe0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a25      	ldr	r2, [pc, #148]	; (8000770 <SystemClock_Config+0xe0>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xe0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000700:	2308      	movs	r3, #8
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000704:	23b4      	movs	r3, #180	; 0xb4
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f001 f899 	bl	8001850 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000724:	f000 f8e0 	bl	80008e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000728:	f000 fcda 	bl	80010e0 <HAL_PWREx_EnableOverDrive>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000732:	f000 f8d9 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000742:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2105      	movs	r1, #5
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fd13 	bl	8001180 <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000760:	f000 f8c2 	bl	80008e8 <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3750      	adds	r7, #80	; 0x50
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b35      	ldr	r3, [pc, #212]	; (8000864 <MX_GPIO_Init+0xf0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a34      	ldr	r2, [pc, #208]	; (8000864 <MX_GPIO_Init+0xf0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <MX_GPIO_Init+0xf0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a2d      	ldr	r2, [pc, #180]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a26      	ldr	r2, [pc, #152]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	481a      	ldr	r0, [pc, #104]	; (8000868 <MX_GPIO_Init+0xf4>)
 8000800:	f000 fc54 	bl	80010ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <MX_GPIO_Init+0xf8>)
 800081c:	f000 fab2 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000820:	230c      	movs	r3, #12
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000830:	2307      	movs	r3, #7
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	480b      	ldr	r0, [pc, #44]	; (8000868 <MX_GPIO_Init+0xf4>)
 800083c:	f000 faa2 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000840:	2320      	movs	r3, #32
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_GPIO_Init+0xf4>)
 8000858:	f000 fa94 	bl	8000d84 <HAL_GPIO_Init>

}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	40020800 	.word	0x40020800

08000870 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <led_green_handler+0x18>)
 800087a:	f005 f981 	bl	8005b80 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
		HAL_Delay(1000);
 800087e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000882:	f000 f979 	bl	8000b78 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000886:	e7f7      	b.n	8000878 <led_green_handler+0x8>
 8000888:	08005d98 	.word	0x08005d98

0800088c <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <led_orange_handler+0x18>)
 8000896:	f005 f973 	bl	8005b80 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
		HAL_Delay(800);
 800089a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800089e:	f000 f96b 	bl	8000b78 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80008a2:	e7f7      	b.n	8000894 <led_orange_handler+0x8>
 80008a4:	08005dac 	.word	0x08005dac

080008a8 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <led_red_handler+0x18>)
 80008b2:	f005 f965 	bl	8005b80 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
		HAL_Delay(400);
 80008b6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008ba:	f000 f95d 	bl	8000b78 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80008be:	e7f7      	b.n	80008b0 <led_red_handler+0x8>
 80008c0:	08005dc0 	.word	0x08005dc0

080008c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d101      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d6:	f000 f92f 	bl	8000b38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40001000 	.word	0x40001000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <HAL_MspInit+0x4c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000932:	f002 fad9 	bl	8002ee8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08e      	sub	sp, #56	; 0x38
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <HAL_InitTick+0xe4>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	4a32      	ldr	r2, [pc, #200]	; (8000a28 <HAL_InitTick+0xe4>)
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	6413      	str	r3, [r2, #64]	; 0x40
 8000964:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <HAL_InitTick+0xe4>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	f003 0310 	and.w	r3, r3, #16
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000970:	f107 0210 	add.w	r2, r7, #16
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f000 fd06 	bl	800138c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000980:	6a3b      	ldr	r3, [r7, #32]
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000986:	2b00      	cmp	r3, #0
 8000988:	d103      	bne.n	8000992 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800098a:	f000 fceb 	bl	8001364 <HAL_RCC_GetPCLK1Freq>
 800098e:	6378      	str	r0, [r7, #52]	; 0x34
 8000990:	e004      	b.n	800099c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000992:	f000 fce7 	bl	8001364 <HAL_RCC_GetPCLK1Freq>
 8000996:	4603      	mov	r3, r0
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800099c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800099e:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <HAL_InitTick+0xe8>)
 80009a0:	fba2 2303 	umull	r2, r3, r2, r3
 80009a4:	0c9b      	lsrs	r3, r3, #18
 80009a6:	3b01      	subs	r3, #1
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <HAL_InitTick+0xec>)
 80009ac:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <HAL_InitTick+0xf0>)
 80009ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <HAL_InitTick+0xec>)
 80009b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009b8:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <HAL_InitTick+0xec>)
 80009ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009bc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <HAL_InitTick+0xec>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <HAL_InitTick+0xec>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <HAL_InitTick+0xec>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009d0:	4817      	ldr	r0, [pc, #92]	; (8000a30 <HAL_InitTick+0xec>)
 80009d2:	f001 f9db 	bl	8001d8c <HAL_TIM_Base_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d11b      	bne.n	8000a1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009e4:	4812      	ldr	r0, [pc, #72]	; (8000a30 <HAL_InitTick+0xec>)
 80009e6:	f001 fa2b 	bl	8001e40 <HAL_TIM_Base_Start_IT>
 80009ea:	4603      	mov	r3, r0
 80009ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d111      	bne.n	8000a1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009f8:	2036      	movs	r0, #54	; 0x36
 80009fa:	f000 f9b5 	bl	8000d68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b0f      	cmp	r3, #15
 8000a02:	d808      	bhi.n	8000a16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a04:	2200      	movs	r2, #0
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	2036      	movs	r0, #54	; 0x36
 8000a0a:	f000 f991 	bl	8000d30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_InitTick+0xf4>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	e002      	b.n	8000a1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3738      	adds	r7, #56	; 0x38
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	431bde83 	.word	0x431bde83
 8000a30:	20000038 	.word	0x20000038
 8000a34:	40001000 	.word	0x40001000
 8000a38:	20000004 	.word	0x20000004

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <TIM6_DAC_IRQHandler+0x10>)
 8000a6e:	f001 fa57 	bl	8001f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000038 	.word	0x20000038

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aa6:	490e      	ldr	r1, [pc, #56]	; (8000ae0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000abc:	4c0b      	ldr	r4, [pc, #44]	; (8000aec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aca:	f7ff ffd7 	bl	8000a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ace:	f005 f8f5 	bl	8005cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fd69 	bl	80005a8 <main>
  bx  lr    
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ae4:	08005f08 	.word	0x08005f08
  ldr r2, =_sbss
 8000ae8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000aec:	2001a830 	.word	0x2001a830

08000af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <HAL_Init+0x40>)
 8000afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_Init+0x40>)
 8000b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_Init+0x40>)
 8000b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f8fc 	bl	8000d1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff ff0e 	bl	8000944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fee4 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023c00 	.word	0x40023c00

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000080 	.word	0x20000080

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000080 	.word	0x20000080

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff ffee 	bl	8000b60 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffde 	bl	8000b60 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	db0b      	blt.n	8000c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	f003 021f 	and.w	r2, r3, #31
 8000c3c:	4907      	ldr	r1, [pc, #28]	; (8000c5c <__NVIC_EnableIRQ+0x38>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	095b      	lsrs	r3, r3, #5
 8000c44:	2001      	movs	r0, #1
 8000c46:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db0a      	blt.n	8000c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	; (8000cac <__NVIC_SetPriority+0x4c>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c88:	e00a      	b.n	8000ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4908      	ldr	r1, [pc, #32]	; (8000cb0 <__NVIC_SetPriority+0x50>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	3b04      	subs	r3, #4
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	761a      	strb	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2304      	movcs	r3, #4
 8000cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d902      	bls.n	8000ce4 <NVIC_EncodePriority+0x30>
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	e000      	b.n	8000ce6 <NVIC_EncodePriority+0x32>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	4313      	orrs	r3, r2
         );
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	; 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ff4c 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d42:	f7ff ff61 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	68b9      	ldr	r1, [r7, #8]
 8000d4c:	6978      	ldr	r0, [r7, #20]
 8000d4e:	f7ff ffb1 	bl	8000cb4 <NVIC_EncodePriority>
 8000d52:	4602      	mov	r2, r0
 8000d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff80 	bl	8000c60 <__NVIC_SetPriority>
}
 8000d60:	bf00      	nop
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff54 	bl	8000c24 <__NVIC_EnableIRQ>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	e165      	b.n	800106c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	f040 8154 	bne.w	8001066 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d005      	beq.n	8000dd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d130      	bne.n	8000e38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	f003 0201 	and.w	r2, r3, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d017      	beq.n	8000e74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d123      	bne.n	8000ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	69b9      	ldr	r1, [r7, #24]
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0203 	and.w	r2, r3, #3
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80ae 	beq.w	8001066 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b5d      	ldr	r3, [pc, #372]	; (8001084 <HAL_GPIO_Init+0x300>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	4a5c      	ldr	r2, [pc, #368]	; (8001084 <HAL_GPIO_Init+0x300>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f18:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1a:	4b5a      	ldr	r3, [pc, #360]	; (8001084 <HAL_GPIO_Init+0x300>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f26:	4a58      	ldr	r2, [pc, #352]	; (8001088 <HAL_GPIO_Init+0x304>)
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4f      	ldr	r2, [pc, #316]	; (800108c <HAL_GPIO_Init+0x308>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d025      	beq.n	8000f9e <HAL_GPIO_Init+0x21a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4e      	ldr	r2, [pc, #312]	; (8001090 <HAL_GPIO_Init+0x30c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d01f      	beq.n	8000f9a <HAL_GPIO_Init+0x216>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4d      	ldr	r2, [pc, #308]	; (8001094 <HAL_GPIO_Init+0x310>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d019      	beq.n	8000f96 <HAL_GPIO_Init+0x212>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4c      	ldr	r2, [pc, #304]	; (8001098 <HAL_GPIO_Init+0x314>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d013      	beq.n	8000f92 <HAL_GPIO_Init+0x20e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4b      	ldr	r2, [pc, #300]	; (800109c <HAL_GPIO_Init+0x318>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d00d      	beq.n	8000f8e <HAL_GPIO_Init+0x20a>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4a      	ldr	r2, [pc, #296]	; (80010a0 <HAL_GPIO_Init+0x31c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d007      	beq.n	8000f8a <HAL_GPIO_Init+0x206>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a49      	ldr	r2, [pc, #292]	; (80010a4 <HAL_GPIO_Init+0x320>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d101      	bne.n	8000f86 <HAL_GPIO_Init+0x202>
 8000f82:	2306      	movs	r3, #6
 8000f84:	e00c      	b.n	8000fa0 <HAL_GPIO_Init+0x21c>
 8000f86:	2307      	movs	r3, #7
 8000f88:	e00a      	b.n	8000fa0 <HAL_GPIO_Init+0x21c>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e008      	b.n	8000fa0 <HAL_GPIO_Init+0x21c>
 8000f8e:	2304      	movs	r3, #4
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x21c>
 8000f92:	2303      	movs	r3, #3
 8000f94:	e004      	b.n	8000fa0 <HAL_GPIO_Init+0x21c>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_Init+0x21c>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x21c>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	f002 0203 	and.w	r2, r2, #3
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb0:	4935      	ldr	r1, [pc, #212]	; (8001088 <HAL_GPIO_Init+0x304>)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <HAL_GPIO_Init+0x324>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe2:	4a31      	ldr	r2, [pc, #196]	; (80010a8 <HAL_GPIO_Init+0x324>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <HAL_GPIO_Init+0x324>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800100c:	4a26      	ldr	r2, [pc, #152]	; (80010a8 <HAL_GPIO_Init+0x324>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <HAL_GPIO_Init+0x324>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <HAL_GPIO_Init+0x324>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <HAL_GPIO_Init+0x324>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001060:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <HAL_GPIO_Init+0x324>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3301      	adds	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	2b0f      	cmp	r3, #15
 8001070:	f67f ae96 	bls.w	8000da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40013800 	.word	0x40013800
 800108c:	40020000 	.word	0x40020000
 8001090:	40020400 	.word	0x40020400
 8001094:	40020800 	.word	0x40020800
 8001098:	40020c00 	.word	0x40020c00
 800109c:	40021000 	.word	0x40021000
 80010a0:	40021400 	.word	0x40021400
 80010a4:	40021800 	.word	0x40021800
 80010a8:	40013c00 	.word	0x40013c00

080010ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
 80010b8:	4613      	mov	r3, r2
 80010ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010bc:	787b      	ldrb	r3, [r7, #1]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c8:	e003      	b.n	80010d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	041a      	lsls	r2, r3, #16
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	619a      	str	r2, [r3, #24]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <HAL_PWREx_EnableOverDrive+0x90>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a1f      	ldr	r2, [pc, #124]	; (8001170 <HAL_PWREx_EnableOverDrive+0x90>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <HAL_PWREx_EnableOverDrive+0x90>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_PWREx_EnableOverDrive+0x94>)
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800110c:	f7ff fd28 	bl	8000b60 <HAL_GetTick>
 8001110:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001112:	e009      	b.n	8001128 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001114:	f7ff fd24 	bl	8000b60 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001122:	d901      	bls.n	8001128 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e01f      	b.n	8001168 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_PWREx_EnableOverDrive+0x98>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001134:	d1ee      	bne.n	8001114 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800113c:	f7ff fd10 	bl	8000b60 <HAL_GetTick>
 8001140:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001142:	e009      	b.n	8001158 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001144:	f7ff fd0c 	bl	8000b60 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001152:	d901      	bls.n	8001158 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e007      	b.n	8001168 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <HAL_PWREx_EnableOverDrive+0x98>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001164:	d1ee      	bne.n	8001144 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40023800 	.word	0x40023800
 8001174:	420e0040 	.word	0x420e0040
 8001178:	40007000 	.word	0x40007000
 800117c:	420e0044 	.word	0x420e0044

08001180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0cc      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001194:	4b68      	ldr	r3, [pc, #416]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d90c      	bls.n	80011bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a2:	4b65      	ldr	r3, [pc, #404]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011aa:	4b63      	ldr	r3, [pc, #396]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d001      	beq.n	80011bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0b8      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d020      	beq.n	800120a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d4:	4b59      	ldr	r3, [pc, #356]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4a58      	ldr	r2, [pc, #352]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ec:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	4a52      	ldr	r2, [pc, #328]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f8:	4b50      	ldr	r3, [pc, #320]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	494d      	ldr	r1, [pc, #308]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	4313      	orrs	r3, r2
 8001208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d044      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d107      	bne.n	800122e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d119      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e07f      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d003      	beq.n	800123e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800123a:	2b03      	cmp	r3, #3
 800123c:	d107      	bne.n	800124e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800123e:	4b3f      	ldr	r3, [pc, #252]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d109      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e06f      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e067      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800125e:	4b37      	ldr	r3, [pc, #220]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f023 0203 	bic.w	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4934      	ldr	r1, [pc, #208]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	4313      	orrs	r3, r2
 800126e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001270:	f7ff fc76 	bl	8000b60 <HAL_GetTick>
 8001274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001276:	e00a      	b.n	800128e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001278:	f7ff fc72 	bl	8000b60 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f241 3288 	movw	r2, #5000	; 0x1388
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e04f      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 020c 	and.w	r2, r3, #12
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	429a      	cmp	r2, r3
 800129e:	d1eb      	bne.n	8001278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012a0:	4b25      	ldr	r3, [pc, #148]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 030f 	and.w	r3, r3, #15
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d20c      	bcs.n	80012c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e032      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4916      	ldr	r1, [pc, #88]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d009      	beq.n	8001306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	490e      	ldr	r1, [pc, #56]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	4313      	orrs	r3, r2
 8001304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001306:	f000 f873 	bl	80013f0 <HAL_RCC_GetSysClockFreq>
 800130a:	4602      	mov	r2, r0
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	490a      	ldr	r1, [pc, #40]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	5ccb      	ldrb	r3, [r1, r3]
 800131a:	fa22 f303 	lsr.w	r3, r2, r3
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_RCC_ClockConfig+0x1c8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fb0c 	bl	8000944 <HAL_InitTick>

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023c00 	.word	0x40023c00
 800133c:	40023800 	.word	0x40023800
 8001340:	08005ea4 	.word	0x08005ea4
 8001344:	20000000 	.word	0x20000000
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <HAL_RCC_GetHCLKFreq+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000000 	.word	0x20000000

08001364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001368:	f7ff fff0 	bl	800134c <HAL_RCC_GetHCLKFreq>
 800136c:	4602      	mov	r2, r0
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	0a9b      	lsrs	r3, r3, #10
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	4903      	ldr	r1, [pc, #12]	; (8001388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	08005eb4 	.word	0x08005eb4

0800138c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	220f      	movs	r2, #15
 800139a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_RCC_GetClockConfig+0x5c>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_RCC_GetClockConfig+0x5c>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_RCC_GetClockConfig+0x5c>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_RCC_GetClockConfig+0x5c>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_RCC_GetClockConfig+0x60>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 020f 	and.w	r2, r3, #15
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	601a      	str	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40023c00 	.word	0x40023c00

080013f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013f4:	b0ae      	sub	sp, #184	; 0xb8
 80013f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001416:	4bcb      	ldr	r3, [pc, #812]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b0c      	cmp	r3, #12
 8001420:	f200 8206 	bhi.w	8001830 <HAL_RCC_GetSysClockFreq+0x440>
 8001424:	a201      	add	r2, pc, #4	; (adr r2, 800142c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	08001461 	.word	0x08001461
 8001430:	08001831 	.word	0x08001831
 8001434:	08001831 	.word	0x08001831
 8001438:	08001831 	.word	0x08001831
 800143c:	08001469 	.word	0x08001469
 8001440:	08001831 	.word	0x08001831
 8001444:	08001831 	.word	0x08001831
 8001448:	08001831 	.word	0x08001831
 800144c:	08001471 	.word	0x08001471
 8001450:	08001831 	.word	0x08001831
 8001454:	08001831 	.word	0x08001831
 8001458:	08001831 	.word	0x08001831
 800145c:	08001661 	.word	0x08001661
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001460:	4bb9      	ldr	r3, [pc, #740]	; (8001748 <HAL_RCC_GetSysClockFreq+0x358>)
 8001462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001466:	e1e7      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001468:	4bb8      	ldr	r3, [pc, #736]	; (800174c <HAL_RCC_GetSysClockFreq+0x35c>)
 800146a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800146e:	e1e3      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001470:	4bb4      	ldr	r3, [pc, #720]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800147c:	4bb1      	ldr	r3, [pc, #708]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d071      	beq.n	800156c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001488:	4bae      	ldr	r3, [pc, #696]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	099b      	lsrs	r3, r3, #6
 800148e:	2200      	movs	r2, #0
 8001490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001494:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800149c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014ae:	4622      	mov	r2, r4
 80014b0:	462b      	mov	r3, r5
 80014b2:	f04f 0000 	mov.w	r0, #0
 80014b6:	f04f 0100 	mov.w	r1, #0
 80014ba:	0159      	lsls	r1, r3, #5
 80014bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014c0:	0150      	lsls	r0, r2, #5
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4621      	mov	r1, r4
 80014c8:	1a51      	subs	r1, r2, r1
 80014ca:	6439      	str	r1, [r7, #64]	; 0x40
 80014cc:	4629      	mov	r1, r5
 80014ce:	eb63 0301 	sbc.w	r3, r3, r1
 80014d2:	647b      	str	r3, [r7, #68]	; 0x44
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80014e0:	4649      	mov	r1, r9
 80014e2:	018b      	lsls	r3, r1, #6
 80014e4:	4641      	mov	r1, r8
 80014e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014ea:	4641      	mov	r1, r8
 80014ec:	018a      	lsls	r2, r1, #6
 80014ee:	4641      	mov	r1, r8
 80014f0:	1a51      	subs	r1, r2, r1
 80014f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80014f4:	4649      	mov	r1, r9
 80014f6:	eb63 0301 	sbc.w	r3, r3, r1
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001508:	4649      	mov	r1, r9
 800150a:	00cb      	lsls	r3, r1, #3
 800150c:	4641      	mov	r1, r8
 800150e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001512:	4641      	mov	r1, r8
 8001514:	00ca      	lsls	r2, r1, #3
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	4603      	mov	r3, r0
 800151c:	4622      	mov	r2, r4
 800151e:	189b      	adds	r3, r3, r2
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
 8001522:	462b      	mov	r3, r5
 8001524:	460a      	mov	r2, r1
 8001526:	eb42 0303 	adc.w	r3, r2, r3
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001538:	4629      	mov	r1, r5
 800153a:	024b      	lsls	r3, r1, #9
 800153c:	4621      	mov	r1, r4
 800153e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001542:	4621      	mov	r1, r4
 8001544:	024a      	lsls	r2, r1, #9
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800154e:	2200      	movs	r2, #0
 8001550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001554:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001558:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800155c:	f7fe fea2 	bl	80002a4 <__aeabi_uldivmod>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4613      	mov	r3, r2
 8001566:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800156a:	e067      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800156c:	4b75      	ldr	r3, [pc, #468]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	099b      	lsrs	r3, r3, #6
 8001572:	2200      	movs	r2, #0
 8001574:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001578:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800157c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001584:	67bb      	str	r3, [r7, #120]	; 0x78
 8001586:	2300      	movs	r3, #0
 8001588:	67fb      	str	r3, [r7, #124]	; 0x7c
 800158a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800158e:	4622      	mov	r2, r4
 8001590:	462b      	mov	r3, r5
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	f04f 0100 	mov.w	r1, #0
 800159a:	0159      	lsls	r1, r3, #5
 800159c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015a0:	0150      	lsls	r0, r2, #5
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4621      	mov	r1, r4
 80015a8:	1a51      	subs	r1, r2, r1
 80015aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80015ac:	4629      	mov	r1, r5
 80015ae:	eb63 0301 	sbc.w	r3, r3, r1
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80015c0:	4649      	mov	r1, r9
 80015c2:	018b      	lsls	r3, r1, #6
 80015c4:	4641      	mov	r1, r8
 80015c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ca:	4641      	mov	r1, r8
 80015cc:	018a      	lsls	r2, r1, #6
 80015ce:	4641      	mov	r1, r8
 80015d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80015d4:	4649      	mov	r1, r9
 80015d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015ee:	4692      	mov	sl, r2
 80015f0:	469b      	mov	fp, r3
 80015f2:	4623      	mov	r3, r4
 80015f4:	eb1a 0303 	adds.w	r3, sl, r3
 80015f8:	623b      	str	r3, [r7, #32]
 80015fa:	462b      	mov	r3, r5
 80015fc:	eb4b 0303 	adc.w	r3, fp, r3
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800160e:	4629      	mov	r1, r5
 8001610:	028b      	lsls	r3, r1, #10
 8001612:	4621      	mov	r1, r4
 8001614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001618:	4621      	mov	r1, r4
 800161a:	028a      	lsls	r2, r1, #10
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001624:	2200      	movs	r2, #0
 8001626:	673b      	str	r3, [r7, #112]	; 0x70
 8001628:	677a      	str	r2, [r7, #116]	; 0x74
 800162a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800162e:	f7fe fe39 	bl	80002a4 <__aeabi_uldivmod>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4613      	mov	r3, r2
 8001638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800163c:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	0c1b      	lsrs	r3, r3, #16
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	3301      	adds	r3, #1
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800164e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800165e:	e0eb      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001660:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800166c:	4b35      	ldr	r3, [pc, #212]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d06b      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001678:	4b32      	ldr	r3, [pc, #200]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	099b      	lsrs	r3, r3, #6
 800167e:	2200      	movs	r2, #0
 8001680:	66bb      	str	r3, [r7, #104]	; 0x68
 8001682:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800168a:	663b      	str	r3, [r7, #96]	; 0x60
 800168c:	2300      	movs	r3, #0
 800168e:	667b      	str	r3, [r7, #100]	; 0x64
 8001690:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001694:	4622      	mov	r2, r4
 8001696:	462b      	mov	r3, r5
 8001698:	f04f 0000 	mov.w	r0, #0
 800169c:	f04f 0100 	mov.w	r1, #0
 80016a0:	0159      	lsls	r1, r3, #5
 80016a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a6:	0150      	lsls	r0, r2, #5
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4621      	mov	r1, r4
 80016ae:	1a51      	subs	r1, r2, r1
 80016b0:	61b9      	str	r1, [r7, #24]
 80016b2:	4629      	mov	r1, r5
 80016b4:	eb63 0301 	sbc.w	r3, r3, r1
 80016b8:	61fb      	str	r3, [r7, #28]
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016c6:	4659      	mov	r1, fp
 80016c8:	018b      	lsls	r3, r1, #6
 80016ca:	4651      	mov	r1, sl
 80016cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016d0:	4651      	mov	r1, sl
 80016d2:	018a      	lsls	r2, r1, #6
 80016d4:	4651      	mov	r1, sl
 80016d6:	ebb2 0801 	subs.w	r8, r2, r1
 80016da:	4659      	mov	r1, fp
 80016dc:	eb63 0901 	sbc.w	r9, r3, r1
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016f4:	4690      	mov	r8, r2
 80016f6:	4699      	mov	r9, r3
 80016f8:	4623      	mov	r3, r4
 80016fa:	eb18 0303 	adds.w	r3, r8, r3
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	462b      	mov	r3, r5
 8001702:	eb49 0303 	adc.w	r3, r9, r3
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001714:	4629      	mov	r1, r5
 8001716:	024b      	lsls	r3, r1, #9
 8001718:	4621      	mov	r1, r4
 800171a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800171e:	4621      	mov	r1, r4
 8001720:	024a      	lsls	r2, r1, #9
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800172a:	2200      	movs	r2, #0
 800172c:	65bb      	str	r3, [r7, #88]	; 0x58
 800172e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001730:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001734:	f7fe fdb6 	bl	80002a4 <__aeabi_uldivmod>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4613      	mov	r3, r2
 800173e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001742:	e065      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x420>
 8001744:	40023800 	.word	0x40023800
 8001748:	00f42400 	.word	0x00f42400
 800174c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001750:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_RCC_GetSysClockFreq+0x458>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	099b      	lsrs	r3, r3, #6
 8001756:	2200      	movs	r2, #0
 8001758:	4618      	mov	r0, r3
 800175a:	4611      	mov	r1, r2
 800175c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001760:	653b      	str	r3, [r7, #80]	; 0x50
 8001762:	2300      	movs	r3, #0
 8001764:	657b      	str	r3, [r7, #84]	; 0x54
 8001766:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800176a:	4642      	mov	r2, r8
 800176c:	464b      	mov	r3, r9
 800176e:	f04f 0000 	mov.w	r0, #0
 8001772:	f04f 0100 	mov.w	r1, #0
 8001776:	0159      	lsls	r1, r3, #5
 8001778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800177c:	0150      	lsls	r0, r2, #5
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4641      	mov	r1, r8
 8001784:	1a51      	subs	r1, r2, r1
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	4649      	mov	r1, r9
 800178a:	eb63 0301 	sbc.w	r3, r3, r1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800179c:	4659      	mov	r1, fp
 800179e:	018b      	lsls	r3, r1, #6
 80017a0:	4651      	mov	r1, sl
 80017a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017a6:	4651      	mov	r1, sl
 80017a8:	018a      	lsls	r2, r1, #6
 80017aa:	4651      	mov	r1, sl
 80017ac:	1a54      	subs	r4, r2, r1
 80017ae:	4659      	mov	r1, fp
 80017b0:	eb63 0501 	sbc.w	r5, r3, r1
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	00eb      	lsls	r3, r5, #3
 80017be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017c2:	00e2      	lsls	r2, r4, #3
 80017c4:	4614      	mov	r4, r2
 80017c6:	461d      	mov	r5, r3
 80017c8:	4643      	mov	r3, r8
 80017ca:	18e3      	adds	r3, r4, r3
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	464b      	mov	r3, r9
 80017d0:	eb45 0303 	adc.w	r3, r5, r3
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017e2:	4629      	mov	r1, r5
 80017e4:	028b      	lsls	r3, r1, #10
 80017e6:	4621      	mov	r1, r4
 80017e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017ec:	4621      	mov	r1, r4
 80017ee:	028a      	lsls	r2, r1, #10
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017f8:	2200      	movs	r2, #0
 80017fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80017fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001802:	f7fe fd4f 	bl	80002a4 <__aeabi_uldivmod>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4613      	mov	r3, r2
 800180c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_RCC_GetSysClockFreq+0x458>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	0f1b      	lsrs	r3, r3, #28
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800181e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001822:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800182e:	e003      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001836:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001838:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800183c:	4618      	mov	r0, r3
 800183e:	37b8      	adds	r7, #184	; 0xb8
 8001840:	46bd      	mov	sp, r7
 8001842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	00f42400 	.word	0x00f42400

08001850 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e28d      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8083 	beq.w	8001976 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001870:	4b94      	ldr	r3, [pc, #592]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b04      	cmp	r3, #4
 800187a:	d019      	beq.n	80018b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800187c:	4b91      	ldr	r3, [pc, #580]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001884:	2b08      	cmp	r3, #8
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001888:	4b8e      	ldr	r3, [pc, #568]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001894:	d00c      	beq.n	80018b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001896:	4b8b      	ldr	r3, [pc, #556]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d112      	bne.n	80018c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a2:	4b88      	ldr	r3, [pc, #544]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ae:	d10b      	bne.n	80018c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	4b84      	ldr	r3, [pc, #528]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d05b      	beq.n	8001974 <HAL_RCC_OscConfig+0x124>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d157      	bne.n	8001974 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e25a      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d0:	d106      	bne.n	80018e0 <HAL_RCC_OscConfig+0x90>
 80018d2:	4b7c      	ldr	r3, [pc, #496]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a7b      	ldr	r2, [pc, #492]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e01d      	b.n	800191c <HAL_RCC_OscConfig+0xcc>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0xb4>
 80018ea:	4b76      	ldr	r3, [pc, #472]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a75      	ldr	r2, [pc, #468]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b73      	ldr	r3, [pc, #460]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a72      	ldr	r2, [pc, #456]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0xcc>
 8001904:	4b6f      	ldr	r3, [pc, #444]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a6e      	ldr	r2, [pc, #440]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 800190a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b6c      	ldr	r3, [pc, #432]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a6b      	ldr	r2, [pc, #428]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d013      	beq.n	800194c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff f91c 	bl	8000b60 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff f918 	bl	8000b60 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e21f      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	4b61      	ldr	r3, [pc, #388]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0xdc>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f908 	bl	8000b60 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff f904 	bl	8000b60 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e20b      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	4b57      	ldr	r3, [pc, #348]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x104>
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d06f      	beq.n	8001a62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001982:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b00      	cmp	r3, #0
 800198c:	d017      	beq.n	80019be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800198e:	4b4d      	ldr	r3, [pc, #308]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001996:	2b08      	cmp	r3, #8
 8001998:	d105      	bne.n	80019a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800199a:	4b4a      	ldr	r3, [pc, #296]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a6:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	d11c      	bne.n	80019ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b2:	4b44      	ldr	r3, [pc, #272]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d116      	bne.n	80019ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <HAL_RCC_OscConfig+0x186>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d001      	beq.n	80019d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e1d3      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d6:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4937      	ldr	r1, [pc, #220]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	e03a      	b.n	8001a62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f4:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <HAL_RCC_OscConfig+0x278>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff f8b1 	bl	8000b60 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff f8ad 	bl	8000b60 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1b4      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4925      	ldr	r1, [pc, #148]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
 8001a34:	e015      	b.n	8001a62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a36:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_RCC_OscConfig+0x278>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f890 	bl	8000b60 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a44:	f7ff f88c 	bl	8000b60 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e193      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d036      	beq.n	8001adc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d016      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_RCC_OscConfig+0x27c>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7c:	f7ff f870 	bl	8000b60 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a84:	f7ff f86c 	bl	8000b60 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e173      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x234>
 8001aa2:	e01b      	b.n	8001adc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCC_OscConfig+0x27c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aaa:	f7ff f859 	bl	8000b60 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab0:	e00e      	b.n	8001ad0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab2:	f7ff f855 	bl	8000b60 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d907      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e15c      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	42470000 	.word	0x42470000
 8001acc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	4b8a      	ldr	r3, [pc, #552]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1ea      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 8097 	beq.w	8001c18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b83      	ldr	r3, [pc, #524]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10f      	bne.n	8001b1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b7f      	ldr	r3, [pc, #508]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a7e      	ldr	r2, [pc, #504]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b7c      	ldr	r3, [pc, #496]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b16:	2301      	movs	r3, #1
 8001b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	4b79      	ldr	r3, [pc, #484]	; (8001d00 <HAL_RCC_OscConfig+0x4b0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d118      	bne.n	8001b58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b26:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_RCC_OscConfig+0x4b0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a75      	ldr	r2, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x4b0>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b32:	f7ff f815 	bl	8000b60 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3a:	f7ff f811 	bl	8000b60 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e118      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	4b6c      	ldr	r3, [pc, #432]	; (8001d00 <HAL_RCC_OscConfig+0x4b0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCC_OscConfig+0x31e>
 8001b60:	4b66      	ldr	r3, [pc, #408]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b64:	4a65      	ldr	r2, [pc, #404]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6c:	e01c      	b.n	8001ba8 <HAL_RCC_OscConfig+0x358>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x340>
 8001b76:	4b61      	ldr	r3, [pc, #388]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	4a60      	ldr	r2, [pc, #384]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	6713      	str	r3, [r2, #112]	; 0x70
 8001b82:	4b5e      	ldr	r3, [pc, #376]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b86:	4a5d      	ldr	r2, [pc, #372]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8e:	e00b      	b.n	8001ba8 <HAL_RCC_OscConfig+0x358>
 8001b90:	4b5a      	ldr	r3, [pc, #360]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	4a59      	ldr	r2, [pc, #356]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	f023 0301 	bic.w	r3, r3, #1
 8001b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9c:	4b57      	ldr	r3, [pc, #348]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	4a56      	ldr	r2, [pc, #344]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001ba2:	f023 0304 	bic.w	r3, r3, #4
 8001ba6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d015      	beq.n	8001bdc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb0:	f7fe ffd6 	bl	8000b60 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb8:	f7fe ffd2 	bl	8000b60 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e0d7      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bce:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0ee      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x368>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7fe ffc0 	bl	8000b60 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7fe ffbc 	bl	8000b60 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e0c1      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfa:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1ee      	bne.n	8001be4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	4a3a      	ldr	r2, [pc, #232]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80ad 	beq.w	8001d7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c22:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d060      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d145      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <HAL_RCC_OscConfig+0x4b4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7fe ff90 	bl	8000b60 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c44:	f7fe ff8c 	bl	8000b60 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e093      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69da      	ldr	r2, [r3, #28]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	019b      	lsls	r3, r3, #6
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	085b      	lsrs	r3, r3, #1
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	041b      	lsls	r3, r3, #16
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	061b      	lsls	r3, r3, #24
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	071b      	lsls	r3, r3, #28
 8001c8e:	491b      	ldr	r1, [pc, #108]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_RCC_OscConfig+0x4b4>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7fe ff61 	bl	8000b60 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7fe ff5d 	bl	8000b60 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e064      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x452>
 8001cc0:	e05c      	b.n	8001d7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_RCC_OscConfig+0x4b4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7fe ff4a 	bl	8000b60 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd0:	f7fe ff46 	bl	8000b60 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e04d      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x480>
 8001cee:	e045      	b.n	8001d7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e040      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40007000 	.word	0x40007000
 8001d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <HAL_RCC_OscConfig+0x538>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d030      	beq.n	8001d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d129      	bne.n	8001d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d122      	bne.n	8001d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d38:	4013      	ands	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d119      	bne.n	8001d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	085b      	lsrs	r3, r3, #1
 8001d50:	3b01      	subs	r3, #1
 8001d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d10f      	bne.n	8001d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800

08001d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e041      	b.n	8001e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f839 	bl	8001e2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f000 f9d8 	bl	8002180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d001      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e04e      	b.n	8001ef6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a23      	ldr	r2, [pc, #140]	; (8001f04 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d022      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e82:	d01d      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d018      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <HAL_TIM_Base_Start_IT+0xcc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d013      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00e      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1b      	ldr	r2, [pc, #108]	; (8001f14 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d009      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	; (8001f18 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d004      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <HAL_TIM_Base_Start_IT+0xdc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d111      	bne.n	8001ee4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d010      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee2:	e007      	b.n	8001ef4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40000c00 	.word	0x40000c00
 8001f14:	40010400 	.word	0x40010400
 8001f18:	40014000 	.word	0x40014000
 8001f1c:	40001800 	.word	0x40001800

08001f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d122      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d11b      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0202 	mvn.w	r2, #2
 8001f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8ee 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8e0 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8f1 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d122      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d11b      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0204 	mvn.w	r2, #4
 8001fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8c4 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8001fbc:	e005      	b.n	8001fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8b6 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f8c7 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d122      	bne.n	8002024 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d11b      	bne.n	8002024 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0208 	mvn.w	r2, #8
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f89a 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f88c 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f89d 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b10      	cmp	r3, #16
 8002030:	d122      	bne.n	8002078 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b10      	cmp	r3, #16
 800203e:	d11b      	bne.n	8002078 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0210 	mvn.w	r2, #16
 8002048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2208      	movs	r2, #8
 800204e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f870 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8002064:	e005      	b.n	8002072 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f862 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f873 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b01      	cmp	r3, #1
 8002084:	d10e      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0201 	mvn.w	r2, #1
 800209c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7fe fc10 	bl	80008c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ae:	2b80      	cmp	r3, #128	; 0x80
 80020b0:	d10e      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020bc:	2b80      	cmp	r3, #128	; 0x80
 80020be:	d107      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f902 	bl	80022d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020da:	2b40      	cmp	r3, #64	; 0x40
 80020dc:	d10e      	bne.n	80020fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e8:	2b40      	cmp	r3, #64	; 0x40
 80020ea:	d107      	bne.n	80020fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f838 	bl	800216c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b20      	cmp	r3, #32
 8002108:	d10e      	bne.n	8002128 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b20      	cmp	r3, #32
 8002116:	d107      	bne.n	8002128 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0220 	mvn.w	r2, #32
 8002120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8cc 	bl	80022c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a40      	ldr	r2, [pc, #256]	; (8002294 <TIM_Base_SetConfig+0x114>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d013      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219e:	d00f      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3d      	ldr	r2, [pc, #244]	; (8002298 <TIM_Base_SetConfig+0x118>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00b      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3c      	ldr	r2, [pc, #240]	; (800229c <TIM_Base_SetConfig+0x11c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <TIM_Base_SetConfig+0x120>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d003      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <TIM_Base_SetConfig+0x124>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d108      	bne.n	80021d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2f      	ldr	r2, [pc, #188]	; (8002294 <TIM_Base_SetConfig+0x114>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d02b      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e0:	d027      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2c      	ldr	r2, [pc, #176]	; (8002298 <TIM_Base_SetConfig+0x118>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d023      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2b      	ldr	r2, [pc, #172]	; (800229c <TIM_Base_SetConfig+0x11c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01f      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a2a      	ldr	r2, [pc, #168]	; (80022a0 <TIM_Base_SetConfig+0x120>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01b      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a29      	ldr	r2, [pc, #164]	; (80022a4 <TIM_Base_SetConfig+0x124>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d017      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a28      	ldr	r2, [pc, #160]	; (80022a8 <TIM_Base_SetConfig+0x128>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a27      	ldr	r2, [pc, #156]	; (80022ac <TIM_Base_SetConfig+0x12c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00f      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <TIM_Base_SetConfig+0x130>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00b      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <TIM_Base_SetConfig+0x134>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <TIM_Base_SetConfig+0x138>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d003      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a23      	ldr	r2, [pc, #140]	; (80022bc <TIM_Base_SetConfig+0x13c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d108      	bne.n	8002244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <TIM_Base_SetConfig+0x114>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d003      	beq.n	8002278 <TIM_Base_SetConfig+0xf8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <TIM_Base_SetConfig+0x124>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d103      	bne.n	8002280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	615a      	str	r2, [r3, #20]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40010000 	.word	0x40010000
 8002298:	40000400 	.word	0x40000400
 800229c:	40000800 	.word	0x40000800
 80022a0:	40000c00 	.word	0x40000c00
 80022a4:	40010400 	.word	0x40010400
 80022a8:	40014000 	.word	0x40014000
 80022ac:	40014400 	.word	0x40014400
 80022b0:	40014800 	.word	0x40014800
 80022b4:	40001800 	.word	0x40001800
 80022b8:	40001c00 	.word	0x40001c00
 80022bc:	40002000 	.word	0x40002000

080022c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f103 0208 	add.w	r2, r3, #8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002300:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f103 0208 	add.w	r2, r3, #8
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f103 0208 	add.w	r2, r3, #8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	601a      	str	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6892      	ldr	r2, [r2, #8]
 80023a0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6852      	ldr	r2, [r2, #4]
 80023aa:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d103      	bne.n	80023be <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	1e5a      	subs	r2, r3, #1
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023de:	b580      	push	{r7, lr}
 80023e0:	b08c      	sub	sp, #48	; 0x30
 80023e2:	af04      	add	r7, sp, #16
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	603b      	str	r3, [r7, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 ff22 	bl	800323c <pvPortMalloc>
 80023f8:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00e      	beq.n	800241e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002400:	2058      	movs	r0, #88	; 0x58
 8002402:	f000 ff1b 	bl	800323c <pvPortMalloc>
 8002406:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
 8002414:	e005      	b.n	8002422 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f000 fff0 	bl	80033fc <vPortFree>
 800241c:	e001      	b.n	8002422 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002428:	88fa      	ldrh	r2, [r7, #6]
 800242a:	2300      	movs	r3, #0
 800242c:	9303      	str	r3, [sp, #12]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	9302      	str	r3, [sp, #8]
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f80e 	bl	8002460 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002444:	69f8      	ldr	r0, [r7, #28]
 8002446:	f000 f8a1 	bl	800258c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800244a:	2301      	movs	r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	e002      	b.n	8002456 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002454:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002456:	69bb      	ldr	r3, [r7, #24]
    }
 8002458:	4618      	mov	r0, r3
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	461a      	mov	r2, r3
 8002478:	21a5      	movs	r1, #165	; 0xa5
 800247a:	f003 fc61 	bl	8005d40 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002488:	3b01      	subs	r3, #1
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	f023 0307 	bic.w	r3, r3, #7
 8002496:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <prvInitialiseNewTask+0x58>
        __asm volatile
 80024a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	617b      	str	r3, [r7, #20]
    }
 80024b4:	bf00      	nop
 80024b6:	e7fe      	b.n	80024b6 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01f      	beq.n	80024fe <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	e012      	b.n	80024ea <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	4413      	add	r3, r2
 80024ca:	7819      	ldrb	r1, [r3, #0]
 80024cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	3334      	adds	r3, #52	; 0x34
 80024d4:	460a      	mov	r2, r1
 80024d6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	4413      	add	r3, r2
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	3301      	adds	r3, #1
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	2b09      	cmp	r3, #9
 80024ee:	d9e9      	bls.n	80024c4 <prvInitialiseNewTask+0x64>
 80024f0:	e000      	b.n	80024f4 <prvInitialiseNewTask+0x94>
            {
                break;
 80024f2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024fc:	e003      	b.n	8002506 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	2b04      	cmp	r3, #4
 800250a:	d901      	bls.n	8002510 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800250c:	2304      	movs	r3, #4
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002514:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800251a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	2200      	movs	r2, #0
 8002520:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	3304      	adds	r3, #4
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fefe 	bl	8002328 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	3318      	adds	r3, #24
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fef9 	bl	8002328 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800253a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	f1c3 0205 	rsb	r2, r3, #5
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	3350      	adds	r3, #80	; 0x50
 8002550:	2204      	movs	r2, #4
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fbf3 	bl	8005d40 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	3354      	adds	r3, #84	; 0x54
 800255e:	2201      	movs	r2, #1
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fbec 	bl	8005d40 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	68f9      	ldr	r1, [r7, #12]
 800256c:	69b8      	ldr	r0, [r7, #24]
 800256e:	f000 fb8d 	bl	8002c8c <pxPortInitialiseStack>
 8002572:	4602      	mov	r2, r0
 8002574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002576:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002582:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002584:	bf00      	nop
 8002586:	3720      	adds	r7, #32
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800258c:	b5b0      	push	{r4, r5, r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af02      	add	r7, sp, #8
 8002592:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002594:	f000 fd26 	bl	8002fe4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002598:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <prvAddNewTaskToReadyList+0xfc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	4a3a      	ldr	r2, [pc, #232]	; (8002688 <prvAddNewTaskToReadyList+0xfc>)
 80025a0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80025a2:	4b3a      	ldr	r3, [pc, #232]	; (800268c <prvAddNewTaskToReadyList+0x100>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80025aa:	4a38      	ldr	r2, [pc, #224]	; (800268c <prvAddNewTaskToReadyList+0x100>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025b0:	4b35      	ldr	r3, [pc, #212]	; (8002688 <prvAddNewTaskToReadyList+0xfc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d110      	bne.n	80025da <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80025b8:	f000 face 	bl	8002b58 <prvInitialiseTaskLists>
 80025bc:	e00d      	b.n	80025da <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80025be:	4b34      	ldr	r3, [pc, #208]	; (8002690 <prvAddNewTaskToReadyList+0x104>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <prvAddNewTaskToReadyList+0x100>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d802      	bhi.n	80025da <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80025d4:	4a2d      	ldr	r2, [pc, #180]	; (800268c <prvAddNewTaskToReadyList+0x100>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80025da:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <prvAddNewTaskToReadyList+0x108>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3301      	adds	r3, #1
 80025e0:	4a2c      	ldr	r2, [pc, #176]	; (8002694 <prvAddNewTaskToReadyList+0x108>)
 80025e2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025e4:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <prvAddNewTaskToReadyList+0x108>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <prvAddNewTaskToReadyList+0x94>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 f917 	bl	8005828 <SEGGER_SYSVIEW_OnTaskCreate>
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	461d      	mov	r5, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461c      	mov	r4, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	1ae3      	subs	r3, r4, r3
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	462b      	mov	r3, r5
 800261c:	f001 f8bc 	bl	8003798 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	f003 f984 	bl	8005930 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	2201      	movs	r2, #1
 800262e:	409a      	lsls	r2, r3
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <prvAddNewTaskToReadyList+0x10c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4313      	orrs	r3, r2
 8002636:	4a18      	ldr	r2, [pc, #96]	; (8002698 <prvAddNewTaskToReadyList+0x10c>)
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4a15      	ldr	r2, [pc, #84]	; (800269c <prvAddNewTaskToReadyList+0x110>)
 8002648:	441a      	add	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3304      	adds	r3, #4
 800264e:	4619      	mov	r1, r3
 8002650:	4610      	mov	r0, r2
 8002652:	f7ff fe76 	bl	8002342 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002656:	f000 fcf5 	bl	8003044 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <prvAddNewTaskToReadyList+0x104>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00e      	beq.n	8002680 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <prvAddNewTaskToReadyList+0x100>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	429a      	cmp	r2, r3
 800266e:	d207      	bcs.n	8002680 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <prvAddNewTaskToReadyList+0x114>)
 8002672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bdb0      	pop	{r4, r5, r7, pc}
 8002688:	2000015c 	.word	0x2000015c
 800268c:	20000084 	.word	0x20000084
 8002690:	20000168 	.word	0x20000168
 8002694:	20000178 	.word	0x20000178
 8002698:	20000164 	.word	0x20000164
 800269c:	20000088 	.word	0x20000088
 80026a0:	e000ed04 	.word	0xe000ed04

080026a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <vTaskStartScheduler+0x98>)
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	2300      	movs	r3, #0
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2300      	movs	r3, #0
 80026b4:	2282      	movs	r2, #130	; 0x82
 80026b6:	4922      	ldr	r1, [pc, #136]	; (8002740 <vTaskStartScheduler+0x9c>)
 80026b8:	4822      	ldr	r0, [pc, #136]	; (8002744 <vTaskStartScheduler+0xa0>)
 80026ba:	f7ff fe90 	bl	80023de <xTaskCreate>
 80026be:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d124      	bne.n	8002710 <vTaskStartScheduler+0x6c>
        __asm volatile
 80026c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ca:	f383 8811 	msr	BASEPRI, r3
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	60bb      	str	r3, [r7, #8]
    }
 80026d8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <vTaskStartScheduler+0xa4>)
 80026dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026e0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <vTaskStartScheduler+0xa8>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <vTaskStartScheduler+0xac>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80026ee:	4b19      	ldr	r3, [pc, #100]	; (8002754 <vTaskStartScheduler+0xb0>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <vTaskStartScheduler+0x98>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d102      	bne.n	8002700 <vTaskStartScheduler+0x5c>
 80026fa:	f003 f879 	bl	80057f0 <SEGGER_SYSVIEW_OnIdle>
 80026fe:	e004      	b.n	800270a <vTaskStartScheduler+0x66>
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <vTaskStartScheduler+0xb0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f003 f8d1 	bl	80058ac <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800270a:	f000 fb4b 	bl	8002da4 <xPortStartScheduler>
 800270e:	e00e      	b.n	800272e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002716:	d10a      	bne.n	800272e <vTaskStartScheduler+0x8a>
        __asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	607b      	str	r3, [r7, #4]
    }
 800272a:	bf00      	nop
 800272c:	e7fe      	b.n	800272c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <vTaskStartScheduler+0xb4>)
 8002730:	681b      	ldr	r3, [r3, #0]
}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000180 	.word	0x20000180
 8002740:	08005dd4 	.word	0x08005dd4
 8002744:	08002b29 	.word	0x08002b29
 8002748:	2000017c 	.word	0x2000017c
 800274c:	20000168 	.word	0x20000168
 8002750:	20000160 	.word	0x20000160
 8002754:	20000084 	.word	0x20000084
 8002758:	2000000c 	.word	0x2000000c

0800275c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <vTaskSuspendAll+0x18>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3301      	adds	r3, #1
 8002766:	4a03      	ldr	r2, [pc, #12]	; (8002774 <vTaskSuspendAll+0x18>)
 8002768:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	20000184 	.word	0x20000184

08002778 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002786:	4b43      	ldr	r3, [pc, #268]	; (8002894 <xTaskResumeAll+0x11c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <xTaskResumeAll+0x2c>
        __asm volatile
 800278e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	603b      	str	r3, [r7, #0]
    }
 80027a0:	bf00      	nop
 80027a2:	e7fe      	b.n	80027a2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80027a4:	f000 fc1e 	bl	8002fe4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80027a8:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <xTaskResumeAll+0x11c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	4a39      	ldr	r2, [pc, #228]	; (8002894 <xTaskResumeAll+0x11c>)
 80027b0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027b2:	4b38      	ldr	r3, [pc, #224]	; (8002894 <xTaskResumeAll+0x11c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d165      	bne.n	8002886 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027ba:	4b37      	ldr	r3, [pc, #220]	; (8002898 <xTaskResumeAll+0x120>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d061      	beq.n	8002886 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027c2:	e032      	b.n	800282a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027c4:	4b35      	ldr	r3, [pc, #212]	; (800289c <xTaskResumeAll+0x124>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3318      	adds	r3, #24
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fdda 	bl	800238a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3304      	adds	r3, #4
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fdd5 	bl	800238a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 f8a4 	bl	8005930 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2201      	movs	r2, #1
 80027ee:	409a      	lsls	r2, r3
 80027f0:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <xTaskResumeAll+0x128>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <xTaskResumeAll+0x128>)
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <xTaskResumeAll+0x12c>)
 8002808:	441a      	add	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3304      	adds	r3, #4
 800280e:	4619      	mov	r1, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f7ff fd96 	bl	8002342 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281a:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <xTaskResumeAll+0x130>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	429a      	cmp	r2, r3
 8002822:	d302      	bcc.n	800282a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002824:	4b21      	ldr	r3, [pc, #132]	; (80028ac <xTaskResumeAll+0x134>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <xTaskResumeAll+0x124>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1c8      	bne.n	80027c4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002838:	f000 fa0c 	bl	8002c54 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800283c:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <xTaskResumeAll+0x138>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d010      	beq.n	800286a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002848:	f000 f848 	bl	80028dc <xTaskIncrementTick>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <xTaskResumeAll+0x134>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f1      	bne.n	8002848 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <xTaskResumeAll+0x138>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <xTaskResumeAll+0x134>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002872:	2301      	movs	r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002876:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <xTaskResumeAll+0x13c>)
 8002878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002886:	f000 fbdd 	bl	8003044 <vPortExitCritical>

    return xAlreadyYielded;
 800288a:	68bb      	ldr	r3, [r7, #8]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000184 	.word	0x20000184
 8002898:	2000015c 	.word	0x2000015c
 800289c:	2000011c 	.word	0x2000011c
 80028a0:	20000164 	.word	0x20000164
 80028a4:	20000088 	.word	0x20000088
 80028a8:	20000084 	.word	0x20000084
 80028ac:	20000170 	.word	0x20000170
 80028b0:	2000016c 	.word	0x2000016c
 80028b4:	e000ed04 	.word	0xe000ed04

080028b8 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028be:	f000 fc7d 	bl	80031bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80028c6:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <xTaskGetTickCountFromISR+0x20>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80028cc:	683b      	ldr	r3, [r7, #0]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000160 	.word	0x20000160

080028dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028e6:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <xTaskIncrementTick+0x14c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 8092 	bne.w	8002a14 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028f0:	4b4e      	ldr	r3, [pc, #312]	; (8002a2c <xTaskIncrementTick+0x150>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3301      	adds	r3, #1
 80028f6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80028f8:	4a4c      	ldr	r2, [pc, #304]	; (8002a2c <xTaskIncrementTick+0x150>)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d120      	bne.n	8002946 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002904:	4b4a      	ldr	r3, [pc, #296]	; (8002a30 <xTaskIncrementTick+0x154>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <xTaskIncrementTick+0x48>
        __asm volatile
 800290e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	603b      	str	r3, [r7, #0]
    }
 8002920:	bf00      	nop
 8002922:	e7fe      	b.n	8002922 <xTaskIncrementTick+0x46>
 8002924:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <xTaskIncrementTick+0x154>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b42      	ldr	r3, [pc, #264]	; (8002a34 <xTaskIncrementTick+0x158>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a40      	ldr	r2, [pc, #256]	; (8002a30 <xTaskIncrementTick+0x154>)
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4a40      	ldr	r2, [pc, #256]	; (8002a34 <xTaskIncrementTick+0x158>)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <xTaskIncrementTick+0x15c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	4a3e      	ldr	r2, [pc, #248]	; (8002a38 <xTaskIncrementTick+0x15c>)
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	f000 f987 	bl	8002c54 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002946:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <xTaskIncrementTick+0x160>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	429a      	cmp	r2, r3
 800294e:	d34c      	bcc.n	80029ea <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002950:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <xTaskIncrementTick+0x154>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d104      	bne.n	8002964 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800295a:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <xTaskIncrementTick+0x160>)
 800295c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002960:	601a      	str	r2, [r3, #0]
                    break;
 8002962:	e042      	b.n	80029ea <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002964:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <xTaskIncrementTick+0x154>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	429a      	cmp	r2, r3
 800297a:	d203      	bcs.n	8002984 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800297c:	4a2f      	ldr	r2, [pc, #188]	; (8002a3c <xTaskIncrementTick+0x160>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002982:	e032      	b.n	80029ea <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	3304      	adds	r3, #4
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fcfe 	bl	800238a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	2b00      	cmp	r3, #0
 8002994:	d004      	beq.n	80029a0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	3318      	adds	r3, #24
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fcf5 	bl	800238a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 ffc4 	bl	8005930 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	2201      	movs	r2, #1
 80029ae:	409a      	lsls	r2, r3
 80029b0:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <xTaskIncrementTick+0x164>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <xTaskIncrementTick+0x164>)
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <xTaskIncrementTick+0x168>)
 80029c8:	441a      	add	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	3304      	adds	r3, #4
 80029ce:	4619      	mov	r1, r3
 80029d0:	4610      	mov	r0, r2
 80029d2:	f7ff fcb6 	bl	8002342 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029da:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <xTaskIncrementTick+0x16c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d3b5      	bcc.n	8002950 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80029e4:	2301      	movs	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029e8:	e7b2      	b.n	8002950 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80029ea:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <xTaskIncrementTick+0x16c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f0:	4914      	ldr	r1, [pc, #80]	; (8002a44 <xTaskIncrementTick+0x168>)
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d901      	bls.n	8002a06 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002a02:	2301      	movs	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <xTaskIncrementTick+0x170>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e004      	b.n	8002a1e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <xTaskIncrementTick+0x174>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <xTaskIncrementTick+0x174>)
 8002a1c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002a1e:	697b      	ldr	r3, [r7, #20]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000184 	.word	0x20000184
 8002a2c:	20000160 	.word	0x20000160
 8002a30:	20000114 	.word	0x20000114
 8002a34:	20000118 	.word	0x20000118
 8002a38:	20000174 	.word	0x20000174
 8002a3c:	2000017c 	.word	0x2000017c
 8002a40:	20000164 	.word	0x20000164
 8002a44:	20000088 	.word	0x20000088
 8002a48:	20000084 	.word	0x20000084
 8002a4c:	20000170 	.word	0x20000170
 8002a50:	2000016c 	.word	0x2000016c

08002a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a5a:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <vTaskSwitchContext+0xbc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002a62:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <vTaskSwitchContext+0xc0>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002a68:	e04d      	b.n	8002b06 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <vTaskSwitchContext+0xc0>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a70:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <vTaskSwitchContext+0xc4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002a7e:	7afb      	ldrb	r3, [r7, #11]
 8002a80:	f1c3 031f 	rsb	r3, r3, #31
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	4925      	ldr	r1, [pc, #148]	; (8002b1c <vTaskSwitchContext+0xc8>)
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	607b      	str	r3, [r7, #4]
    }
 8002aac:	bf00      	nop
 8002aae:	e7fe      	b.n	8002aae <vTaskSwitchContext+0x5a>
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <vTaskSwitchContext+0xc8>)
 8002abc:	4413      	add	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	3308      	adds	r3, #8
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d104      	bne.n	8002ae0 <vTaskSwitchContext+0x8c>
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <vTaskSwitchContext+0xcc>)
 8002ae8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <vTaskSwitchContext+0xcc>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <vTaskSwitchContext+0xd0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d102      	bne.n	8002afc <vTaskSwitchContext+0xa8>
 8002af6:	f002 fe7b 	bl	80057f0 <SEGGER_SYSVIEW_OnIdle>
}
 8002afa:	e004      	b.n	8002b06 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <vTaskSwitchContext+0xcc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f002 fed3 	bl	80058ac <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002b06:	bf00      	nop
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000184 	.word	0x20000184
 8002b14:	20000170 	.word	0x20000170
 8002b18:	20000164 	.word	0x20000164
 8002b1c:	20000088 	.word	0x20000088
 8002b20:	20000084 	.word	0x20000084
 8002b24:	20000180 	.word	0x20000180

08002b28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b30:	f000 f852 	bl	8002bd8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <prvIdleTask+0x28>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d9f9      	bls.n	8002b30 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <prvIdleTask+0x2c>)
 8002b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002b4c:	e7f0      	b.n	8002b30 <prvIdleTask+0x8>
 8002b4e:	bf00      	nop
 8002b50:	20000088 	.word	0x20000088
 8002b54:	e000ed04 	.word	0xe000ed04

08002b58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	e00c      	b.n	8002b7e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <prvInitialiseTaskLists+0x60>)
 8002b70:	4413      	add	r3, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fbb8 	bl	80022e8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d9ef      	bls.n	8002b64 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b84:	480d      	ldr	r0, [pc, #52]	; (8002bbc <prvInitialiseTaskLists+0x64>)
 8002b86:	f7ff fbaf 	bl	80022e8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002b8a:	480d      	ldr	r0, [pc, #52]	; (8002bc0 <prvInitialiseTaskLists+0x68>)
 8002b8c:	f7ff fbac 	bl	80022e8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002b90:	480c      	ldr	r0, [pc, #48]	; (8002bc4 <prvInitialiseTaskLists+0x6c>)
 8002b92:	f7ff fba9 	bl	80022e8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002b96:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <prvInitialiseTaskLists+0x70>)
 8002b98:	f7ff fba6 	bl	80022e8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002b9c:	480b      	ldr	r0, [pc, #44]	; (8002bcc <prvInitialiseTaskLists+0x74>)
 8002b9e:	f7ff fba3 	bl	80022e8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <prvInitialiseTaskLists+0x78>)
 8002ba4:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <prvInitialiseTaskLists+0x64>)
 8002ba6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <prvInitialiseTaskLists+0x7c>)
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <prvInitialiseTaskLists+0x68>)
 8002bac:	601a      	str	r2, [r3, #0]
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000088 	.word	0x20000088
 8002bbc:	200000ec 	.word	0x200000ec
 8002bc0:	20000100 	.word	0x20000100
 8002bc4:	2000011c 	.word	0x2000011c
 8002bc8:	20000130 	.word	0x20000130
 8002bcc:	20000148 	.word	0x20000148
 8002bd0:	20000114 	.word	0x20000114
 8002bd4:	20000118 	.word	0x20000118

08002bd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bde:	e019      	b.n	8002c14 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002be0:	f000 fa00 	bl	8002fe4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002be4:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <prvCheckTasksWaitingTermination+0x50>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fbca 	bl	800238a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <prvCheckTasksWaitingTermination+0x54>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	4a0b      	ldr	r2, [pc, #44]	; (8002c2c <prvCheckTasksWaitingTermination+0x54>)
 8002bfe:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <prvCheckTasksWaitingTermination+0x58>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <prvCheckTasksWaitingTermination+0x58>)
 8002c08:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002c0a:	f000 fa1b 	bl	8003044 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f810 	bl	8002c34 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <prvCheckTasksWaitingTermination+0x58>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e1      	bne.n	8002be0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000130 	.word	0x20000130
 8002c2c:	2000015c 	.word	0x2000015c
 8002c30:	20000144 	.word	0x20000144

08002c34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fbdb 	bl	80033fc <vPortFree>
                vPortFree( pxTCB );
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fbd8 	bl	80033fc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <prvResetNextTaskUnblockTime+0x30>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d104      	bne.n	8002c6c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <prvResetNextTaskUnblockTime+0x34>)
 8002c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c68:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002c6a:	e005      	b.n	8002c78 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <prvResetNextTaskUnblockTime+0x30>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <prvResetNextTaskUnblockTime+0x34>)
 8002c76:	6013      	str	r3, [r2, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000114 	.word	0x20000114
 8002c88:	2000017c 	.word	0x2000017c

08002c8c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3b04      	subs	r3, #4
 8002c9c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ca4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3b04      	subs	r3, #4
 8002caa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f023 0201 	bic.w	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3b04      	subs	r3, #4
 8002cba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002cbc:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <pxPortInitialiseStack+0x64>)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3b14      	subs	r3, #20
 8002cc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3b04      	subs	r3, #4
 8002cd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f06f 0202 	mvn.w	r2, #2
 8002cda:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3b20      	subs	r3, #32
 8002ce0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	08002cf5 	.word	0x08002cf5

08002cf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <prvTaskExitError+0x54>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d06:	d00a      	beq.n	8002d1e <prvTaskExitError+0x2a>
        __asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	60fb      	str	r3, [r7, #12]
    }
 8002d1a:	bf00      	nop
 8002d1c:	e7fe      	b.n	8002d1c <prvTaskExitError+0x28>
        __asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	60bb      	str	r3, [r7, #8]
    }
 8002d30:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d32:	bf00      	nop
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0fc      	beq.n	8002d34 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d3a:	bf00      	nop
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	20000010 	.word	0x20000010
 8002d4c:	00000000 	.word	0x00000000

08002d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <pxCurrentTCBConst2>)
 8002d52:	6819      	ldr	r1, [r3, #0]
 8002d54:	6808      	ldr	r0, [r1, #0]
 8002d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d5a:	f380 8809 	msr	PSP, r0
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f04f 0000 	mov.w	r0, #0
 8002d66:	f380 8811 	msr	BASEPRI, r0
 8002d6a:	4770      	bx	lr
 8002d6c:	f3af 8000 	nop.w

08002d70 <pxCurrentTCBConst2>:
 8002d70:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop

08002d78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002d78:	4808      	ldr	r0, [pc, #32]	; (8002d9c <prvPortStartFirstTask+0x24>)
 8002d7a:	6800      	ldr	r0, [r0, #0]
 8002d7c:	6800      	ldr	r0, [r0, #0]
 8002d7e:	f380 8808 	msr	MSP, r0
 8002d82:	f04f 0000 	mov.w	r0, #0
 8002d86:	f380 8814 	msr	CONTROL, r0
 8002d8a:	b662      	cpsie	i
 8002d8c:	b661      	cpsie	f
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	df00      	svc	0
 8002d98:	bf00      	nop
 8002d9a:	0000      	.short	0x0000
 8002d9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop

08002da4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002daa:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <xPortStartScheduler+0x120>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a46      	ldr	r2, [pc, #280]	; (8002ec8 <xPortStartScheduler+0x124>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d10a      	bne.n	8002dca <xPortStartScheduler+0x26>
        __asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	613b      	str	r3, [r7, #16]
    }
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002dca:	4b3e      	ldr	r3, [pc, #248]	; (8002ec4 <xPortStartScheduler+0x120>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a3f      	ldr	r2, [pc, #252]	; (8002ecc <xPortStartScheduler+0x128>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10a      	bne.n	8002dea <xPortStartScheduler+0x46>
        __asm volatile
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	60fb      	str	r3, [r7, #12]
    }
 8002de6:	bf00      	nop
 8002de8:	e7fe      	b.n	8002de8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002dea:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <xPortStartScheduler+0x12c>)
 8002dec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	22ff      	movs	r2, #255	; 0xff
 8002dfa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <xPortStartScheduler+0x130>)
 8002e10:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e12:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e14:	2207      	movs	r2, #7
 8002e16:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e18:	e009      	b.n	8002e2e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	4a2d      	ldr	r2, [pc, #180]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e22:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e36:	2b80      	cmp	r3, #128	; 0x80
 8002e38:	d0ef      	beq.n	8002e1a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e3a:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f1c3 0307 	rsb	r3, r3, #7
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d00a      	beq.n	8002e5c <xPortStartScheduler+0xb8>
        __asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	60bb      	str	r3, [r7, #8]
    }
 8002e58:	bf00      	nop
 8002e5a:	e7fe      	b.n	8002e5a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e64:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e66:	4b1c      	ldr	r3, [pc, #112]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e6e:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e70:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e7a:	4b18      	ldr	r3, [pc, #96]	; (8002edc <xPortStartScheduler+0x138>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a17      	ldr	r2, [pc, #92]	; (8002edc <xPortStartScheduler+0x138>)
 8002e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <xPortStartScheduler+0x138>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a14      	ldr	r2, [pc, #80]	; (8002edc <xPortStartScheduler+0x138>)
 8002e8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e92:	f000 f963 	bl	800315c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e96:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <xPortStartScheduler+0x13c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002e9c:	f000 f982 	bl	80031a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002ea0:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <xPortStartScheduler+0x140>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0f      	ldr	r2, [pc, #60]	; (8002ee4 <xPortStartScheduler+0x140>)
 8002ea6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002eaa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002eac:	f7ff ff64 	bl	8002d78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002eb0:	f7ff fdd0 	bl	8002a54 <vTaskSwitchContext>
    prvTaskExitError();
 8002eb4:	f7ff ff1e 	bl	8002cf4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	e000ed00 	.word	0xe000ed00
 8002ec8:	410fc271 	.word	0x410fc271
 8002ecc:	410fc270 	.word	0x410fc270
 8002ed0:	e000e400 	.word	0xe000e400
 8002ed4:	20000188 	.word	0x20000188
 8002ed8:	2000018c 	.word	0x2000018c
 8002edc:	e000ed20 	.word	0xe000ed20
 8002ee0:	20000010 	.word	0x20000010
 8002ee4:	e000ef34 	.word	0xe000ef34

08002ee8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002eee:	4b37      	ldr	r3, [pc, #220]	; (8002fcc <vInitPrioGroupValue+0xe4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a37      	ldr	r2, [pc, #220]	; (8002fd0 <vInitPrioGroupValue+0xe8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d10a      	bne.n	8002f0e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efc:	f383 8811 	msr	BASEPRI, r3
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	613b      	str	r3, [r7, #16]
    }
 8002f0a:	bf00      	nop
 8002f0c:	e7fe      	b.n	8002f0c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f0e:	4b2f      	ldr	r3, [pc, #188]	; (8002fcc <vInitPrioGroupValue+0xe4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a30      	ldr	r2, [pc, #192]	; (8002fd4 <vInitPrioGroupValue+0xec>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d10a      	bne.n	8002f2e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	60fb      	str	r3, [r7, #12]
    }
 8002f2a:	bf00      	nop
 8002f2c:	e7fe      	b.n	8002f2c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <vInitPrioGroupValue+0xf0>)
 8002f30:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	22ff      	movs	r2, #255	; 0xff
 8002f3e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <vInitPrioGroupValue+0xf4>)
 8002f54:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f56:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002f58:	2207      	movs	r2, #7
 8002f5a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f5c:	e009      	b.n	8002f72 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002f5e:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	4a1e      	ldr	r2, [pc, #120]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002f66:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7a:	2b80      	cmp	r3, #128	; 0x80
 8002f7c:	d0ef      	beq.n	8002f5e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f7e:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f1c3 0307 	rsb	r3, r3, #7
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d00a      	beq.n	8002fa0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	60bb      	str	r3, [r7, #8]
    }
 8002f9c:	bf00      	nop
 8002f9e:	e7fe      	b.n	8002f9e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002fa8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002faa:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fb2:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002fb4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002fbe:	bf00      	nop
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000ed00 	.word	0xe000ed00
 8002fd0:	410fc271 	.word	0x410fc271
 8002fd4:	410fc270 	.word	0x410fc270
 8002fd8:	e000e400 	.word	0xe000e400
 8002fdc:	20000188 	.word	0x20000188
 8002fe0:	2000018c 	.word	0x2000018c

08002fe4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
        __asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	607b      	str	r3, [r7, #4]
    }
 8002ffc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <vPortEnterCritical+0x58>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3301      	adds	r3, #1
 8003004:	4a0d      	ldr	r2, [pc, #52]	; (800303c <vPortEnterCritical+0x58>)
 8003006:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <vPortEnterCritical+0x58>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10f      	bne.n	8003030 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <vPortEnterCritical+0x5c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <vPortEnterCritical+0x4c>
        __asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	603b      	str	r3, [r7, #0]
    }
 800302c:	bf00      	nop
 800302e:	e7fe      	b.n	800302e <vPortEnterCritical+0x4a>
    }
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	20000010 	.word	0x20000010
 8003040:	e000ed04 	.word	0xe000ed04

08003044 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <vPortExitCritical+0x50>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <vPortExitCritical+0x24>
        __asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	607b      	str	r3, [r7, #4]
    }
 8003064:	bf00      	nop
 8003066:	e7fe      	b.n	8003066 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003068:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <vPortExitCritical+0x50>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3b01      	subs	r3, #1
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <vPortExitCritical+0x50>)
 8003070:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <vPortExitCritical+0x50>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d105      	bne.n	8003086 <vPortExitCritical+0x42>
 800307a:	2300      	movs	r3, #0
 800307c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003084:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000010 	.word	0x20000010
	...

080030a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80030a0:	f3ef 8009 	mrs	r0, PSP
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	4b15      	ldr	r3, [pc, #84]	; (8003100 <pxCurrentTCBConst>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	f01e 0f10 	tst.w	lr, #16
 80030b0:	bf08      	it	eq
 80030b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80030b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ba:	6010      	str	r0, [r2, #0]
 80030bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80030c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80030c4:	f380 8811 	msr	BASEPRI, r0
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f7ff fcc0 	bl	8002a54 <vTaskSwitchContext>
 80030d4:	f04f 0000 	mov.w	r0, #0
 80030d8:	f380 8811 	msr	BASEPRI, r0
 80030dc:	bc09      	pop	{r0, r3}
 80030de:	6819      	ldr	r1, [r3, #0]
 80030e0:	6808      	ldr	r0, [r1, #0]
 80030e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e6:	f01e 0f10 	tst.w	lr, #16
 80030ea:	bf08      	it	eq
 80030ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80030f0:	f380 8809 	msr	PSP, r0
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	f3af 8000 	nop.w

08003100 <pxCurrentTCBConst>:
 8003100:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop

08003108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
        __asm volatile
 800310e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003112:	f383 8811 	msr	BASEPRI, r3
 8003116:	f3bf 8f6f 	isb	sy
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	607b      	str	r3, [r7, #4]
    }
 8003120:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003122:	f002 faeb 	bl	80056fc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003126:	f7ff fbd9 	bl	80028dc <xTaskIncrementTick>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d006      	beq.n	800313e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003130:	f002 fb42 	bl	80057b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <SysTick_Handler+0x50>)
 8003136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e001      	b.n	8003142 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800313e:	f002 fb1f 	bl	8005780 <SEGGER_SYSVIEW_RecordExitISR>
 8003142:	2300      	movs	r3, #0
 8003144:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f383 8811 	msr	BASEPRI, r3
    }
 800314c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	e000ed04 	.word	0xe000ed04

0800315c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <vPortSetupTimerInterrupt+0x34>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003166:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <vPortSetupTimerInterrupt+0x38>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800316c:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <vPortSetupTimerInterrupt+0x3c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0a      	ldr	r2, [pc, #40]	; (800319c <vPortSetupTimerInterrupt+0x40>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	099b      	lsrs	r3, r3, #6
 8003178:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <vPortSetupTimerInterrupt+0x44>)
 800317a:	3b01      	subs	r3, #1
 800317c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <vPortSetupTimerInterrupt+0x34>)
 8003180:	2207      	movs	r2, #7
 8003182:	601a      	str	r2, [r3, #0]
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000e010 	.word	0xe000e010
 8003194:	e000e018 	.word	0xe000e018
 8003198:	20000000 	.word	0x20000000
 800319c:	10624dd3 	.word	0x10624dd3
 80031a0:	e000e014 	.word	0xe000e014

080031a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80031a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80031b4 <vPortEnableVFP+0x10>
 80031a8:	6801      	ldr	r1, [r0, #0]
 80031aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80031ae:	6001      	str	r1, [r0, #0]
 80031b0:	4770      	bx	lr
 80031b2:	0000      	.short	0x0000
 80031b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop

080031bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80031c2:	f3ef 8305 	mrs	r3, IPSR
 80031c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b0f      	cmp	r3, #15
 80031cc:	d914      	bls.n	80031f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80031ce:	4a17      	ldr	r2, [pc, #92]	; (800322c <vPortValidateInterruptPriority+0x70>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80031d8:	4b15      	ldr	r3, [pc, #84]	; (8003230 <vPortValidateInterruptPriority+0x74>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	7afa      	ldrb	r2, [r7, #11]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d20a      	bcs.n	80031f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80031e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	607b      	str	r3, [r7, #4]
    }
 80031f4:	bf00      	nop
 80031f6:	e7fe      	b.n	80031f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80031f8:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <vPortValidateInterruptPriority+0x78>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <vPortValidateInterruptPriority+0x7c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d90a      	bls.n	800321e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	603b      	str	r3, [r7, #0]
    }
 800321a:	bf00      	nop
 800321c:	e7fe      	b.n	800321c <vPortValidateInterruptPriority+0x60>
    }
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	e000e3f0 	.word	0xe000e3f0
 8003230:	20000188 	.word	0x20000188
 8003234:	e000ed0c 	.word	0xe000ed0c
 8003238:	2000018c 	.word	0x2000018c

0800323c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003244:	2300      	movs	r3, #0
 8003246:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003248:	f7ff fa88 	bl	800275c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800324c:	4b65      	ldr	r3, [pc, #404]	; (80033e4 <pvPortMalloc+0x1a8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003254:	f000 f934 	bl	80034c0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003258:	4b63      	ldr	r3, [pc, #396]	; (80033e8 <pvPortMalloc+0x1ac>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 80a7 	bne.w	80033b4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d02d      	beq.n	80032c8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800326c:	2208      	movs	r2, #8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	d227      	bcs.n	80032c8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003278:	2208      	movs	r2, #8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	2b00      	cmp	r3, #0
 8003288:	d021      	beq.n	80032ce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f023 0307 	bic.w	r3, r3, #7
 8003290:	3308      	adds	r3, #8
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	d214      	bcs.n	80032c2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f023 0307 	bic.w	r3, r3, #7
 800329e:	3308      	adds	r3, #8
 80032a0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d010      	beq.n	80032ce <pvPortMalloc+0x92>
        __asm volatile
 80032ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	617b      	str	r3, [r7, #20]
    }
 80032be:	bf00      	nop
 80032c0:	e7fe      	b.n	80032c0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032c6:	e002      	b.n	80032ce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	e000      	b.n	80032d0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032ce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d06e      	beq.n	80033b4 <pvPortMalloc+0x178>
 80032d6:	4b45      	ldr	r3, [pc, #276]	; (80033ec <pvPortMalloc+0x1b0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d869      	bhi.n	80033b4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80032e0:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <pvPortMalloc+0x1b4>)
 80032e2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80032e4:	4b42      	ldr	r3, [pc, #264]	; (80033f0 <pvPortMalloc+0x1b4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032ea:	e004      	b.n	80032f6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d903      	bls.n	8003308 <pvPortMalloc+0xcc>
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f1      	bne.n	80032ec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003308:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <pvPortMalloc+0x1a8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330e:	429a      	cmp	r2, r3
 8003310:	d050      	beq.n	80033b4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2208      	movs	r2, #8
 8003318:	4413      	add	r3, r2
 800331a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	1ad2      	subs	r2, r2, r3
 800332c:	2308      	movs	r3, #8
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	429a      	cmp	r2, r3
 8003332:	d91f      	bls.n	8003374 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <pvPortMalloc+0x120>
        __asm volatile
 8003346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	613b      	str	r3, [r7, #16]
    }
 8003358:	bf00      	nop
 800335a:	e7fe      	b.n	800335a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	1ad2      	subs	r2, r2, r3
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800336e:	69b8      	ldr	r0, [r7, #24]
 8003370:	f000 f908 	bl	8003584 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003374:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <pvPortMalloc+0x1b0>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	4a1b      	ldr	r2, [pc, #108]	; (80033ec <pvPortMalloc+0x1b0>)
 8003380:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003382:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <pvPortMalloc+0x1b0>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <pvPortMalloc+0x1b8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d203      	bcs.n	8003396 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800338e:	4b17      	ldr	r3, [pc, #92]	; (80033ec <pvPortMalloc+0x1b0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <pvPortMalloc+0x1b8>)
 8003394:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <pvPortMalloc+0x1ac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	431a      	orrs	r2, r3
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80033aa:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <pvPortMalloc+0x1bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3301      	adds	r3, #1
 80033b0:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <pvPortMalloc+0x1bc>)
 80033b2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80033b4:	f7ff f9e0 	bl	8002778 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <pvPortMalloc+0x19c>
        __asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	60fb      	str	r3, [r7, #12]
    }
 80033d4:	bf00      	nop
 80033d6:	e7fe      	b.n	80033d6 <pvPortMalloc+0x19a>
    return pvReturn;
 80033d8:	69fb      	ldr	r3, [r7, #28]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3728      	adds	r7, #40	; 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20019198 	.word	0x20019198
 80033e8:	200191ac 	.word	0x200191ac
 80033ec:	2001919c 	.word	0x2001919c
 80033f0:	20019190 	.word	0x20019190
 80033f4:	200191a0 	.word	0x200191a0
 80033f8:	200191a4 	.word	0x200191a4

080033fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d04d      	beq.n	80034aa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800340e:	2308      	movs	r3, #8
 8003410:	425b      	negs	r3, r3
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4413      	add	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <vPortFree+0xb8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <vPortFree+0x44>
        __asm volatile
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	60fb      	str	r3, [r7, #12]
    }
 800343c:	bf00      	nop
 800343e:	e7fe      	b.n	800343e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <vPortFree+0x62>
        __asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	60bb      	str	r3, [r7, #8]
    }
 800345a:	bf00      	nop
 800345c:	e7fe      	b.n	800345c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <vPortFree+0xb8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01e      	beq.n	80034aa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d11a      	bne.n	80034aa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <vPortFree+0xb8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	43db      	mvns	r3, r3
 800347e:	401a      	ands	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003484:	f7ff f96a 	bl	800275c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <vPortFree+0xbc>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4413      	add	r3, r2
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <vPortFree+0xbc>)
 8003494:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003496:	6938      	ldr	r0, [r7, #16]
 8003498:	f000 f874 	bl	8003584 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <vPortFree+0xc0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	4a06      	ldr	r2, [pc, #24]	; (80034bc <vPortFree+0xc0>)
 80034a4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80034a6:	f7ff f967 	bl	8002778 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80034aa:	bf00      	nop
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	200191ac 	.word	0x200191ac
 80034b8:	2001919c 	.word	0x2001919c
 80034bc:	200191a8 	.word	0x200191a8

080034c0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80034c6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80034ca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80034cc:	4b27      	ldr	r3, [pc, #156]	; (800356c <prvHeapInit+0xac>)
 80034ce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3307      	adds	r3, #7
 80034de:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0307 	bic.w	r3, r3, #7
 80034e6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	4a1f      	ldr	r2, [pc, #124]	; (800356c <prvHeapInit+0xac>)
 80034f0:	4413      	add	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80034f8:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <prvHeapInit+0xb0>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80034fe:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <prvHeapInit+0xb0>)
 8003500:	2200      	movs	r2, #0
 8003502:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	4413      	add	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800350c:	2208      	movs	r2, #8
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0307 	bic.w	r3, r3, #7
 800351a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a15      	ldr	r2, [pc, #84]	; (8003574 <prvHeapInit+0xb4>)
 8003520:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003522:	4b14      	ldr	r3, [pc, #80]	; (8003574 <prvHeapInit+0xb4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2200      	movs	r2, #0
 8003528:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800352a:	4b12      	ldr	r3, [pc, #72]	; (8003574 <prvHeapInit+0xb4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	1ad2      	subs	r2, r2, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <prvHeapInit+0xb4>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <prvHeapInit+0xb8>)
 800354e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4a09      	ldr	r2, [pc, #36]	; (800357c <prvHeapInit+0xbc>)
 8003556:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <prvHeapInit+0xc0>)
 800355a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800355e:	601a      	str	r2, [r3, #0]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	20000190 	.word	0x20000190
 8003570:	20019190 	.word	0x20019190
 8003574:	20019198 	.word	0x20019198
 8003578:	200191a0 	.word	0x200191a0
 800357c:	2001919c 	.word	0x2001919c
 8003580:	200191ac 	.word	0x200191ac

08003584 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800358c:	4b28      	ldr	r3, [pc, #160]	; (8003630 <prvInsertBlockIntoFreeList+0xac>)
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e002      	b.n	8003598 <prvInsertBlockIntoFreeList+0x14>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d8f7      	bhi.n	8003592 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	4413      	add	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d108      	bne.n	80035c6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	441a      	add	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	441a      	add	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d118      	bne.n	800360c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <prvInsertBlockIntoFreeList+0xb0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d00d      	beq.n	8003602 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	441a      	add	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e008      	b.n	8003614 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <prvInsertBlockIntoFreeList+0xb0>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e003      	b.n	8003614 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d002      	beq.n	8003622 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20019190 	.word	0x20019190
 8003634:	20019198 	.word	0x20019198

08003638 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800363c:	4803      	ldr	r0, [pc, #12]	; (800364c <_cbSendSystemDesc+0x14>)
 800363e:	f002 f807 	bl	8005650 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003642:	4803      	ldr	r0, [pc, #12]	; (8003650 <_cbSendSystemDesc+0x18>)
 8003644:	f002 f804 	bl	8005650 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003648:	bf00      	nop
 800364a:	bd80      	pop	{r7, pc}
 800364c:	08005ddc 	.word	0x08005ddc
 8003650:	08005e20 	.word	0x08005e20

08003654 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <SEGGER_SYSVIEW_Conf+0x20>)
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <SEGGER_SYSVIEW_Conf+0x20>)
 800365e:	6819      	ldr	r1, [r3, #0]
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <SEGGER_SYSVIEW_Conf+0x24>)
 8003662:	4a06      	ldr	r2, [pc, #24]	; (800367c <SEGGER_SYSVIEW_Conf+0x28>)
 8003664:	f001 fc78 	bl	8004f58 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003668:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800366c:	f001 fcb8 	bl	8004fe0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000000 	.word	0x20000000
 8003678:	08003639 	.word	0x08003639
 800367c:	08005ebc 	.word	0x08005ebc

08003680 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003682:	b085      	sub	sp, #20
 8003684:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	e033      	b.n	80036f4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800368c:	491e      	ldr	r1, [pc, #120]	; (8003708 <_cbSendTaskList+0x88>)
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	491a      	ldr	r1, [pc, #104]	; (8003708 <_cbSendTaskList+0x88>)
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	3304      	adds	r3, #4
 80036ac:	6819      	ldr	r1, [r3, #0]
 80036ae:	4c16      	ldr	r4, [pc, #88]	; (8003708 <_cbSendTaskList+0x88>)
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4423      	add	r3, r4
 80036bc:	3308      	adds	r3, #8
 80036be:	681c      	ldr	r4, [r3, #0]
 80036c0:	4d11      	ldr	r5, [pc, #68]	; (8003708 <_cbSendTaskList+0x88>)
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	442b      	add	r3, r5
 80036ce:	330c      	adds	r3, #12
 80036d0:	681d      	ldr	r5, [r3, #0]
 80036d2:	4e0d      	ldr	r6, [pc, #52]	; (8003708 <_cbSendTaskList+0x88>)
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4433      	add	r3, r6
 80036e0:	3310      	adds	r3, #16
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	462b      	mov	r3, r5
 80036e8:	4622      	mov	r2, r4
 80036ea:	f000 f8bd 	bl	8003868 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3301      	adds	r3, #1
 80036f2:	607b      	str	r3, [r7, #4]
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <_cbSendTaskList+0x8c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d3c6      	bcc.n	800368c <_cbSendTaskList+0xc>
  }
}
 80036fe:	bf00      	nop
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003708:	200191b0 	.word	0x200191b0
 800370c:	20019250 	.word	0x20019250

08003710 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003718:	f7ff f8ce 	bl	80028b8 <xTaskGetTickCountFromISR>
 800371c:	4603      	mov	r3, r0
 800371e:	2200      	movs	r2, #0
 8003720:	469a      	mov	sl, r3
 8003722:	4693      	mov	fp, r2
 8003724:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	f04f 0a00 	mov.w	sl, #0
 8003734:	f04f 0b00 	mov.w	fp, #0
 8003738:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800373c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003740:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003744:	4652      	mov	r2, sl
 8003746:	465b      	mov	r3, fp
 8003748:	1a14      	subs	r4, r2, r0
 800374a:	eb63 0501 	sbc.w	r5, r3, r1
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	00ab      	lsls	r3, r5, #2
 8003758:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800375c:	00a2      	lsls	r2, r4, #2
 800375e:	4614      	mov	r4, r2
 8003760:	461d      	mov	r5, r3
 8003762:	eb14 0800 	adds.w	r8, r4, r0
 8003766:	eb45 0901 	adc.w	r9, r5, r1
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800377a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800377e:	4690      	mov	r8, r2
 8003780:	4699      	mov	r9, r3
 8003782:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003786:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800378a:	4610      	mov	r0, r2
 800378c:	4619      	mov	r1, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003798 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80037a6:	2205      	movs	r2, #5
 80037a8:	492b      	ldr	r1, [pc, #172]	; (8003858 <SYSVIEW_AddTask+0xc0>)
 80037aa:	68b8      	ldr	r0, [r7, #8]
 80037ac:	f002 faaa 	bl	8005d04 <memcmp>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d04b      	beq.n	800384e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80037b6:	4b29      	ldr	r3, [pc, #164]	; (800385c <SYSVIEW_AddTask+0xc4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b07      	cmp	r3, #7
 80037bc:	d903      	bls.n	80037c6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80037be:	4828      	ldr	r0, [pc, #160]	; (8003860 <SYSVIEW_AddTask+0xc8>)
 80037c0:	f002 f9f2 	bl	8005ba8 <SEGGER_SYSVIEW_Warn>
    return;
 80037c4:	e044      	b.n	8003850 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80037c6:	4b25      	ldr	r3, [pc, #148]	; (800385c <SYSVIEW_AddTask+0xc4>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4926      	ldr	r1, [pc, #152]	; (8003864 <SYSVIEW_AddTask+0xcc>)
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <SYSVIEW_AddTask+0xc4>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4921      	ldr	r1, [pc, #132]	; (8003864 <SYSVIEW_AddTask+0xcc>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	3304      	adds	r3, #4
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <SYSVIEW_AddTask+0xc4>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	491b      	ldr	r1, [pc, #108]	; (8003864 <SYSVIEW_AddTask+0xcc>)
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	3308      	adds	r3, #8
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003806:	4b15      	ldr	r3, [pc, #84]	; (800385c <SYSVIEW_AddTask+0xc4>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4916      	ldr	r1, [pc, #88]	; (8003864 <SYSVIEW_AddTask+0xcc>)
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	330c      	adds	r3, #12
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <SYSVIEW_AddTask+0xc4>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4910      	ldr	r1, [pc, #64]	; (8003864 <SYSVIEW_AddTask+0xcc>)
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	3310      	adds	r3, #16
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <SYSVIEW_AddTask+0xc4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3301      	adds	r3, #1
 8003838:	4a08      	ldr	r2, [pc, #32]	; (800385c <SYSVIEW_AddTask+0xc4>)
 800383a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f80e 	bl	8003868 <SYSVIEW_SendTaskInfo>
 800384c:	e000      	b.n	8003850 <SYSVIEW_AddTask+0xb8>
    return;
 800384e:	bf00      	nop

}
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	08005e30 	.word	0x08005e30
 800385c:	20019250 	.word	0x20019250
 8003860:	08005e38 	.word	0x08005e38
 8003864:	200191b0 	.word	0x200191b0

08003868 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003876:	f107 0314 	add.w	r3, r7, #20
 800387a:	2214      	movs	r2, #20
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f002 fa5e 	bl	8005d40 <memset>
  TaskInfo.TaskID     = TaskID;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003898:	f107 0314 	add.w	r3, r7, #20
 800389c:	4618      	mov	r0, r3
 800389e:	f001 fddf 	bl	8005460 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80038a2:	bf00      	nop
 80038a4:	3728      	adds	r7, #40	; 0x28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <__NVIC_EnableIRQ>:
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	db0b      	blt.n	80038d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	f003 021f 	and.w	r2, r3, #31
 80038c4:	4907      	ldr	r1, [pc, #28]	; (80038e4 <__NVIC_EnableIRQ+0x38>)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	2001      	movs	r0, #1
 80038ce:	fa00 f202 	lsl.w	r2, r0, r2
 80038d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	e000e100 	.word	0xe000e100

080038e8 <__NVIC_SetPriority>:
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	6039      	str	r1, [r7, #0]
 80038f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	db0a      	blt.n	8003912 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	490c      	ldr	r1, [pc, #48]	; (8003934 <__NVIC_SetPriority+0x4c>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	0112      	lsls	r2, r2, #4
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	440b      	add	r3, r1
 800390c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003910:	e00a      	b.n	8003928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4908      	ldr	r1, [pc, #32]	; (8003938 <__NVIC_SetPriority+0x50>)
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	3b04      	subs	r3, #4
 8003920:	0112      	lsls	r2, r2, #4
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	440b      	add	r3, r1
 8003926:	761a      	strb	r2, [r3, #24]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000e100 	.word	0xe000e100
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003942:	f002 f98d 	bl	8005c60 <SEGGER_SYSVIEW_IsStarted>
 8003946:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800394e:	f001 fc0b 	bl	8005168 <SEGGER_SYSVIEW_Start>
  }
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003966:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <_cbOnUARTRx+0x3c>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d806      	bhi.n	800397c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <_cbOnUARTRx+0x3c>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	b2da      	uxtb	r2, r3
 8003976:	4b08      	ldr	r3, [pc, #32]	; (8003998 <_cbOnUARTRx+0x3c>)
 8003978:	701a      	strb	r2, [r3, #0]
    goto Done;
 800397a:	e009      	b.n	8003990 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800397c:	f7ff ffde 	bl	800393c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <_cbOnUARTRx+0x3c>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4618      	mov	r0, r3
 8003986:	1dfb      	adds	r3, r7, #7
 8003988:	2201      	movs	r2, #1
 800398a:	4619      	mov	r1, r3
 800398c:	f000 fb9c 	bl	80040c8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003990:	bf00      	nop
}
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000014 	.word	0x20000014

0800399c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80039a4:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <_cbOnUARTTx+0x5c>)
 80039a6:	785b      	ldrb	r3, [r3, #1]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d80f      	bhi.n	80039cc <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80039ac:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <_cbOnUARTTx+0x5c>)
 80039ae:	785b      	ldrb	r3, [r3, #1]
 80039b0:	461a      	mov	r2, r3
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <_cbOnUARTTx+0x60>)
 80039b4:	5c9a      	ldrb	r2, [r3, r2]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80039ba:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <_cbOnUARTTx+0x5c>)
 80039bc:	785b      	ldrb	r3, [r3, #1]
 80039be:	3301      	adds	r3, #1
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <_cbOnUARTTx+0x5c>)
 80039c4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80039c6:	2301      	movs	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80039ca:	e00f      	b.n	80039ec <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <_cbOnUARTTx+0x5c>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fa1b 	bl	8003e10 <SEGGER_RTT_ReadUpBufferNoLock>
 80039da:	4603      	mov	r3, r0
 80039dc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	da02      	bge.n	80039ea <_cbOnUARTTx+0x4e>
    r = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e000      	b.n	80039ec <_cbOnUARTTx+0x50>
  }
Done:
 80039ea:	bf00      	nop
  return r;
 80039ec:	68fb      	ldr	r3, [r7, #12]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000014 	.word	0x20000014
 80039fc:	08005ec4 	.word	0x08005ec4

08003a00 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003a08:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <SEGGER_UART_init+0x1c>)
 8003a0a:	4905      	ldr	r1, [pc, #20]	; (8003a20 <SEGGER_UART_init+0x20>)
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f863 	bl	8003ad8 <HIF_UART_Init>
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	0800395d 	.word	0x0800395d
 8003a20:	0800399d 	.word	0x0800399d

08003a24 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <USART2_IRQHandler+0x80>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d011      	beq.n	8003a5e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <USART2_IRQHandler+0x84>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 030b 	and.w	r3, r3, #11
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d108      	bne.n	8003a5e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003a4c:	4b17      	ldr	r3, [pc, #92]	; (8003aac <USART2_IRQHandler+0x88>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d004      	beq.n	8003a5e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003a54:	4b15      	ldr	r3, [pc, #84]	; (8003aac <USART2_IRQHandler+0x88>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	79fa      	ldrb	r2, [r7, #7]
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01a      	beq.n	8003a9e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <USART2_IRQHandler+0x8c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d015      	beq.n	8003a9c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <USART2_IRQHandler+0x8c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	1dfa      	adds	r2, r7, #7
 8003a76:	4610      	mov	r0, r2
 8003a78:	4798      	blx	r3
 8003a7a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <USART2_IRQHandler+0x90>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a0b      	ldr	r2, [pc, #44]	; (8003ab4 <USART2_IRQHandler+0x90>)
 8003a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e006      	b.n	8003a9e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <USART2_IRQHandler+0x80>)
 8003a92:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003a94:	79fa      	ldrb	r2, [r7, #7]
 8003a96:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <USART2_IRQHandler+0x84>)
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	e000      	b.n	8003a9e <USART2_IRQHandler+0x7a>
      return;
 8003a9c:	bf00      	nop
    }
  }
}
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40004400 	.word	0x40004400
 8003aa8:	40004404 	.word	0x40004404
 8003aac:	20019254 	.word	0x20019254
 8003ab0:	20019258 	.word	0x20019258
 8003ab4:	4000440c 	.word	0x4000440c

08003ab8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac6:	6013      	str	r3, [r2, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	4000440c 	.word	0x4000440c

08003ad8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003ae4:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <HIF_UART_Init+0xc8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a2d      	ldr	r2, [pc, #180]	; (8003ba0 <HIF_UART_Init+0xc8>)
 8003aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aee:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003af0:	4b2c      	ldr	r3, [pc, #176]	; (8003ba4 <HIF_UART_Init+0xcc>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2b      	ldr	r2, [pc, #172]	; (8003ba4 <HIF_UART_Init+0xcc>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003afc:	4b2a      	ldr	r3, [pc, #168]	; (8003ba8 <HIF_UART_Init+0xd0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b08:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003b10:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003b12:	4a25      	ldr	r2, [pc, #148]	; (8003ba8 <HIF_UART_Init+0xd0>)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003b18:	4b24      	ldr	r3, [pc, #144]	; (8003bac <HIF_UART_Init+0xd4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b24:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003b2c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003b2e:	4a1f      	ldr	r2, [pc, #124]	; (8003bac <HIF_UART_Init+0xd4>)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003b34:	4b1e      	ldr	r3, [pc, #120]	; (8003bb0 <HIF_UART_Init+0xd8>)
 8003b36:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003b3a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003b3c:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <HIF_UART_Init+0xdc>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003b42:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <HIF_UART_Init+0xe0>)
 8003b44:	2280      	movs	r2, #128	; 0x80
 8003b46:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003b4e:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <HIF_UART_Init+0xe4>)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b56:	3301      	adds	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b66:	d302      	bcc.n	8003b6e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003b68:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003b6c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d004      	beq.n	8003b7e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	4a11      	ldr	r2, [pc, #68]	; (8003bc0 <HIF_UART_Init+0xe8>)
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003b7e:	4a11      	ldr	r2, [pc, #68]	; (8003bc4 <HIF_UART_Init+0xec>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003b84:	4a10      	ldr	r2, [pc, #64]	; (8003bc8 <HIF_UART_Init+0xf0>)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003b8a:	2106      	movs	r1, #6
 8003b8c:	2026      	movs	r0, #38	; 0x26
 8003b8e:	f7ff feab 	bl	80038e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003b92:	2026      	movs	r0, #38	; 0x26
 8003b94:	f7ff fe8a 	bl	80038ac <__NVIC_EnableIRQ>
}
 8003b98:	bf00      	nop
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023840 	.word	0x40023840
 8003ba4:	40023830 	.word	0x40023830
 8003ba8:	40020020 	.word	0x40020020
 8003bac:	40020000 	.word	0x40020000
 8003bb0:	4000440c 	.word	0x4000440c
 8003bb4:	40004410 	.word	0x40004410
 8003bb8:	40004414 	.word	0x40004414
 8003bbc:	055d4a80 	.word	0x055d4a80
 8003bc0:	40004408 	.word	0x40004408
 8003bc4:	20019254 	.word	0x20019254
 8003bc8:	20019258 	.word	0x20019258

08003bcc <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003bd2:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <_DoInit+0xa0>)
 8003bd4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003bd6:	22a8      	movs	r2, #168	; 0xa8
 8003bd8:	2100      	movs	r1, #0
 8003bda:	6838      	ldr	r0, [r7, #0]
 8003bdc:	f002 f8b0 	bl	8005d40 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2203      	movs	r2, #3
 8003be4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2203      	movs	r2, #3
 8003bea:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	4a20      	ldr	r2, [pc, #128]	; (8003c70 <_DoInit+0xa4>)
 8003bf0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	4a1f      	ldr	r2, [pc, #124]	; (8003c74 <_DoInit+0xa8>)
 8003bf6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bfe:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2200      	movs	r2, #0
 8003c04:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <_DoInit+0xa4>)
 8003c16:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	4a17      	ldr	r2, [pc, #92]	; (8003c78 <_DoInit+0xac>)
 8003c1c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2210      	movs	r2, #16
 8003c22:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2200      	movs	r2, #0
 8003c28:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2200      	movs	r2, #0
 8003c34:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003c36:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	e00c      	b.n	8003c5a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f1c3 030f 	rsb	r3, r3, #15
 8003c46:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <_DoInit+0xb0>)
 8003c48:	5cd1      	ldrb	r1, [r2, r3]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4413      	add	r3, r2
 8003c50:	460a      	mov	r2, r1
 8003c52:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3301      	adds	r3, #1
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b0f      	cmp	r3, #15
 8003c5e:	d9ef      	bls.n	8003c40 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003c60:	f3bf 8f5f 	dmb	sy
}
 8003c64:	bf00      	nop
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	2001925c 	.word	0x2001925c
 8003c70:	08005e88 	.word	0x08005e88
 8003c74:	20019304 	.word	0x20019304
 8003c78:	20019704 	.word	0x20019704
 8003c7c:	08005ec8 	.word	0x08005ec8

08003c80 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d905      	bls.n	8003cb0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	e007      	b.n	8003cc0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	69b9      	ldr	r1, [r7, #24]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	1acb      	subs	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	bf28      	it	cs
 8003cce:	4613      	movcs	r3, r2
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	bf28      	it	cs
 8003cda:	4613      	movcs	r3, r2
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	6978      	ldr	r0, [r7, #20]
 8003cee:	f002 f819 	bl	8005d24 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003cf2:	6a3a      	ldr	r2, [r7, #32]
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	4413      	add	r3, r2
 8003cf8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	4413      	add	r3, r2
 8003d00:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	4413      	add	r3, r2
 8003d10:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d101      	bne.n	8003d20 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d20:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1b2      	bne.n	8003c96 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003d30:	6a3b      	ldr	r3, [r7, #32]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3728      	adds	r7, #40	; 0x28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b088      	sub	sp, #32
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d911      	bls.n	8003d82 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	6938      	ldr	r0, [r7, #16]
 8003d6e:	f001 ffd9 	bl	8005d24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d72:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	441a      	add	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003d80:	e01f      	b.n	8003dc2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	6938      	ldr	r0, [r7, #16]
 8003d96:	f001 ffc5 	bl	8005d24 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	4413      	add	r3, r2
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4619      	mov	r1, r3
 8003db2:	6938      	ldr	r0, [r7, #16]
 8003db4:	f001 ffb6 	bl	8005d24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003db8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	60da      	str	r2, [r3, #12]
}
 8003dc2:	bf00      	nop
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003dca:	b480      	push	{r7}
 8003dcc:	b087      	sub	sp, #28
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d808      	bhi.n	8003df8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad2      	subs	r2, r2, r3
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	3b01      	subs	r3, #1
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e004      	b.n	8003e02 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003e02:	697b      	ldr	r3, [r7, #20]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08c      	sub	sp, #48	; 0x30
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003e1c:	4b3e      	ldr	r3, [pc, #248]	; (8003f18 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003e1e:	623b      	str	r3, [r7, #32]
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b53      	cmp	r3, #83	; 0x53
 8003e28:	d001      	beq.n	8003e2e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003e2a:	f7ff fecf 	bl	8003bcc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	4613      	mov	r3, r2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	4413      	add	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4a37      	ldr	r2, [pc, #220]	; (8003f18 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003e3c:	4413      	add	r3, r2
 8003e3e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d92b      	bls.n	8003eb4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	bf28      	it	cs
 8003e6e:	4613      	movcs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	4413      	add	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	6939      	ldr	r1, [r7, #16]
 8003e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e82:	f001 ff4f 	bl	8005d24 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	4413      	add	r3, r2
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d101      	bne.n	8003eb4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	bf28      	it	cs
 8003ec4:	4613      	movcs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d019      	beq.n	8003f02 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	4413      	add	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	6939      	ldr	r1, [r7, #16]
 8003edc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ede:	f001 ff21 	bl	8005d24 <memcpy>
    NumBytesRead += NumBytesRem;
 8003ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	4413      	add	r3, r2
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	4413      	add	r3, r2
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f0c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3730      	adds	r7, #48	; 0x30
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	2001925c 	.word	0x2001925c

08003f1c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08c      	sub	sp, #48	; 0x30
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003f28:	4b3e      	ldr	r3, [pc, #248]	; (8004024 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f2a:	623b      	str	r3, [r7, #32]
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b53      	cmp	r3, #83	; 0x53
 8003f34:	d001      	beq.n	8003f3a <SEGGER_RTT_ReadNoLock+0x1e>
 8003f36:	f7ff fe49 	bl	8003bcc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4413      	add	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	3360      	adds	r3, #96	; 0x60
 8003f46:	4a37      	ldr	r2, [pc, #220]	; (8004024 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f48:	4413      	add	r3, r2
 8003f4a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d92b      	bls.n	8003fc0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4293      	cmp	r3, r2
 8003f78:	bf28      	it	cs
 8003f7a:	4613      	movcs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	4413      	add	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	6939      	ldr	r1, [r7, #16]
 8003f8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f8e:	f001 fec9 	bl	8005d24 <memcpy>
    NumBytesRead += NumBytesRem;
 8003f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	4413      	add	r3, r2
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	4413      	add	r3, r2
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d101      	bne.n	8003fc0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	bf28      	it	cs
 8003fd0:	4613      	movcs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d019      	beq.n	800400e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	4413      	add	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	6939      	ldr	r1, [r7, #16]
 8003fe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fea:	f001 fe9b 	bl	8005d24 <memcpy>
    NumBytesRead += NumBytesRem;
 8003fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	4413      	add	r3, r2
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004018:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800401c:	4618      	mov	r0, r3
 800401e:	3730      	adds	r7, #48	; 0x30
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	2001925c 	.word	0x2001925c

08004028 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4613      	mov	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	3360      	adds	r3, #96	; 0x60
 8004044:	4a1f      	ldr	r2, [pc, #124]	; (80040c4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004046:	4413      	add	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d029      	beq.n	80040a6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004052:	2b02      	cmp	r3, #2
 8004054:	d82e      	bhi.n	80040b4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800405a:	2b01      	cmp	r3, #1
 800405c:	d013      	beq.n	8004086 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800405e:	e029      	b.n	80040b4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004060:	6978      	ldr	r0, [r7, #20]
 8004062:	f7ff feb2 	bl	8003dca <_GetAvailWriteSpace>
 8004066:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	429a      	cmp	r2, r3
 800406e:	d202      	bcs.n	8004076 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004070:	2300      	movs	r3, #0
 8004072:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004074:	e021      	b.n	80040ba <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	69b9      	ldr	r1, [r7, #24]
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f7ff fe5b 	bl	8003d3a <_WriteNoCheck>
    break;
 8004084:	e019      	b.n	80040ba <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004086:	6978      	ldr	r0, [r7, #20]
 8004088:	f7ff fe9f 	bl	8003dca <_GetAvailWriteSpace>
 800408c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4293      	cmp	r3, r2
 8004094:	bf28      	it	cs
 8004096:	4613      	movcs	r3, r2
 8004098:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	69b9      	ldr	r1, [r7, #24]
 800409e:	6978      	ldr	r0, [r7, #20]
 80040a0:	f7ff fe4b 	bl	8003d3a <_WriteNoCheck>
    break;
 80040a4:	e009      	b.n	80040ba <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	69b9      	ldr	r1, [r7, #24]
 80040aa:	6978      	ldr	r0, [r7, #20]
 80040ac:	f7ff fde8 	bl	8003c80 <_WriteBlocking>
 80040b0:	61f8      	str	r0, [r7, #28]
    break;
 80040b2:	e002      	b.n	80040ba <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61fb      	str	r3, [r7, #28]
    break;
 80040b8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80040ba:	69fb      	ldr	r3, [r7, #28]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3720      	adds	r7, #32
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	2001925c 	.word	0x2001925c

080040c8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80040d4:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b53      	cmp	r3, #83	; 0x53
 80040e0:	d001      	beq.n	80040e6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80040e2:	f7ff fd73 	bl	8003bcc <_DoInit>
  SEGGER_RTT_LOCK();
 80040e6:	f3ef 8311 	mrs	r3, BASEPRI
 80040ea:	f04f 0120 	mov.w	r1, #32
 80040ee:	f381 8811 	msr	BASEPRI, r1
 80040f2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f7ff ff95 	bl	8004028 <SEGGER_RTT_WriteDownBufferNoLock>
 80040fe:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004106:	697b      	ldr	r3, [r7, #20]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	2001925c 	.word	0x2001925c

08004114 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004122:	4b3d      	ldr	r3, [pc, #244]	; (8004218 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b53      	cmp	r3, #83	; 0x53
 800412e:	d001      	beq.n	8004134 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004130:	f7ff fd4c 	bl	8003bcc <_DoInit>
  SEGGER_RTT_LOCK();
 8004134:	f3ef 8311 	mrs	r3, BASEPRI
 8004138:	f04f 0120 	mov.w	r1, #32
 800413c:	f381 8811 	msr	BASEPRI, r1
 8004140:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004142:	4b35      	ldr	r3, [pc, #212]	; (8004218 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004144:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800414a:	6939      	ldr	r1, [r7, #16]
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	4613      	mov	r3, r2
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	4413      	add	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	440b      	add	r3, r1
 800415a:	3304      	adds	r3, #4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d008      	beq.n	8004174 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3301      	adds	r3, #1
 8004166:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	429a      	cmp	r2, r3
 8004170:	dbeb      	blt.n	800414a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004172:	e000      	b.n	8004176 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004174:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	429a      	cmp	r2, r3
 800417e:	da3f      	bge.n	8004200 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004180:	6939      	ldr	r1, [r7, #16]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	4613      	mov	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	4413      	add	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	440b      	add	r3, r1
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004194:	6939      	ldr	r1, [r7, #16]
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	4613      	mov	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4413      	add	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	440b      	add	r3, r1
 80041a4:	3304      	adds	r3, #4
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80041aa:	6939      	ldr	r1, [r7, #16]
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	4613      	mov	r3, r2
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	4413      	add	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	440b      	add	r3, r1
 80041b8:	3320      	adds	r3, #32
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80041be:	6939      	ldr	r1, [r7, #16]
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	4613      	mov	r3, r2
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	4413      	add	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	440b      	add	r3, r1
 80041cc:	3328      	adds	r3, #40	; 0x28
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80041d2:	6939      	ldr	r1, [r7, #16]
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	4613      	mov	r3, r2
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	4413      	add	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	440b      	add	r3, r1
 80041e0:	3324      	adds	r3, #36	; 0x24
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80041e6:	6939      	ldr	r1, [r7, #16]
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	4613      	mov	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4413      	add	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	440b      	add	r3, r1
 80041f4:	332c      	adds	r3, #44	; 0x2c
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80041fa:	f3bf 8f5f 	dmb	sy
 80041fe:	e002      	b.n	8004206 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004204:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800420c:	69fb      	ldr	r3, [r7, #28]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	2001925c 	.word	0x2001925c

0800421c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800422a:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800422c:	623b      	str	r3, [r7, #32]
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b53      	cmp	r3, #83	; 0x53
 8004236:	d001      	beq.n	800423c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004238:	f7ff fcc8 	bl	8003bcc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800423c:	4b1c      	ldr	r3, [pc, #112]	; (80042b0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800423e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d82c      	bhi.n	80042a0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004246:	f3ef 8311 	mrs	r3, BASEPRI
 800424a:	f04f 0120 	mov.w	r1, #32
 800424e:	f381 8811 	msr	BASEPRI, r1
 8004252:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4613      	mov	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	4413      	add	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	3360      	adds	r3, #96	; 0x60
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00e      	beq.n	800428a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2200      	movs	r2, #0
 8004288:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800428e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004290:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800429a:	2300      	movs	r3, #0
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
 800429e:	e002      	b.n	80042a6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80042a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3728      	adds	r7, #40	; 0x28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	2001925c 	.word	0x2001925c

080042b4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	60fa      	str	r2, [r7, #12]
 80042ca:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d90a      	bls.n	80042e8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80042d2:	2380      	movs	r3, #128	; 0x80
 80042d4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80042d6:	e007      	b.n	80042e8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	1c53      	adds	r3, r2, #1
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1c59      	adds	r1, r3, #1
 80042e2:	60f9      	str	r1, [r7, #12]
 80042e4:	7812      	ldrb	r2, [r2, #0]
 80042e6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	1e5a      	subs	r2, r3, #1
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <_EncodeStr+0x46>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1ee      	bne.n	80042d8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	b2da      	uxtb	r2, r3
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004306:	68fb      	ldr	r3, [r7, #12]
}
 8004308:	4618      	mov	r0, r3
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3307      	adds	r3, #7
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004332:	4b35      	ldr	r3, [pc, #212]	; (8004408 <_HandleIncomingPacket+0xdc>)
 8004334:	7e1b      	ldrb	r3, [r3, #24]
 8004336:	4618      	mov	r0, r3
 8004338:	1cfb      	adds	r3, r7, #3
 800433a:	2201      	movs	r2, #1
 800433c:	4619      	mov	r1, r3
 800433e:	f7ff fded 	bl	8003f1c <SEGGER_RTT_ReadNoLock>
 8004342:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d052      	beq.n	80043f0 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	2b80      	cmp	r3, #128	; 0x80
 800434e:	d031      	beq.n	80043b4 <_HandleIncomingPacket+0x88>
 8004350:	2b80      	cmp	r3, #128	; 0x80
 8004352:	dc40      	bgt.n	80043d6 <_HandleIncomingPacket+0xaa>
 8004354:	2b07      	cmp	r3, #7
 8004356:	dc15      	bgt.n	8004384 <_HandleIncomingPacket+0x58>
 8004358:	2b00      	cmp	r3, #0
 800435a:	dd3c      	ble.n	80043d6 <_HandleIncomingPacket+0xaa>
 800435c:	3b01      	subs	r3, #1
 800435e:	2b06      	cmp	r3, #6
 8004360:	d839      	bhi.n	80043d6 <_HandleIncomingPacket+0xaa>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <_HandleIncomingPacket+0x3c>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	0800438b 	.word	0x0800438b
 800436c:	08004391 	.word	0x08004391
 8004370:	08004397 	.word	0x08004397
 8004374:	0800439d 	.word	0x0800439d
 8004378:	080043a3 	.word	0x080043a3
 800437c:	080043a9 	.word	0x080043a9
 8004380:	080043af 	.word	0x080043af
 8004384:	2b7f      	cmp	r3, #127	; 0x7f
 8004386:	d035      	beq.n	80043f4 <_HandleIncomingPacket+0xc8>
 8004388:	e025      	b.n	80043d6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800438a:	f000 feed 	bl	8005168 <SEGGER_SYSVIEW_Start>
      break;
 800438e:	e036      	b.n	80043fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004390:	f000 ffa6 	bl	80052e0 <SEGGER_SYSVIEW_Stop>
      break;
 8004394:	e033      	b.n	80043fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004396:	f001 f97f 	bl	8005698 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800439a:	e030      	b.n	80043fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800439c:	f001 f944 	bl	8005628 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80043a0:	e02d      	b.n	80043fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80043a2:	f000 ffc3 	bl	800532c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80043a6:	e02a      	b.n	80043fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80043a8:	f001 fbac 	bl	8005b04 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80043ac:	e027      	b.n	80043fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80043ae:	f001 fb8b 	bl	8005ac8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80043b2:	e024      	b.n	80043fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80043b4:	4b14      	ldr	r3, [pc, #80]	; (8004408 <_HandleIncomingPacket+0xdc>)
 80043b6:	7e1b      	ldrb	r3, [r3, #24]
 80043b8:	4618      	mov	r0, r3
 80043ba:	1cfb      	adds	r3, r7, #3
 80043bc:	2201      	movs	r2, #1
 80043be:	4619      	mov	r1, r3
 80043c0:	f7ff fdac 	bl	8003f1c <SEGGER_RTT_ReadNoLock>
 80043c4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 faf0 	bl	80059b4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80043d4:	e010      	b.n	80043f8 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	b25b      	sxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	da0e      	bge.n	80043fc <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80043de:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <_HandleIncomingPacket+0xdc>)
 80043e0:	7e1b      	ldrb	r3, [r3, #24]
 80043e2:	4618      	mov	r0, r3
 80043e4:	1cfb      	adds	r3, r7, #3
 80043e6:	2201      	movs	r2, #1
 80043e8:	4619      	mov	r1, r3
 80043ea:	f7ff fd97 	bl	8003f1c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80043ee:	e005      	b.n	80043fc <_HandleIncomingPacket+0xd0>
    }
  }
 80043f0:	bf00      	nop
 80043f2:	e004      	b.n	80043fe <_HandleIncomingPacket+0xd2>
      break;
 80043f4:	bf00      	nop
 80043f6:	e002      	b.n	80043fe <_HandleIncomingPacket+0xd2>
      break;
 80043f8:	bf00      	nop
 80043fa:	e000      	b.n	80043fe <_HandleIncomingPacket+0xd2>
      break;
 80043fc:	bf00      	nop
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	2001a71c 	.word	0x2001a71c

0800440c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b08c      	sub	sp, #48	; 0x30
 8004410:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004412:	2301      	movs	r3, #1
 8004414:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	3301      	adds	r3, #1
 800441a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004420:	4b32      	ldr	r3, [pc, #200]	; (80044ec <_TrySendOverflowPacket+0xe0>)
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
 8004426:	e00b      	b.n	8004440 <_TrySendOverflowPacket+0x34>
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	b2da      	uxtb	r2, r3
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	1c59      	adds	r1, r3, #1
 8004430:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004432:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	09db      	lsrs	r3, r3, #7
 800443e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	2b7f      	cmp	r3, #127	; 0x7f
 8004444:	d8f0      	bhi.n	8004428 <_TrySendOverflowPacket+0x1c>
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800444c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004454:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004456:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <_TrySendOverflowPacket+0xe4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800445c:	4b23      	ldr	r3, [pc, #140]	; (80044ec <_TrySendOverflowPacket+0xe0>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	623b      	str	r3, [r7, #32]
 800446e:	e00b      	b.n	8004488 <_TrySendOverflowPacket+0x7c>
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	b2da      	uxtb	r2, r3
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	1c59      	adds	r1, r3, #1
 8004478:	6279      	str	r1, [r7, #36]	; 0x24
 800447a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	09db      	lsrs	r3, r3, #7
 8004486:	623b      	str	r3, [r7, #32]
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	2b7f      	cmp	r3, #127	; 0x7f
 800448c:	d8f0      	bhi.n	8004470 <_TrySendOverflowPacket+0x64>
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	627a      	str	r2, [r7, #36]	; 0x24
 8004494:	6a3a      	ldr	r2, [r7, #32]
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800449e:	4b13      	ldr	r3, [pc, #76]	; (80044ec <_TrySendOverflowPacket+0xe0>)
 80044a0:	785b      	ldrb	r3, [r3, #1]
 80044a2:	4618      	mov	r0, r3
 80044a4:	1d3b      	adds	r3, r7, #4
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	1d3b      	adds	r3, r7, #4
 80044ae:	4619      	mov	r1, r3
 80044b0:	f7fb feae 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80044b4:	4603      	mov	r3, r0
 80044b6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80044b8:	f7ff fafe 	bl	8003ab8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d009      	beq.n	80044d6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80044c2:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <_TrySendOverflowPacket+0xe0>)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80044c8:	4b08      	ldr	r3, [pc, #32]	; (80044ec <_TrySendOverflowPacket+0xe0>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <_TrySendOverflowPacket+0xe0>)
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	e004      	b.n	80044e0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <_TrySendOverflowPacket+0xe0>)
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	3301      	adds	r3, #1
 80044dc:	4a03      	ldr	r2, [pc, #12]	; (80044ec <_TrySendOverflowPacket+0xe0>)
 80044de:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80044e0:	693b      	ldr	r3, [r7, #16]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3730      	adds	r7, #48	; 0x30
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	2001a71c 	.word	0x2001a71c
 80044f0:	e0001004 	.word	0xe0001004

080044f4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004500:	4b96      	ldr	r3, [pc, #600]	; (800475c <_SendPacket+0x268>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d010      	beq.n	800452a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004508:	4b94      	ldr	r3, [pc, #592]	; (800475c <_SendPacket+0x268>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 8130 	beq.w	8004772 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004512:	4b92      	ldr	r3, [pc, #584]	; (800475c <_SendPacket+0x268>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d109      	bne.n	800452e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800451a:	f7ff ff77 	bl	800440c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800451e:	4b8f      	ldr	r3, [pc, #572]	; (800475c <_SendPacket+0x268>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b01      	cmp	r3, #1
 8004524:	f040 8127 	bne.w	8004776 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004528:	e001      	b.n	800452e <_SendPacket+0x3a>
    goto Send;
 800452a:	bf00      	nop
 800452c:	e000      	b.n	8004530 <_SendPacket+0x3c>
Send:
 800452e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b1f      	cmp	r3, #31
 8004534:	d809      	bhi.n	800454a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004536:	4b89      	ldr	r3, [pc, #548]	; (800475c <_SendPacket+0x268>)
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	f040 8118 	bne.w	800477a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b17      	cmp	r3, #23
 800454e:	d807      	bhi.n	8004560 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3b01      	subs	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	701a      	strb	r2, [r3, #0]
 800455e:	e0c4      	b.n	80046ea <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	2b7f      	cmp	r3, #127	; 0x7f
 800456c:	d912      	bls.n	8004594 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	09da      	lsrs	r2, r3, #7
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b01      	subs	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	3a01      	subs	r2, #1
 8004586:	60fa      	str	r2, [r7, #12]
 8004588:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800458c:	b2da      	uxtb	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	e006      	b.n	80045a2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3b01      	subs	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b7e      	cmp	r3, #126	; 0x7e
 80045a6:	d807      	bhi.n	80045b8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	e098      	b.n	80046ea <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045be:	d212      	bcs.n	80045e6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	09da      	lsrs	r2, r3, #7
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	3a01      	subs	r2, #1
 80045d8:	60fa      	str	r2, [r7, #12]
 80045da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	e081      	b.n	80046ea <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045ec:	d21d      	bcs.n	800462a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0b9a      	lsrs	r2, r3, #14
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	09db      	lsrs	r3, r3, #7
 8004602:	b2db      	uxtb	r3, r3
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	3a01      	subs	r2, #1
 8004608:	60fa      	str	r2, [r7, #12]
 800460a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	3a01      	subs	r2, #1
 800461c:	60fa      	str	r2, [r7, #12]
 800461e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004622:	b2da      	uxtb	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	701a      	strb	r2, [r3, #0]
 8004628:	e05f      	b.n	80046ea <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004630:	d228      	bcs.n	8004684 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	0d5a      	lsrs	r2, r3, #21
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3b01      	subs	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	0b9b      	lsrs	r3, r3, #14
 8004646:	b2db      	uxtb	r3, r3
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	3a01      	subs	r2, #1
 800464c:	60fa      	str	r2, [r7, #12]
 800464e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004652:	b2da      	uxtb	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	09db      	lsrs	r3, r3, #7
 800465c:	b2db      	uxtb	r3, r3
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	3a01      	subs	r2, #1
 8004662:	60fa      	str	r2, [r7, #12]
 8004664:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	3a01      	subs	r2, #1
 8004676:	60fa      	str	r2, [r7, #12]
 8004678:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800467c:	b2da      	uxtb	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	e032      	b.n	80046ea <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	0f1a      	lsrs	r2, r3, #28
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3b01      	subs	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	0d5b      	lsrs	r3, r3, #21
 8004698:	b2db      	uxtb	r3, r3
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	3a01      	subs	r2, #1
 800469e:	60fa      	str	r2, [r7, #12]
 80046a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	0b9b      	lsrs	r3, r3, #14
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	3a01      	subs	r2, #1
 80046b4:	60fa      	str	r2, [r7, #12]
 80046b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	09db      	lsrs	r3, r3, #7
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	3a01      	subs	r2, #1
 80046ca:	60fa      	str	r2, [r7, #12]
 80046cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	3a01      	subs	r2, #1
 80046de:	60fa      	str	r2, [r7, #12]
 80046e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80046ea:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <_SendPacket+0x26c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80046f0:	4b1a      	ldr	r3, [pc, #104]	; (800475c <_SendPacket+0x268>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	623b      	str	r3, [r7, #32]
 8004702:	e00b      	b.n	800471c <_SendPacket+0x228>
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	b2da      	uxtb	r2, r3
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	1c59      	adds	r1, r3, #1
 800470c:	6279      	str	r1, [r7, #36]	; 0x24
 800470e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	09db      	lsrs	r3, r3, #7
 800471a:	623b      	str	r3, [r7, #32]
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	2b7f      	cmp	r3, #127	; 0x7f
 8004720:	d8f0      	bhi.n	8004704 <_SendPacket+0x210>
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	627a      	str	r2, [r7, #36]	; 0x24
 8004728:	6a3a      	ldr	r2, [r7, #32]
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004732:	4b0a      	ldr	r3, [pc, #40]	; (800475c <_SendPacket+0x268>)
 8004734:	785b      	ldrb	r3, [r3, #1]
 8004736:	4618      	mov	r0, r3
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	461a      	mov	r2, r3
 8004740:	68f9      	ldr	r1, [r7, #12]
 8004742:	f7fb fd65 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004746:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004748:	f7ff f9b6 	bl	8003ab8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d008      	beq.n	8004764 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004752:	4a02      	ldr	r2, [pc, #8]	; (800475c <_SendPacket+0x268>)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	60d3      	str	r3, [r2, #12]
 8004758:	e010      	b.n	800477c <_SendPacket+0x288>
 800475a:	bf00      	nop
 800475c:	2001a71c 	.word	0x2001a71c
 8004760:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004764:	4b19      	ldr	r3, [pc, #100]	; (80047cc <_SendPacket+0x2d8>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	b2da      	uxtb	r2, r3
 800476c:	4b17      	ldr	r3, [pc, #92]	; (80047cc <_SendPacket+0x2d8>)
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e004      	b.n	800477c <_SendPacket+0x288>
    goto SendDone;
 8004772:	bf00      	nop
 8004774:	e002      	b.n	800477c <_SendPacket+0x288>
      goto SendDone;
 8004776:	bf00      	nop
 8004778:	e000      	b.n	800477c <_SendPacket+0x288>
      goto SendDone;
 800477a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800477c:	4b13      	ldr	r3, [pc, #76]	; (80047cc <_SendPacket+0x2d8>)
 800477e:	7e1b      	ldrb	r3, [r3, #24]
 8004780:	4619      	mov	r1, r3
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <_SendPacket+0x2dc>)
 8004784:	460b      	mov	r3, r1
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	440b      	add	r3, r1
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	336c      	adds	r3, #108	; 0x6c
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <_SendPacket+0x2d8>)
 8004794:	7e1b      	ldrb	r3, [r3, #24]
 8004796:	4618      	mov	r0, r3
 8004798:	490d      	ldr	r1, [pc, #52]	; (80047d0 <_SendPacket+0x2dc>)
 800479a:	4603      	mov	r3, r0
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4403      	add	r3, r0
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	440b      	add	r3, r1
 80047a4:	3370      	adds	r3, #112	; 0x70
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d00b      	beq.n	80047c4 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80047ac:	4b07      	ldr	r3, [pc, #28]	; (80047cc <_SendPacket+0x2d8>)
 80047ae:	789b      	ldrb	r3, [r3, #2]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d107      	bne.n	80047c4 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <_SendPacket+0x2d8>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80047ba:	f7ff fdb7 	bl	800432c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80047be:	4b03      	ldr	r3, [pc, #12]	; (80047cc <_SendPacket+0x2d8>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80047c4:	bf00      	nop
 80047c6:	3728      	adds	r7, #40	; 0x28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	2001a71c 	.word	0x2001a71c
 80047d0:	2001925c 	.word	0x2001925c

080047d4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	3301      	adds	r3, #1
 80047ea:	2b80      	cmp	r3, #128	; 0x80
 80047ec:	d80a      	bhi.n	8004804 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	1c59      	adds	r1, r3, #1
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6051      	str	r1, [r2, #4]
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b80      	cmp	r3, #128	; 0x80
 800480a:	d15a      	bne.n	80048c2 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	623b      	str	r3, [r7, #32]
 800482c:	e00b      	b.n	8004846 <_StoreChar+0x72>
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	1c59      	adds	r1, r3, #1
 8004836:	6279      	str	r1, [r7, #36]	; 0x24
 8004838:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	701a      	strb	r2, [r3, #0]
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	09db      	lsrs	r3, r3, #7
 8004844:	623b      	str	r3, [r7, #32]
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	2b7f      	cmp	r3, #127	; 0x7f
 800484a:	d8f0      	bhi.n	800482e <_StoreChar+0x5a>
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	627a      	str	r2, [r7, #36]	; 0x24
 8004852:	6a3a      	ldr	r2, [r7, #32]
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	61fb      	str	r3, [r7, #28]
 8004860:	2300      	movs	r3, #0
 8004862:	61bb      	str	r3, [r7, #24]
 8004864:	e00b      	b.n	800487e <_StoreChar+0xaa>
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	b2da      	uxtb	r2, r3
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	1c59      	adds	r1, r3, #1
 800486e:	61f9      	str	r1, [r7, #28]
 8004870:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	09db      	lsrs	r3, r3, #7
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b7f      	cmp	r3, #127	; 0x7f
 8004882:	d8f0      	bhi.n	8004866 <_StoreChar+0x92>
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	61fa      	str	r2, [r7, #28]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	701a      	strb	r2, [r3, #0]
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	221a      	movs	r2, #26
 800489a:	6939      	ldr	r1, [r7, #16]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fe29 	bl	80044f4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fd34 	bl	8004314 <_PreparePacket>
 80048ac:	4602      	mov	r2, r0
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	611a      	str	r2, [r3, #16]
  }
}
 80048c2:	bf00      	nop
 80048c4:	3728      	adds	r7, #40	; 0x28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08a      	sub	sp, #40	; 0x28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80048de:	2301      	movs	r3, #1
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80048e2:	2301      	movs	r3, #1
 80048e4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80048e6:	e007      	b.n	80048f8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80048e8:	6a3a      	ldr	r2, [r7, #32]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f0:	623b      	str	r3, [r7, #32]
    Width++;
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	3301      	adds	r3, #1
 80048f6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80048f8:	6a3a      	ldr	r2, [r7, #32]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d2f3      	bcs.n	80048e8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	429a      	cmp	r2, r3
 8004906:	d901      	bls.n	800490c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800490c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d11f      	bne.n	8004956 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01c      	beq.n	8004956 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800491c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <_PrintUnsigned+0x66>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <_PrintUnsigned+0x66>
        c = '0';
 800492c:	2330      	movs	r3, #48	; 0x30
 800492e:	76fb      	strb	r3, [r7, #27]
 8004930:	e001      	b.n	8004936 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004932:	2320      	movs	r3, #32
 8004934:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004936:	e007      	b.n	8004948 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	3b01      	subs	r3, #1
 800493c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800493e:	7efb      	ldrb	r3, [r7, #27]
 8004940:	4619      	mov	r1, r3
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff ff46 	bl	80047d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <_PrintUnsigned+0x8a>
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	429a      	cmp	r2, r3
 8004954:	d3f0      	bcc.n	8004938 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d903      	bls.n	8004964 <_PrintUnsigned+0x98>
      NumDigits--;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	3b01      	subs	r3, #1
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	e009      	b.n	8004978 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	429a      	cmp	r2, r3
 8004974:	d200      	bcs.n	8004978 <_PrintUnsigned+0xac>
        break;
 8004976:	e005      	b.n	8004984 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	fb02 f303 	mul.w	r3, r2, r3
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004982:	e7e8      	b.n	8004956 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	fbb2 f3f3 	udiv	r3, r2, r3
 800498c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004992:	fb02 f303 	mul.w	r3, r2, r3
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800499c:	4a15      	ldr	r2, [pc, #84]	; (80049f4 <_PrintUnsigned+0x128>)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	4413      	add	r3, r2
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	4619      	mov	r1, r3
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7ff ff14 	bl	80047d4 <_StoreChar>
    Digit /= Base;
 80049ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e3      	bne.n	8004984 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80049bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d011      	beq.n	80049ea <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00e      	beq.n	80049ea <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049cc:	e006      	b.n	80049dc <_PrintUnsigned+0x110>
        FieldWidth--;
 80049ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d0:	3b01      	subs	r3, #1
 80049d2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80049d4:	2120      	movs	r1, #32
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff fefc 	bl	80047d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <_PrintUnsigned+0x11e>
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d3f1      	bcc.n	80049ce <_PrintUnsigned+0x102>
      }
    }
  }
}
 80049ea:	bf00      	nop
 80049ec:	3728      	adds	r7, #40	; 0x28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	08005ee8 	.word	0x08005ee8

080049f8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bfb8      	it	lt
 8004a0c:	425b      	neglt	r3, r3
 8004a0e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004a10:	2301      	movs	r3, #1
 8004a12:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004a14:	e007      	b.n	8004a26 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a1e:	613b      	str	r3, [r7, #16]
    Width++;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	3301      	adds	r3, #1
 8004a24:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	daf3      	bge.n	8004a16 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d901      	bls.n	8004a3a <_PrintInt+0x42>
    Width = NumDigits;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <_PrintInt+0x5e>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	db04      	blt.n	8004a50 <_PrintInt+0x58>
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <_PrintInt+0x5e>
    FieldWidth--;
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <_PrintInt+0x6e>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d016      	beq.n	8004a94 <_PrintInt+0x9c>
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d111      	bne.n	8004a94 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00e      	beq.n	8004a94 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a76:	e006      	b.n	8004a86 <_PrintInt+0x8e>
        FieldWidth--;
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004a7e:	2120      	movs	r1, #32
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f7ff fea7 	bl	80047d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <_PrintInt+0x9c>
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d3f1      	bcc.n	8004a78 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	da07      	bge.n	8004aaa <_PrintInt+0xb2>
    v = -v;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	425b      	negs	r3, r3
 8004a9e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004aa0:	212d      	movs	r1, #45	; 0x2d
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7ff fe96 	bl	80047d4 <_StoreChar>
 8004aa8:	e008      	b.n	8004abc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004ab4:	212b      	movs	r1, #43	; 0x2b
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f7ff fe8c 	bl	80047d4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d019      	beq.n	8004afa <_PrintInt+0x102>
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d114      	bne.n	8004afa <_PrintInt+0x102>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d111      	bne.n	8004afa <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00e      	beq.n	8004afa <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004adc:	e006      	b.n	8004aec <_PrintInt+0xf4>
        FieldWidth--;
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004ae4:	2130      	movs	r1, #48	; 0x30
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f7ff fe74 	bl	80047d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <_PrintInt+0x102>
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d3f1      	bcc.n	8004ade <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7ff fedf 	bl	80048cc <_PrintUnsigned>
}
 8004b0e:	bf00      	nop
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b098      	sub	sp, #96	; 0x60
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b24:	f3ef 8311 	mrs	r3, BASEPRI
 8004b28:	f04f 0120 	mov.w	r1, #32
 8004b2c:	f381 8811 	msr	BASEPRI, r1
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b32:	48b7      	ldr	r0, [pc, #732]	; (8004e10 <_VPrintTarget+0x2f8>)
 8004b34:	f7ff fbee 	bl	8004314 <_PreparePacket>
 8004b38:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004b3a:	4bb5      	ldr	r3, [pc, #724]	; (8004e10 <_VPrintTarget+0x2f8>)
 8004b3c:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004b5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 81a8 	beq.w	8004eb8 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004b68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b6c:	2b25      	cmp	r3, #37	; 0x25
 8004b6e:	f040 8195 	bne.w	8004e9c <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004b72:	2300      	movs	r3, #0
 8004b74:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004b76:	2301      	movs	r3, #1
 8004b78:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004b82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b86:	3b23      	subs	r3, #35	; 0x23
 8004b88:	2b0d      	cmp	r3, #13
 8004b8a:	d83f      	bhi.n	8004c0c <_VPrintTarget+0xf4>
 8004b8c:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <_VPrintTarget+0x7c>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004bfd 	.word	0x08004bfd
 8004b98:	08004c0d 	.word	0x08004c0d
 8004b9c:	08004c0d 	.word	0x08004c0d
 8004ba0:	08004c0d 	.word	0x08004c0d
 8004ba4:	08004c0d 	.word	0x08004c0d
 8004ba8:	08004c0d 	.word	0x08004c0d
 8004bac:	08004c0d 	.word	0x08004c0d
 8004bb0:	08004c0d 	.word	0x08004c0d
 8004bb4:	08004bed 	.word	0x08004bed
 8004bb8:	08004c0d 	.word	0x08004c0d
 8004bbc:	08004bcd 	.word	0x08004bcd
 8004bc0:	08004c0d 	.word	0x08004c0d
 8004bc4:	08004c0d 	.word	0x08004c0d
 8004bc8:	08004bdd 	.word	0x08004bdd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	e01a      	b.n	8004c12 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bde:	f043 0302 	orr.w	r3, r3, #2
 8004be2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	e012      	b.n	8004c12 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bee:	f043 0304 	orr.w	r3, r3, #4
 8004bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	e00a      	b.n	8004c12 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfe:	f043 0308 	orr.w	r3, r3, #8
 8004c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3301      	adds	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	e002      	b.n	8004c12 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c10:	bf00      	nop
        }
      } while (v);
 8004c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1b0      	bne.n	8004b7a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004c24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c28:	2b2f      	cmp	r3, #47	; 0x2f
 8004c2a:	d912      	bls.n	8004c52 <_VPrintTarget+0x13a>
 8004c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c30:	2b39      	cmp	r3, #57	; 0x39
 8004c32:	d80e      	bhi.n	8004c52 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3301      	adds	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	461a      	mov	r2, r3
 8004c46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3b30      	subs	r3, #48	; 0x30
 8004c4e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004c50:	e7e4      	b.n	8004c1c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004c52:	2300      	movs	r3, #0
 8004c54:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004c5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c62:	2b2e      	cmp	r3, #46	; 0x2e
 8004c64:	d11d      	bne.n	8004ca2 <_VPrintTarget+0x18a>
        sFormat++;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004c74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c78:	2b2f      	cmp	r3, #47	; 0x2f
 8004c7a:	d912      	bls.n	8004ca2 <_VPrintTarget+0x18a>
 8004c7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c80:	2b39      	cmp	r3, #57	; 0x39
 8004c82:	d80e      	bhi.n	8004ca2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3301      	adds	r3, #1
 8004c88:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004c8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	461a      	mov	r2, r3
 8004c96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3b30      	subs	r3, #48	; 0x30
 8004c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004ca0:	e7e4      	b.n	8004c6c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004caa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cae:	2b6c      	cmp	r3, #108	; 0x6c
 8004cb0:	d003      	beq.n	8004cba <_VPrintTarget+0x1a2>
 8004cb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cb6:	2b68      	cmp	r3, #104	; 0x68
 8004cb8:	d107      	bne.n	8004cca <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004cc8:	e7ef      	b.n	8004caa <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004cca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cce:	2b25      	cmp	r3, #37	; 0x25
 8004cd0:	f000 80d8 	beq.w	8004e84 <_VPrintTarget+0x36c>
 8004cd4:	2b25      	cmp	r3, #37	; 0x25
 8004cd6:	f2c0 80dc 	blt.w	8004e92 <_VPrintTarget+0x37a>
 8004cda:	2b78      	cmp	r3, #120	; 0x78
 8004cdc:	f300 80d9 	bgt.w	8004e92 <_VPrintTarget+0x37a>
 8004ce0:	2b58      	cmp	r3, #88	; 0x58
 8004ce2:	f2c0 80d6 	blt.w	8004e92 <_VPrintTarget+0x37a>
 8004ce6:	3b58      	subs	r3, #88	; 0x58
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	f200 80d2 	bhi.w	8004e92 <_VPrintTarget+0x37a>
 8004cee:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <_VPrintTarget+0x1dc>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004deb 	.word	0x08004deb
 8004cf8:	08004e93 	.word	0x08004e93
 8004cfc:	08004e93 	.word	0x08004e93
 8004d00:	08004e93 	.word	0x08004e93
 8004d04:	08004e93 	.word	0x08004e93
 8004d08:	08004e93 	.word	0x08004e93
 8004d0c:	08004e93 	.word	0x08004e93
 8004d10:	08004e93 	.word	0x08004e93
 8004d14:	08004e93 	.word	0x08004e93
 8004d18:	08004e93 	.word	0x08004e93
 8004d1c:	08004e93 	.word	0x08004e93
 8004d20:	08004d79 	.word	0x08004d79
 8004d24:	08004d9f 	.word	0x08004d9f
 8004d28:	08004e93 	.word	0x08004e93
 8004d2c:	08004e93 	.word	0x08004e93
 8004d30:	08004e93 	.word	0x08004e93
 8004d34:	08004e93 	.word	0x08004e93
 8004d38:	08004e93 	.word	0x08004e93
 8004d3c:	08004e93 	.word	0x08004e93
 8004d40:	08004e93 	.word	0x08004e93
 8004d44:	08004e93 	.word	0x08004e93
 8004d48:	08004e93 	.word	0x08004e93
 8004d4c:	08004e93 	.word	0x08004e93
 8004d50:	08004e93 	.word	0x08004e93
 8004d54:	08004e5f 	.word	0x08004e5f
 8004d58:	08004e93 	.word	0x08004e93
 8004d5c:	08004e93 	.word	0x08004e93
 8004d60:	08004e15 	.word	0x08004e15
 8004d64:	08004e93 	.word	0x08004e93
 8004d68:	08004dc5 	.word	0x08004dc5
 8004d6c:	08004e93 	.word	0x08004e93
 8004d70:	08004e93 	.word	0x08004e93
 8004d74:	08004deb 	.word	0x08004deb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	1d19      	adds	r1, r3, #4
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8004d8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004d90:	f107 0310 	add.w	r3, r7, #16
 8004d94:	4611      	mov	r1, r2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff fd1c 	bl	80047d4 <_StoreChar>
        break;
 8004d9c:	e07a      	b.n	8004e94 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	1d19      	adds	r1, r3, #4
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6011      	str	r1, [r2, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004dac:	f107 0010 	add.w	r0, r7, #16
 8004db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dba:	220a      	movs	r2, #10
 8004dbc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004dbe:	f7ff fe1b 	bl	80049f8 <_PrintInt>
        break;
 8004dc2:	e067      	b.n	8004e94 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	1d19      	adds	r1, r3, #4
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6011      	str	r1, [r2, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004dd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004dd4:	f107 0010 	add.w	r0, r7, #16
 8004dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dda:	9301      	str	r3, [sp, #4]
 8004ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de2:	220a      	movs	r2, #10
 8004de4:	f7ff fd72 	bl	80048cc <_PrintUnsigned>
        break;
 8004de8:	e054      	b.n	8004e94 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	1d19      	adds	r1, r3, #4
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6011      	str	r1, [r2, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004df8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004dfa:	f107 0010 	add.w	r0, r7, #16
 8004dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e08:	2210      	movs	r2, #16
 8004e0a:	f7ff fd5f 	bl	80048cc <_PrintUnsigned>
        break;
 8004e0e:	e041      	b.n	8004e94 <_VPrintTarget+0x37c>
 8004e10:	2001a74c 	.word	0x2001a74c
      case 's':
        s = va_arg(*pParamList, const char*);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	1d19      	adds	r1, r3, #4
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6011      	str	r1, [r2, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8004e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <_VPrintTarget+0x314>
          s = "(null)";
 8004e28:	4b4a      	ldr	r3, [pc, #296]	; (8004f54 <_VPrintTarget+0x43c>)
 8004e2a:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8004e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8004e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e36:	3301      	adds	r3, #1
 8004e38:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8004e3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00b      	beq.n	8004e5a <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004e42:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004e46:	f107 0310 	add.w	r3, r7, #16
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fcc1 	bl	80047d4 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	2b7f      	cmp	r3, #127	; 0x7f
 8004e56:	d9e9      	bls.n	8004e2c <_VPrintTarget+0x314>
        break;
 8004e58:	e01c      	b.n	8004e94 <_VPrintTarget+0x37c>
            break;
 8004e5a:	bf00      	nop
        break;
 8004e5c:	e01a      	b.n	8004e94 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	1d19      	adds	r1, r3, #4
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6011      	str	r1, [r2, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004e6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e6e:	f107 0010 	add.w	r0, r7, #16
 8004e72:	2300      	movs	r3, #0
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	2308      	movs	r3, #8
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	2210      	movs	r2, #16
 8004e7e:	f7ff fd25 	bl	80048cc <_PrintUnsigned>
        break;
 8004e82:	e007      	b.n	8004e94 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004e84:	f107 0310 	add.w	r3, r7, #16
 8004e88:	2125      	movs	r1, #37	; 0x25
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fca2 	bl	80047d4 <_StoreChar>
        break;
 8004e90:	e000      	b.n	8004e94 <_VPrintTarget+0x37c>
      default:
        break;
 8004e92:	bf00      	nop
      }
      sFormat++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3301      	adds	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	e007      	b.n	8004eac <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004e9c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004ea0:	f107 0310 	add.w	r3, r7, #16
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fc94 	bl	80047d4 <_StoreChar>
    }
  } while (*sFormat);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f47f ae4d 	bne.w	8004b50 <_VPrintTarget+0x38>
 8004eb6:	e000      	b.n	8004eba <_VPrintTarget+0x3a2>
      break;
 8004eb8:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d041      	beq.n	8004f44 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ed0:	e00b      	b.n	8004eea <_VPrintTarget+0x3d2>
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed8:	1c59      	adds	r1, r3, #1
 8004eda:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004edc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee6:	09db      	lsrs	r3, r3, #7
 8004ee8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	2b7f      	cmp	r3, #127	; 0x7f
 8004eee:	d8f0      	bhi.n	8004ed2 <_VPrintTarget+0x3ba>
 8004ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efe:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
 8004f04:	2300      	movs	r3, #0
 8004f06:	633b      	str	r3, [r7, #48]	; 0x30
 8004f08:	e00b      	b.n	8004f22 <_VPrintTarget+0x40a>
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	1c59      	adds	r1, r3, #1
 8004f12:	6379      	str	r1, [r7, #52]	; 0x34
 8004f14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1e:	09db      	lsrs	r3, r3, #7
 8004f20:	633b      	str	r3, [r7, #48]	; 0x30
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	2b7f      	cmp	r3, #127	; 0x7f
 8004f26:	d8f0      	bhi.n	8004f0a <_VPrintTarget+0x3f2>
 8004f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	637a      	str	r2, [r7, #52]	; 0x34
 8004f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	701a      	strb	r2, [r3, #0]
 8004f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f36:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	6979      	ldr	r1, [r7, #20]
 8004f3c:	221a      	movs	r2, #26
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff fad8 	bl	80044f4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f46:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004f4a:	bf00      	nop
 8004f4c:	3758      	adds	r7, #88	; 0x58
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	08005e94 	.word	0x08005e94

08004f58 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004f66:	2300      	movs	r3, #0
 8004f68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f6c:	4917      	ldr	r1, [pc, #92]	; (8004fcc <SEGGER_SYSVIEW_Init+0x74>)
 8004f6e:	4818      	ldr	r0, [pc, #96]	; (8004fd0 <SEGGER_SYSVIEW_Init+0x78>)
 8004f70:	f7ff f8d0 	bl	8004114 <SEGGER_RTT_AllocUpBuffer>
 8004f74:	4603      	mov	r3, r0
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	4b16      	ldr	r3, [pc, #88]	; (8004fd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f7a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004f7c:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f7e:	785a      	ldrb	r2, [r3, #1]
 8004f80:	4b14      	ldr	r3, [pc, #80]	; (8004fd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f82:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004f84:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f86:	7e1b      	ldrb	r3, [r3, #24]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	2308      	movs	r3, #8
 8004f90:	4a11      	ldr	r2, [pc, #68]	; (8004fd8 <SEGGER_SYSVIEW_Init+0x80>)
 8004f92:	490f      	ldr	r1, [pc, #60]	; (8004fd0 <SEGGER_SYSVIEW_Init+0x78>)
 8004f94:	f7ff f942 	bl	800421c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004f98:	4b0e      	ldr	r3, [pc, #56]	; (8004fd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004f9e:	4b0f      	ldr	r3, [pc, #60]	; (8004fdc <SEGGER_SYSVIEW_Init+0x84>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a0c      	ldr	r2, [pc, #48]	; (8004fd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fa4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004fa6:	4a0b      	ldr	r2, [pc, #44]	; (8004fd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004fac:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004fb2:	4a08      	ldr	r2, [pc, #32]	; (8004fd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004fb8:	4a06      	ldr	r2, [pc, #24]	; (8004fd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20019714 	.word	0x20019714
 8004fd0:	08005e9c 	.word	0x08005e9c
 8004fd4:	2001a71c 	.word	0x2001a71c
 8004fd8:	2001a714 	.word	0x2001a714
 8004fdc:	e0001004 	.word	0xe0001004

08004fe0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004fe8:	4a04      	ldr	r2, [pc, #16]	; (8004ffc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6113      	str	r3, [r2, #16]
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	2001a71c 	.word	0x2001a71c

08005000 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005008:	f3ef 8311 	mrs	r3, BASEPRI
 800500c:	f04f 0120 	mov.w	r1, #32
 8005010:	f381 8811 	msr	BASEPRI, r1
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	4808      	ldr	r0, [pc, #32]	; (8005038 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005018:	f7ff f97c 	bl	8004314 <_PreparePacket>
 800501c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	68b8      	ldr	r0, [r7, #8]
 8005024:	f7ff fa66 	bl	80044f4 <_SendPacket>
  RECORD_END();
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f383 8811 	msr	BASEPRI, r3
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	2001a74c 	.word	0x2001a74c

0800503c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005046:	f3ef 8311 	mrs	r3, BASEPRI
 800504a:	f04f 0120 	mov.w	r1, #32
 800504e:	f381 8811 	msr	BASEPRI, r1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	4816      	ldr	r0, [pc, #88]	; (80050b0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005056:	f7ff f95d 	bl	8004314 <_PreparePacket>
 800505a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	61fb      	str	r3, [r7, #28]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	e00b      	b.n	8005082 <SEGGER_SYSVIEW_RecordU32+0x46>
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	b2da      	uxtb	r2, r3
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	1c59      	adds	r1, r3, #1
 8005072:	61f9      	str	r1, [r7, #28]
 8005074:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	09db      	lsrs	r3, r3, #7
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b7f      	cmp	r3, #127	; 0x7f
 8005086:	d8f0      	bhi.n	800506a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	61fa      	str	r2, [r7, #28]
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	701a      	strb	r2, [r3, #0]
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	6938      	ldr	r0, [r7, #16]
 800509e:	f7ff fa29 	bl	80044f4 <_SendPacket>
  RECORD_END();
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f383 8811 	msr	BASEPRI, r3
}
 80050a8:	bf00      	nop
 80050aa:	3720      	adds	r7, #32
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	2001a74c 	.word	0x2001a74c

080050b4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08c      	sub	sp, #48	; 0x30
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80050c0:	f3ef 8311 	mrs	r3, BASEPRI
 80050c4:	f04f 0120 	mov.w	r1, #32
 80050c8:	f381 8811 	msr	BASEPRI, r1
 80050cc:	61fb      	str	r3, [r7, #28]
 80050ce:	4825      	ldr	r0, [pc, #148]	; (8005164 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80050d0:	f7ff f920 	bl	8004314 <_PreparePacket>
 80050d4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050e2:	e00b      	b.n	80050fc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ea:	1c59      	adds	r1, r3, #1
 80050ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	09db      	lsrs	r3, r3, #7
 80050fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005100:	d8f0      	bhi.n	80050e4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	623b      	str	r3, [r7, #32]
 800511a:	e00b      	b.n	8005134 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	b2da      	uxtb	r2, r3
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	1c59      	adds	r1, r3, #1
 8005124:	6279      	str	r1, [r7, #36]	; 0x24
 8005126:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	09db      	lsrs	r3, r3, #7
 8005132:	623b      	str	r3, [r7, #32]
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	2b7f      	cmp	r3, #127	; 0x7f
 8005138:	d8f0      	bhi.n	800511c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	627a      	str	r2, [r7, #36]	; 0x24
 8005140:	6a3a      	ldr	r2, [r7, #32]
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	6979      	ldr	r1, [r7, #20]
 800514e:	69b8      	ldr	r0, [r7, #24]
 8005150:	f7ff f9d0 	bl	80044f4 <_SendPacket>
  RECORD_END();
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f383 8811 	msr	BASEPRI, r3
}
 800515a:	bf00      	nop
 800515c:	3730      	adds	r7, #48	; 0x30
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	2001a74c 	.word	0x2001a74c

08005168 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005168:	b580      	push	{r7, lr}
 800516a:	b08c      	sub	sp, #48	; 0x30
 800516c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800516e:	4b59      	ldr	r3, [pc, #356]	; (80052d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005170:	2201      	movs	r2, #1
 8005172:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005174:	f3ef 8311 	mrs	r3, BASEPRI
 8005178:	f04f 0120 	mov.w	r1, #32
 800517c:	f381 8811 	msr	BASEPRI, r1
 8005180:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005182:	4b54      	ldr	r3, [pc, #336]	; (80052d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005184:	785b      	ldrb	r3, [r3, #1]
 8005186:	220a      	movs	r2, #10
 8005188:	4953      	ldr	r1, [pc, #332]	; (80052d8 <SEGGER_SYSVIEW_Start+0x170>)
 800518a:	4618      	mov	r0, r3
 800518c:	f7fb f840 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005196:	f7fe fc8f 	bl	8003ab8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800519a:	200a      	movs	r0, #10
 800519c:	f7ff ff30 	bl	8005000 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051a0:	f3ef 8311 	mrs	r3, BASEPRI
 80051a4:	f04f 0120 	mov.w	r1, #32
 80051a8:	f381 8811 	msr	BASEPRI, r1
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	484b      	ldr	r0, [pc, #300]	; (80052dc <SEGGER_SYSVIEW_Start+0x174>)
 80051b0:	f7ff f8b0 	bl	8004314 <_PreparePacket>
 80051b4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051be:	4b45      	ldr	r3, [pc, #276]	; (80052d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c4:	e00b      	b.n	80051de <SEGGER_SYSVIEW_Start+0x76>
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	1c59      	adds	r1, r3, #1
 80051ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	09db      	lsrs	r3, r3, #7
 80051dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	2b7f      	cmp	r3, #127	; 0x7f
 80051e2:	d8f0      	bhi.n	80051c6 <SEGGER_SYSVIEW_Start+0x5e>
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
 80051f8:	4b36      	ldr	r3, [pc, #216]	; (80052d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	623b      	str	r3, [r7, #32]
 80051fe:	e00b      	b.n	8005218 <SEGGER_SYSVIEW_Start+0xb0>
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	b2da      	uxtb	r2, r3
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	1c59      	adds	r1, r3, #1
 8005208:	6279      	str	r1, [r7, #36]	; 0x24
 800520a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	09db      	lsrs	r3, r3, #7
 8005216:	623b      	str	r3, [r7, #32]
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	2b7f      	cmp	r3, #127	; 0x7f
 800521c:	d8f0      	bhi.n	8005200 <SEGGER_SYSVIEW_Start+0x98>
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	627a      	str	r2, [r7, #36]	; 0x24
 8005224:	6a3a      	ldr	r2, [r7, #32]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	4b28      	ldr	r3, [pc, #160]	; (80052d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	e00b      	b.n	8005252 <SEGGER_SYSVIEW_Start+0xea>
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	b2da      	uxtb	r2, r3
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	1c59      	adds	r1, r3, #1
 8005242:	61f9      	str	r1, [r7, #28]
 8005244:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	09db      	lsrs	r3, r3, #7
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	2b7f      	cmp	r3, #127	; 0x7f
 8005256:	d8f0      	bhi.n	800523a <SEGGER_SYSVIEW_Start+0xd2>
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	61fa      	str	r2, [r7, #28]
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	e00b      	b.n	800528a <SEGGER_SYSVIEW_Start+0x122>
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	b2da      	uxtb	r2, r3
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	1c59      	adds	r1, r3, #1
 800527a:	6179      	str	r1, [r7, #20]
 800527c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	09db      	lsrs	r3, r3, #7
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b7f      	cmp	r3, #127	; 0x7f
 800528e:	d8f0      	bhi.n	8005272 <SEGGER_SYSVIEW_Start+0x10a>
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	617a      	str	r2, [r7, #20]
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80052a0:	2218      	movs	r2, #24
 80052a2:	6839      	ldr	r1, [r7, #0]
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff f925 	bl	80044f4 <_SendPacket>
      RECORD_END();
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80052b0:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80052b8:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80052be:	f000 f9eb 	bl	8005698 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80052c2:	f000 f9b1 	bl	8005628 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80052c6:	f000 fc1d 	bl	8005b04 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80052ca:	bf00      	nop
 80052cc:	3730      	adds	r7, #48	; 0x30
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	2001a71c 	.word	0x2001a71c
 80052d8:	08005edc 	.word	0x08005edc
 80052dc:	2001a74c 	.word	0x2001a74c

080052e0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052e6:	f3ef 8311 	mrs	r3, BASEPRI
 80052ea:	f04f 0120 	mov.w	r1, #32
 80052ee:	f381 8811 	msr	BASEPRI, r1
 80052f2:	607b      	str	r3, [r7, #4]
 80052f4:	480b      	ldr	r0, [pc, #44]	; (8005324 <SEGGER_SYSVIEW_Stop+0x44>)
 80052f6:	f7ff f80d 	bl	8004314 <_PreparePacket>
 80052fa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80052fc:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <SEGGER_SYSVIEW_Stop+0x48>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005304:	220b      	movs	r2, #11
 8005306:	6839      	ldr	r1, [r7, #0]
 8005308:	6838      	ldr	r0, [r7, #0]
 800530a:	f7ff f8f3 	bl	80044f4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800530e:	4b06      	ldr	r3, [pc, #24]	; (8005328 <SEGGER_SYSVIEW_Stop+0x48>)
 8005310:	2200      	movs	r2, #0
 8005312:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f383 8811 	msr	BASEPRI, r3
}
 800531a:	bf00      	nop
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	2001a74c 	.word	0x2001a74c
 8005328:	2001a71c 	.word	0x2001a71c

0800532c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b08c      	sub	sp, #48	; 0x30
 8005330:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005332:	f3ef 8311 	mrs	r3, BASEPRI
 8005336:	f04f 0120 	mov.w	r1, #32
 800533a:	f381 8811 	msr	BASEPRI, r1
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	4845      	ldr	r0, [pc, #276]	; (8005458 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005342:	f7fe ffe7 	bl	8004314 <_PreparePacket>
 8005346:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005350:	4b42      	ldr	r3, [pc, #264]	; (800545c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
 8005356:	e00b      	b.n	8005370 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	b2da      	uxtb	r2, r3
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535e:	1c59      	adds	r1, r3, #1
 8005360:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005362:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	09db      	lsrs	r3, r3, #7
 800536e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	2b7f      	cmp	r3, #127	; 0x7f
 8005374:	d8f0      	bhi.n	8005358 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800537c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005384:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
 800538a:	4b34      	ldr	r3, [pc, #208]	; (800545c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	623b      	str	r3, [r7, #32]
 8005390:	e00b      	b.n	80053aa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	b2da      	uxtb	r2, r3
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	1c59      	adds	r1, r3, #1
 800539a:	6279      	str	r1, [r7, #36]	; 0x24
 800539c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	09db      	lsrs	r3, r3, #7
 80053a8:	623b      	str	r3, [r7, #32]
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	2b7f      	cmp	r3, #127	; 0x7f
 80053ae:	d8f0      	bhi.n	8005392 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	627a      	str	r2, [r7, #36]	; 0x24
 80053b6:	6a3a      	ldr	r2, [r7, #32]
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	61fb      	str	r3, [r7, #28]
 80053c4:	4b25      	ldr	r3, [pc, #148]	; (800545c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	e00b      	b.n	80053e4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	1c59      	adds	r1, r3, #1
 80053d4:	61f9      	str	r1, [r7, #28]
 80053d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	09db      	lsrs	r3, r3, #7
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b7f      	cmp	r3, #127	; 0x7f
 80053e8:	d8f0      	bhi.n	80053cc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	61fa      	str	r2, [r7, #28]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	2300      	movs	r3, #0
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	e00b      	b.n	800541c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	b2da      	uxtb	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	1c59      	adds	r1, r3, #1
 800540c:	6179      	str	r1, [r7, #20]
 800540e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	09db      	lsrs	r3, r3, #7
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	2b7f      	cmp	r3, #127	; 0x7f
 8005420:	d8f0      	bhi.n	8005404 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	617a      	str	r2, [r7, #20]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005432:	2218      	movs	r2, #24
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	68b8      	ldr	r0, [r7, #8]
 8005438:	f7ff f85c 	bl	80044f4 <_SendPacket>
  RECORD_END();
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005442:	4b06      	ldr	r3, [pc, #24]	; (800545c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800544a:	4b04      	ldr	r3, [pc, #16]	; (800545c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	4798      	blx	r3
  }
}
 8005450:	bf00      	nop
 8005452:	3730      	adds	r7, #48	; 0x30
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	2001a74c 	.word	0x2001a74c
 800545c:	2001a71c 	.word	0x2001a71c

08005460 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b092      	sub	sp, #72	; 0x48
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005468:	f3ef 8311 	mrs	r3, BASEPRI
 800546c:	f04f 0120 	mov.w	r1, #32
 8005470:	f381 8811 	msr	BASEPRI, r1
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	486a      	ldr	r0, [pc, #424]	; (8005620 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005478:	f7fe ff4c 	bl	8004314 <_PreparePacket>
 800547c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	647b      	str	r3, [r7, #68]	; 0x44
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	4b66      	ldr	r3, [pc, #408]	; (8005624 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	643b      	str	r3, [r7, #64]	; 0x40
 8005492:	e00b      	b.n	80054ac <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005496:	b2da      	uxtb	r2, r3
 8005498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800549a:	1c59      	adds	r1, r3, #1
 800549c:	6479      	str	r1, [r7, #68]	; 0x44
 800549e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a8:	09db      	lsrs	r3, r3, #7
 80054aa:	643b      	str	r3, [r7, #64]	; 0x40
 80054ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ae:	2b7f      	cmp	r3, #127	; 0x7f
 80054b0:	d8f0      	bhi.n	8005494 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80054b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	647a      	str	r2, [r7, #68]	; 0x44
 80054b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80054cc:	e00b      	b.n	80054e6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80054ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d4:	1c59      	adds	r1, r3, #1
 80054d6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80054d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	09db      	lsrs	r3, r3, #7
 80054e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	2b7f      	cmp	r3, #127	; 0x7f
 80054ea:	d8f0      	bhi.n	80054ce <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80054ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	4619      	mov	r1, r3
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7fe fed5 	bl	80042b4 <_EncodeStr>
 800550a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800550c:	2209      	movs	r2, #9
 800550e:	68f9      	ldr	r1, [r7, #12]
 8005510:	6938      	ldr	r0, [r7, #16]
 8005512:	f7fe ffef 	bl	80044f4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b40      	ldr	r3, [pc, #256]	; (8005624 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	633b      	str	r3, [r7, #48]	; 0x30
 800552a:	e00b      	b.n	8005544 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	b2da      	uxtb	r2, r3
 8005530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005532:	1c59      	adds	r1, r3, #1
 8005534:	6379      	str	r1, [r7, #52]	; 0x34
 8005536:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	09db      	lsrs	r3, r3, #7
 8005542:	633b      	str	r3, [r7, #48]	; 0x30
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	2b7f      	cmp	r3, #127	; 0x7f
 8005548:	d8f0      	bhi.n	800552c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800554a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	637a      	str	r2, [r7, #52]	; 0x34
 8005550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005558:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
 8005564:	e00b      	b.n	800557e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	b2da      	uxtb	r2, r3
 800556a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556c:	1c59      	adds	r1, r3, #1
 800556e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005570:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	09db      	lsrs	r3, r3, #7
 800557c:	62bb      	str	r3, [r7, #40]	; 0x28
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	2b7f      	cmp	r3, #127	; 0x7f
 8005582:	d8f0      	bhi.n	8005566 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	62fa      	str	r2, [r7, #44]	; 0x2c
 800558a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	623b      	str	r3, [r7, #32]
 800559e:	e00b      	b.n	80055b8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	1c59      	adds	r1, r3, #1
 80055a8:	6279      	str	r1, [r7, #36]	; 0x24
 80055aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	09db      	lsrs	r3, r3, #7
 80055b6:	623b      	str	r3, [r7, #32]
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	2b7f      	cmp	r3, #127	; 0x7f
 80055bc:	d8f0      	bhi.n	80055a0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	627a      	str	r2, [r7, #36]	; 0x24
 80055c4:	6a3a      	ldr	r2, [r7, #32]
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	2300      	movs	r3, #0
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	e00b      	b.n	80055f0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	1c59      	adds	r1, r3, #1
 80055e0:	61f9      	str	r1, [r7, #28]
 80055e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	09db      	lsrs	r3, r3, #7
 80055ee:	61bb      	str	r3, [r7, #24]
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	2b7f      	cmp	r3, #127	; 0x7f
 80055f4:	d8f0      	bhi.n	80055d8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	61fa      	str	r2, [r7, #28]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005606:	2215      	movs	r2, #21
 8005608:	68f9      	ldr	r1, [r7, #12]
 800560a:	6938      	ldr	r0, [r7, #16]
 800560c:	f7fe ff72 	bl	80044f4 <_SendPacket>
  RECORD_END();
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f383 8811 	msr	BASEPRI, r3
}
 8005616:	bf00      	nop
 8005618:	3748      	adds	r7, #72	; 0x48
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	2001a74c 	.word	0x2001a74c
 8005624:	2001a71c 	.word	0x2001a71c

08005628 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800562c:	4b07      	ldr	r3, [pc, #28]	; (800564c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800563e:	4b03      	ldr	r3, [pc, #12]	; (800564c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	4798      	blx	r3
  }
}
 8005646:	bf00      	nop
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	2001a71c 	.word	0x2001a71c

08005650 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005658:	f3ef 8311 	mrs	r3, BASEPRI
 800565c:	f04f 0120 	mov.w	r1, #32
 8005660:	f381 8811 	msr	BASEPRI, r1
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	480b      	ldr	r0, [pc, #44]	; (8005694 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005668:	f7fe fe54 	bl	8004314 <_PreparePacket>
 800566c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800566e:	2280      	movs	r2, #128	; 0x80
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	6938      	ldr	r0, [r7, #16]
 8005674:	f7fe fe1e 	bl	80042b4 <_EncodeStr>
 8005678:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800567a:	220e      	movs	r2, #14
 800567c:	68f9      	ldr	r1, [r7, #12]
 800567e:	6938      	ldr	r0, [r7, #16]
 8005680:	f7fe ff38 	bl	80044f4 <_SendPacket>
  RECORD_END();
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f383 8811 	msr	BASEPRI, r3
}
 800568a:	bf00      	nop
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	2001a74c 	.word	0x2001a74c

08005698 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005698:	b590      	push	{r4, r7, lr}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d01a      	beq.n	80056dc <SEGGER_SYSVIEW_RecordSystime+0x44>
 80056a6:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d015      	beq.n	80056dc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80056b0:	4b10      	ldr	r3, [pc, #64]	; (80056f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4798      	blx	r3
 80056b8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80056bc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80056be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	000a      	movs	r2, r1
 80056cc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80056ce:	4613      	mov	r3, r2
 80056d0:	461a      	mov	r2, r3
 80056d2:	4621      	mov	r1, r4
 80056d4:	200d      	movs	r0, #13
 80056d6:	f7ff fced 	bl	80050b4 <SEGGER_SYSVIEW_RecordU32x2>
 80056da:	e006      	b.n	80056ea <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4619      	mov	r1, r3
 80056e2:	200c      	movs	r0, #12
 80056e4:	f7ff fcaa 	bl	800503c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd90      	pop	{r4, r7, pc}
 80056f2:	bf00      	nop
 80056f4:	2001a71c 	.word	0x2001a71c
 80056f8:	e0001004 	.word	0xe0001004

080056fc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005702:	f3ef 8311 	mrs	r3, BASEPRI
 8005706:	f04f 0120 	mov.w	r1, #32
 800570a:	f381 8811 	msr	BASEPRI, r1
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	4819      	ldr	r0, [pc, #100]	; (8005778 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005712:	f7fe fdff 	bl	8004314 <_PreparePacket>
 8005716:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800571c:	4b17      	ldr	r3, [pc, #92]	; (800577c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005724:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	e00b      	b.n	8005748 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	b2da      	uxtb	r2, r3
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	1c59      	adds	r1, r3, #1
 8005738:	6179      	str	r1, [r7, #20]
 800573a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	09db      	lsrs	r3, r3, #7
 8005746:	613b      	str	r3, [r7, #16]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b7f      	cmp	r3, #127	; 0x7f
 800574c:	d8f0      	bhi.n	8005730 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	617a      	str	r2, [r7, #20]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800575e:	2202      	movs	r2, #2
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	68b8      	ldr	r0, [r7, #8]
 8005764:	f7fe fec6 	bl	80044f4 <_SendPacket>
  RECORD_END();
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f383 8811 	msr	BASEPRI, r3
}
 800576e:	bf00      	nop
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	2001a74c 	.word	0x2001a74c
 800577c:	e000ed04 	.word	0xe000ed04

08005780 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005786:	f3ef 8311 	mrs	r3, BASEPRI
 800578a:	f04f 0120 	mov.w	r1, #32
 800578e:	f381 8811 	msr	BASEPRI, r1
 8005792:	607b      	str	r3, [r7, #4]
 8005794:	4807      	ldr	r0, [pc, #28]	; (80057b4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005796:	f7fe fdbd 	bl	8004314 <_PreparePacket>
 800579a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800579c:	2203      	movs	r2, #3
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6838      	ldr	r0, [r7, #0]
 80057a2:	f7fe fea7 	bl	80044f4 <_SendPacket>
  RECORD_END();
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f383 8811 	msr	BASEPRI, r3
}
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	2001a74c 	.word	0x2001a74c

080057b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80057be:	f3ef 8311 	mrs	r3, BASEPRI
 80057c2:	f04f 0120 	mov.w	r1, #32
 80057c6:	f381 8811 	msr	BASEPRI, r1
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	4807      	ldr	r0, [pc, #28]	; (80057ec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80057ce:	f7fe fda1 	bl	8004314 <_PreparePacket>
 80057d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80057d4:	2212      	movs	r2, #18
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	6838      	ldr	r0, [r7, #0]
 80057da:	f7fe fe8b 	bl	80044f4 <_SendPacket>
  RECORD_END();
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f383 8811 	msr	BASEPRI, r3
}
 80057e4:	bf00      	nop
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	2001a74c 	.word	0x2001a74c

080057f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80057f6:	f3ef 8311 	mrs	r3, BASEPRI
 80057fa:	f04f 0120 	mov.w	r1, #32
 80057fe:	f381 8811 	msr	BASEPRI, r1
 8005802:	607b      	str	r3, [r7, #4]
 8005804:	4807      	ldr	r0, [pc, #28]	; (8005824 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005806:	f7fe fd85 	bl	8004314 <_PreparePacket>
 800580a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800580c:	2211      	movs	r2, #17
 800580e:	6839      	ldr	r1, [r7, #0]
 8005810:	6838      	ldr	r0, [r7, #0]
 8005812:	f7fe fe6f 	bl	80044f4 <_SendPacket>
  RECORD_END();
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f383 8811 	msr	BASEPRI, r3
}
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	2001a74c 	.word	0x2001a74c

08005828 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005830:	f3ef 8311 	mrs	r3, BASEPRI
 8005834:	f04f 0120 	mov.w	r1, #32
 8005838:	f381 8811 	msr	BASEPRI, r1
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	4819      	ldr	r0, [pc, #100]	; (80058a4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005840:	f7fe fd68 	bl	8004314 <_PreparePacket>
 8005844:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800584a:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	e00b      	b.n	8005876 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	1c59      	adds	r1, r3, #1
 8005866:	61f9      	str	r1, [r7, #28]
 8005868:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	09db      	lsrs	r3, r3, #7
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	2b7f      	cmp	r3, #127	; 0x7f
 800587a:	d8f0      	bhi.n	800585e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	61fa      	str	r2, [r7, #28]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800588c:	2208      	movs	r2, #8
 800588e:	68f9      	ldr	r1, [r7, #12]
 8005890:	6938      	ldr	r0, [r7, #16]
 8005892:	f7fe fe2f 	bl	80044f4 <_SendPacket>
  RECORD_END();
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f383 8811 	msr	BASEPRI, r3
}
 800589c:	bf00      	nop
 800589e:	3720      	adds	r7, #32
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	2001a74c 	.word	0x2001a74c
 80058a8:	2001a71c 	.word	0x2001a71c

080058ac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058b4:	f3ef 8311 	mrs	r3, BASEPRI
 80058b8:	f04f 0120 	mov.w	r1, #32
 80058bc:	f381 8811 	msr	BASEPRI, r1
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	4819      	ldr	r0, [pc, #100]	; (8005928 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80058c4:	f7fe fd26 	bl	8004314 <_PreparePacket>
 80058c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80058ce:	4b17      	ldr	r3, [pc, #92]	; (800592c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	e00b      	b.n	80058fa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	1c59      	adds	r1, r3, #1
 80058ea:	61f9      	str	r1, [r7, #28]
 80058ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	09db      	lsrs	r3, r3, #7
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b7f      	cmp	r3, #127	; 0x7f
 80058fe:	d8f0      	bhi.n	80058e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	61fa      	str	r2, [r7, #28]
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005910:	2204      	movs	r2, #4
 8005912:	68f9      	ldr	r1, [r7, #12]
 8005914:	6938      	ldr	r0, [r7, #16]
 8005916:	f7fe fded 	bl	80044f4 <_SendPacket>
  RECORD_END();
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f383 8811 	msr	BASEPRI, r3
}
 8005920:	bf00      	nop
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	2001a74c 	.word	0x2001a74c
 800592c:	2001a71c 	.word	0x2001a71c

08005930 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005938:	f3ef 8311 	mrs	r3, BASEPRI
 800593c:	f04f 0120 	mov.w	r1, #32
 8005940:	f381 8811 	msr	BASEPRI, r1
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	4819      	ldr	r0, [pc, #100]	; (80059ac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005948:	f7fe fce4 	bl	8004314 <_PreparePacket>
 800594c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005952:	4b17      	ldr	r3, [pc, #92]	; (80059b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	61fb      	str	r3, [r7, #28]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	e00b      	b.n	800597e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	b2da      	uxtb	r2, r3
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	1c59      	adds	r1, r3, #1
 800596e:	61f9      	str	r1, [r7, #28]
 8005970:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	09db      	lsrs	r3, r3, #7
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b7f      	cmp	r3, #127	; 0x7f
 8005982:	d8f0      	bhi.n	8005966 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	61fa      	str	r2, [r7, #28]
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	701a      	strb	r2, [r3, #0]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005994:	2206      	movs	r2, #6
 8005996:	68f9      	ldr	r1, [r7, #12]
 8005998:	6938      	ldr	r0, [r7, #16]
 800599a:	f7fe fdab 	bl	80044f4 <_SendPacket>
  RECORD_END();
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f383 8811 	msr	BASEPRI, r3
}
 80059a4:	bf00      	nop
 80059a6:	3720      	adds	r7, #32
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	2001a74c 	.word	0x2001a74c
 80059b0:	2001a71c 	.word	0x2001a71c

080059b4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	; 0x30
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80059be:	4b40      	ldr	r3, [pc, #256]	; (8005ac0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d077      	beq.n	8005ab6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80059c6:	4b3e      	ldr	r3, [pc, #248]	; (8005ac0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80059cc:	2300      	movs	r3, #0
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d0:	e008      	b.n	80059e4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	3301      	adds	r3, #1
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e4:	79fb      	ldrb	r3, [r7, #7]
 80059e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d3f2      	bcc.n	80059d2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80059ec:	e000      	b.n	80059f0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80059ee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d055      	beq.n	8005aa2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059f6:	f3ef 8311 	mrs	r3, BASEPRI
 80059fa:	f04f 0120 	mov.w	r1, #32
 80059fe:	f381 8811 	msr	BASEPRI, r1
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	482f      	ldr	r0, [pc, #188]	; (8005ac4 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005a06:	f7fe fc85 	bl	8004314 <_PreparePacket>
 8005a0a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	623b      	str	r3, [r7, #32]
 8005a18:	e00b      	b.n	8005a32 <SEGGER_SYSVIEW_SendModule+0x7e>
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	1c59      	adds	r1, r3, #1
 8005a22:	6279      	str	r1, [r7, #36]	; 0x24
 8005a24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	09db      	lsrs	r3, r3, #7
 8005a30:	623b      	str	r3, [r7, #32]
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	2b7f      	cmp	r3, #127	; 0x7f
 8005a36:	d8f0      	bhi.n	8005a1a <SEGGER_SYSVIEW_SendModule+0x66>
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	627a      	str	r2, [r7, #36]	; 0x24
 8005a3e:	6a3a      	ldr	r2, [r7, #32]
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	61bb      	str	r3, [r7, #24]
 8005a52:	e00b      	b.n	8005a6c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	1c59      	adds	r1, r3, #1
 8005a5c:	61f9      	str	r1, [r7, #28]
 8005a5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	09db      	lsrs	r3, r3, #7
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a70:	d8f0      	bhi.n	8005a54 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	61fa      	str	r2, [r7, #28]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2280      	movs	r2, #128	; 0x80
 8005a88:	4619      	mov	r1, r3
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7fe fc12 	bl	80042b4 <_EncodeStr>
 8005a90:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005a92:	2216      	movs	r2, #22
 8005a94:	68f9      	ldr	r1, [r7, #12]
 8005a96:	6938      	ldr	r0, [r7, #16]
 8005a98:	f7fe fd2c 	bl	80044f4 <_SendPacket>
      RECORD_END();
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d006      	beq.n	8005ab6 <SEGGER_SYSVIEW_SendModule+0x102>
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4798      	blx	r3
    }
  }
}
 8005ab6:	bf00      	nop
 8005ab8:	3730      	adds	r7, #48	; 0x30
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	2001a744 	.word	0x2001a744
 8005ac4:	2001a74c 	.word	0x2001a74c

08005ac8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005ace:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00f      	beq.n	8005af6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f2      	bne.n	8005adc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	2001a744 	.word	0x2001a744

08005b04 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b0e:	f04f 0120 	mov.w	r1, #32
 8005b12:	f381 8811 	msr	BASEPRI, r1
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	4817      	ldr	r0, [pc, #92]	; (8005b78 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005b1a:	f7fe fbfb 	bl	8004314 <_PreparePacket>
 8005b1e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	e00b      	b.n	8005b48 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1c59      	adds	r1, r3, #1
 8005b38:	6179      	str	r1, [r7, #20]
 8005b3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	09db      	lsrs	r3, r3, #7
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b4c:	d8f0      	bhi.n	8005b30 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	617a      	str	r2, [r7, #20]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005b5e:	221b      	movs	r2, #27
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	68b8      	ldr	r0, [r7, #8]
 8005b64:	f7fe fcc6 	bl	80044f4 <_SendPacket>
  RECORD_END();
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f383 8811 	msr	BASEPRI, r3
}
 8005b6e:	bf00      	nop
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	2001a74c 	.word	0x2001a74c
 8005b7c:	2001a748 	.word	0x2001a748

08005b80 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005b80:	b40f      	push	{r0, r1, r2, r3}
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005b88:	f107 0314 	add.w	r3, r7, #20
 8005b8c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005b8e:	1d3b      	adds	r3, r7, #4
 8005b90:	461a      	mov	r2, r3
 8005b92:	2100      	movs	r1, #0
 8005b94:	6938      	ldr	r0, [r7, #16]
 8005b96:	f7fe ffbf 	bl	8004b18 <_VPrintTarget>
  va_end(ParamList);
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ba4:	b004      	add	sp, #16
 8005ba6:	4770      	bx	lr

08005ba8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08a      	sub	sp, #40	; 0x28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bb0:	f3ef 8311 	mrs	r3, BASEPRI
 8005bb4:	f04f 0120 	mov.w	r1, #32
 8005bb8:	f381 8811 	msr	BASEPRI, r1
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	4827      	ldr	r0, [pc, #156]	; (8005c5c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005bc0:	f7fe fba8 	bl	8004314 <_PreparePacket>
 8005bc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bc6:	2280      	movs	r2, #128	; 0x80
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	6938      	ldr	r0, [r7, #16]
 8005bcc:	f7fe fb72 	bl	80042b4 <_EncodeStr>
 8005bd0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	623b      	str	r3, [r7, #32]
 8005bda:	e00b      	b.n	8005bf4 <SEGGER_SYSVIEW_Warn+0x4c>
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	1c59      	adds	r1, r3, #1
 8005be4:	6279      	str	r1, [r7, #36]	; 0x24
 8005be6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	09db      	lsrs	r3, r3, #7
 8005bf2:	623b      	str	r3, [r7, #32]
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8005bf8:	d8f0      	bhi.n	8005bdc <SEGGER_SYSVIEW_Warn+0x34>
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	627a      	str	r2, [r7, #36]	; 0x24
 8005c00:	6a3a      	ldr	r2, [r7, #32]
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	e00b      	b.n	8005c2c <SEGGER_SYSVIEW_Warn+0x84>
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	61f9      	str	r1, [r7, #28]
 8005c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	09db      	lsrs	r3, r3, #7
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c30:	d8f0      	bhi.n	8005c14 <SEGGER_SYSVIEW_Warn+0x6c>
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	61fa      	str	r2, [r7, #28]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c42:	221a      	movs	r2, #26
 8005c44:	68f9      	ldr	r1, [r7, #12]
 8005c46:	6938      	ldr	r0, [r7, #16]
 8005c48:	f7fe fc54 	bl	80044f4 <_SendPacket>
  RECORD_END();
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f383 8811 	msr	BASEPRI, r3
}
 8005c52:	bf00      	nop
 8005c54:	3728      	adds	r7, #40	; 0x28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	2001a74c 	.word	0x2001a74c

08005c60 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005c64:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005c66:	7e1b      	ldrb	r3, [r3, #24]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4a13      	ldr	r2, [pc, #76]	; (8005cb8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	440b      	add	r3, r1
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4413      	add	r3, r2
 8005c76:	336c      	adds	r3, #108	; 0x6c
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005c7c:	7e1b      	ldrb	r3, [r3, #24]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	490d      	ldr	r1, [pc, #52]	; (8005cb8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005c82:	4603      	mov	r3, r0
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	4403      	add	r3, r0
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	440b      	add	r3, r1
 8005c8c:	3370      	adds	r3, #112	; 0x70
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d00b      	beq.n	8005cac <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005c94:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005c96:	789b      	ldrb	r3, [r3, #2]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d107      	bne.n	8005cac <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005ca2:	f7fe fb43 	bl	800432c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005ca6:	4b03      	ldr	r3, [pc, #12]	; (8005cb4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005cac:	4b01      	ldr	r3, [pc, #4]	; (8005cb4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	2001a71c 	.word	0x2001a71c
 8005cb8:	2001925c 	.word	0x2001925c

08005cbc <__libc_init_array>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	4d0d      	ldr	r5, [pc, #52]	; (8005cf4 <__libc_init_array+0x38>)
 8005cc0:	4c0d      	ldr	r4, [pc, #52]	; (8005cf8 <__libc_init_array+0x3c>)
 8005cc2:	1b64      	subs	r4, r4, r5
 8005cc4:	10a4      	asrs	r4, r4, #2
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	42a6      	cmp	r6, r4
 8005cca:	d109      	bne.n	8005ce0 <__libc_init_array+0x24>
 8005ccc:	4d0b      	ldr	r5, [pc, #44]	; (8005cfc <__libc_init_array+0x40>)
 8005cce:	4c0c      	ldr	r4, [pc, #48]	; (8005d00 <__libc_init_array+0x44>)
 8005cd0:	f000 f83e 	bl	8005d50 <_init>
 8005cd4:	1b64      	subs	r4, r4, r5
 8005cd6:	10a4      	asrs	r4, r4, #2
 8005cd8:	2600      	movs	r6, #0
 8005cda:	42a6      	cmp	r6, r4
 8005cdc:	d105      	bne.n	8005cea <__libc_init_array+0x2e>
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce4:	4798      	blx	r3
 8005ce6:	3601      	adds	r6, #1
 8005ce8:	e7ee      	b.n	8005cc8 <__libc_init_array+0xc>
 8005cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cee:	4798      	blx	r3
 8005cf0:	3601      	adds	r6, #1
 8005cf2:	e7f2      	b.n	8005cda <__libc_init_array+0x1e>
 8005cf4:	08005f00 	.word	0x08005f00
 8005cf8:	08005f00 	.word	0x08005f00
 8005cfc:	08005f00 	.word	0x08005f00
 8005d00:	08005f04 	.word	0x08005f04

08005d04 <memcmp>:
 8005d04:	b510      	push	{r4, lr}
 8005d06:	3901      	subs	r1, #1
 8005d08:	4402      	add	r2, r0
 8005d0a:	4290      	cmp	r0, r2
 8005d0c:	d101      	bne.n	8005d12 <memcmp+0xe>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e005      	b.n	8005d1e <memcmp+0x1a>
 8005d12:	7803      	ldrb	r3, [r0, #0]
 8005d14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	d001      	beq.n	8005d20 <memcmp+0x1c>
 8005d1c:	1b18      	subs	r0, r3, r4
 8005d1e:	bd10      	pop	{r4, pc}
 8005d20:	3001      	adds	r0, #1
 8005d22:	e7f2      	b.n	8005d0a <memcmp+0x6>

08005d24 <memcpy>:
 8005d24:	440a      	add	r2, r1
 8005d26:	4291      	cmp	r1, r2
 8005d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005d2c:	d100      	bne.n	8005d30 <memcpy+0xc>
 8005d2e:	4770      	bx	lr
 8005d30:	b510      	push	{r4, lr}
 8005d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d3a:	4291      	cmp	r1, r2
 8005d3c:	d1f9      	bne.n	8005d32 <memcpy+0xe>
 8005d3e:	bd10      	pop	{r4, pc}

08005d40 <memset>:
 8005d40:	4402      	add	r2, r0
 8005d42:	4603      	mov	r3, r0
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d100      	bne.n	8005d4a <memset+0xa>
 8005d48:	4770      	bx	lr
 8005d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d4e:	e7f9      	b.n	8005d44 <memset+0x4>

08005d50 <_init>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr

08005d5c <_fini>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	bf00      	nop
 8005d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d62:	bc08      	pop	{r3}
 8005d64:	469e      	mov	lr, r3
 8005d66:	4770      	bx	lr
