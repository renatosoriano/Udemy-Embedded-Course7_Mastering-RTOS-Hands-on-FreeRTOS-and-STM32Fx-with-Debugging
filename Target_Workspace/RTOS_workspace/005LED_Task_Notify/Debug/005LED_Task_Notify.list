
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006704  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080068d4  080068d4  000168d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ae4  08006ae4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aec  08006aec  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aec  08006aec  00016aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a828  2000001c  08006b10  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001a844  08006b10  0002a844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013eb2  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e08  00000000  00000000  00033efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00036d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00037f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023987  00000000  00000000  00039060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ffd  00000000  00000000  0005c9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dba14  00000000  00000000  000729e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e3f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c5c  00000000  00000000  0014e448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080068bc 	.word	0x080068bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	080068bc 	.word	0x080068bc

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20019270 	.word	0x20019270

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b8:	f000 b974 	b.w	80005a4 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468e      	mov	lr, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14d      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4694      	mov	ip, r2
 80002e6:	d969      	bls.n	80003bc <__udivmoddi4+0xe8>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b152      	cbz	r2, 8000304 <__udivmoddi4+0x30>
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	f1c2 0120 	rsb	r1, r2, #32
 80002f6:	fa20 f101 	lsr.w	r1, r0, r1
 80002fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000302:	4094      	lsls	r4, r2
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	0c21      	lsrs	r1, r4, #16
 800030a:	fbbe f6f8 	udiv	r6, lr, r8
 800030e:	fa1f f78c 	uxth.w	r7, ip
 8000312:	fb08 e316 	mls	r3, r8, r6, lr
 8000316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800031a:	fb06 f107 	mul.w	r1, r6, r7
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800032a:	f080 811f 	bcs.w	800056c <__udivmoddi4+0x298>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 811c 	bls.w	800056c <__udivmoddi4+0x298>
 8000334:	3e02      	subs	r6, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a5b      	subs	r3, r3, r1
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000340:	fb08 3310 	mls	r3, r8, r0, r3
 8000344:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000348:	fb00 f707 	mul.w	r7, r0, r7
 800034c:	42a7      	cmp	r7, r4
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x92>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000358:	f080 810a 	bcs.w	8000570 <__udivmoddi4+0x29c>
 800035c:	42a7      	cmp	r7, r4
 800035e:	f240 8107 	bls.w	8000570 <__udivmoddi4+0x29c>
 8000362:	4464      	add	r4, ip
 8000364:	3802      	subs	r0, #2
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	1be4      	subs	r4, r4, r7
 800036c:	2600      	movs	r6, #0
 800036e:	b11d      	cbz	r5, 8000378 <__udivmoddi4+0xa4>
 8000370:	40d4      	lsrs	r4, r2
 8000372:	2300      	movs	r3, #0
 8000374:	e9c5 4300 	strd	r4, r3, [r5]
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0xc2>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80ef 	beq.w	8000566 <__udivmoddi4+0x292>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x160>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xd4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80f9 	bhi.w	800059a <__udivmoddi4+0x2c6>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0303 	sbc.w	r3, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	469e      	mov	lr, r3
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e0      	beq.n	8000378 <__udivmoddi4+0xa4>
 80003b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ba:	e7dd      	b.n	8000378 <__udivmoddi4+0xa4>
 80003bc:	b902      	cbnz	r2, 80003c0 <__udivmoddi4+0xec>
 80003be:	deff      	udf	#255	; 0xff
 80003c0:	fab2 f282 	clz	r2, r2
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	f040 8092 	bne.w	80004ee <__udivmoddi4+0x21a>
 80003ca:	eba1 010c 	sub.w	r1, r1, ip
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	2601      	movs	r6, #1
 80003d8:	0c20      	lsrs	r0, r4, #16
 80003da:	fbb1 f3f7 	udiv	r3, r1, r7
 80003de:	fb07 1113 	mls	r1, r7, r3, r1
 80003e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e6:	fb0e f003 	mul.w	r0, lr, r3
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x12c>
 80003ee:	eb1c 0101 	adds.w	r1, ip, r1
 80003f2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x12a>
 80003f8:	4288      	cmp	r0, r1
 80003fa:	f200 80cb 	bhi.w	8000594 <__udivmoddi4+0x2c0>
 80003fe:	4643      	mov	r3, r8
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f7 	udiv	r0, r1, r7
 8000408:	fb07 1110 	mls	r1, r7, r0, r1
 800040c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000410:	fb0e fe00 	mul.w	lr, lr, r0
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x156>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x154>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2ca>
 8000428:	4608      	mov	r0, r1
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000432:	e79c      	b.n	800036e <__udivmoddi4+0x9a>
 8000434:	f1c6 0720 	rsb	r7, r6, #32
 8000438:	40b3      	lsls	r3, r6
 800043a:	fa22 fc07 	lsr.w	ip, r2, r7
 800043e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000442:	fa20 f407 	lsr.w	r4, r0, r7
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	431c      	orrs	r4, r3
 800044c:	40f9      	lsrs	r1, r7
 800044e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000452:	fa00 f306 	lsl.w	r3, r0, r6
 8000456:	fbb1 f8f9 	udiv	r8, r1, r9
 800045a:	0c20      	lsrs	r0, r4, #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fb09 1118 	mls	r1, r9, r8, r1
 8000464:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000468:	fb08 f00e 	mul.w	r0, r8, lr
 800046c:	4288      	cmp	r0, r1
 800046e:	fa02 f206 	lsl.w	r2, r2, r6
 8000472:	d90b      	bls.n	800048c <__udivmoddi4+0x1b8>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800047c:	f080 8088 	bcs.w	8000590 <__udivmoddi4+0x2bc>
 8000480:	4288      	cmp	r0, r1
 8000482:	f240 8085 	bls.w	8000590 <__udivmoddi4+0x2bc>
 8000486:	f1a8 0802 	sub.w	r8, r8, #2
 800048a:	4461      	add	r1, ip
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f9 	udiv	r0, r1, r9
 8000494:	fb09 1110 	mls	r1, r9, r0, r1
 8000498:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800049c:	fb00 fe0e 	mul.w	lr, r0, lr
 80004a0:	458e      	cmp	lr, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x1e2>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004ac:	d26c      	bcs.n	8000588 <__udivmoddi4+0x2b4>
 80004ae:	458e      	cmp	lr, r1
 80004b0:	d96a      	bls.n	8000588 <__udivmoddi4+0x2b4>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ba:	fba0 9402 	umull	r9, r4, r0, r2
 80004be:	eba1 010e 	sub.w	r1, r1, lr
 80004c2:	42a1      	cmp	r1, r4
 80004c4:	46c8      	mov	r8, r9
 80004c6:	46a6      	mov	lr, r4
 80004c8:	d356      	bcc.n	8000578 <__udivmoddi4+0x2a4>
 80004ca:	d053      	beq.n	8000574 <__udivmoddi4+0x2a0>
 80004cc:	b15d      	cbz	r5, 80004e6 <__udivmoddi4+0x212>
 80004ce:	ebb3 0208 	subs.w	r2, r3, r8
 80004d2:	eb61 010e 	sbc.w	r1, r1, lr
 80004d6:	fa01 f707 	lsl.w	r7, r1, r7
 80004da:	fa22 f306 	lsr.w	r3, r2, r6
 80004de:	40f1      	lsrs	r1, r6
 80004e0:	431f      	orrs	r7, r3
 80004e2:	e9c5 7100 	strd	r7, r1, [r5]
 80004e6:	2600      	movs	r6, #0
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	40d8      	lsrs	r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa21 f303 	lsr.w	r3, r1, r3
 80004fc:	4091      	lsls	r1, r2
 80004fe:	4301      	orrs	r1, r0
 8000500:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000504:	fa1f fe8c 	uxth.w	lr, ip
 8000508:	fbb3 f0f7 	udiv	r0, r3, r7
 800050c:	fb07 3610 	mls	r6, r7, r0, r3
 8000510:	0c0b      	lsrs	r3, r1, #16
 8000512:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000516:	fb00 f60e 	mul.w	r6, r0, lr
 800051a:	429e      	cmp	r6, r3
 800051c:	fa04 f402 	lsl.w	r4, r4, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x260>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052a:	d22f      	bcs.n	800058c <__udivmoddi4+0x2b8>
 800052c:	429e      	cmp	r6, r3
 800052e:	d92d      	bls.n	800058c <__udivmoddi4+0x2b8>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1b9b      	subs	r3, r3, r6
 8000536:	b289      	uxth	r1, r1
 8000538:	fbb3 f6f7 	udiv	r6, r3, r7
 800053c:	fb07 3316 	mls	r3, r7, r6, r3
 8000540:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000544:	fb06 f30e 	mul.w	r3, r6, lr
 8000548:	428b      	cmp	r3, r1
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x28a>
 800054c:	eb1c 0101 	adds.w	r1, ip, r1
 8000550:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000554:	d216      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000556:	428b      	cmp	r3, r1
 8000558:	d914      	bls.n	8000584 <__udivmoddi4+0x2b0>
 800055a:	3e02      	subs	r6, #2
 800055c:	4461      	add	r1, ip
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000564:	e738      	b.n	80003d8 <__udivmoddi4+0x104>
 8000566:	462e      	mov	r6, r5
 8000568:	4628      	mov	r0, r5
 800056a:	e705      	b.n	8000378 <__udivmoddi4+0xa4>
 800056c:	4606      	mov	r6, r0
 800056e:	e6e3      	b.n	8000338 <__udivmoddi4+0x64>
 8000570:	4618      	mov	r0, r3
 8000572:	e6f8      	b.n	8000366 <__udivmoddi4+0x92>
 8000574:	454b      	cmp	r3, r9
 8000576:	d2a9      	bcs.n	80004cc <__udivmoddi4+0x1f8>
 8000578:	ebb9 0802 	subs.w	r8, r9, r2
 800057c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000580:	3801      	subs	r0, #1
 8000582:	e7a3      	b.n	80004cc <__udivmoddi4+0x1f8>
 8000584:	4646      	mov	r6, r8
 8000586:	e7ea      	b.n	800055e <__udivmoddi4+0x28a>
 8000588:	4620      	mov	r0, r4
 800058a:	e794      	b.n	80004b6 <__udivmoddi4+0x1e2>
 800058c:	4640      	mov	r0, r8
 800058e:	e7d1      	b.n	8000534 <__udivmoddi4+0x260>
 8000590:	46d0      	mov	r8, sl
 8000592:	e77b      	b.n	800048c <__udivmoddi4+0x1b8>
 8000594:	3b02      	subs	r3, #2
 8000596:	4461      	add	r1, ip
 8000598:	e732      	b.n	8000400 <__udivmoddi4+0x12c>
 800059a:	4630      	mov	r0, r6
 800059c:	e709      	b.n	80003b2 <__udivmoddi4+0xde>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x156>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fb79 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f897 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f907 	bl	80007c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 80005ba:	483b      	ldr	r0, [pc, #236]	; (80006a8 <main+0x100>)
 80005bc:	f003 fed4 	bl	8004368 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 80005c0:	4b3a      	ldr	r3, [pc, #232]	; (80006ac <main+0x104>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a39      	ldr	r2, [pc, #228]	; (80006ac <main+0x104>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005cc:	f003 fc3a 	bl	8003e44 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 80005d0:	4b37      	ldr	r3, [pc, #220]	; (80006b0 <main+0x108>)
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2303      	movs	r3, #3
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	22c8      	movs	r2, #200	; 0xc8
 80005dc:	4935      	ldr	r1, [pc, #212]	; (80006b4 <main+0x10c>)
 80005de:	4836      	ldr	r0, [pc, #216]	; (80006b8 <main+0x110>)
 80005e0:	f002 f81c 	bl	800261c <xTaskCreate>
 80005e4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d00a      	beq.n	8000602 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f0:	f383 8811 	msr	BASEPRI, r3
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	f3bf 8f4f 	dsb	sy
 80005fc:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005fe:	bf00      	nop
 8000600:	e7fe      	b.n	8000600 <main+0x58>

  next_task_handle = ledg_task_handle;
 8000602:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <main+0x108>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a2d      	ldr	r2, [pc, #180]	; (80006bc <main+0x114>)
 8000608:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 800060a:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <main+0x118>)
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2302      	movs	r3, #2
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	22c8      	movs	r2, #200	; 0xc8
 8000616:	492b      	ldr	r1, [pc, #172]	; (80006c4 <main+0x11c>)
 8000618:	482b      	ldr	r0, [pc, #172]	; (80006c8 <main+0x120>)
 800061a:	f001 ffff 	bl	800261c <xTaskCreate>
 800061e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d00a      	beq.n	800063c <main+0x94>
        __asm volatile
 8000626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800062a:	f383 8811 	msr	BASEPRI, r3
 800062e:	f3bf 8f6f 	isb	sy
 8000632:	f3bf 8f4f 	dsb	sy
 8000636:	60fb      	str	r3, [r7, #12]
    }
 8000638:	bf00      	nop
 800063a:	e7fe      	b.n	800063a <main+0x92>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 1, &ledr_task_handle);
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <main+0x124>)
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2301      	movs	r3, #1
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	22c8      	movs	r2, #200	; 0xc8
 8000648:	4921      	ldr	r1, [pc, #132]	; (80006d0 <main+0x128>)
 800064a:	4822      	ldr	r0, [pc, #136]	; (80006d4 <main+0x12c>)
 800064c:	f001 ffe6 	bl	800261c <xTaskCreate>
 8000650:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d00a      	beq.n	800066e <main+0xc6>
        __asm volatile
 8000658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065c:	f383 8811 	msr	BASEPRI, r3
 8000660:	f3bf 8f6f 	isb	sy
 8000664:	f3bf 8f4f 	dsb	sy
 8000668:	60bb      	str	r3, [r7, #8]
    }
 800066a:	bf00      	nop
 800066c:	e7fe      	b.n	800066c <main+0xc4>

  status = xTaskCreate(button_handler, "Button Task", 200, NULL, 4, &btn_task_handle);
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <main+0x130>)
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	2304      	movs	r3, #4
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2300      	movs	r3, #0
 8000678:	22c8      	movs	r2, #200	; 0xc8
 800067a:	4918      	ldr	r1, [pc, #96]	; (80006dc <main+0x134>)
 800067c:	4818      	ldr	r0, [pc, #96]	; (80006e0 <main+0x138>)
 800067e:	f001 ffcd 	bl	800261c <xTaskCreate>
 8000682:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d00a      	beq.n	80006a0 <main+0xf8>
        __asm volatile
 800068a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800068e:	f383 8811 	msr	BASEPRI, r3
 8000692:	f3bf 8f6f 	isb	sy
 8000696:	f3bf 8f4f 	dsb	sy
 800069a:	607b      	str	r3, [r7, #4]
    }
 800069c:	bf00      	nop
 800069e:	e7fe      	b.n	800069e <main+0xf6>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80006a0:	f002 fa02 	bl	8002aa8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <main+0xfc>
 80006a6:	bf00      	nop
 80006a8:	0007a120 	.word	0x0007a120
 80006ac:	e0001000 	.word	0xe0001000
 80006b0:	20000038 	.word	0x20000038
 80006b4:	080068d4 	.word	0x080068d4
 80006b8:	080008c5 	.word	0x080008c5
 80006bc:	20000048 	.word	0x20000048
 80006c0:	2000003c 	.word	0x2000003c
 80006c4:	080068e4 	.word	0x080068e4
 80006c8:	08000945 	.word	0x08000945
 80006cc:	20000040 	.word	0x20000040
 80006d0:	080068f4 	.word	0x080068f4
 80006d4:	080009b1 	.word	0x080009b1
 80006d8:	20000044 	.word	0x20000044
 80006dc:	08006904 	.word	0x08006904
 80006e0:	08000a25 	.word	0x08000a25

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2234      	movs	r2, #52	; 0x34
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f006 f8da 	bl	80068ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <SystemClock_Config+0xdc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a2b      	ldr	r2, [pc, #172]	; (80007c0 <SystemClock_Config+0xdc>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <SystemClock_Config+0xdc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <SystemClock_Config+0xe0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a25      	ldr	r2, [pc, #148]	; (80007c4 <SystemClock_Config+0xe0>)
 800072e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <SystemClock_Config+0xe0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000740:	2302      	movs	r3, #2
 8000742:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000748:	2310      	movs	r3, #16
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000750:	2300      	movs	r3, #0
 8000752:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000754:	2308      	movs	r3, #8
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000758:	23b4      	movs	r3, #180	; 0xb4
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f955 	bl	8001a1c <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000778:	f000 f98e 	bl	8000a98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800077c:	f000 fd96 	bl	80012ac <HAL_PWREx_EnableOverDrive>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000786:	f000 f987 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2302      	movs	r3, #2
 8000790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000796:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	2105      	movs	r1, #5
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fdcf 	bl	800134c <HAL_RCC_ClockConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007b4:	f000 f970 	bl	8000a98 <Error_Handler>
  }
}
 80007b8:	bf00      	nop
 80007ba:	3750      	adds	r7, #80	; 0x50
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <MX_GPIO_Init+0xf0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a34      	ldr	r2, [pc, #208]	; (80008b8 <MX_GPIO_Init+0xf0>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a2d      	ldr	r2, [pc, #180]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <MX_GPIO_Init+0xf0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MX_GPIO_Init+0xf0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a26      	ldr	r2, [pc, #152]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <MX_GPIO_Init+0xf0>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2120      	movs	r1, #32
 8000852:	481a      	ldr	r0, [pc, #104]	; (80008bc <MX_GPIO_Init+0xf4>)
 8000854:	f000 fcf6 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4814      	ldr	r0, [pc, #80]	; (80008c0 <MX_GPIO_Init+0xf8>)
 8000870:	f000 fb3c 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000874:	230c      	movs	r3, #12
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000884:	2307      	movs	r3, #7
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	480b      	ldr	r0, [pc, #44]	; (80008bc <MX_GPIO_Init+0xf4>)
 8000890:	f000 fb2c 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000894:	2320      	movs	r3, #32
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_GPIO_Init+0xf4>)
 80008ac:	f000 fb1e 	bl	8000eec <HAL_GPIO_Init>

}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000
 80008c0:	40020800 	.word	0x40020800

080008c4 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80008cc:	4816      	ldr	r0, [pc, #88]	; (8000928 <led_green_handler+0x64>)
 80008ce:	f005 ff0d 	bl	80066ec <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 80008d2:	2120      	movs	r1, #32
 80008d4:	4815      	ldr	r0, [pc, #84]	; (800092c <led_green_handler+0x68>)
 80008d6:	f000 fcce 	bl	8001276 <HAL_GPIO_TogglePin>
        SEGGER_SYSVIEW_PrintfTarget("Entering xTaskNotifyWait ...");
 80008da:	4815      	ldr	r0, [pc, #84]	; (8000930 <led_green_handler+0x6c>)
 80008dc:	f005 ff06 	bl	80066ec <SEGGER_SYSVIEW_PrintfTarget>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80008e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2300      	movs	r3, #0
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	2000      	movs	r0, #0
 80008ee:	f002 fbcf 	bl	8003090 <xTaskGenericNotifyWait>
 80008f2:	60f8      	str	r0, [r7, #12]
        SEGGER_SYSVIEW_PrintfTarget("Exiting xTaskNotifyWait ...");
 80008f4:	480f      	ldr	r0, [pc, #60]	; (8000934 <led_green_handler+0x70>)
 80008f6:	f005 fef9 	bl	80066ec <SEGGER_SYSVIEW_PrintfTarget>
		if(status == pdTRUE){
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d1e5      	bne.n	80008cc <led_green_handler+0x8>
			vTaskSuspendAll();
 8000900:	f002 f92e 	bl	8002b60 <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <led_green_handler+0x74>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0c      	ldr	r2, [pc, #48]	; (800093c <led_green_handler+0x78>)
 800090a:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 800090c:	f002 f936 	bl	8002b7c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_PIN,GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2120      	movs	r1, #32
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <led_green_handler+0x68>)
 8000916:	f000 fc95 	bl	8001244 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 800091a:	4809      	ldr	r0, [pc, #36]	; (8000940 <led_green_handler+0x7c>)
 800091c:	f005 fee6 	bl	80066ec <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000920:	2000      	movs	r0, #0
 8000922:	f001 ffdf 	bl	80028e4 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000926:	e7d1      	b.n	80008cc <led_green_handler+0x8>
 8000928:	08006910 	.word	0x08006910
 800092c:	40020000 	.word	0x40020000
 8000930:	08006924 	.word	0x08006924
 8000934:	08006944 	.word	0x08006944
 8000938:	2000003c 	.word	0x2000003c
 800093c:	20000048 	.word	0x20000048
 8000940:	08006960 	.word	0x08006960

08000944 <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af02      	add	r7, sp, #8
 800094a:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800094c:	4812      	ldr	r0, [pc, #72]	; (8000998 <led_orange_handler+0x54>)
 800094e:	f005 fecd 	bl	80066ec <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN );
        SEGGER_SYSVIEW_PrintfTarget("Entering xTaskNotifyWait ...");
 8000952:	4812      	ldr	r0, [pc, #72]	; (800099c <led_orange_handler+0x58>)
 8000954:	f005 feca 	bl	80066ec <SEGGER_SYSVIEW_PrintfTarget>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000958:	f44f 7348 	mov.w	r3, #800	; 0x320
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2300      	movs	r3, #0
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	2000      	movs	r0, #0
 8000966:	f002 fb93 	bl	8003090 <xTaskGenericNotifyWait>
 800096a:	60f8      	str	r0, [r7, #12]
        SEGGER_SYSVIEW_PrintfTarget("Exiting xTaskNotifyWait ...");
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <led_orange_handler+0x5c>)
 800096e:	f005 febd 	bl	80066ec <SEGGER_SYSVIEW_PrintfTarget>
		if(status == pdTRUE){
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d1e9      	bne.n	800094c <led_orange_handler+0x8>
			vTaskSuspendAll();
 8000978:	f002 f8f2 	bl	8002b60 <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <led_orange_handler+0x60>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <led_orange_handler+0x64>)
 8000982:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000984:	f002 f8fa 	bl	8002b7c <xTaskResumeAll>
			//HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN,GPIO_PIN_SET);
			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
 8000988:	4808      	ldr	r0, [pc, #32]	; (80009ac <led_orange_handler+0x68>)
 800098a:	f005 feaf 	bl	80066ec <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 800098e:	2000      	movs	r0, #0
 8000990:	f001 ffa8 	bl	80028e4 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000994:	e7da      	b.n	800094c <led_orange_handler+0x8>
 8000996:	bf00      	nop
 8000998:	08006978 	.word	0x08006978
 800099c:	08006924 	.word	0x08006924
 80009a0:	08006944 	.word	0x08006944
 80009a4:	20000040 	.word	0x20000040
 80009a8:	20000048 	.word	0x20000048
 80009ac:	0800698c 	.word	0x0800698c

080009b0 <led_red_handler>:
	}
}


static void led_red_handler(void* parameters)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80009b8:	4814      	ldr	r0, [pc, #80]	; (8000a0c <led_red_handler+0x5c>)
 80009ba:	f005 fe97 	bl	80066ec <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
        SEGGER_SYSVIEW_PrintfTarget("Entering xTaskNotifyWait ...");
 80009be:	4814      	ldr	r0, [pc, #80]	; (8000a10 <led_red_handler+0x60>)
 80009c0:	f005 fe94 	bl	80066ec <SEGGER_SYSVIEW_PrintfTarget>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 80009c4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2300      	movs	r3, #0
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	2000      	movs	r0, #0
 80009d2:	f002 fb5d 	bl	8003090 <xTaskGenericNotifyWait>
 80009d6:	60f8      	str	r0, [r7, #12]
        SEGGER_SYSVIEW_PrintfTarget("Exiting xTaskNotifyWait ...");
 80009d8:	480e      	ldr	r0, [pc, #56]	; (8000a14 <led_red_handler+0x64>)
 80009da:	f005 fe87 	bl	80066ec <SEGGER_SYSVIEW_PrintfTarget>
		if(status == pdTRUE){
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d1e9      	bne.n	80009b8 <led_red_handler+0x8>
			vTaskSuspendAll();
 80009e4:	f002 f8bc 	bl	8002b60 <vTaskSuspendAll>
			next_task_handle = NULL;
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <led_red_handler+0x68>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 80009ee:	f002 f8c5 	bl	8002b7c <xTaskResumeAll>
			//HAL_GPIO_WritePin(GPIOD, LED_RED_PIN,GPIO_PIN_SET);
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 80009f2:	480a      	ldr	r0, [pc, #40]	; (8000a1c <led_red_handler+0x6c>)
 80009f4:	f005 fe7a 	bl	80066ec <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(btn_task_handle);
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <led_red_handler+0x70>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 ff71 	bl	80028e4 <vTaskDelete>
			vTaskDelete(NULL);
 8000a02:	2000      	movs	r0, #0
 8000a04:	f001 ff6e 	bl	80028e4 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a08:	e7d6      	b.n	80009b8 <led_red_handler+0x8>
 8000a0a:	bf00      	nop
 8000a0c:	080069a4 	.word	0x080069a4
 8000a10:	08006924 	.word	0x08006924
 8000a14:	08006944 	.word	0x08006944
 8000a18:	20000048 	.word	0x20000048
 8000a1c:	080069b8 	.word	0x080069b8
 8000a20:	20000044 	.word	0x20000044

08000a24 <button_handler>:

}


static void button_handler(void* parameters)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af02      	add	r7, sp, #8
 8000a2a:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]

	while(1){

		btn_read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000a34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <button_handler+0x48>)
 8000a3a:	f000 fbeb 	bl	8001214 <HAL_GPIO_ReadPin>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73bb      	strb	r3, [r7, #14]

		if(!btn_read)
 8000a42:	7bbb      	ldrb	r3, [r7, #14]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10b      	bne.n	8000a60 <button_handler+0x3c>
		{
			if(! prev_read)
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d108      	bne.n	8000a60 <button_handler+0x3c>
				xTaskNotify(next_task_handle,0,eNoAction);
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <button_handler+0x4c>)
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	2300      	movs	r3, #0
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2300      	movs	r3, #0
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f002 fba0 	bl	80031a0 <xTaskGenericNotify>
		}
		prev_read = btn_read;
 8000a60:	7bbb      	ldrb	r3, [r7, #14]
 8000a62:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000a64:	200a      	movs	r0, #10
 8000a66:	f001 ffe7 	bl	8002a38 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000a6a:	e7e3      	b.n	8000a34 <button_handler+0x10>
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	20000048 	.word	0x20000048

08000a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a86:	f000 f92f 	bl	8000ce8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40001000 	.word	0x40001000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000ae2:	f002 fdf9 	bl	80036d8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	; 0x38
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <HAL_InitTick+0xe4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	4a32      	ldr	r2, [pc, #200]	; (8000bd8 <HAL_InitTick+0xe4>)
 8000b0e:	f043 0310 	orr.w	r3, r3, #16
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40
 8000b14:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <HAL_InitTick+0xe4>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	f003 0310 	and.w	r3, r3, #16
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b20:	f107 0210 	add.w	r2, r7, #16
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fd14 	bl	8001558 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b30:	6a3b      	ldr	r3, [r7, #32]
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d103      	bne.n	8000b42 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b3a:	f000 fcf9 	bl	8001530 <HAL_RCC_GetPCLK1Freq>
 8000b3e:	6378      	str	r0, [r7, #52]	; 0x34
 8000b40:	e004      	b.n	8000b4c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b42:	f000 fcf5 	bl	8001530 <HAL_RCC_GetPCLK1Freq>
 8000b46:	4603      	mov	r3, r0
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b4e:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <HAL_InitTick+0xe8>)
 8000b50:	fba2 2303 	umull	r2, r3, r2, r3
 8000b54:	0c9b      	lsrs	r3, r3, #18
 8000b56:	3b01      	subs	r3, #1
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <HAL_InitTick+0xec>)
 8000b5c:	4a21      	ldr	r2, [pc, #132]	; (8000be4 <HAL_InitTick+0xf0>)
 8000b5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <HAL_InitTick+0xec>)
 8000b62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b66:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b68:	4a1d      	ldr	r2, [pc, #116]	; (8000be0 <HAL_InitTick+0xec>)
 8000b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <HAL_InitTick+0xec>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_InitTick+0xec>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_InitTick+0xec>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b80:	4817      	ldr	r0, [pc, #92]	; (8000be0 <HAL_InitTick+0xec>)
 8000b82:	f001 f9e9 	bl	8001f58 <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d11b      	bne.n	8000bcc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b94:	4812      	ldr	r0, [pc, #72]	; (8000be0 <HAL_InitTick+0xec>)
 8000b96:	f001 fa39 	bl	800200c <HAL_TIM_Base_Start_IT>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d111      	bne.n	8000bcc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ba8:	2036      	movs	r0, #54	; 0x36
 8000baa:	f000 f991 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d808      	bhi.n	8000bc6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	2036      	movs	r0, #54	; 0x36
 8000bba:	f000 f96d 	bl	8000e98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <HAL_InitTick+0xf4>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	e002      	b.n	8000bcc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3738      	adds	r7, #56	; 0x38
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	431bde83 	.word	0x431bde83
 8000be0:	2000004c 	.word	0x2000004c
 8000be4:	40001000 	.word	0x40001000
 8000be8:	20000004 	.word	0x20000004

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <TIM6_DAC_IRQHandler+0x10>)
 8000c1e:	f001 fa65 	bl	80020ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000004c 	.word	0x2000004c

08000c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c56:	490e      	ldr	r1, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c58:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c6c:	4c0b      	ldr	r4, [pc, #44]	; (8000c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c7a:	f7ff ffd7 	bl	8000c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f005 fdd3 	bl	8006828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fc91 	bl	80005a8 <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c94:	08006af4 	.word	0x08006af4
  ldr r2, =_sbss
 8000c98:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c9c:	2001a844 	.word	0x2001a844

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <HAL_Init+0x40>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_Init+0x40>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_Init+0x40>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f8d8 	bl	8000e82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff ff0e 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fee4 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000094 	.word	0x20000094

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000094 	.word	0x20000094

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0b      	blt.n	8000db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <__NVIC_EnableIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	; (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	; (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ff4c 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eaa:	f7ff ff61 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	6978      	ldr	r0, [r7, #20]
 8000eb6:	f7ff ffb1 	bl	8000e1c <NVIC_EncodePriority>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff80 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000ec8:	bf00      	nop
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff54 	bl	8000d8c <__NVIC_EnableIRQ>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	e165      	b.n	80011d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	f040 8154 	bne.w	80011ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d005      	beq.n	8000f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d130      	bne.n	8000fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	091b      	lsrs	r3, r3, #4
 8000f8a:	f003 0201 	and.w	r2, r3, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d017      	beq.n	8000fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d123      	bne.n	8001030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	08da      	lsrs	r2, r3, #3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3208      	adds	r2, #8
 8000ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	69b9      	ldr	r1, [r7, #24]
 800102c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0203 	and.w	r2, r3, #3
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 80ae 	beq.w	80011ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b5d      	ldr	r3, [pc, #372]	; (80011ec <HAL_GPIO_Init+0x300>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a5c      	ldr	r2, [pc, #368]	; (80011ec <HAL_GPIO_Init+0x300>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b5a      	ldr	r3, [pc, #360]	; (80011ec <HAL_GPIO_Init+0x300>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108e:	4a58      	ldr	r2, [pc, #352]	; (80011f0 <HAL_GPIO_Init+0x304>)
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4f      	ldr	r2, [pc, #316]	; (80011f4 <HAL_GPIO_Init+0x308>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d025      	beq.n	8001106 <HAL_GPIO_Init+0x21a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4e      	ldr	r2, [pc, #312]	; (80011f8 <HAL_GPIO_Init+0x30c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d01f      	beq.n	8001102 <HAL_GPIO_Init+0x216>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4d      	ldr	r2, [pc, #308]	; (80011fc <HAL_GPIO_Init+0x310>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d019      	beq.n	80010fe <HAL_GPIO_Init+0x212>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4c      	ldr	r2, [pc, #304]	; (8001200 <HAL_GPIO_Init+0x314>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0x20e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4b      	ldr	r2, [pc, #300]	; (8001204 <HAL_GPIO_Init+0x318>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00d      	beq.n	80010f6 <HAL_GPIO_Init+0x20a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4a      	ldr	r2, [pc, #296]	; (8001208 <HAL_GPIO_Init+0x31c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d007      	beq.n	80010f2 <HAL_GPIO_Init+0x206>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a49      	ldr	r2, [pc, #292]	; (800120c <HAL_GPIO_Init+0x320>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_Init+0x202>
 80010ea:	2306      	movs	r3, #6
 80010ec:	e00c      	b.n	8001108 <HAL_GPIO_Init+0x21c>
 80010ee:	2307      	movs	r3, #7
 80010f0:	e00a      	b.n	8001108 <HAL_GPIO_Init+0x21c>
 80010f2:	2305      	movs	r3, #5
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x21c>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x21c>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x21c>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x21c>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x21c>
 8001106:	2300      	movs	r3, #0
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001118:	4935      	ldr	r1, [pc, #212]	; (80011f0 <HAL_GPIO_Init+0x304>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001126:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <HAL_GPIO_Init+0x324>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114a:	4a31      	ldr	r2, [pc, #196]	; (8001210 <HAL_GPIO_Init+0x324>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_GPIO_Init+0x324>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001174:	4a26      	ldr	r2, [pc, #152]	; (8001210 <HAL_GPIO_Init+0x324>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117a:	4b25      	ldr	r3, [pc, #148]	; (8001210 <HAL_GPIO_Init+0x324>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_GPIO_Init+0x324>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <HAL_GPIO_Init+0x324>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c8:	4a11      	ldr	r2, [pc, #68]	; (8001210 <HAL_GPIO_Init+0x324>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f67f ae96 	bls.w	8000f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40013800 	.word	0x40013800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021000 	.word	0x40021000
 8001208:	40021400 	.word	0x40021400
 800120c:	40021800 	.word	0x40021800
 8001210:	40013c00 	.word	0x40013c00

08001214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	4013      	ands	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	e001      	b.n	8001236 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001260:	e003      	b.n	800126a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	619a      	str	r2, [r3, #24]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001276:	b480      	push	{r7}
 8001278:	b085      	sub	sp, #20
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	460b      	mov	r3, r1
 8001280:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001288:	887a      	ldrh	r2, [r7, #2]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4013      	ands	r3, r2
 800128e:	041a      	lsls	r2, r3, #16
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43d9      	mvns	r1, r3
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	400b      	ands	r3, r1
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	619a      	str	r2, [r3, #24]
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_PWREx_EnableOverDrive+0x90>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a1f      	ldr	r2, [pc, #124]	; (800133c <HAL_PWREx_EnableOverDrive+0x90>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <HAL_PWREx_EnableOverDrive+0x90>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_PWREx_EnableOverDrive+0x94>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d8:	f7ff fd1a 	bl	8000d10 <HAL_GetTick>
 80012dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012de:	e009      	b.n	80012f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012e0:	f7ff fd16 	bl	8000d10 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012ee:	d901      	bls.n	80012f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e01f      	b.n	8001334 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_PWREx_EnableOverDrive+0x98>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001300:	d1ee      	bne.n	80012e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001308:	f7ff fd02 	bl	8000d10 <HAL_GetTick>
 800130c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800130e:	e009      	b.n	8001324 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001310:	f7ff fcfe 	bl	8000d10 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800131e:	d901      	bls.n	8001324 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e007      	b.n	8001334 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <HAL_PWREx_EnableOverDrive+0x98>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001330:	d1ee      	bne.n	8001310 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	420e0040 	.word	0x420e0040
 8001344:	40007000 	.word	0x40007000
 8001348:	420e0044 	.word	0x420e0044

0800134c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e0cc      	b.n	80014fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001360:	4b68      	ldr	r3, [pc, #416]	; (8001504 <HAL_RCC_ClockConfig+0x1b8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d90c      	bls.n	8001388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136e:	4b65      	ldr	r3, [pc, #404]	; (8001504 <HAL_RCC_ClockConfig+0x1b8>)
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001376:	4b63      	ldr	r3, [pc, #396]	; (8001504 <HAL_RCC_ClockConfig+0x1b8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d001      	beq.n	8001388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0b8      	b.n	80014fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d020      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013a0:	4b59      	ldr	r3, [pc, #356]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	4a58      	ldr	r2, [pc, #352]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013b8:	4b53      	ldr	r3, [pc, #332]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	4a52      	ldr	r2, [pc, #328]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c4:	4b50      	ldr	r3, [pc, #320]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	494d      	ldr	r1, [pc, #308]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d044      	beq.n	800146c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d107      	bne.n	80013fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d119      	bne.n	800142a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e07f      	b.n	80014fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d003      	beq.n	800140a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001406:	2b03      	cmp	r3, #3
 8001408:	d107      	bne.n	800141a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140a:	4b3f      	ldr	r3, [pc, #252]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d109      	bne.n	800142a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e06f      	b.n	80014fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141a:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e067      	b.n	80014fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800142a:	4b37      	ldr	r3, [pc, #220]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f023 0203 	bic.w	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4934      	ldr	r1, [pc, #208]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 8001438:	4313      	orrs	r3, r2
 800143a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800143c:	f7ff fc68 	bl	8000d10 <HAL_GetTick>
 8001440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001442:	e00a      	b.n	800145a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001444:	f7ff fc64 	bl	8000d10 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001452:	4293      	cmp	r3, r2
 8001454:	d901      	bls.n	800145a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e04f      	b.n	80014fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145a:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 020c 	and.w	r2, r3, #12
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	429a      	cmp	r2, r3
 800146a:	d1eb      	bne.n	8001444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <HAL_RCC_ClockConfig+0x1b8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d20c      	bcs.n	8001494 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_RCC_ClockConfig+0x1b8>)
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_RCC_ClockConfig+0x1b8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e032      	b.n	80014fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4916      	ldr	r1, [pc, #88]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	490e      	ldr	r1, [pc, #56]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014d2:	f000 f873 	bl	80015bc <HAL_RCC_GetSysClockFreq>
 80014d6:	4602      	mov	r2, r0
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	490a      	ldr	r1, [pc, #40]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 80014e4:	5ccb      	ldrb	r3, [r1, r3]
 80014e6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ea:	4a09      	ldr	r2, [pc, #36]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_RCC_ClockConfig+0x1c8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fafe 	bl	8000af4 <HAL_InitTick>

  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023c00 	.word	0x40023c00
 8001508:	40023800 	.word	0x40023800
 800150c:	08006a90 	.word	0x08006a90
 8001510:	20000000 	.word	0x20000000
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_RCC_GetHCLKFreq+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000000 	.word	0x20000000

08001530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001534:	f7ff fff0 	bl	8001518 <HAL_RCC_GetHCLKFreq>
 8001538:	4602      	mov	r2, r0
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	0a9b      	lsrs	r3, r3, #10
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	4903      	ldr	r1, [pc, #12]	; (8001554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001546:	5ccb      	ldrb	r3, [r1, r3]
 8001548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800154c:	4618      	mov	r0, r3
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800
 8001554:	08006aa0 	.word	0x08006aa0

08001558 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	220f      	movs	r2, #15
 8001566:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_RCC_GetClockConfig+0x5c>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 0203 	and.w	r2, r3, #3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_RCC_GetClockConfig+0x5c>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	08db      	lsrs	r3, r3, #3
 8001592:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_RCC_GetClockConfig+0x60>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 020f 	and.w	r2, r3, #15
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	601a      	str	r2, [r3, #0]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40023c00 	.word	0x40023c00

080015bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015c0:	b0ae      	sub	sp, #184	; 0xb8
 80015c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015e2:	4bcb      	ldr	r3, [pc, #812]	; (8001910 <HAL_RCC_GetSysClockFreq+0x354>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	f200 8206 	bhi.w	80019fc <HAL_RCC_GetSysClockFreq+0x440>
 80015f0:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	0800162d 	.word	0x0800162d
 80015fc:	080019fd 	.word	0x080019fd
 8001600:	080019fd 	.word	0x080019fd
 8001604:	080019fd 	.word	0x080019fd
 8001608:	08001635 	.word	0x08001635
 800160c:	080019fd 	.word	0x080019fd
 8001610:	080019fd 	.word	0x080019fd
 8001614:	080019fd 	.word	0x080019fd
 8001618:	0800163d 	.word	0x0800163d
 800161c:	080019fd 	.word	0x080019fd
 8001620:	080019fd 	.word	0x080019fd
 8001624:	080019fd 	.word	0x080019fd
 8001628:	0800182d 	.word	0x0800182d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800162c:	4bb9      	ldr	r3, [pc, #740]	; (8001914 <HAL_RCC_GetSysClockFreq+0x358>)
 800162e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001632:	e1e7      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001634:	4bb8      	ldr	r3, [pc, #736]	; (8001918 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001636:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800163a:	e1e3      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800163c:	4bb4      	ldr	r3, [pc, #720]	; (8001910 <HAL_RCC_GetSysClockFreq+0x354>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001648:	4bb1      	ldr	r3, [pc, #708]	; (8001910 <HAL_RCC_GetSysClockFreq+0x354>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d071      	beq.n	8001738 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001654:	4bae      	ldr	r3, [pc, #696]	; (8001910 <HAL_RCC_GetSysClockFreq+0x354>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	099b      	lsrs	r3, r3, #6
 800165a:	2200      	movs	r2, #0
 800165c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001660:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800166c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001676:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800167a:	4622      	mov	r2, r4
 800167c:	462b      	mov	r3, r5
 800167e:	f04f 0000 	mov.w	r0, #0
 8001682:	f04f 0100 	mov.w	r1, #0
 8001686:	0159      	lsls	r1, r3, #5
 8001688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800168c:	0150      	lsls	r0, r2, #5
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4621      	mov	r1, r4
 8001694:	1a51      	subs	r1, r2, r1
 8001696:	6439      	str	r1, [r7, #64]	; 0x40
 8001698:	4629      	mov	r1, r5
 800169a:	eb63 0301 	sbc.w	r3, r3, r1
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80016ac:	4649      	mov	r1, r9
 80016ae:	018b      	lsls	r3, r1, #6
 80016b0:	4641      	mov	r1, r8
 80016b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016b6:	4641      	mov	r1, r8
 80016b8:	018a      	lsls	r2, r1, #6
 80016ba:	4641      	mov	r1, r8
 80016bc:	1a51      	subs	r1, r2, r1
 80016be:	63b9      	str	r1, [r7, #56]	; 0x38
 80016c0:	4649      	mov	r1, r9
 80016c2:	eb63 0301 	sbc.w	r3, r3, r1
 80016c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80016d4:	4649      	mov	r1, r9
 80016d6:	00cb      	lsls	r3, r1, #3
 80016d8:	4641      	mov	r1, r8
 80016da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016de:	4641      	mov	r1, r8
 80016e0:	00ca      	lsls	r2, r1, #3
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	4603      	mov	r3, r0
 80016e8:	4622      	mov	r2, r4
 80016ea:	189b      	adds	r3, r3, r2
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
 80016ee:	462b      	mov	r3, r5
 80016f0:	460a      	mov	r2, r1
 80016f2:	eb42 0303 	adc.w	r3, r2, r3
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001704:	4629      	mov	r1, r5
 8001706:	024b      	lsls	r3, r1, #9
 8001708:	4621      	mov	r1, r4
 800170a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800170e:	4621      	mov	r1, r4
 8001710:	024a      	lsls	r2, r1, #9
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800171a:	2200      	movs	r2, #0
 800171c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001720:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001724:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001728:	f7fe fdbc 	bl	80002a4 <__aeabi_uldivmod>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4613      	mov	r3, r2
 8001732:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001736:	e067      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001738:	4b75      	ldr	r3, [pc, #468]	; (8001910 <HAL_RCC_GetSysClockFreq+0x354>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	2200      	movs	r2, #0
 8001740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001744:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001748:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800174c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001750:	67bb      	str	r3, [r7, #120]	; 0x78
 8001752:	2300      	movs	r3, #0
 8001754:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001756:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800175a:	4622      	mov	r2, r4
 800175c:	462b      	mov	r3, r5
 800175e:	f04f 0000 	mov.w	r0, #0
 8001762:	f04f 0100 	mov.w	r1, #0
 8001766:	0159      	lsls	r1, r3, #5
 8001768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800176c:	0150      	lsls	r0, r2, #5
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4621      	mov	r1, r4
 8001774:	1a51      	subs	r1, r2, r1
 8001776:	62b9      	str	r1, [r7, #40]	; 0x28
 8001778:	4629      	mov	r1, r5
 800177a:	eb63 0301 	sbc.w	r3, r3, r1
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800178c:	4649      	mov	r1, r9
 800178e:	018b      	lsls	r3, r1, #6
 8001790:	4641      	mov	r1, r8
 8001792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001796:	4641      	mov	r1, r8
 8001798:	018a      	lsls	r2, r1, #6
 800179a:	4641      	mov	r1, r8
 800179c:	ebb2 0a01 	subs.w	sl, r2, r1
 80017a0:	4649      	mov	r1, r9
 80017a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017ba:	4692      	mov	sl, r2
 80017bc:	469b      	mov	fp, r3
 80017be:	4623      	mov	r3, r4
 80017c0:	eb1a 0303 	adds.w	r3, sl, r3
 80017c4:	623b      	str	r3, [r7, #32]
 80017c6:	462b      	mov	r3, r5
 80017c8:	eb4b 0303 	adc.w	r3, fp, r3
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017da:	4629      	mov	r1, r5
 80017dc:	028b      	lsls	r3, r1, #10
 80017de:	4621      	mov	r1, r4
 80017e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017e4:	4621      	mov	r1, r4
 80017e6:	028a      	lsls	r2, r1, #10
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017f0:	2200      	movs	r2, #0
 80017f2:	673b      	str	r3, [r7, #112]	; 0x70
 80017f4:	677a      	str	r2, [r7, #116]	; 0x74
 80017f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017fa:	f7fe fd53 	bl	80002a4 <__aeabi_uldivmod>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4613      	mov	r3, r2
 8001804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001808:	4b41      	ldr	r3, [pc, #260]	; (8001910 <HAL_RCC_GetSysClockFreq+0x354>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	0c1b      	lsrs	r3, r3, #16
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	3301      	adds	r3, #1
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800181a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800181e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800182a:	e0eb      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800182c:	4b38      	ldr	r3, [pc, #224]	; (8001910 <HAL_RCC_GetSysClockFreq+0x354>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001838:	4b35      	ldr	r3, [pc, #212]	; (8001910 <HAL_RCC_GetSysClockFreq+0x354>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d06b      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_RCC_GetSysClockFreq+0x354>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	2200      	movs	r2, #0
 800184c:	66bb      	str	r3, [r7, #104]	; 0x68
 800184e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001856:	663b      	str	r3, [r7, #96]	; 0x60
 8001858:	2300      	movs	r3, #0
 800185a:	667b      	str	r3, [r7, #100]	; 0x64
 800185c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001860:	4622      	mov	r2, r4
 8001862:	462b      	mov	r3, r5
 8001864:	f04f 0000 	mov.w	r0, #0
 8001868:	f04f 0100 	mov.w	r1, #0
 800186c:	0159      	lsls	r1, r3, #5
 800186e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001872:	0150      	lsls	r0, r2, #5
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4621      	mov	r1, r4
 800187a:	1a51      	subs	r1, r2, r1
 800187c:	61b9      	str	r1, [r7, #24]
 800187e:	4629      	mov	r1, r5
 8001880:	eb63 0301 	sbc.w	r3, r3, r1
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001892:	4659      	mov	r1, fp
 8001894:	018b      	lsls	r3, r1, #6
 8001896:	4651      	mov	r1, sl
 8001898:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800189c:	4651      	mov	r1, sl
 800189e:	018a      	lsls	r2, r1, #6
 80018a0:	4651      	mov	r1, sl
 80018a2:	ebb2 0801 	subs.w	r8, r2, r1
 80018a6:	4659      	mov	r1, fp
 80018a8:	eb63 0901 	sbc.w	r9, r3, r1
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018c0:	4690      	mov	r8, r2
 80018c2:	4699      	mov	r9, r3
 80018c4:	4623      	mov	r3, r4
 80018c6:	eb18 0303 	adds.w	r3, r8, r3
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	462b      	mov	r3, r5
 80018ce:	eb49 0303 	adc.w	r3, r9, r3
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018e0:	4629      	mov	r1, r5
 80018e2:	024b      	lsls	r3, r1, #9
 80018e4:	4621      	mov	r1, r4
 80018e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018ea:	4621      	mov	r1, r4
 80018ec:	024a      	lsls	r2, r1, #9
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018f6:	2200      	movs	r2, #0
 80018f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80018fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80018fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001900:	f7fe fcd0 	bl	80002a4 <__aeabi_uldivmod>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4613      	mov	r3, r2
 800190a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800190e:	e065      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x420>
 8001910:	40023800 	.word	0x40023800
 8001914:	00f42400 	.word	0x00f42400
 8001918:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191c:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x458>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	099b      	lsrs	r3, r3, #6
 8001922:	2200      	movs	r2, #0
 8001924:	4618      	mov	r0, r3
 8001926:	4611      	mov	r1, r2
 8001928:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800192c:	653b      	str	r3, [r7, #80]	; 0x50
 800192e:	2300      	movs	r3, #0
 8001930:	657b      	str	r3, [r7, #84]	; 0x54
 8001932:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001936:	4642      	mov	r2, r8
 8001938:	464b      	mov	r3, r9
 800193a:	f04f 0000 	mov.w	r0, #0
 800193e:	f04f 0100 	mov.w	r1, #0
 8001942:	0159      	lsls	r1, r3, #5
 8001944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001948:	0150      	lsls	r0, r2, #5
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4641      	mov	r1, r8
 8001950:	1a51      	subs	r1, r2, r1
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	4649      	mov	r1, r9
 8001956:	eb63 0301 	sbc.w	r3, r3, r1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001968:	4659      	mov	r1, fp
 800196a:	018b      	lsls	r3, r1, #6
 800196c:	4651      	mov	r1, sl
 800196e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001972:	4651      	mov	r1, sl
 8001974:	018a      	lsls	r2, r1, #6
 8001976:	4651      	mov	r1, sl
 8001978:	1a54      	subs	r4, r2, r1
 800197a:	4659      	mov	r1, fp
 800197c:	eb63 0501 	sbc.w	r5, r3, r1
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	00eb      	lsls	r3, r5, #3
 800198a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800198e:	00e2      	lsls	r2, r4, #3
 8001990:	4614      	mov	r4, r2
 8001992:	461d      	mov	r5, r3
 8001994:	4643      	mov	r3, r8
 8001996:	18e3      	adds	r3, r4, r3
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	464b      	mov	r3, r9
 800199c:	eb45 0303 	adc.w	r3, r5, r3
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ae:	4629      	mov	r1, r5
 80019b0:	028b      	lsls	r3, r1, #10
 80019b2:	4621      	mov	r1, r4
 80019b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019b8:	4621      	mov	r1, r4
 80019ba:	028a      	lsls	r2, r1, #10
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019c4:	2200      	movs	r2, #0
 80019c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80019c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80019ce:	f7fe fc69 	bl	80002a4 <__aeabi_uldivmod>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4613      	mov	r3, r2
 80019d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019dc:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x458>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	0f1b      	lsrs	r3, r3, #28
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80019ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019fa:	e003      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x45c>)
 80019fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	37b8      	adds	r7, #184	; 0xb8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	00f42400 	.word	0x00f42400

08001a1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e28d      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8083 	beq.w	8001b42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a3c:	4b94      	ldr	r3, [pc, #592]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d019      	beq.n	8001a7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a48:	4b91      	ldr	r3, [pc, #580]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d106      	bne.n	8001a62 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a54:	4b8e      	ldr	r3, [pc, #568]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a60:	d00c      	beq.n	8001a7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a62:	4b8b      	ldr	r3, [pc, #556]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d112      	bne.n	8001a94 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6e:	4b88      	ldr	r3, [pc, #544]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a7a:	d10b      	bne.n	8001a94 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	4b84      	ldr	r3, [pc, #528]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d05b      	beq.n	8001b40 <HAL_RCC_OscConfig+0x124>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d157      	bne.n	8001b40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e25a      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9c:	d106      	bne.n	8001aac <HAL_RCC_OscConfig+0x90>
 8001a9e:	4b7c      	ldr	r3, [pc, #496]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a7b      	ldr	r2, [pc, #492]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e01d      	b.n	8001ae8 <HAL_RCC_OscConfig+0xcc>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0xb4>
 8001ab6:	4b76      	ldr	r3, [pc, #472]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a75      	ldr	r2, [pc, #468]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a72      	ldr	r2, [pc, #456]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e00b      	b.n	8001ae8 <HAL_RCC_OscConfig+0xcc>
 8001ad0:	4b6f      	ldr	r3, [pc, #444]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a6e      	ldr	r2, [pc, #440]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b6c      	ldr	r3, [pc, #432]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6b      	ldr	r2, [pc, #428]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d013      	beq.n	8001b18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff f90e 	bl	8000d10 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff f90a 	bl	8000d10 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	; 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e21f      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b61      	ldr	r3, [pc, #388]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0xdc>
 8001b16:	e014      	b.n	8001b42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff f8fa 	bl	8000d10 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff f8f6 	bl	8000d10 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e20b      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b32:	4b57      	ldr	r3, [pc, #348]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x104>
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d06f      	beq.n	8001c2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b4e:	4b50      	ldr	r3, [pc, #320]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d017      	beq.n	8001b8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b5a:	4b4d      	ldr	r3, [pc, #308]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d105      	bne.n	8001b72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b66:	4b4a      	ldr	r3, [pc, #296]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00b      	beq.n	8001b8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b72:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b7a:	2b0c      	cmp	r3, #12
 8001b7c:	d11c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7e:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d116      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x186>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e1d3      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba2:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4937      	ldr	r1, [pc, #220]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	e03a      	b.n	8001c2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d020      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc0:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <HAL_RCC_OscConfig+0x278>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7ff f8a3 	bl	8000d10 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bce:	f7ff f89f 	bl	8000d10 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e1b4      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be0:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bec:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4925      	ldr	r1, [pc, #148]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
 8001c00:	e015      	b.n	8001c2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c02:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <HAL_RCC_OscConfig+0x278>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff f882 	bl	8000d10 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c10:	f7ff f87e 	bl	8000d10 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e193      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c22:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d036      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d016      	beq.n	8001c70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_RCC_OscConfig+0x27c>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff f862 	bl	8000d10 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff f85e 	bl	8000d10 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e173      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x234>
 8001c6e:	e01b      	b.n	8001ca8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_RCC_OscConfig+0x27c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7ff f84b 	bl	8000d10 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7c:	e00e      	b.n	8001c9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7e:	f7ff f847 	bl	8000d10 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d907      	bls.n	8001c9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e15c      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
 8001c90:	40023800 	.word	0x40023800
 8001c94:	42470000 	.word	0x42470000
 8001c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9c:	4b8a      	ldr	r3, [pc, #552]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1ea      	bne.n	8001c7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 8097 	beq.w	8001de4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cba:	4b83      	ldr	r3, [pc, #524]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10f      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	4b7f      	ldr	r3, [pc, #508]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a7e      	ldr	r2, [pc, #504]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b7c      	ldr	r3, [pc, #496]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce6:	4b79      	ldr	r3, [pc, #484]	; (8001ecc <HAL_RCC_OscConfig+0x4b0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d118      	bne.n	8001d24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf2:	4b76      	ldr	r3, [pc, #472]	; (8001ecc <HAL_RCC_OscConfig+0x4b0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a75      	ldr	r2, [pc, #468]	; (8001ecc <HAL_RCC_OscConfig+0x4b0>)
 8001cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff f807 	bl	8000d10 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d06:	f7ff f803 	bl	8000d10 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e118      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d18:	4b6c      	ldr	r3, [pc, #432]	; (8001ecc <HAL_RCC_OscConfig+0x4b0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x31e>
 8001d2c:	4b66      	ldr	r3, [pc, #408]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	4a65      	ldr	r2, [pc, #404]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6713      	str	r3, [r2, #112]	; 0x70
 8001d38:	e01c      	b.n	8001d74 <HAL_RCC_OscConfig+0x358>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b05      	cmp	r3, #5
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x340>
 8001d42:	4b61      	ldr	r3, [pc, #388]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d46:	4a60      	ldr	r2, [pc, #384]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4e:	4b5e      	ldr	r3, [pc, #376]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	4a5d      	ldr	r2, [pc, #372]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0x358>
 8001d5c:	4b5a      	ldr	r3, [pc, #360]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	4a59      	ldr	r2, [pc, #356]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	6713      	str	r3, [r2, #112]	; 0x70
 8001d68:	4b57      	ldr	r3, [pc, #348]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	4a56      	ldr	r2, [pc, #344]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001d6e:	f023 0304 	bic.w	r3, r3, #4
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d015      	beq.n	8001da8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7c:	f7fe ffc8 	bl	8000d10 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d82:	e00a      	b.n	8001d9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d84:	f7fe ffc4 	bl	8000d10 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e0d7      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9a:	4b4b      	ldr	r3, [pc, #300]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0ee      	beq.n	8001d84 <HAL_RCC_OscConfig+0x368>
 8001da6:	e014      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7fe ffb2 	bl	8000d10 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db0:	f7fe ffae 	bl	8000d10 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e0c1      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc6:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1ee      	bne.n	8001db0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d105      	bne.n	8001de4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd8:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	4a3a      	ldr	r2, [pc, #232]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80ad 	beq.w	8001f48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dee:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d060      	beq.n	8001ebc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d145      	bne.n	8001e8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e02:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <HAL_RCC_OscConfig+0x4b4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7fe ff82 	bl	8000d10 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e10:	f7fe ff7e 	bl	8000d10 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e093      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e22:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69da      	ldr	r2, [r3, #28]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	019b      	lsls	r3, r3, #6
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	085b      	lsrs	r3, r3, #1
 8001e46:	3b01      	subs	r3, #1
 8001e48:	041b      	lsls	r3, r3, #16
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	061b      	lsls	r3, r3, #24
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	071b      	lsls	r3, r3, #28
 8001e5a:	491b      	ldr	r1, [pc, #108]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_RCC_OscConfig+0x4b4>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7fe ff53 	bl	8000d10 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7fe ff4f 	bl	8000d10 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e064      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x452>
 8001e8c:	e05c      	b.n	8001f48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_RCC_OscConfig+0x4b4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7fe ff3c 	bl	8000d10 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7fe ff38 	bl	8000d10 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e04d      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_RCC_OscConfig+0x4ac>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x480>
 8001eba:	e045      	b.n	8001f48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e040      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ed4:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <HAL_RCC_OscConfig+0x538>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d030      	beq.n	8001f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d129      	bne.n	8001f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d122      	bne.n	8001f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f04:	4013      	ands	r3, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d119      	bne.n	8001f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d10f      	bne.n	8001f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d107      	bne.n	8001f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800

08001f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e041      	b.n	8001fee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f839 	bl	8001ff6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3304      	adds	r3, #4
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f000 f9d8 	bl	800234c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d001      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e04e      	b.n	80020c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a23      	ldr	r2, [pc, #140]	; (80020d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d022      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x80>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204e:	d01d      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x80>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1f      	ldr	r2, [pc, #124]	; (80020d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d018      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x80>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1e      	ldr	r2, [pc, #120]	; (80020d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d013      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x80>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1c      	ldr	r2, [pc, #112]	; (80020dc <HAL_TIM_Base_Start_IT+0xd0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00e      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x80>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d009      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x80>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a19      	ldr	r2, [pc, #100]	; (80020e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d004      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x80>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a18      	ldr	r2, [pc, #96]	; (80020e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d111      	bne.n	80020b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b06      	cmp	r3, #6
 800209c:	d010      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ae:	e007      	b.n	80020c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40010000 	.word	0x40010000
 80020d4:	40000400 	.word	0x40000400
 80020d8:	40000800 	.word	0x40000800
 80020dc:	40000c00 	.word	0x40000c00
 80020e0:	40010400 	.word	0x40010400
 80020e4:	40014000 	.word	0x40014000
 80020e8:	40001800 	.word	0x40001800

080020ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d122      	bne.n	8002148 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b02      	cmp	r3, #2
 800210e:	d11b      	bne.n	8002148 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0202 	mvn.w	r2, #2
 8002118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f8ee 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 8002134:	e005      	b.n	8002142 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f8e0 	bl	80022fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f8f1 	bl	8002324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b04      	cmp	r3, #4
 8002154:	d122      	bne.n	800219c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b04      	cmp	r3, #4
 8002162:	d11b      	bne.n	800219c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0204 	mvn.w	r2, #4
 800216c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2202      	movs	r2, #2
 8002172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f8c4 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 8002188:	e005      	b.n	8002196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f8b6 	bl	80022fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f8c7 	bl	8002324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d122      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d11b      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0208 	mvn.w	r2, #8
 80021c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2204      	movs	r2, #4
 80021c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f89a 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 80021dc:	e005      	b.n	80021ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f88c 	bl	80022fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f89d 	bl	8002324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b10      	cmp	r3, #16
 80021fc:	d122      	bne.n	8002244 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b10      	cmp	r3, #16
 800220a:	d11b      	bne.n	8002244 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0210 	mvn.w	r2, #16
 8002214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2208      	movs	r2, #8
 800221a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f870 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 8002230:	e005      	b.n	800223e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f862 	bl	80022fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f873 	bl	8002324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d10e      	bne.n	8002270 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d107      	bne.n	8002270 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0201 	mvn.w	r2, #1
 8002268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7fe fc02 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227a:	2b80      	cmp	r3, #128	; 0x80
 800227c:	d10e      	bne.n	800229c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002288:	2b80      	cmp	r3, #128	; 0x80
 800228a:	d107      	bne.n	800229c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f902 	bl	80024a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a6:	2b40      	cmp	r3, #64	; 0x40
 80022a8:	d10e      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b4:	2b40      	cmp	r3, #64	; 0x40
 80022b6:	d107      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f838 	bl	8002338 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d10e      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d107      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0220 	mvn.w	r2, #32
 80022ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f8cc 	bl	800248c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a40      	ldr	r2, [pc, #256]	; (8002460 <TIM_Base_SetConfig+0x114>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d013      	beq.n	800238c <TIM_Base_SetConfig+0x40>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236a:	d00f      	beq.n	800238c <TIM_Base_SetConfig+0x40>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a3d      	ldr	r2, [pc, #244]	; (8002464 <TIM_Base_SetConfig+0x118>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00b      	beq.n	800238c <TIM_Base_SetConfig+0x40>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a3c      	ldr	r2, [pc, #240]	; (8002468 <TIM_Base_SetConfig+0x11c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d007      	beq.n	800238c <TIM_Base_SetConfig+0x40>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a3b      	ldr	r2, [pc, #236]	; (800246c <TIM_Base_SetConfig+0x120>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d003      	beq.n	800238c <TIM_Base_SetConfig+0x40>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a3a      	ldr	r2, [pc, #232]	; (8002470 <TIM_Base_SetConfig+0x124>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d108      	bne.n	800239e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a2f      	ldr	r2, [pc, #188]	; (8002460 <TIM_Base_SetConfig+0x114>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d02b      	beq.n	80023fe <TIM_Base_SetConfig+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ac:	d027      	beq.n	80023fe <TIM_Base_SetConfig+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a2c      	ldr	r2, [pc, #176]	; (8002464 <TIM_Base_SetConfig+0x118>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d023      	beq.n	80023fe <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a2b      	ldr	r2, [pc, #172]	; (8002468 <TIM_Base_SetConfig+0x11c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01f      	beq.n	80023fe <TIM_Base_SetConfig+0xb2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a2a      	ldr	r2, [pc, #168]	; (800246c <TIM_Base_SetConfig+0x120>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d01b      	beq.n	80023fe <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a29      	ldr	r2, [pc, #164]	; (8002470 <TIM_Base_SetConfig+0x124>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d017      	beq.n	80023fe <TIM_Base_SetConfig+0xb2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a28      	ldr	r2, [pc, #160]	; (8002474 <TIM_Base_SetConfig+0x128>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <TIM_Base_SetConfig+0xb2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a27      	ldr	r2, [pc, #156]	; (8002478 <TIM_Base_SetConfig+0x12c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00f      	beq.n	80023fe <TIM_Base_SetConfig+0xb2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a26      	ldr	r2, [pc, #152]	; (800247c <TIM_Base_SetConfig+0x130>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00b      	beq.n	80023fe <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a25      	ldr	r2, [pc, #148]	; (8002480 <TIM_Base_SetConfig+0x134>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <TIM_Base_SetConfig+0xb2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a24      	ldr	r2, [pc, #144]	; (8002484 <TIM_Base_SetConfig+0x138>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d003      	beq.n	80023fe <TIM_Base_SetConfig+0xb2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a23      	ldr	r2, [pc, #140]	; (8002488 <TIM_Base_SetConfig+0x13c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d108      	bne.n	8002410 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <TIM_Base_SetConfig+0x114>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d003      	beq.n	8002444 <TIM_Base_SetConfig+0xf8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a0c      	ldr	r2, [pc, #48]	; (8002470 <TIM_Base_SetConfig+0x124>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d103      	bne.n	800244c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	615a      	str	r2, [r3, #20]
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40010000 	.word	0x40010000
 8002464:	40000400 	.word	0x40000400
 8002468:	40000800 	.word	0x40000800
 800246c:	40000c00 	.word	0x40000c00
 8002470:	40010400 	.word	0x40010400
 8002474:	40014000 	.word	0x40014000
 8002478:	40014400 	.word	0x40014400
 800247c:	40014800 	.word	0x40014800
 8002480:	40001800 	.word	0x40001800
 8002484:	40001c00 	.word	0x40001c00
 8002488:	40002000 	.word	0x40002000

0800248c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f103 0208 	add.w	r2, r3, #8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024cc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f103 0208 	add.w	r2, r3, #8
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f103 0208 	add.w	r2, r3, #8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800250e:	b480      	push	{r7}
 8002510:	b085      	sub	sp, #20
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	601a      	str	r2, [r3, #0]
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800256c:	d103      	bne.n	8002576 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	e00c      	b.n	8002590 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3308      	adds	r3, #8
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e002      	b.n	8002584 <vListInsert+0x2e>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	429a      	cmp	r2, r3
 800258e:	d2f6      	bcs.n	800257e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	601a      	str	r2, [r3, #0]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6892      	ldr	r2, [r2, #8]
 80025de:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6852      	ldr	r2, [r2, #4]
 80025e8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d103      	bne.n	80025fc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	1e5a      	subs	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	; 0x30
 8002620:	af04      	add	r7, sp, #16
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4618      	mov	r0, r3
 8002632:	f001 f9fb 	bl	8003a2c <pvPortMalloc>
 8002636:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00e      	beq.n	800265c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800263e:	2058      	movs	r0, #88	; 0x58
 8002640:	f001 f9f4 	bl	8003a2c <pvPortMalloc>
 8002644:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
 8002652:	e005      	b.n	8002660 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002654:	6978      	ldr	r0, [r7, #20]
 8002656:	f001 fac9 	bl	8003bec <vPortFree>
 800265a:	e001      	b.n	8002660 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800265c:	2300      	movs	r3, #0
 800265e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d013      	beq.n	800268e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002666:	88fa      	ldrh	r2, [r7, #6]
 8002668:	2300      	movs	r3, #0
 800266a:	9303      	str	r3, [sp, #12]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	9302      	str	r3, [sp, #8]
 8002670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f80e 	bl	800269e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002682:	69f8      	ldr	r0, [r7, #28]
 8002684:	f000 f8a2 	bl	80027cc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002688:	2301      	movs	r3, #1
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	e002      	b.n	8002694 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002692:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002694:	69bb      	ldr	r3, [r7, #24]
    }
 8002696:	4618      	mov	r0, r3
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b088      	sub	sp, #32
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	461a      	mov	r2, r3
 80026b6:	21a5      	movs	r1, #165	; 0xa5
 80026b8:	f004 f8f8 	bl	80068ac <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80026bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026c6:	3b01      	subs	r3, #1
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	f023 0307 	bic.w	r3, r3, #7
 80026d4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	617b      	str	r3, [r7, #20]
    }
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01f      	beq.n	800273c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	e012      	b.n	8002728 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	4413      	add	r3, r2
 8002708:	7819      	ldrb	r1, [r3, #0]
 800270a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	4413      	add	r3, r2
 8002710:	3334      	adds	r3, #52	; 0x34
 8002712:	460a      	mov	r2, r1
 8002714:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3301      	adds	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b09      	cmp	r3, #9
 800272c:	d9e9      	bls.n	8002702 <prvInitialiseNewTask+0x64>
 800272e:	e000      	b.n	8002732 <prvInitialiseNewTask+0x94>
            {
                break;
 8002730:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800273a:	e003      	b.n	8002744 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002746:	2b04      	cmp	r3, #4
 8002748:	d901      	bls.n	800274e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800274a:	2304      	movs	r3, #4
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002758:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275c:	2200      	movs	r2, #0
 800275e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002762:	3304      	adds	r3, #4
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fec5 	bl	80024f4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276c:	3318      	adds	r3, #24
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fec0 	bl	80024f4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002778:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	f1c3 0205 	rsb	r2, r3, #5
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002788:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278c:	3350      	adds	r3, #80	; 0x50
 800278e:	2204      	movs	r2, #4
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f004 f88a 	bl	80068ac <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	3354      	adds	r3, #84	; 0x54
 800279c:	2201      	movs	r2, #1
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f004 f883 	bl	80068ac <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	68f9      	ldr	r1, [r7, #12]
 80027aa:	69b8      	ldr	r0, [r7, #24]
 80027ac:	f000 fe62 	bl	8003474 <pxPortInitialiseStack>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027c2:	bf00      	nop
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80027d4:	f000 fffe 	bl	80037d4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80027d8:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <prvAddNewTaskToReadyList+0xfc>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3301      	adds	r3, #1
 80027de:	4a3a      	ldr	r2, [pc, #232]	; (80028c8 <prvAddNewTaskToReadyList+0xfc>)
 80027e0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80027e2:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <prvAddNewTaskToReadyList+0x100>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80027ea:	4a38      	ldr	r2, [pc, #224]	; (80028cc <prvAddNewTaskToReadyList+0x100>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027f0:	4b35      	ldr	r3, [pc, #212]	; (80028c8 <prvAddNewTaskToReadyList+0xfc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d110      	bne.n	800281a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80027f8:	f000 fbb0 	bl	8002f5c <prvInitialiseTaskLists>
 80027fc:	e00d      	b.n	800281a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80027fe:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <prvAddNewTaskToReadyList+0x104>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002806:	4b31      	ldr	r3, [pc, #196]	; (80028cc <prvAddNewTaskToReadyList+0x100>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	429a      	cmp	r2, r3
 8002812:	d802      	bhi.n	800281a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002814:	4a2d      	ldr	r2, [pc, #180]	; (80028cc <prvAddNewTaskToReadyList+0x100>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800281a:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <prvAddNewTaskToReadyList+0x108>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	4a2c      	ldr	r2, [pc, #176]	; (80028d4 <prvAddNewTaskToReadyList+0x108>)
 8002822:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002824:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <prvAddNewTaskToReadyList+0x108>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d016      	beq.n	8002860 <prvAddNewTaskToReadyList+0x94>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	f003 fd3d 	bl	80062b4 <SEGGER_SYSVIEW_OnTaskCreate>
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	461d      	mov	r5, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461c      	mov	r4, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	1ae3      	subs	r3, r4, r3
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	462b      	mov	r3, r5
 800285c:	f001 fb94 	bl	8003f88 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4618      	mov	r0, r3
 8002864:	f003 fdaa 	bl	80063bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	2201      	movs	r2, #1
 800286e:	409a      	lsls	r2, r3
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <prvAddNewTaskToReadyList+0x10c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4313      	orrs	r3, r2
 8002876:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <prvAddNewTaskToReadyList+0x10c>)
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4a15      	ldr	r2, [pc, #84]	; (80028dc <prvAddNewTaskToReadyList+0x110>)
 8002888:	441a      	add	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3304      	adds	r3, #4
 800288e:	4619      	mov	r1, r3
 8002890:	4610      	mov	r0, r2
 8002892:	f7ff fe3c 	bl	800250e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002896:	f000 ffcd 	bl	8003834 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800289a:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <prvAddNewTaskToReadyList+0x104>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00e      	beq.n	80028c0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <prvAddNewTaskToReadyList+0x100>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d207      	bcs.n	80028c0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <prvAddNewTaskToReadyList+0x114>)
 80028b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bdb0      	pop	{r4, r5, r7, pc}
 80028c8:	20000170 	.word	0x20000170
 80028cc:	20000098 	.word	0x20000098
 80028d0:	2000017c 	.word	0x2000017c
 80028d4:	2000018c 	.word	0x2000018c
 80028d8:	20000178 	.word	0x20000178
 80028dc:	2000009c 	.word	0x2000009c
 80028e0:	e000ed04 	.word	0xe000ed04

080028e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80028ec:	f000 ff72 	bl	80037d4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d102      	bne.n	80028fc <vTaskDelete+0x18>
 80028f6:	4b46      	ldr	r3, [pc, #280]	; (8002a10 <vTaskDelete+0x12c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	e000      	b.n	80028fe <vTaskDelete+0x1a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3304      	adds	r3, #4
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fe5f 	bl	80025c8 <uxListRemove>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d115      	bne.n	800293c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002914:	493f      	ldr	r1, [pc, #252]	; (8002a14 <vTaskDelete+0x130>)
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <vTaskDelete+0x58>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	2201      	movs	r2, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43da      	mvns	r2, r3
 8002932:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <vTaskDelete+0x134>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4013      	ands	r3, r2
 8002938:	4a37      	ldr	r2, [pc, #220]	; (8002a18 <vTaskDelete+0x134>)
 800293a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	2b00      	cmp	r3, #0
 8002942:	d004      	beq.n	800294e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3318      	adds	r3, #24
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fe3d 	bl	80025c8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800294e:	4b33      	ldr	r3, [pc, #204]	; (8002a1c <vTaskDelete+0x138>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	4a31      	ldr	r2, [pc, #196]	; (8002a1c <vTaskDelete+0x138>)
 8002956:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002958:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <vTaskDelete+0x12c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	429a      	cmp	r2, r3
 8002960:	d118      	bne.n	8002994 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3304      	adds	r3, #4
 8002966:	4619      	mov	r1, r3
 8002968:	482d      	ldr	r0, [pc, #180]	; (8002a20 <vTaskDelete+0x13c>)
 800296a:	f7ff fdd0 	bl	800250e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <vTaskDelete+0x140>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3301      	adds	r3, #1
 8002974:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <vTaskDelete+0x140>)
 8002976:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4618      	mov	r0, r3
 800297c:	f003 fdc0 	bl	8006500 <SEGGER_SYSVIEW_ShrinkId>
 8002980:	4603      	mov	r3, r0
 8002982:	4619      	mov	r1, r3
 8002984:	2022      	movs	r0, #34	; 0x22
 8002986:	f003 f80d 	bl	80059a4 <SEGGER_SYSVIEW_RecordU32>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4618      	mov	r0, r3
 800298e:	f001 fb63 	bl	8004058 <SYSVIEW_DeleteTask>
 8002992:	e016      	b.n	80029c2 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002994:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <vTaskDelete+0x144>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3b01      	subs	r3, #1
 800299a:	4a23      	ldr	r2, [pc, #140]	; (8002a28 <vTaskDelete+0x144>)
 800299c:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f003 fdad 	bl	8006500 <SEGGER_SYSVIEW_ShrinkId>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4619      	mov	r1, r3
 80029aa:	2022      	movs	r0, #34	; 0x22
 80029ac:	f002 fffa 	bl	80059a4 <SEGGER_SYSVIEW_RecordU32>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 fb50 	bl	8004058 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fb3d 	bl	8003038 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80029be:	f000 fb4b 	bl	8003058 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80029c2:	f000 ff37 	bl	8003834 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80029c6:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <vTaskDelete+0x148>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d01b      	beq.n	8002a06 <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <vTaskDelete+0x12c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d116      	bne.n	8002a06 <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <vTaskDelete+0x14c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <vTaskDelete+0x112>
        __asm volatile
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	60bb      	str	r3, [r7, #8]
    }
 80029f2:	bf00      	nop
 80029f4:	e7fe      	b.n	80029f4 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <vTaskDelete+0x150>)
 80029f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000098 	.word	0x20000098
 8002a14:	2000009c 	.word	0x2000009c
 8002a18:	20000178 	.word	0x20000178
 8002a1c:	2000018c 	.word	0x2000018c
 8002a20:	20000144 	.word	0x20000144
 8002a24:	20000158 	.word	0x20000158
 8002a28:	20000170 	.word	0x20000170
 8002a2c:	2000017c 	.word	0x2000017c
 8002a30:	20000198 	.word	0x20000198
 8002a34:	e000ed04 	.word	0xe000ed04

08002a38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d01b      	beq.n	8002a82 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <vTaskDelay+0x68>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <vTaskDelay+0x30>
        __asm volatile
 8002a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a56:	f383 8811 	msr	BASEPRI, r3
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	f3bf 8f4f 	dsb	sy
 8002a62:	60bb      	str	r3, [r7, #8]
    }
 8002a64:	bf00      	nop
 8002a66:	e7fe      	b.n	8002a66 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002a68:	f000 f87a 	bl	8002b60 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	2023      	movs	r0, #35	; 0x23
 8002a70:	f002 ff98 	bl	80059a4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a74:	2100      	movs	r1, #0
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fc84 	bl	8003384 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002a7c:	f000 f87e 	bl	8002b7c <xTaskResumeAll>
 8002a80:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d107      	bne.n	8002a98 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <vTaskDelay+0x6c>)
 8002a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20000198 	.word	0x20000198
 8002aa4:	e000ed04 	.word	0xe000ed04

08002aa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <vTaskStartScheduler+0x98>)
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2282      	movs	r2, #130	; 0x82
 8002aba:	4922      	ldr	r1, [pc, #136]	; (8002b44 <vTaskStartScheduler+0x9c>)
 8002abc:	4822      	ldr	r0, [pc, #136]	; (8002b48 <vTaskStartScheduler+0xa0>)
 8002abe:	f7ff fdad 	bl	800261c <xTaskCreate>
 8002ac2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d124      	bne.n	8002b14 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	60bb      	str	r3, [r7, #8]
    }
 8002adc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <vTaskStartScheduler+0xa4>)
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ae4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <vTaskStartScheduler+0xa8>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <vTaskStartScheduler+0xac>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002af2:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <vTaskStartScheduler+0xb0>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <vTaskStartScheduler+0x98>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d102      	bne.n	8002b04 <vTaskStartScheduler+0x5c>
 8002afe:	f003 fbbd 	bl	800627c <SEGGER_SYSVIEW_OnIdle>
 8002b02:	e004      	b.n	8002b0e <vTaskStartScheduler+0x66>
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <vTaskStartScheduler+0xb0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f003 fc15 	bl	8006338 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002b0e:	f000 fd41 	bl	8003594 <xPortStartScheduler>
 8002b12:	e00e      	b.n	8002b32 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b1a:	d10a      	bne.n	8002b32 <vTaskStartScheduler+0x8a>
        __asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	607b      	str	r3, [r7, #4]
    }
 8002b2e:	bf00      	nop
 8002b30:	e7fe      	b.n	8002b30 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <vTaskStartScheduler+0xb4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000194 	.word	0x20000194
 8002b44:	080069cc 	.word	0x080069cc
 8002b48:	08002f2d 	.word	0x08002f2d
 8002b4c:	20000190 	.word	0x20000190
 8002b50:	2000017c 	.word	0x2000017c
 8002b54:	20000174 	.word	0x20000174
 8002b58:	20000098 	.word	0x20000098
 8002b5c:	2000000c 	.word	0x2000000c

08002b60 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <vTaskSuspendAll+0x18>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	4a03      	ldr	r2, [pc, #12]	; (8002b78 <vTaskSuspendAll+0x18>)
 8002b6c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	20000198 	.word	0x20000198

08002b7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b8a:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <xTaskResumeAll+0x11c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <xTaskResumeAll+0x2c>
        __asm volatile
 8002b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	603b      	str	r3, [r7, #0]
    }
 8002ba4:	bf00      	nop
 8002ba6:	e7fe      	b.n	8002ba6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002ba8:	f000 fe14 	bl	80037d4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002bac:	4b3a      	ldr	r3, [pc, #232]	; (8002c98 <xTaskResumeAll+0x11c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	4a39      	ldr	r2, [pc, #228]	; (8002c98 <xTaskResumeAll+0x11c>)
 8002bb4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bb6:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <xTaskResumeAll+0x11c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d165      	bne.n	8002c8a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bbe:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <xTaskResumeAll+0x120>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d061      	beq.n	8002c8a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bc6:	e032      	b.n	8002c2e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bc8:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <xTaskResumeAll+0x124>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3318      	adds	r3, #24
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fcf7 	bl	80025c8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fcf2 	bl	80025c8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 fbe8 	bl	80063bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <xTaskResumeAll+0x128>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	4a2a      	ldr	r2, [pc, #168]	; (8002ca4 <xTaskResumeAll+0x128>)
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4a27      	ldr	r2, [pc, #156]	; (8002ca8 <xTaskResumeAll+0x12c>)
 8002c0c:	441a      	add	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3304      	adds	r3, #4
 8002c12:	4619      	mov	r1, r3
 8002c14:	4610      	mov	r0, r2
 8002c16:	f7ff fc7a 	bl	800250e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1e:	4b23      	ldr	r3, [pc, #140]	; (8002cac <xTaskResumeAll+0x130>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d302      	bcc.n	8002c2e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002c28:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <xTaskResumeAll+0x134>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <xTaskResumeAll+0x124>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1c8      	bne.n	8002bc8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002c3c:	f000 fa0c 	bl	8003058 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c40:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <xTaskResumeAll+0x138>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d010      	beq.n	8002c6e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002c4c:	f000 f848 	bl	8002ce0 <xTaskIncrementTick>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002c56:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <xTaskResumeAll+0x134>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f1      	bne.n	8002c4c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002c68:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <xTaskResumeAll+0x138>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <xTaskResumeAll+0x134>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002c76:	2301      	movs	r3, #1
 8002c78:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <xTaskResumeAll+0x13c>)
 8002c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c8a:	f000 fdd3 	bl	8003834 <vPortExitCritical>

    return xAlreadyYielded;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000198 	.word	0x20000198
 8002c9c:	20000170 	.word	0x20000170
 8002ca0:	20000130 	.word	0x20000130
 8002ca4:	20000178 	.word	0x20000178
 8002ca8:	2000009c 	.word	0x2000009c
 8002cac:	20000098 	.word	0x20000098
 8002cb0:	20000184 	.word	0x20000184
 8002cb4:	20000180 	.word	0x20000180
 8002cb8:	e000ed04 	.word	0xe000ed04

08002cbc <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cc2:	f000 fe73 	bl	80039ac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002cca:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <xTaskGetTickCountFromISR+0x20>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002cd0:	683b      	ldr	r3, [r7, #0]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000174 	.word	0x20000174

08002ce0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cea:	4b50      	ldr	r3, [pc, #320]	; (8002e2c <xTaskIncrementTick+0x14c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 8092 	bne.w	8002e18 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cf4:	4b4e      	ldr	r3, [pc, #312]	; (8002e30 <xTaskIncrementTick+0x150>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002cfc:	4a4c      	ldr	r2, [pc, #304]	; (8002e30 <xTaskIncrementTick+0x150>)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d120      	bne.n	8002d4a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d08:	4b4a      	ldr	r3, [pc, #296]	; (8002e34 <xTaskIncrementTick+0x154>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <xTaskIncrementTick+0x48>
        __asm volatile
 8002d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	603b      	str	r3, [r7, #0]
    }
 8002d24:	bf00      	nop
 8002d26:	e7fe      	b.n	8002d26 <xTaskIncrementTick+0x46>
 8002d28:	4b42      	ldr	r3, [pc, #264]	; (8002e34 <xTaskIncrementTick+0x154>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b42      	ldr	r3, [pc, #264]	; (8002e38 <xTaskIncrementTick+0x158>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a40      	ldr	r2, [pc, #256]	; (8002e34 <xTaskIncrementTick+0x154>)
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	4a40      	ldr	r2, [pc, #256]	; (8002e38 <xTaskIncrementTick+0x158>)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b3f      	ldr	r3, [pc, #252]	; (8002e3c <xTaskIncrementTick+0x15c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	4a3e      	ldr	r2, [pc, #248]	; (8002e3c <xTaskIncrementTick+0x15c>)
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	f000 f987 	bl	8003058 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d4a:	4b3d      	ldr	r3, [pc, #244]	; (8002e40 <xTaskIncrementTick+0x160>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d34c      	bcc.n	8002dee <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d54:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <xTaskIncrementTick+0x154>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d104      	bne.n	8002d68 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d5e:	4b38      	ldr	r3, [pc, #224]	; (8002e40 <xTaskIncrementTick+0x160>)
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d64:	601a      	str	r2, [r3, #0]
                    break;
 8002d66:	e042      	b.n	8002dee <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d68:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <xTaskIncrementTick+0x154>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d203      	bcs.n	8002d88 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d80:	4a2f      	ldr	r2, [pc, #188]	; (8002e40 <xTaskIncrementTick+0x160>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d86:	e032      	b.n	8002dee <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fc1b 	bl	80025c8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	3318      	adds	r3, #24
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fc12 	bl	80025c8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 fb08 	bl	80063bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	2201      	movs	r2, #1
 8002db2:	409a      	lsls	r2, r3
 8002db4:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <xTaskIncrementTick+0x164>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <xTaskIncrementTick+0x164>)
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <xTaskIncrementTick+0x168>)
 8002dcc:	441a      	add	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f7ff fb9a 	bl	800250e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dde:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <xTaskIncrementTick+0x16c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d3b5      	bcc.n	8002d54 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002de8:	2301      	movs	r3, #1
 8002dea:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dec:	e7b2      	b.n	8002d54 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002dee:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <xTaskIncrementTick+0x16c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	4914      	ldr	r1, [pc, #80]	; (8002e48 <xTaskIncrementTick+0x168>)
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d901      	bls.n	8002e0a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002e06:	2301      	movs	r3, #1
 8002e08:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002e0a:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <xTaskIncrementTick+0x170>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002e12:	2301      	movs	r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	e004      	b.n	8002e22 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <xTaskIncrementTick+0x174>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	4a0d      	ldr	r2, [pc, #52]	; (8002e54 <xTaskIncrementTick+0x174>)
 8002e20:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002e22:	697b      	ldr	r3, [r7, #20]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000198 	.word	0x20000198
 8002e30:	20000174 	.word	0x20000174
 8002e34:	20000128 	.word	0x20000128
 8002e38:	2000012c 	.word	0x2000012c
 8002e3c:	20000188 	.word	0x20000188
 8002e40:	20000190 	.word	0x20000190
 8002e44:	20000178 	.word	0x20000178
 8002e48:	2000009c 	.word	0x2000009c
 8002e4c:	20000098 	.word	0x20000098
 8002e50:	20000184 	.word	0x20000184
 8002e54:	20000180 	.word	0x20000180

08002e58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e5e:	4b2d      	ldr	r3, [pc, #180]	; (8002f14 <vTaskSwitchContext+0xbc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002e66:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <vTaskSwitchContext+0xc0>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002e6c:	e04d      	b.n	8002f0a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002e6e:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <vTaskSwitchContext+0xc0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e74:	4b29      	ldr	r3, [pc, #164]	; (8002f1c <vTaskSwitchContext+0xc4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	f1c3 031f 	rsb	r3, r3, #31
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	4925      	ldr	r1, [pc, #148]	; (8002f20 <vTaskSwitchContext+0xc8>)
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10a      	bne.n	8002eb4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	607b      	str	r3, [r7, #4]
    }
 8002eb0:	bf00      	nop
 8002eb2:	e7fe      	b.n	8002eb2 <vTaskSwitchContext+0x5a>
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4a18      	ldr	r2, [pc, #96]	; (8002f20 <vTaskSwitchContext+0xc8>)
 8002ec0:	4413      	add	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d104      	bne.n	8002ee4 <vTaskSwitchContext+0x8c>
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	605a      	str	r2, [r3, #4]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4a0e      	ldr	r2, [pc, #56]	; (8002f24 <vTaskSwitchContext+0xcc>)
 8002eec:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <vTaskSwitchContext+0xcc>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <vTaskSwitchContext+0xd0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d102      	bne.n	8002f00 <vTaskSwitchContext+0xa8>
 8002efa:	f003 f9bf 	bl	800627c <SEGGER_SYSVIEW_OnIdle>
}
 8002efe:	e004      	b.n	8002f0a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <vTaskSwitchContext+0xcc>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 fa17 	bl	8006338 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002f0a:	bf00      	nop
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000198 	.word	0x20000198
 8002f18:	20000184 	.word	0x20000184
 8002f1c:	20000178 	.word	0x20000178
 8002f20:	2000009c 	.word	0x2000009c
 8002f24:	20000098 	.word	0x20000098
 8002f28:	20000194 	.word	0x20000194

08002f2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002f34:	f000 f852 	bl	8002fdc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <prvIdleTask+0x28>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d9f9      	bls.n	8002f34 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <prvIdleTask+0x2c>)
 8002f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002f50:	e7f0      	b.n	8002f34 <prvIdleTask+0x8>
 8002f52:	bf00      	nop
 8002f54:	2000009c 	.word	0x2000009c
 8002f58:	e000ed04 	.word	0xe000ed04

08002f5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
 8002f66:	e00c      	b.n	8002f82 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <prvInitialiseTaskLists+0x60>)
 8002f74:	4413      	add	r3, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fa9c 	bl	80024b4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d9ef      	bls.n	8002f68 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002f88:	480d      	ldr	r0, [pc, #52]	; (8002fc0 <prvInitialiseTaskLists+0x64>)
 8002f8a:	f7ff fa93 	bl	80024b4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002f8e:	480d      	ldr	r0, [pc, #52]	; (8002fc4 <prvInitialiseTaskLists+0x68>)
 8002f90:	f7ff fa90 	bl	80024b4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002f94:	480c      	ldr	r0, [pc, #48]	; (8002fc8 <prvInitialiseTaskLists+0x6c>)
 8002f96:	f7ff fa8d 	bl	80024b4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002f9a:	480c      	ldr	r0, [pc, #48]	; (8002fcc <prvInitialiseTaskLists+0x70>)
 8002f9c:	f7ff fa8a 	bl	80024b4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002fa0:	480b      	ldr	r0, [pc, #44]	; (8002fd0 <prvInitialiseTaskLists+0x74>)
 8002fa2:	f7ff fa87 	bl	80024b4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <prvInitialiseTaskLists+0x78>)
 8002fa8:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <prvInitialiseTaskLists+0x64>)
 8002faa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <prvInitialiseTaskLists+0x7c>)
 8002fae:	4a05      	ldr	r2, [pc, #20]	; (8002fc4 <prvInitialiseTaskLists+0x68>)
 8002fb0:	601a      	str	r2, [r3, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	2000009c 	.word	0x2000009c
 8002fc0:	20000100 	.word	0x20000100
 8002fc4:	20000114 	.word	0x20000114
 8002fc8:	20000130 	.word	0x20000130
 8002fcc:	20000144 	.word	0x20000144
 8002fd0:	2000015c 	.word	0x2000015c
 8002fd4:	20000128 	.word	0x20000128
 8002fd8:	2000012c 	.word	0x2000012c

08002fdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fe2:	e019      	b.n	8003018 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002fe4:	f000 fbf6 	bl	80037d4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fe8:	4b10      	ldr	r3, [pc, #64]	; (800302c <prvCheckTasksWaitingTermination+0x50>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fae7 	bl	80025c8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <prvCheckTasksWaitingTermination+0x54>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	4a0b      	ldr	r2, [pc, #44]	; (8003030 <prvCheckTasksWaitingTermination+0x54>)
 8003002:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <prvCheckTasksWaitingTermination+0x58>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3b01      	subs	r3, #1
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <prvCheckTasksWaitingTermination+0x58>)
 800300c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800300e:	f000 fc11 	bl	8003834 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f810 	bl	8003038 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <prvCheckTasksWaitingTermination+0x58>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e1      	bne.n	8002fe4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000144 	.word	0x20000144
 8003030:	20000170 	.word	0x20000170
 8003034:	20000158 	.word	0x20000158

08003038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fdd1 	bl	8003bec <vPortFree>
                vPortFree( pxTCB );
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fdce 	bl	8003bec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <prvResetNextTaskUnblockTime+0x30>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d104      	bne.n	8003070 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <prvResetNextTaskUnblockTime+0x34>)
 8003068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800306c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800306e:	e005      	b.n	800307c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <prvResetNextTaskUnblockTime+0x30>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a04      	ldr	r2, [pc, #16]	; (800308c <prvResetNextTaskUnblockTime+0x34>)
 800307a:	6013      	str	r3, [r2, #0]
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000128 	.word	0x20000128
 800308c:	20000190 	.word	0x20000190

08003090 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af02      	add	r7, sp, #8
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80030a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	613b      	str	r3, [r7, #16]
    }
 80030b6:	bf00      	nop
 80030b8:	e7fe      	b.n	80030b8 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80030ba:	f000 fb8b 	bl	80037d4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80030be:	4b36      	ldr	r3, [pc, #216]	; (8003198 <xTaskGenericNotifyWait+0x108>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	3354      	adds	r3, #84	; 0x54
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d022      	beq.n	8003116 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80030d0:	4b31      	ldr	r3, [pc, #196]	; (8003198 <xTaskGenericNotifyWait+0x108>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	3214      	adds	r2, #20
 80030d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	43d2      	mvns	r2, r2
 80030e0:	4011      	ands	r1, r2
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	3214      	adds	r2, #20
 80030e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80030ea:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <xTaskGenericNotifyWait+0x108>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4413      	add	r3, r2
 80030f2:	3354      	adds	r3, #84	; 0x54
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030fe:	2101      	movs	r1, #1
 8003100:	6a38      	ldr	r0, [r7, #32]
 8003102:	f000 f93f 	bl	8003384 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003106:	4b25      	ldr	r3, [pc, #148]	; (800319c <xTaskGenericNotifyWait+0x10c>)
 8003108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003116:	f000 fb8d 	bl	8003834 <vPortExitCritical>

        taskENTER_CRITICAL();
 800311a:	f000 fb5b 	bl	80037d4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	2040      	movs	r0, #64	; 0x40
 800312c:	f002 fcd0 	bl	8005ad0 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003136:	4b18      	ldr	r3, [pc, #96]	; (8003198 <xTaskGenericNotifyWait+0x108>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	3214      	adds	r2, #20
 800313e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <xTaskGenericNotifyWait+0x108>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4413      	add	r3, r2
 800314e:	3354      	adds	r3, #84	; 0x54
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d002      	beq.n	800315e <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	e00e      	b.n	800317c <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <xTaskGenericNotifyWait+0x108>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	3214      	adds	r2, #20
 8003166:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	43d2      	mvns	r2, r2
 800316e:	4011      	ands	r1, r2
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	3214      	adds	r2, #20
 8003174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003178:	2301      	movs	r3, #1
 800317a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <xTaskGenericNotifyWait+0x108>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	3354      	adds	r3, #84	; 0x54
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800318a:	f000 fb53 	bl	8003834 <vPortExitCritical>

        return xReturn;
 800318e:	697b      	ldr	r3, [r7, #20]
    }
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20000098 	.word	0x20000098
 800319c:	e000ed04 	.word	0xe000ed04

080031a0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08e      	sub	sp, #56	; 0x38
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80031ae:	2301      	movs	r3, #1
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <xTaskGenericNotify+0x2e>
        __asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	623b      	str	r3, [r7, #32]
    }
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <xTaskGenericNotify+0x4a>
        __asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	61fb      	str	r3, [r7, #28]
    }
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80031ee:	f000 faf1 	bl	80037d4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80031f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d006      	beq.n	8003206 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	3214      	adds	r2, #20
 80031fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4413      	add	r3, r2
 800320c:	3354      	adds	r3, #84	; 0x54
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4413      	add	r3, r2
 800321a:	3354      	adds	r3, #84	; 0x54
 800321c:	2202      	movs	r2, #2
 800321e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	2b04      	cmp	r3, #4
 8003224:	d83b      	bhi.n	800329e <xTaskGenericNotify+0xfe>
 8003226:	a201      	add	r2, pc, #4	; (adr r2, 800322c <xTaskGenericNotify+0x8c>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	080032bd 	.word	0x080032bd
 8003230:	08003241 	.word	0x08003241
 8003234:	0800325d 	.word	0x0800325d
 8003238:	08003275 	.word	0x08003275
 800323c:	08003283 	.word	0x08003283
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	3214      	adds	r2, #20
 8003246:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	ea42 0103 	orr.w	r1, r2, r3
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	3214      	adds	r2, #20
 8003256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800325a:	e032      	b.n	80032c2 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	3214      	adds	r2, #20
 8003262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003266:	1c59      	adds	r1, r3, #1
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	3214      	adds	r2, #20
 800326e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003272:	e026      	b.n	80032c2 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	3214      	adds	r2, #20
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003280:	e01f      	b.n	80032c2 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003286:	2b02      	cmp	r3, #2
 8003288:	d006      	beq.n	8003298 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	3214      	adds	r2, #20
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003296:	e014      	b.n	80032c2 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003298:	2300      	movs	r3, #0
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800329c:	e011      	b.n	80032c2 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800329e:	4b34      	ldr	r3, [pc, #208]	; (8003370 <xTaskGenericNotify+0x1d0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <xTaskGenericNotify+0x120>
        __asm volatile
 80032a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032aa:	f383 8811 	msr	BASEPRI, r3
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	61bb      	str	r3, [r7, #24]
    }
 80032b8:	bf00      	nop
 80032ba:	e7fe      	b.n	80032ba <xTaskGenericNotify+0x11a>
                    break;
 80032bc:	bf00      	nop
 80032be:	e000      	b.n	80032c2 <xTaskGenericNotify+0x122>

                    break;
 80032c0:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 80032c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c4:	4618      	mov	r0, r3
 80032c6:	f003 f91b 	bl	8006500 <SEGGER_SYSVIEW_ShrinkId>
 80032ca:	4601      	mov	r1, r0
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	203e      	movs	r0, #62	; 0x3e
 80032d8:	f002 fbfa 	bl	8005ad0 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80032dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d13d      	bne.n	8003360 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	3304      	adds	r3, #4
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff f96d 	bl	80025c8 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f0:	4618      	mov	r0, r3
 80032f2:	f003 f863 	bl	80063bc <SEGGER_SYSVIEW_OnTaskStartReady>
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	2201      	movs	r2, #1
 80032fc:	409a      	lsls	r2, r3
 80032fe:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <xTaskGenericNotify+0x1d4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4313      	orrs	r3, r2
 8003304:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <xTaskGenericNotify+0x1d4>)
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4a18      	ldr	r2, [pc, #96]	; (8003378 <xTaskGenericNotify+0x1d8>)
 8003316:	441a      	add	r2, r3
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	3304      	adds	r3, #4
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f7ff f8f5 	bl	800250e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <xTaskGenericNotify+0x1a2>
        __asm volatile
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	617b      	str	r3, [r7, #20]
    }
 800333e:	bf00      	nop
 8003340:	e7fe      	b.n	8003340 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003346:	4b0d      	ldr	r3, [pc, #52]	; (800337c <xTaskGenericNotify+0x1dc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	429a      	cmp	r2, r3
 800334e:	d907      	bls.n	8003360 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <xTaskGenericNotify+0x1e0>)
 8003352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003360:	f000 fa68 	bl	8003834 <vPortExitCritical>

        return xReturn;
 8003364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003366:	4618      	mov	r0, r3
 8003368:	3730      	adds	r7, #48	; 0x30
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000174 	.word	0x20000174
 8003374:	20000178 	.word	0x20000178
 8003378:	2000009c 	.word	0x2000009c
 800337c:	20000098 	.word	0x20000098
 8003380:	e000ed04 	.word	0xe000ed04

08003384 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800338e:	4b32      	ldr	r3, [pc, #200]	; (8003458 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003394:	4b31      	ldr	r3, [pc, #196]	; (800345c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3304      	adds	r3, #4
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff f914 	bl	80025c8 <uxListRemove>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033a6:	4b2d      	ldr	r3, [pc, #180]	; (800345c <prvAddCurrentTaskToDelayedList+0xd8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	2201      	movs	r2, #1
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43da      	mvns	r2, r3
 80033b4:	4b2a      	ldr	r3, [pc, #168]	; (8003460 <prvAddCurrentTaskToDelayedList+0xdc>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4013      	ands	r3, r2
 80033ba:	4a29      	ldr	r2, [pc, #164]	; (8003460 <prvAddCurrentTaskToDelayedList+0xdc>)
 80033bc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033c4:	d110      	bne.n	80033e8 <prvAddCurrentTaskToDelayedList+0x64>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00d      	beq.n	80033e8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80033cc:	4b23      	ldr	r3, [pc, #140]	; (800345c <prvAddCurrentTaskToDelayedList+0xd8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	211b      	movs	r1, #27
 80033d2:	4618      	mov	r0, r3
 80033d4:	f003 f834 	bl	8006440 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d8:	4b20      	ldr	r3, [pc, #128]	; (800345c <prvAddCurrentTaskToDelayedList+0xd8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3304      	adds	r3, #4
 80033de:	4619      	mov	r1, r3
 80033e0:	4820      	ldr	r0, [pc, #128]	; (8003464 <prvAddCurrentTaskToDelayedList+0xe0>)
 80033e2:	f7ff f894 	bl	800250e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80033e6:	e032      	b.n	800344e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033f0:	4b1a      	ldr	r3, [pc, #104]	; (800345c <prvAddCurrentTaskToDelayedList+0xd8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d20f      	bcs.n	8003420 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003400:	4b16      	ldr	r3, [pc, #88]	; (800345c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2104      	movs	r1, #4
 8003406:	4618      	mov	r0, r3
 8003408:	f003 f81a 	bl	8006440 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800340c:	4b16      	ldr	r3, [pc, #88]	; (8003468 <prvAddCurrentTaskToDelayedList+0xe4>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b12      	ldr	r3, [pc, #72]	; (800345c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3304      	adds	r3, #4
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f7ff f89c 	bl	8002556 <vListInsert>
}
 800341e:	e016      	b.n	800344e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003420:	4b0e      	ldr	r3, [pc, #56]	; (800345c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2104      	movs	r1, #4
 8003426:	4618      	mov	r0, r3
 8003428:	f003 f80a 	bl	8006440 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <prvAddCurrentTaskToDelayedList+0xe8>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b0a      	ldr	r3, [pc, #40]	; (800345c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3304      	adds	r3, #4
 8003436:	4619      	mov	r1, r3
 8003438:	4610      	mov	r0, r2
 800343a:	f7ff f88c 	bl	8002556 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800343e:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <prvAddCurrentTaskToDelayedList+0xec>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	429a      	cmp	r2, r3
 8003446:	d202      	bcs.n	800344e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003448:	4a09      	ldr	r2, [pc, #36]	; (8003470 <prvAddCurrentTaskToDelayedList+0xec>)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	6013      	str	r3, [r2, #0]
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000174 	.word	0x20000174
 800345c:	20000098 	.word	0x20000098
 8003460:	20000178 	.word	0x20000178
 8003464:	2000015c 	.word	0x2000015c
 8003468:	2000012c 	.word	0x2000012c
 800346c:	20000128 	.word	0x20000128
 8003470:	20000190 	.word	0x20000190

08003474 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3b04      	subs	r3, #4
 8003484:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800348c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3b04      	subs	r3, #4
 8003492:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f023 0201 	bic.w	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3b04      	subs	r3, #4
 80034a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80034a4:	4a0c      	ldr	r2, [pc, #48]	; (80034d8 <pxPortInitialiseStack+0x64>)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3b14      	subs	r3, #20
 80034ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3b04      	subs	r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f06f 0202 	mvn.w	r2, #2
 80034c2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3b20      	subs	r3, #32
 80034c8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80034ca:	68fb      	ldr	r3, [r7, #12]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	080034dd 	.word	0x080034dd

080034dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80034e6:	4b12      	ldr	r3, [pc, #72]	; (8003530 <prvTaskExitError+0x54>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ee:	d00a      	beq.n	8003506 <prvTaskExitError+0x2a>
        __asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	60fb      	str	r3, [r7, #12]
    }
 8003502:	bf00      	nop
 8003504:	e7fe      	b.n	8003504 <prvTaskExitError+0x28>
        __asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	60bb      	str	r3, [r7, #8]
    }
 8003518:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800351a:	bf00      	nop
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0fc      	beq.n	800351c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	20000010 	.word	0x20000010
	...

08003540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003540:	4b07      	ldr	r3, [pc, #28]	; (8003560 <pxCurrentTCBConst2>)
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	6808      	ldr	r0, [r1, #0]
 8003546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800354a:	f380 8809 	msr	PSP, r0
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f380 8811 	msr	BASEPRI, r0
 800355a:	4770      	bx	lr
 800355c:	f3af 8000 	nop.w

08003560 <pxCurrentTCBConst2>:
 8003560:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop

08003568 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003568:	4808      	ldr	r0, [pc, #32]	; (800358c <prvPortStartFirstTask+0x24>)
 800356a:	6800      	ldr	r0, [r0, #0]
 800356c:	6800      	ldr	r0, [r0, #0]
 800356e:	f380 8808 	msr	MSP, r0
 8003572:	f04f 0000 	mov.w	r0, #0
 8003576:	f380 8814 	msr	CONTROL, r0
 800357a:	b662      	cpsie	i
 800357c:	b661      	cpsie	f
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	df00      	svc	0
 8003588:	bf00      	nop
 800358a:	0000      	.short	0x0000
 800358c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop

08003594 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800359a:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <xPortStartScheduler+0x120>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a46      	ldr	r2, [pc, #280]	; (80036b8 <xPortStartScheduler+0x124>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d10a      	bne.n	80035ba <xPortStartScheduler+0x26>
        __asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	613b      	str	r3, [r7, #16]
    }
 80035b6:	bf00      	nop
 80035b8:	e7fe      	b.n	80035b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80035ba:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <xPortStartScheduler+0x120>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a3f      	ldr	r2, [pc, #252]	; (80036bc <xPortStartScheduler+0x128>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10a      	bne.n	80035da <xPortStartScheduler+0x46>
        __asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	60fb      	str	r3, [r7, #12]
    }
 80035d6:	bf00      	nop
 80035d8:	e7fe      	b.n	80035d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035da:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <xPortStartScheduler+0x12c>)
 80035dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	22ff      	movs	r2, #255	; 0xff
 80035ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <xPortStartScheduler+0x130>)
 8003600:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003602:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <xPortStartScheduler+0x134>)
 8003604:	2207      	movs	r2, #7
 8003606:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003608:	e009      	b.n	800361e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800360a:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <xPortStartScheduler+0x134>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3b01      	subs	r3, #1
 8003610:	4a2d      	ldr	r2, [pc, #180]	; (80036c8 <xPortStartScheduler+0x134>)
 8003612:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	b2db      	uxtb	r3, r3
 800361c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	d0ef      	beq.n	800360a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800362a:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <xPortStartScheduler+0x134>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f1c3 0307 	rsb	r3, r3, #7
 8003632:	2b04      	cmp	r3, #4
 8003634:	d00a      	beq.n	800364c <xPortStartScheduler+0xb8>
        __asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	60bb      	str	r3, [r7, #8]
    }
 8003648:	bf00      	nop
 800364a:	e7fe      	b.n	800364a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800364c:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <xPortStartScheduler+0x134>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <xPortStartScheduler+0x134>)
 8003654:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003656:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <xPortStartScheduler+0x134>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800365e:	4a1a      	ldr	r2, [pc, #104]	; (80036c8 <xPortStartScheduler+0x134>)
 8003660:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800366a:	4b18      	ldr	r3, [pc, #96]	; (80036cc <xPortStartScheduler+0x138>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a17      	ldr	r2, [pc, #92]	; (80036cc <xPortStartScheduler+0x138>)
 8003670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003674:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003676:	4b15      	ldr	r3, [pc, #84]	; (80036cc <xPortStartScheduler+0x138>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a14      	ldr	r2, [pc, #80]	; (80036cc <xPortStartScheduler+0x138>)
 800367c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003680:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003682:	f000 f963 	bl	800394c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003686:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <xPortStartScheduler+0x13c>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800368c:	f000 f982 	bl	8003994 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <xPortStartScheduler+0x140>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0f      	ldr	r2, [pc, #60]	; (80036d4 <xPortStartScheduler+0x140>)
 8003696:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800369a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800369c:	f7ff ff64 	bl	8003568 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80036a0:	f7ff fbda 	bl	8002e58 <vTaskSwitchContext>
    prvTaskExitError();
 80036a4:	f7ff ff1a 	bl	80034dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	e000ed00 	.word	0xe000ed00
 80036b8:	410fc271 	.word	0x410fc271
 80036bc:	410fc270 	.word	0x410fc270
 80036c0:	e000e400 	.word	0xe000e400
 80036c4:	2000019c 	.word	0x2000019c
 80036c8:	200001a0 	.word	0x200001a0
 80036cc:	e000ed20 	.word	0xe000ed20
 80036d0:	20000010 	.word	0x20000010
 80036d4:	e000ef34 	.word	0xe000ef34

080036d8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80036de:	4b37      	ldr	r3, [pc, #220]	; (80037bc <vInitPrioGroupValue+0xe4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a37      	ldr	r2, [pc, #220]	; (80037c0 <vInitPrioGroupValue+0xe8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d10a      	bne.n	80036fe <vInitPrioGroupValue+0x26>
        __asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	613b      	str	r3, [r7, #16]
    }
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80036fe:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <vInitPrioGroupValue+0xe4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a30      	ldr	r2, [pc, #192]	; (80037c4 <vInitPrioGroupValue+0xec>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d10a      	bne.n	800371e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	60fb      	str	r3, [r7, #12]
    }
 800371a:	bf00      	nop
 800371c:	e7fe      	b.n	800371c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800371e:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <vInitPrioGroupValue+0xf0>)
 8003720:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	22ff      	movs	r2, #255	; 0xff
 800372e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4b22      	ldr	r3, [pc, #136]	; (80037cc <vInitPrioGroupValue+0xf4>)
 8003744:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003746:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 8003748:	2207      	movs	r2, #7
 800374a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800374c:	e009      	b.n	8003762 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3b01      	subs	r3, #1
 8003754:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 8003756:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376a:	2b80      	cmp	r3, #128	; 0x80
 800376c:	d0ef      	beq.n	800374e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800376e:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f1c3 0307 	rsb	r3, r3, #7
 8003776:	2b04      	cmp	r3, #4
 8003778:	d00a      	beq.n	8003790 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	60bb      	str	r3, [r7, #8]
    }
 800378c:	bf00      	nop
 800378e:	e7fe      	b.n	800378e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	4a0e      	ldr	r2, [pc, #56]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 8003798:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800379a:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037a2:	4a0b      	ldr	r2, [pc, #44]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 80037a4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	e000ed00 	.word	0xe000ed00
 80037c0:	410fc271 	.word	0x410fc271
 80037c4:	410fc270 	.word	0x410fc270
 80037c8:	e000e400 	.word	0xe000e400
 80037cc:	2000019c 	.word	0x2000019c
 80037d0:	200001a0 	.word	0x200001a0

080037d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
        __asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	607b      	str	r3, [r7, #4]
    }
 80037ec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80037ee:	4b0f      	ldr	r3, [pc, #60]	; (800382c <vPortEnterCritical+0x58>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	4a0d      	ldr	r2, [pc, #52]	; (800382c <vPortEnterCritical+0x58>)
 80037f6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <vPortEnterCritical+0x58>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d10f      	bne.n	8003820 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <vPortEnterCritical+0x5c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <vPortEnterCritical+0x4c>
        __asm volatile
 800380a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	603b      	str	r3, [r7, #0]
    }
 800381c:	bf00      	nop
 800381e:	e7fe      	b.n	800381e <vPortEnterCritical+0x4a>
    }
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	20000010 	.word	0x20000010
 8003830:	e000ed04 	.word	0xe000ed04

08003834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800383a:	4b12      	ldr	r3, [pc, #72]	; (8003884 <vPortExitCritical+0x50>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <vPortExitCritical+0x24>
        __asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	607b      	str	r3, [r7, #4]
    }
 8003854:	bf00      	nop
 8003856:	e7fe      	b.n	8003856 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <vPortExitCritical+0x50>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3b01      	subs	r3, #1
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <vPortExitCritical+0x50>)
 8003860:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <vPortExitCritical+0x50>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d105      	bne.n	8003876 <vPortExitCritical+0x42>
 800386a:	2300      	movs	r3, #0
 800386c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003874:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000010 	.word	0x20000010
	...

08003890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003890:	f3ef 8009 	mrs	r0, PSP
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <pxCurrentTCBConst>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	f01e 0f10 	tst.w	lr, #16
 80038a0:	bf08      	it	eq
 80038a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80038a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038aa:	6010      	str	r0, [r2, #0]
 80038ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80038b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038b4:	f380 8811 	msr	BASEPRI, r0
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f7ff faca 	bl	8002e58 <vTaskSwitchContext>
 80038c4:	f04f 0000 	mov.w	r0, #0
 80038c8:	f380 8811 	msr	BASEPRI, r0
 80038cc:	bc09      	pop	{r0, r3}
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	6808      	ldr	r0, [r1, #0]
 80038d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d6:	f01e 0f10 	tst.w	lr, #16
 80038da:	bf08      	it	eq
 80038dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038e0:	f380 8809 	msr	PSP, r0
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	f3af 8000 	nop.w

080038f0 <pxCurrentTCBConst>:
 80038f0:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop

080038f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
        __asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	607b      	str	r3, [r7, #4]
    }
 8003910:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003912:	f002 fc39 	bl	8006188 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003916:	f7ff f9e3 	bl	8002ce0 <xTaskIncrementTick>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003920:	f002 fc90 	bl	8006244 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <SysTick_Handler+0x50>)
 8003926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e001      	b.n	8003932 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800392e:	f002 fc6d 	bl	800620c <SEGGER_SYSVIEW_RecordExitISR>
 8003932:	2300      	movs	r3, #0
 8003934:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f383 8811 	msr	BASEPRI, r3
    }
 800393c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <vPortSetupTimerInterrupt+0x34>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <vPortSetupTimerInterrupt+0x38>)
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <vPortSetupTimerInterrupt+0x3c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0a      	ldr	r2, [pc, #40]	; (800398c <vPortSetupTimerInterrupt+0x40>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	099b      	lsrs	r3, r3, #6
 8003968:	4a09      	ldr	r2, [pc, #36]	; (8003990 <vPortSetupTimerInterrupt+0x44>)
 800396a:	3b01      	subs	r3, #1
 800396c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <vPortSetupTimerInterrupt+0x34>)
 8003970:	2207      	movs	r2, #7
 8003972:	601a      	str	r2, [r3, #0]
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000e010 	.word	0xe000e010
 8003984:	e000e018 	.word	0xe000e018
 8003988:	20000000 	.word	0x20000000
 800398c:	10624dd3 	.word	0x10624dd3
 8003990:	e000e014 	.word	0xe000e014

08003994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80039a4 <vPortEnableVFP+0x10>
 8003998:	6801      	ldr	r1, [r0, #0]
 800399a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800399e:	6001      	str	r1, [r0, #0]
 80039a0:	4770      	bx	lr
 80039a2:	0000      	.short	0x0000
 80039a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop

080039ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80039b2:	f3ef 8305 	mrs	r3, IPSR
 80039b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b0f      	cmp	r3, #15
 80039bc:	d914      	bls.n	80039e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80039be:	4a17      	ldr	r2, [pc, #92]	; (8003a1c <vPortValidateInterruptPriority+0x70>)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <vPortValidateInterruptPriority+0x74>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	7afa      	ldrb	r2, [r7, #11]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d20a      	bcs.n	80039e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	607b      	str	r3, [r7, #4]
    }
 80039e4:	bf00      	nop
 80039e6:	e7fe      	b.n	80039e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80039e8:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <vPortValidateInterruptPriority+0x78>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <vPortValidateInterruptPriority+0x7c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d90a      	bls.n	8003a0e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	603b      	str	r3, [r7, #0]
    }
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <vPortValidateInterruptPriority+0x60>
    }
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000e3f0 	.word	0xe000e3f0
 8003a20:	2000019c 	.word	0x2000019c
 8003a24:	e000ed0c 	.word	0xe000ed0c
 8003a28:	200001a0 	.word	0x200001a0

08003a2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003a38:	f7ff f892 	bl	8002b60 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003a3c:	4b65      	ldr	r3, [pc, #404]	; (8003bd4 <pvPortMalloc+0x1a8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003a44:	f000 f934 	bl	8003cb0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a48:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <pvPortMalloc+0x1ac>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 80a7 	bne.w	8003ba4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d02d      	beq.n	8003ab8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d227      	bcs.n	8003ab8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003a68:	2208      	movs	r2, #8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d021      	beq.n	8003abe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f023 0307 	bic.w	r3, r3, #7
 8003a80:	3308      	adds	r3, #8
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d214      	bcs.n	8003ab2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f023 0307 	bic.w	r3, r3, #7
 8003a8e:	3308      	adds	r3, #8
 8003a90:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <pvPortMalloc+0x92>
        __asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	617b      	str	r3, [r7, #20]
    }
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ab6:	e002      	b.n	8003abe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e000      	b.n	8003ac0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003abe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d06e      	beq.n	8003ba4 <pvPortMalloc+0x178>
 8003ac6:	4b45      	ldr	r3, [pc, #276]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d869      	bhi.n	8003ba4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003ad0:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <pvPortMalloc+0x1b4>)
 8003ad2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003ad4:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <pvPortMalloc+0x1b4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ada:	e004      	b.n	8003ae6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d903      	bls.n	8003af8 <pvPortMalloc+0xcc>
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f1      	bne.n	8003adc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003af8:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <pvPortMalloc+0x1a8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d050      	beq.n	8003ba4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2208      	movs	r2, #8
 8003b08:	4413      	add	r3, r2
 8003b0a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	1ad2      	subs	r2, r2, r3
 8003b1c:	2308      	movs	r3, #8
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d91f      	bls.n	8003b64 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <pvPortMalloc+0x120>
        __asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	613b      	str	r3, [r7, #16]
    }
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	1ad2      	subs	r2, r2, r3
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b5e:	69b8      	ldr	r0, [r7, #24]
 8003b60:	f000 f908 	bl	8003d74 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b64:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003b70:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b72:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <pvPortMalloc+0x1b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d203      	bcs.n	8003b86 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b7e:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <pvPortMalloc+0x1b8>)
 8003b84:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <pvPortMalloc+0x1ac>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <pvPortMalloc+0x1bc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <pvPortMalloc+0x1bc>)
 8003ba2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003ba4:	f7fe ffea 	bl	8002b7c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <pvPortMalloc+0x19c>
        __asm volatile
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	60fb      	str	r3, [r7, #12]
    }
 8003bc4:	bf00      	nop
 8003bc6:	e7fe      	b.n	8003bc6 <pvPortMalloc+0x19a>
    return pvReturn;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3728      	adds	r7, #40	; 0x28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	200191ac 	.word	0x200191ac
 8003bd8:	200191c0 	.word	0x200191c0
 8003bdc:	200191b0 	.word	0x200191b0
 8003be0:	200191a4 	.word	0x200191a4
 8003be4:	200191b4 	.word	0x200191b4
 8003be8:	200191b8 	.word	0x200191b8

08003bec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d04d      	beq.n	8003c9a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	425b      	negs	r3, r3
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4413      	add	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <vPortFree+0xb8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <vPortFree+0x44>
        __asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	60fb      	str	r3, [r7, #12]
    }
 8003c2c:	bf00      	nop
 8003c2e:	e7fe      	b.n	8003c2e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <vPortFree+0x62>
        __asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	60bb      	str	r3, [r7, #8]
    }
 8003c4a:	bf00      	nop
 8003c4c:	e7fe      	b.n	8003c4c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <vPortFree+0xb8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01e      	beq.n	8003c9a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d11a      	bne.n	8003c9a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <vPortFree+0xb8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003c74:	f7fe ff74 	bl	8002b60 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <vPortFree+0xbc>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4413      	add	r3, r2
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <vPortFree+0xbc>)
 8003c84:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c86:	6938      	ldr	r0, [r7, #16]
 8003c88:	f000 f874 	bl	8003d74 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003c8c:	4b07      	ldr	r3, [pc, #28]	; (8003cac <vPortFree+0xc0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	4a06      	ldr	r2, [pc, #24]	; (8003cac <vPortFree+0xc0>)
 8003c94:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003c96:	f7fe ff71 	bl	8002b7c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003c9a:	bf00      	nop
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200191c0 	.word	0x200191c0
 8003ca8:	200191b0 	.word	0x200191b0
 8003cac:	200191bc 	.word	0x200191bc

08003cb0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cb6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8003cba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003cbc:	4b27      	ldr	r3, [pc, #156]	; (8003d5c <prvHeapInit+0xac>)
 8003cbe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00c      	beq.n	8003ce4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3307      	adds	r3, #7
 8003cce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0307 	bic.w	r3, r3, #7
 8003cd6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	4a1f      	ldr	r2, [pc, #124]	; (8003d5c <prvHeapInit+0xac>)
 8003ce0:	4413      	add	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <prvHeapInit+0xb0>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003cee:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <prvHeapInit+0xb0>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0307 	bic.w	r3, r3, #7
 8003d0a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <prvHeapInit+0xb4>)
 8003d10:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <prvHeapInit+0xb4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <prvHeapInit+0xb4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	1ad2      	subs	r2, r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <prvHeapInit+0xb4>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4a0a      	ldr	r2, [pc, #40]	; (8003d68 <prvHeapInit+0xb8>)
 8003d3e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <prvHeapInit+0xbc>)
 8003d46:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <prvHeapInit+0xc0>)
 8003d4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d4e:	601a      	str	r2, [r3, #0]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	200001a4 	.word	0x200001a4
 8003d60:	200191a4 	.word	0x200191a4
 8003d64:	200191ac 	.word	0x200191ac
 8003d68:	200191b4 	.word	0x200191b4
 8003d6c:	200191b0 	.word	0x200191b0
 8003d70:	200191c0 	.word	0x200191c0

08003d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d7c:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <prvInsertBlockIntoFreeList+0xac>)
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e002      	b.n	8003d88 <prvInsertBlockIntoFreeList+0x14>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d8f7      	bhi.n	8003d82 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d108      	bne.n	8003db6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	441a      	add	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	441a      	add	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d118      	bne.n	8003dfc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <prvInsertBlockIntoFreeList+0xb0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d00d      	beq.n	8003df2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	441a      	add	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e008      	b.n	8003e04 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003df2:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <prvInsertBlockIntoFreeList+0xb0>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	e003      	b.n	8003e04 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d002      	beq.n	8003e12 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	200191a4 	.word	0x200191a4
 8003e24:	200191ac 	.word	0x200191ac

08003e28 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003e2c:	4803      	ldr	r0, [pc, #12]	; (8003e3c <_cbSendSystemDesc+0x14>)
 8003e2e:	f002 f955 	bl	80060dc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003e32:	4803      	ldr	r0, [pc, #12]	; (8003e40 <_cbSendSystemDesc+0x18>)
 8003e34:	f002 f952 	bl	80060dc <SEGGER_SYSVIEW_SendSysDesc>
}
 8003e38:	bf00      	nop
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	080069d4 	.word	0x080069d4
 8003e40:	08006a0c 	.word	0x08006a0c

08003e44 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <SEGGER_SYSVIEW_Conf+0x20>)
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <SEGGER_SYSVIEW_Conf+0x20>)
 8003e4e:	6819      	ldr	r1, [r3, #0]
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <SEGGER_SYSVIEW_Conf+0x24>)
 8003e52:	4a06      	ldr	r2, [pc, #24]	; (8003e6c <SEGGER_SYSVIEW_Conf+0x28>)
 8003e54:	f001 fd34 	bl	80058c0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003e58:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003e5c:	f001 fd74 	bl	8005948 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003e60:	bf00      	nop
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000000 	.word	0x20000000
 8003e68:	08003e29 	.word	0x08003e29
 8003e6c:	08006aa8 	.word	0x08006aa8

08003e70 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003e76:	2300      	movs	r3, #0
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	e033      	b.n	8003ee4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003e7c:	491e      	ldr	r1, [pc, #120]	; (8003ef8 <_cbSendTaskList+0x88>)
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	491a      	ldr	r1, [pc, #104]	; (8003ef8 <_cbSendTaskList+0x88>)
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	6819      	ldr	r1, [r3, #0]
 8003e9e:	4c16      	ldr	r4, [pc, #88]	; (8003ef8 <_cbSendTaskList+0x88>)
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4423      	add	r3, r4
 8003eac:	3308      	adds	r3, #8
 8003eae:	681c      	ldr	r4, [r3, #0]
 8003eb0:	4d11      	ldr	r5, [pc, #68]	; (8003ef8 <_cbSendTaskList+0x88>)
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	442b      	add	r3, r5
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	681d      	ldr	r5, [r3, #0]
 8003ec2:	4e0d      	ldr	r6, [pc, #52]	; (8003ef8 <_cbSendTaskList+0x88>)
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4433      	add	r3, r6
 8003ed0:	3310      	adds	r3, #16
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	4622      	mov	r2, r4
 8003eda:	f000 f979 	bl	80041d0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <_cbSendTaskList+0x8c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d3c6      	bcc.n	8003e7c <_cbSendTaskList+0xc>
  }
}
 8003eee:	bf00      	nop
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef8:	200191c4 	.word	0x200191c4
 8003efc:	20019264 	.word	0x20019264

08003f00 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003f08:	f7fe fed8 	bl	8002cbc <xTaskGetTickCountFromISR>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2200      	movs	r2, #0
 8003f10:	469a      	mov	sl, r3
 8003f12:	4693      	mov	fp, r2
 8003f14:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	f04f 0a00 	mov.w	sl, #0
 8003f24:	f04f 0b00 	mov.w	fp, #0
 8003f28:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003f2c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003f30:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003f34:	4652      	mov	r2, sl
 8003f36:	465b      	mov	r3, fp
 8003f38:	1a14      	subs	r4, r2, r0
 8003f3a:	eb63 0501 	sbc.w	r5, r3, r1
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	00ab      	lsls	r3, r5, #2
 8003f48:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003f4c:	00a2      	lsls	r2, r4, #2
 8003f4e:	4614      	mov	r4, r2
 8003f50:	461d      	mov	r5, r3
 8003f52:	eb14 0800 	adds.w	r8, r4, r0
 8003f56:	eb45 0901 	adc.w	r9, r5, r1
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f6e:	4690      	mov	r8, r2
 8003f70:	4699      	mov	r9, r3
 8003f72:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003f76:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003f88 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003f96:	2205      	movs	r2, #5
 8003f98:	492b      	ldr	r1, [pc, #172]	; (8004048 <SYSVIEW_AddTask+0xc0>)
 8003f9a:	68b8      	ldr	r0, [r7, #8]
 8003f9c:	f002 fc68 	bl	8006870 <memcmp>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d04b      	beq.n	800403e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003fa6:	4b29      	ldr	r3, [pc, #164]	; (800404c <SYSVIEW_AddTask+0xc4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b07      	cmp	r3, #7
 8003fac:	d903      	bls.n	8003fb6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003fae:	4828      	ldr	r0, [pc, #160]	; (8004050 <SYSVIEW_AddTask+0xc8>)
 8003fb0:	f002 fbb0 	bl	8006714 <SEGGER_SYSVIEW_Warn>
    return;
 8003fb4:	e044      	b.n	8004040 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003fb6:	4b25      	ldr	r3, [pc, #148]	; (800404c <SYSVIEW_AddTask+0xc4>)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4926      	ldr	r1, [pc, #152]	; (8004054 <SYSVIEW_AddTask+0xcc>)
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003fca:	4b20      	ldr	r3, [pc, #128]	; (800404c <SYSVIEW_AddTask+0xc4>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4921      	ldr	r1, [pc, #132]	; (8004054 <SYSVIEW_AddTask+0xcc>)
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	3304      	adds	r3, #4
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	; (800404c <SYSVIEW_AddTask+0xc4>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	491b      	ldr	r1, [pc, #108]	; (8004054 <SYSVIEW_AddTask+0xcc>)
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <SYSVIEW_AddTask+0xc4>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4916      	ldr	r1, [pc, #88]	; (8004054 <SYSVIEW_AddTask+0xcc>)
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	330c      	adds	r3, #12
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800400c:	4b0f      	ldr	r3, [pc, #60]	; (800404c <SYSVIEW_AddTask+0xc4>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4910      	ldr	r1, [pc, #64]	; (8004054 <SYSVIEW_AddTask+0xcc>)
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	3310      	adds	r3, #16
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <SYSVIEW_AddTask+0xc4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3301      	adds	r3, #1
 8004028:	4a08      	ldr	r2, [pc, #32]	; (800404c <SYSVIEW_AddTask+0xc4>)
 800402a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f8ca 	bl	80041d0 <SYSVIEW_SendTaskInfo>
 800403c:	e000      	b.n	8004040 <SYSVIEW_AddTask+0xb8>
    return;
 800403e:	bf00      	nop

}
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	08006a1c 	.word	0x08006a1c
 800404c:	20019264 	.word	0x20019264
 8004050:	08006a24 	.word	0x08006a24
 8004054:	200191c4 	.word	0x200191c4

08004058 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004060:	4b59      	ldr	r3, [pc, #356]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80ab 	beq.w	80041c0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e00d      	b.n	800408c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004070:	4956      	ldr	r1, [pc, #344]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	d008      	beq.n	8004098 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3301      	adds	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	4b4e      	ldr	r3, [pc, #312]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	429a      	cmp	r2, r3
 8004094:	d3ec      	bcc.n	8004070 <SYSVIEW_DeleteTask+0x18>
 8004096:	e000      	b.n	800409a <SYSVIEW_DeleteTask+0x42>
      break;
 8004098:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800409a:	4b4b      	ldr	r3, [pc, #300]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3b01      	subs	r3, #1
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d111      	bne.n	80040ca <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4a46      	ldr	r2, [pc, #280]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 80040b2:	4413      	add	r3, r2
 80040b4:	2214      	movs	r2, #20
 80040b6:	2100      	movs	r1, #0
 80040b8:	4618      	mov	r0, r3
 80040ba:	f002 fbf7 	bl	80068ac <memset>
    _NumTasks--;
 80040be:	4b42      	ldr	r3, [pc, #264]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	4a40      	ldr	r2, [pc, #256]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	e07b      	b.n	80041c2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80040ca:	4b3f      	ldr	r3, [pc, #252]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d276      	bcs.n	80041c2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80040d4:	4b3c      	ldr	r3, [pc, #240]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	1e5a      	subs	r2, r3, #1
 80040da:	493c      	ldr	r1, [pc, #240]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	6819      	ldr	r1, [r3, #0]
 80040e8:	4838      	ldr	r0, [pc, #224]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4403      	add	r3, r0
 80040f6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80040f8:	4b33      	ldr	r3, [pc, #204]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	1e5a      	subs	r2, r3, #1
 80040fe:	4933      	ldr	r1, [pc, #204]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	3304      	adds	r3, #4
 800410c:	6819      	ldr	r1, [r3, #0]
 800410e:	482f      	ldr	r0, [pc, #188]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4403      	add	r3, r0
 800411c:	3304      	adds	r3, #4
 800411e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004120:	4b29      	ldr	r3, [pc, #164]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	1e5a      	subs	r2, r3, #1
 8004126:	4929      	ldr	r1, [pc, #164]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	3308      	adds	r3, #8
 8004134:	6819      	ldr	r1, [r3, #0]
 8004136:	4825      	ldr	r0, [pc, #148]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4403      	add	r3, r0
 8004144:	3308      	adds	r3, #8
 8004146:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004148:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	1e5a      	subs	r2, r3, #1
 800414e:	491f      	ldr	r1, [pc, #124]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	330c      	adds	r3, #12
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	481b      	ldr	r0, [pc, #108]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4403      	add	r3, r0
 800416c:	330c      	adds	r3, #12
 800416e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004170:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	1e5a      	subs	r2, r3, #1
 8004176:	4915      	ldr	r1, [pc, #84]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	3310      	adds	r3, #16
 8004184:	6819      	ldr	r1, [r3, #0]
 8004186:	4811      	ldr	r0, [pc, #68]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4403      	add	r3, r0
 8004194:	3310      	adds	r3, #16
 8004196:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	1e5a      	subs	r2, r3, #1
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4a09      	ldr	r2, [pc, #36]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 80041a8:	4413      	add	r3, r2
 80041aa:	2214      	movs	r2, #20
 80041ac:	2100      	movs	r1, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f002 fb7c 	bl	80068ac <memset>
    _NumTasks--;
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	4a03      	ldr	r2, [pc, #12]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e000      	b.n	80041c2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80041c0:	bf00      	nop
  }
}
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20019264 	.word	0x20019264
 80041cc:	200191c4 	.word	0x200191c4

080041d0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08a      	sub	sp, #40	; 0x28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80041de:	f107 0314 	add.w	r3, r7, #20
 80041e2:	2214      	movs	r2, #20
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f002 fb60 	bl	80068ac <memset>
  TaskInfo.TaskID     = TaskID;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004200:	f107 0314 	add.w	r3, r7, #20
 8004204:	4618      	mov	r0, r3
 8004206:	f001 fe71 	bl	8005eec <SEGGER_SYSVIEW_SendTaskInfo>
}
 800420a:	bf00      	nop
 800420c:	3728      	adds	r7, #40	; 0x28
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <__NVIC_EnableIRQ>:
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	2b00      	cmp	r3, #0
 8004224:	db0b      	blt.n	800423e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	f003 021f 	and.w	r2, r3, #31
 800422c:	4907      	ldr	r1, [pc, #28]	; (800424c <__NVIC_EnableIRQ+0x38>)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2001      	movs	r0, #1
 8004236:	fa00 f202 	lsl.w	r2, r0, r2
 800423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	e000e100 	.word	0xe000e100

08004250 <__NVIC_SetPriority>:
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	6039      	str	r1, [r7, #0]
 800425a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004260:	2b00      	cmp	r3, #0
 8004262:	db0a      	blt.n	800427a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	490c      	ldr	r1, [pc, #48]	; (800429c <__NVIC_SetPriority+0x4c>)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	0112      	lsls	r2, r2, #4
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	440b      	add	r3, r1
 8004274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004278:	e00a      	b.n	8004290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	4908      	ldr	r1, [pc, #32]	; (80042a0 <__NVIC_SetPriority+0x50>)
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	3b04      	subs	r3, #4
 8004288:	0112      	lsls	r2, r2, #4
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	440b      	add	r3, r1
 800428e:	761a      	strb	r2, [r3, #24]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000e100 	.word	0xe000e100
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80042aa:	f002 fa8f 	bl	80067cc <SEGGER_SYSVIEW_IsStarted>
 80042ae:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80042b6:	f001 fc9d 	bl	8005bf4 <SEGGER_SYSVIEW_Start>
  }
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80042ce:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <_cbOnUARTRx+0x3c>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d806      	bhi.n	80042e4 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80042d6:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <_cbOnUARTRx+0x3c>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	3301      	adds	r3, #1
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	4b08      	ldr	r3, [pc, #32]	; (8004300 <_cbOnUARTRx+0x3c>)
 80042e0:	701a      	strb	r2, [r3, #0]
    goto Done;
 80042e2:	e009      	b.n	80042f8 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80042e4:	f7ff ffde 	bl	80042a4 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <_cbOnUARTRx+0x3c>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4618      	mov	r0, r3
 80042ee:	1dfb      	adds	r3, r7, #7
 80042f0:	2201      	movs	r2, #1
 80042f2:	4619      	mov	r1, r3
 80042f4:	f000 fb9c 	bl	8004a30 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80042f8:	bf00      	nop
}
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000014 	.word	0x20000014

08004304 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800430c:	4b14      	ldr	r3, [pc, #80]	; (8004360 <_cbOnUARTTx+0x5c>)
 800430e:	785b      	ldrb	r3, [r3, #1]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d80f      	bhi.n	8004334 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004314:	4b12      	ldr	r3, [pc, #72]	; (8004360 <_cbOnUARTTx+0x5c>)
 8004316:	785b      	ldrb	r3, [r3, #1]
 8004318:	461a      	mov	r2, r3
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <_cbOnUARTTx+0x60>)
 800431c:	5c9a      	ldrb	r2, [r3, r2]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <_cbOnUARTTx+0x5c>)
 8004324:	785b      	ldrb	r3, [r3, #1]
 8004326:	3301      	adds	r3, #1
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <_cbOnUARTTx+0x5c>)
 800432c:	705a      	strb	r2, [r3, #1]
    r = 1;
 800432e:	2301      	movs	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004332:	e00f      	b.n	8004354 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <_cbOnUARTTx+0x5c>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fa1b 	bl	8004778 <SEGGER_RTT_ReadUpBufferNoLock>
 8004342:	4603      	mov	r3, r0
 8004344:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	da02      	bge.n	8004352 <_cbOnUARTTx+0x4e>
    r = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	e000      	b.n	8004354 <_cbOnUARTTx+0x50>
  }
Done:
 8004352:	bf00      	nop
  return r;
 8004354:	68fb      	ldr	r3, [r7, #12]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000014 	.word	0x20000014
 8004364:	08006ab0 	.word	0x08006ab0

08004368 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004370:	4a04      	ldr	r2, [pc, #16]	; (8004384 <SEGGER_UART_init+0x1c>)
 8004372:	4905      	ldr	r1, [pc, #20]	; (8004388 <SEGGER_UART_init+0x20>)
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f863 	bl	8004440 <HIF_UART_Init>
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	080042c5 	.word	0x080042c5
 8004388:	08004305 	.word	0x08004305

0800438c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004392:	4b1e      	ldr	r3, [pc, #120]	; (800440c <USART2_IRQHandler+0x80>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d011      	beq.n	80043c6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80043a2:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <USART2_IRQHandler+0x84>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f003 030b 	and.w	r3, r3, #11
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d108      	bne.n	80043c6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80043b4:	4b17      	ldr	r3, [pc, #92]	; (8004414 <USART2_IRQHandler+0x88>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80043bc:	4b15      	ldr	r3, [pc, #84]	; (8004414 <USART2_IRQHandler+0x88>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	79fa      	ldrb	r2, [r7, #7]
 80043c2:	4610      	mov	r0, r2
 80043c4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01a      	beq.n	8004406 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80043d0:	4b11      	ldr	r3, [pc, #68]	; (8004418 <USART2_IRQHandler+0x8c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d015      	beq.n	8004404 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80043d8:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <USART2_IRQHandler+0x8c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	1dfa      	adds	r2, r7, #7
 80043de:	4610      	mov	r0, r2
 80043e0:	4798      	blx	r3
 80043e2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <USART2_IRQHandler+0x90>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a0b      	ldr	r2, [pc, #44]	; (800441c <USART2_IRQHandler+0x90>)
 80043f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e006      	b.n	8004406 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <USART2_IRQHandler+0x80>)
 80043fa:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80043fc:	79fa      	ldrb	r2, [r7, #7]
 80043fe:	4b04      	ldr	r3, [pc, #16]	; (8004410 <USART2_IRQHandler+0x84>)
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	e000      	b.n	8004406 <USART2_IRQHandler+0x7a>
      return;
 8004404:	bf00      	nop
    }
  }
}
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40004400 	.word	0x40004400
 8004410:	40004404 	.word	0x40004404
 8004414:	20019268 	.word	0x20019268
 8004418:	2001926c 	.word	0x2001926c
 800441c:	4000440c 	.word	0x4000440c

08004420 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a04      	ldr	r2, [pc, #16]	; (800443c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800442a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800442e:	6013      	str	r3, [r2, #0]
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	4000440c 	.word	0x4000440c

08004440 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 800444c:	4b2e      	ldr	r3, [pc, #184]	; (8004508 <HIF_UART_Init+0xc8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2d      	ldr	r2, [pc, #180]	; (8004508 <HIF_UART_Init+0xc8>)
 8004452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004456:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004458:	4b2c      	ldr	r3, [pc, #176]	; (800450c <HIF_UART_Init+0xcc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a2b      	ldr	r2, [pc, #172]	; (800450c <HIF_UART_Init+0xcc>)
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004464:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <HIF_UART_Init+0xd0>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004470:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004478:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800447a:	4a25      	ldr	r2, [pc, #148]	; (8004510 <HIF_UART_Init+0xd0>)
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004480:	4b24      	ldr	r3, [pc, #144]	; (8004514 <HIF_UART_Init+0xd4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800448c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004494:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004496:	4a1f      	ldr	r2, [pc, #124]	; (8004514 <HIF_UART_Init+0xd4>)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800449c:	4b1e      	ldr	r3, [pc, #120]	; (8004518 <HIF_UART_Init+0xd8>)
 800449e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80044a2:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HIF_UART_Init+0xdc>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80044aa:	4b1d      	ldr	r3, [pc, #116]	; (8004520 <HIF_UART_Init+0xe0>)
 80044ac:	2280      	movs	r2, #128	; 0x80
 80044ae:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80044b6:	4a1b      	ldr	r2, [pc, #108]	; (8004524 <HIF_UART_Init+0xe4>)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80044be:	3301      	adds	r3, #1
 80044c0:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ce:	d302      	bcc.n	80044d6 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80044d0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80044d4:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d004      	beq.n	80044e6 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	4a11      	ldr	r2, [pc, #68]	; (8004528 <HIF_UART_Init+0xe8>)
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80044e6:	4a11      	ldr	r2, [pc, #68]	; (800452c <HIF_UART_Init+0xec>)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80044ec:	4a10      	ldr	r2, [pc, #64]	; (8004530 <HIF_UART_Init+0xf0>)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80044f2:	2106      	movs	r1, #6
 80044f4:	2026      	movs	r0, #38	; 0x26
 80044f6:	f7ff feab 	bl	8004250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80044fa:	2026      	movs	r0, #38	; 0x26
 80044fc:	f7ff fe8a 	bl	8004214 <__NVIC_EnableIRQ>
}
 8004500:	bf00      	nop
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40023840 	.word	0x40023840
 800450c:	40023830 	.word	0x40023830
 8004510:	40020020 	.word	0x40020020
 8004514:	40020000 	.word	0x40020000
 8004518:	4000440c 	.word	0x4000440c
 800451c:	40004410 	.word	0x40004410
 8004520:	40004414 	.word	0x40004414
 8004524:	055d4a80 	.word	0x055d4a80
 8004528:	40004408 	.word	0x40004408
 800452c:	20019268 	.word	0x20019268
 8004530:	2001926c 	.word	0x2001926c

08004534 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800453a:	4b26      	ldr	r3, [pc, #152]	; (80045d4 <_DoInit+0xa0>)
 800453c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800453e:	22a8      	movs	r2, #168	; 0xa8
 8004540:	2100      	movs	r1, #0
 8004542:	6838      	ldr	r0, [r7, #0]
 8004544:	f002 f9b2 	bl	80068ac <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2203      	movs	r2, #3
 800454c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2203      	movs	r2, #3
 8004552:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	4a20      	ldr	r2, [pc, #128]	; (80045d8 <_DoInit+0xa4>)
 8004558:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <_DoInit+0xa8>)
 800455e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004566:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2200      	movs	r2, #0
 800456c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2200      	movs	r2, #0
 8004572:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2200      	movs	r2, #0
 8004578:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <_DoInit+0xa4>)
 800457e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <_DoInit+0xac>)
 8004584:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2210      	movs	r2, #16
 800458a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2200      	movs	r2, #0
 8004590:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2200      	movs	r2, #0
 8004596:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2200      	movs	r2, #0
 800459c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800459e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80045a2:	2300      	movs	r3, #0
 80045a4:	607b      	str	r3, [r7, #4]
 80045a6:	e00c      	b.n	80045c2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f1c3 030f 	rsb	r3, r3, #15
 80045ae:	4a0d      	ldr	r2, [pc, #52]	; (80045e4 <_DoInit+0xb0>)
 80045b0:	5cd1      	ldrb	r1, [r2, r3]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4413      	add	r3, r2
 80045b8:	460a      	mov	r2, r1
 80045ba:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3301      	adds	r3, #1
 80045c0:	607b      	str	r3, [r7, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b0f      	cmp	r3, #15
 80045c6:	d9ef      	bls.n	80045a8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80045c8:	f3bf 8f5f 	dmb	sy
}
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20019270 	.word	0x20019270
 80045d8:	08006a74 	.word	0x08006a74
 80045dc:	20019318 	.word	0x20019318
 80045e0:	20019718 	.word	0x20019718
 80045e4:	08006ab4 	.word	0x08006ab4

080045e8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80045f4:	2300      	movs	r3, #0
 80045f6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	429a      	cmp	r2, r3
 800460a:	d905      	bls.n	8004618 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
 8004616:	e007      	b.n	8004628 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	69b9      	ldr	r1, [r7, #24]
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	1acb      	subs	r3, r1, r3
 8004622:	4413      	add	r3, r2
 8004624:	3b01      	subs	r3, #1
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004632:	4293      	cmp	r3, r2
 8004634:	bf28      	it	cs
 8004636:	4613      	movcs	r3, r2
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4293      	cmp	r3, r2
 8004640:	bf28      	it	cs
 8004642:	4613      	movcs	r3, r2
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	4413      	add	r3, r2
 800464e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	6978      	ldr	r0, [r7, #20]
 8004656:	f002 f91b 	bl	8006890 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800465a:	6a3a      	ldr	r2, [r7, #32]
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	4413      	add	r3, r2
 8004660:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	4413      	add	r3, r2
 8004668:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	4413      	add	r3, r2
 8004678:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	429a      	cmp	r2, r3
 8004682:	d101      	bne.n	8004688 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004688:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1b2      	bne.n	80045fe <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004698:	6a3b      	ldr	r3, [r7, #32]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3728      	adds	r7, #40	; 0x28
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b088      	sub	sp, #32
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d911      	bls.n	80046ea <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	4413      	add	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	6938      	ldr	r0, [r7, #16]
 80046d6:	f002 f8db 	bl	8006890 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046da:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	441a      	add	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80046e8:	e01f      	b.n	800472a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	4413      	add	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	6938      	ldr	r0, [r7, #16]
 80046fe:	f002 f8c7 	bl	8006890 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	4413      	add	r3, r2
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4619      	mov	r1, r3
 800471a:	6938      	ldr	r0, [r7, #16]
 800471c:	f002 f8b8 	bl	8006890 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004720:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	60da      	str	r2, [r3, #12]
}
 800472a:	bf00      	nop
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004732:	b480      	push	{r7}
 8004734:	b087      	sub	sp, #28
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	429a      	cmp	r2, r3
 800474c:	d808      	bhi.n	8004760 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad2      	subs	r2, r2, r3
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4413      	add	r3, r2
 800475a:	3b01      	subs	r3, #1
 800475c:	617b      	str	r3, [r7, #20]
 800475e:	e004      	b.n	800476a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
  }
  return r;
 800476a:	697b      	ldr	r3, [r7, #20]
}
 800476c:	4618      	mov	r0, r3
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004778:	b580      	push	{r7, lr}
 800477a:	b08c      	sub	sp, #48	; 0x30
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004784:	4b3e      	ldr	r3, [pc, #248]	; (8004880 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004786:	623b      	str	r3, [r7, #32]
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b53      	cmp	r3, #83	; 0x53
 8004790:	d001      	beq.n	8004796 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004792:	f7ff fecf 	bl	8004534 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	4613      	mov	r3, r2
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4413      	add	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4a37      	ldr	r2, [pc, #220]	; (8004880 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80047a4:	4413      	add	r3, r2
 80047a6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80047bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d92b      	bls.n	800481c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4293      	cmp	r3, r2
 80047d4:	bf28      	it	cs
 80047d6:	4613      	movcs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	4413      	add	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	6939      	ldr	r1, [r7, #16]
 80047e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047ea:	f002 f851 	bl	8006890 <memcpy>
    NumBytesRead += NumBytesRem;
 80047ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	4413      	add	r3, r2
 80047f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80047f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	4413      	add	r3, r2
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	4413      	add	r3, r2
 800480c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004814:	429a      	cmp	r2, r3
 8004816:	d101      	bne.n	800481c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004818:	2300      	movs	r3, #0
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4293      	cmp	r3, r2
 800482a:	bf28      	it	cs
 800482c:	4613      	movcs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d019      	beq.n	800486a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	4413      	add	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	6939      	ldr	r1, [r7, #16]
 8004844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004846:	f002 f823 	bl	8006890 <memcpy>
    NumBytesRead += NumBytesRem;
 800484a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	4413      	add	r3, r2
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	4413      	add	r3, r2
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	4413      	add	r3, r2
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004874:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004878:	4618      	mov	r0, r3
 800487a:	3730      	adds	r7, #48	; 0x30
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20019270 	.word	0x20019270

08004884 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b08c      	sub	sp, #48	; 0x30
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004890:	4b3e      	ldr	r3, [pc, #248]	; (800498c <SEGGER_RTT_ReadNoLock+0x108>)
 8004892:	623b      	str	r3, [r7, #32]
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b53      	cmp	r3, #83	; 0x53
 800489c:	d001      	beq.n	80048a2 <SEGGER_RTT_ReadNoLock+0x1e>
 800489e:	f7ff fe49 	bl	8004534 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4613      	mov	r3, r2
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	4413      	add	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	3360      	adds	r3, #96	; 0x60
 80048ae:	4a37      	ldr	r2, [pc, #220]	; (800498c <SEGGER_RTT_ReadNoLock+0x108>)
 80048b0:	4413      	add	r3, r2
 80048b2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80048c4:	2300      	movs	r3, #0
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80048c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d92b      	bls.n	8004928 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4293      	cmp	r3, r2
 80048e0:	bf28      	it	cs
 80048e2:	4613      	movcs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	4413      	add	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	6939      	ldr	r1, [r7, #16]
 80048f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048f6:	f001 ffcb 	bl	8006890 <memcpy>
    NumBytesRead += NumBytesRem;
 80048fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	4413      	add	r3, r2
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	4413      	add	r3, r2
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	4413      	add	r3, r2
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004920:	429a      	cmp	r2, r3
 8004922:	d101      	bne.n	8004928 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004924:	2300      	movs	r3, #0
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4293      	cmp	r3, r2
 8004936:	bf28      	it	cs
 8004938:	4613      	movcs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d019      	beq.n	8004976 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	4413      	add	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	6939      	ldr	r1, [r7, #16]
 8004950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004952:	f001 ff9d 	bl	8006890 <memcpy>
    NumBytesRead += NumBytesRem;
 8004956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4413      	add	r3, r2
 800495c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800495e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	4413      	add	r3, r2
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800496e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	4413      	add	r3, r2
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004980:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004984:	4618      	mov	r0, r3
 8004986:	3730      	adds	r7, #48	; 0x30
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20019270 	.word	0x20019270

08004990 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4613      	mov	r3, r2
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	4413      	add	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	3360      	adds	r3, #96	; 0x60
 80049ac:	4a1f      	ldr	r2, [pc, #124]	; (8004a2c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80049ae:	4413      	add	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d029      	beq.n	8004a0e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d82e      	bhi.n	8004a1c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d013      	beq.n	80049ee <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80049c6:	e029      	b.n	8004a1c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80049c8:	6978      	ldr	r0, [r7, #20]
 80049ca:	f7ff feb2 	bl	8004732 <_GetAvailWriteSpace>
 80049ce:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d202      	bcs.n	80049de <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80049d8:	2300      	movs	r3, #0
 80049da:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80049dc:	e021      	b.n	8004a22 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	69b9      	ldr	r1, [r7, #24]
 80049e6:	6978      	ldr	r0, [r7, #20]
 80049e8:	f7ff fe5b 	bl	80046a2 <_WriteNoCheck>
    break;
 80049ec:	e019      	b.n	8004a22 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80049ee:	6978      	ldr	r0, [r7, #20]
 80049f0:	f7ff fe9f 	bl	8004732 <_GetAvailWriteSpace>
 80049f4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4293      	cmp	r3, r2
 80049fc:	bf28      	it	cs
 80049fe:	4613      	movcs	r3, r2
 8004a00:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	69b9      	ldr	r1, [r7, #24]
 8004a06:	6978      	ldr	r0, [r7, #20]
 8004a08:	f7ff fe4b 	bl	80046a2 <_WriteNoCheck>
    break;
 8004a0c:	e009      	b.n	8004a22 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	69b9      	ldr	r1, [r7, #24]
 8004a12:	6978      	ldr	r0, [r7, #20]
 8004a14:	f7ff fde8 	bl	80045e8 <_WriteBlocking>
 8004a18:	61f8      	str	r0, [r7, #28]
    break;
 8004a1a:	e002      	b.n	8004a22 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61fb      	str	r3, [r7, #28]
    break;
 8004a20:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004a22:	69fb      	ldr	r3, [r7, #28]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3720      	adds	r7, #32
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20019270 	.word	0x20019270

08004a30 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004a3c:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004a3e:	61fb      	str	r3, [r7, #28]
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b53      	cmp	r3, #83	; 0x53
 8004a48:	d001      	beq.n	8004a4e <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004a4a:	f7ff fd73 	bl	8004534 <_DoInit>
  SEGGER_RTT_LOCK();
 8004a4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004a52:	f04f 0120 	mov.w	r1, #32
 8004a56:	f381 8811 	msr	BASEPRI, r1
 8004a5a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	68b9      	ldr	r1, [r7, #8]
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f7ff ff95 	bl	8004990 <SEGGER_RTT_WriteDownBufferNoLock>
 8004a66:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004a6e:	697b      	ldr	r3, [r7, #20]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3720      	adds	r7, #32
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20019270 	.word	0x20019270

08004a7c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004a8a:	4b3d      	ldr	r3, [pc, #244]	; (8004b80 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b53      	cmp	r3, #83	; 0x53
 8004a96:	d001      	beq.n	8004a9c <SEGGER_RTT_AllocUpBuffer+0x20>
 8004a98:	f7ff fd4c 	bl	8004534 <_DoInit>
  SEGGER_RTT_LOCK();
 8004a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004aa0:	f04f 0120 	mov.w	r1, #32
 8004aa4:	f381 8811 	msr	BASEPRI, r1
 8004aa8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004aaa:	4b35      	ldr	r3, [pc, #212]	; (8004b80 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004aac:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004ab2:	6939      	ldr	r1, [r7, #16]
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	4613      	mov	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	4413      	add	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	440b      	add	r3, r1
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3301      	adds	r3, #1
 8004ace:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	dbeb      	blt.n	8004ab2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004ada:	e000      	b.n	8004ade <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004adc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	da3f      	bge.n	8004b68 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004ae8:	6939      	ldr	r1, [r7, #16]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	4613      	mov	r3, r2
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	4413      	add	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	440b      	add	r3, r1
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004afc:	6939      	ldr	r1, [r7, #16]
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	4613      	mov	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	440b      	add	r3, r1
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004b12:	6939      	ldr	r1, [r7, #16]
 8004b14:	69fa      	ldr	r2, [r7, #28]
 8004b16:	4613      	mov	r3, r2
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	4413      	add	r3, r2
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	440b      	add	r3, r1
 8004b20:	3320      	adds	r3, #32
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004b26:	6939      	ldr	r1, [r7, #16]
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	4413      	add	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	440b      	add	r3, r1
 8004b34:	3328      	adds	r3, #40	; 0x28
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004b3a:	6939      	ldr	r1, [r7, #16]
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	4413      	add	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	440b      	add	r3, r1
 8004b48:	3324      	adds	r3, #36	; 0x24
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004b4e:	6939      	ldr	r1, [r7, #16]
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	4613      	mov	r3, r2
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	4413      	add	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	440b      	add	r3, r1
 8004b5c:	332c      	adds	r3, #44	; 0x2c
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b62:	f3bf 8f5f 	dmb	sy
 8004b66:	e002      	b.n	8004b6e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b6c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004b74:	69fb      	ldr	r3, [r7, #28]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3720      	adds	r7, #32
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20019270 	.word	0x20019270

08004b84 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08a      	sub	sp, #40	; 0x28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004b92:	4b21      	ldr	r3, [pc, #132]	; (8004c18 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004b94:	623b      	str	r3, [r7, #32]
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b53      	cmp	r3, #83	; 0x53
 8004b9e:	d001      	beq.n	8004ba4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004ba0:	f7ff fcc8 	bl	8004534 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ba4:	4b1c      	ldr	r3, [pc, #112]	; (8004c18 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004ba6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d82c      	bhi.n	8004c08 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004bae:	f3ef 8311 	mrs	r3, BASEPRI
 8004bb2:	f04f 0120 	mov.w	r1, #32
 8004bb6:	f381 8811 	msr	BASEPRI, r1
 8004bba:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	4413      	add	r3, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	3360      	adds	r3, #96	; 0x60
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	4413      	add	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00e      	beq.n	8004bf2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2200      	movs	r2, #0
 8004bea:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004bf8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
 8004c06:	e002      	b.n	8004c0e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3728      	adds	r7, #40	; 0x28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20019270 	.word	0x20019270

08004c1c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	60fa      	str	r2, [r7, #12]
 8004c32:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b80      	cmp	r3, #128	; 0x80
 8004c38:	d90a      	bls.n	8004c50 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004c3e:	e007      	b.n	8004c50 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	1c53      	adds	r3, r2, #1
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1c59      	adds	r1, r3, #1
 8004c4a:	60f9      	str	r1, [r7, #12]
 8004c4c:	7812      	ldrb	r2, [r2, #0]
 8004c4e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	1e5a      	subs	r2, r3, #1
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <_EncodeStr+0x46>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1ee      	bne.n	8004c40 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3307      	adds	r3, #7
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c9a:	4b35      	ldr	r3, [pc, #212]	; (8004d70 <_HandleIncomingPacket+0xdc>)
 8004c9c:	7e1b      	ldrb	r3, [r3, #24]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	1cfb      	adds	r3, r7, #3
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	f7ff fded 	bl	8004884 <SEGGER_RTT_ReadNoLock>
 8004caa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d052      	beq.n	8004d58 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004cb2:	78fb      	ldrb	r3, [r7, #3]
 8004cb4:	2b80      	cmp	r3, #128	; 0x80
 8004cb6:	d031      	beq.n	8004d1c <_HandleIncomingPacket+0x88>
 8004cb8:	2b80      	cmp	r3, #128	; 0x80
 8004cba:	dc40      	bgt.n	8004d3e <_HandleIncomingPacket+0xaa>
 8004cbc:	2b07      	cmp	r3, #7
 8004cbe:	dc15      	bgt.n	8004cec <_HandleIncomingPacket+0x58>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	dd3c      	ble.n	8004d3e <_HandleIncomingPacket+0xaa>
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	2b06      	cmp	r3, #6
 8004cc8:	d839      	bhi.n	8004d3e <_HandleIncomingPacket+0xaa>
 8004cca:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <_HandleIncomingPacket+0x3c>)
 8004ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd0:	08004cf3 	.word	0x08004cf3
 8004cd4:	08004cf9 	.word	0x08004cf9
 8004cd8:	08004cff 	.word	0x08004cff
 8004cdc:	08004d05 	.word	0x08004d05
 8004ce0:	08004d0b 	.word	0x08004d0b
 8004ce4:	08004d11 	.word	0x08004d11
 8004ce8:	08004d17 	.word	0x08004d17
 8004cec:	2b7f      	cmp	r3, #127	; 0x7f
 8004cee:	d035      	beq.n	8004d5c <_HandleIncomingPacket+0xc8>
 8004cf0:	e025      	b.n	8004d3e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004cf2:	f000 ff7f 	bl	8005bf4 <SEGGER_SYSVIEW_Start>
      break;
 8004cf6:	e036      	b.n	8004d66 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004cf8:	f001 f838 	bl	8005d6c <SEGGER_SYSVIEW_Stop>
      break;
 8004cfc:	e033      	b.n	8004d66 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004cfe:	f001 fa11 	bl	8006124 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004d02:	e030      	b.n	8004d66 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004d04:	f001 f9d6 	bl	80060b4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004d08:	e02d      	b.n	8004d66 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004d0a:	f001 f855 	bl	8005db8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004d0e:	e02a      	b.n	8004d66 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004d10:	f001 fcae 	bl	8006670 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004d14:	e027      	b.n	8004d66 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004d16:	f001 fc8d 	bl	8006634 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004d1a:	e024      	b.n	8004d66 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d1c:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <_HandleIncomingPacket+0xdc>)
 8004d1e:	7e1b      	ldrb	r3, [r3, #24]
 8004d20:	4618      	mov	r0, r3
 8004d22:	1cfb      	adds	r3, r7, #3
 8004d24:	2201      	movs	r2, #1
 8004d26:	4619      	mov	r1, r3
 8004d28:	f7ff fdac 	bl	8004884 <SEGGER_RTT_ReadNoLock>
 8004d2c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d015      	beq.n	8004d60 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 fbf2 	bl	8006520 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004d3c:	e010      	b.n	8004d60 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	b25b      	sxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da0e      	bge.n	8004d64 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <_HandleIncomingPacket+0xdc>)
 8004d48:	7e1b      	ldrb	r3, [r3, #24]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	1cfb      	adds	r3, r7, #3
 8004d4e:	2201      	movs	r2, #1
 8004d50:	4619      	mov	r1, r3
 8004d52:	f7ff fd97 	bl	8004884 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004d56:	e005      	b.n	8004d64 <_HandleIncomingPacket+0xd0>
    }
  }
 8004d58:	bf00      	nop
 8004d5a:	e004      	b.n	8004d66 <_HandleIncomingPacket+0xd2>
      break;
 8004d5c:	bf00      	nop
 8004d5e:	e002      	b.n	8004d66 <_HandleIncomingPacket+0xd2>
      break;
 8004d60:	bf00      	nop
 8004d62:	e000      	b.n	8004d66 <_HandleIncomingPacket+0xd2>
      break;
 8004d64:	bf00      	nop
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	2001a730 	.word	0x2001a730

08004d74 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08c      	sub	sp, #48	; 0x30
 8004d78:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004d7e:	1d3b      	adds	r3, r7, #4
 8004d80:	3301      	adds	r3, #1
 8004d82:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d88:	4b32      	ldr	r3, [pc, #200]	; (8004e54 <_TrySendOverflowPacket+0xe0>)
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d8e:	e00b      	b.n	8004da8 <_TrySendOverflowPacket+0x34>
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	1c59      	adds	r1, r3, #1
 8004d98:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	09db      	lsrs	r3, r3, #7
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	2b7f      	cmp	r3, #127	; 0x7f
 8004dac:	d8f0      	bhi.n	8004d90 <_TrySendOverflowPacket+0x1c>
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004dbe:	4b26      	ldr	r3, [pc, #152]	; (8004e58 <_TrySendOverflowPacket+0xe4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004dc4:	4b23      	ldr	r3, [pc, #140]	; (8004e54 <_TrySendOverflowPacket+0xe0>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	623b      	str	r3, [r7, #32]
 8004dd6:	e00b      	b.n	8004df0 <_TrySendOverflowPacket+0x7c>
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	1c59      	adds	r1, r3, #1
 8004de0:	6279      	str	r1, [r7, #36]	; 0x24
 8004de2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	09db      	lsrs	r3, r3, #7
 8004dee:	623b      	str	r3, [r7, #32]
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	2b7f      	cmp	r3, #127	; 0x7f
 8004df4:	d8f0      	bhi.n	8004dd8 <_TrySendOverflowPacket+0x64>
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	627a      	str	r2, [r7, #36]	; 0x24
 8004dfc:	6a3a      	ldr	r2, [r7, #32]
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004e06:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <_TrySendOverflowPacket+0xe0>)
 8004e08:	785b      	ldrb	r3, [r3, #1]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	1d3b      	adds	r3, r7, #4
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	461a      	mov	r2, r3
 8004e14:	1d3b      	adds	r3, r7, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	f7fb f9fa 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004e20:	f7ff fafe 	bl	8004420 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004e2a:	4a0a      	ldr	r2, [pc, #40]	; (8004e54 <_TrySendOverflowPacket+0xe0>)
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004e30:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <_TrySendOverflowPacket+0xe0>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <_TrySendOverflowPacket+0xe0>)
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	e004      	b.n	8004e48 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004e3e:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <_TrySendOverflowPacket+0xe0>)
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	3301      	adds	r3, #1
 8004e44:	4a03      	ldr	r2, [pc, #12]	; (8004e54 <_TrySendOverflowPacket+0xe0>)
 8004e46:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004e48:	693b      	ldr	r3, [r7, #16]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3730      	adds	r7, #48	; 0x30
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	2001a730 	.word	0x2001a730
 8004e58:	e0001004 	.word	0xe0001004

08004e5c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08a      	sub	sp, #40	; 0x28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004e68:	4b96      	ldr	r3, [pc, #600]	; (80050c4 <_SendPacket+0x268>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d010      	beq.n	8004e92 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004e70:	4b94      	ldr	r3, [pc, #592]	; (80050c4 <_SendPacket+0x268>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 8130 	beq.w	80050da <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004e7a:	4b92      	ldr	r3, [pc, #584]	; (80050c4 <_SendPacket+0x268>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d109      	bne.n	8004e96 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004e82:	f7ff ff77 	bl	8004d74 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004e86:	4b8f      	ldr	r3, [pc, #572]	; (80050c4 <_SendPacket+0x268>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	f040 8127 	bne.w	80050de <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004e90:	e001      	b.n	8004e96 <_SendPacket+0x3a>
    goto Send;
 8004e92:	bf00      	nop
 8004e94:	e000      	b.n	8004e98 <_SendPacket+0x3c>
Send:
 8004e96:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b1f      	cmp	r3, #31
 8004e9c:	d809      	bhi.n	8004eb2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004e9e:	4b89      	ldr	r3, [pc, #548]	; (80050c4 <_SendPacket+0x268>)
 8004ea0:	69da      	ldr	r2, [r3, #28]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f040 8118 	bne.w	80050e2 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b17      	cmp	r3, #23
 8004eb6:	d807      	bhi.n	8004ec8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	e0c4      	b.n	8005052 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed4:	d912      	bls.n	8004efc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	09da      	lsrs	r2, r3, #7
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	3a01      	subs	r2, #1
 8004eee:	60fa      	str	r2, [r7, #12]
 8004ef0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	e006      	b.n	8004f0a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b7e      	cmp	r3, #126	; 0x7e
 8004f0e:	d807      	bhi.n	8004f20 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	e098      	b.n	8005052 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f26:	d212      	bcs.n	8004f4e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	09da      	lsrs	r2, r3, #7
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	3a01      	subs	r2, #1
 8004f40:	60fa      	str	r2, [r7, #12]
 8004f42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	e081      	b.n	8005052 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f54:	d21d      	bcs.n	8004f92 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	0b9a      	lsrs	r2, r3, #14
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	09db      	lsrs	r3, r3, #7
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	3a01      	subs	r2, #1
 8004f70:	60fa      	str	r2, [r7, #12]
 8004f72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	3a01      	subs	r2, #1
 8004f84:	60fa      	str	r2, [r7, #12]
 8004f86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	e05f      	b.n	8005052 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f98:	d228      	bcs.n	8004fec <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	0d5a      	lsrs	r2, r3, #21
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	0b9b      	lsrs	r3, r3, #14
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	3a01      	subs	r2, #1
 8004fb4:	60fa      	str	r2, [r7, #12]
 8004fb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	09db      	lsrs	r3, r3, #7
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	3a01      	subs	r2, #1
 8004fca:	60fa      	str	r2, [r7, #12]
 8004fcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	3a01      	subs	r2, #1
 8004fde:	60fa      	str	r2, [r7, #12]
 8004fe0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	e032      	b.n	8005052 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	0f1a      	lsrs	r2, r3, #28
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	0d5b      	lsrs	r3, r3, #21
 8005000:	b2db      	uxtb	r3, r3
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	3a01      	subs	r2, #1
 8005006:	60fa      	str	r2, [r7, #12]
 8005008:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800500c:	b2da      	uxtb	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	0b9b      	lsrs	r3, r3, #14
 8005016:	b2db      	uxtb	r3, r3
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	3a01      	subs	r2, #1
 800501c:	60fa      	str	r2, [r7, #12]
 800501e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005022:	b2da      	uxtb	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	09db      	lsrs	r3, r3, #7
 800502c:	b2db      	uxtb	r3, r3
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	3a01      	subs	r2, #1
 8005032:	60fa      	str	r2, [r7, #12]
 8005034:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005038:	b2da      	uxtb	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	3a01      	subs	r2, #1
 8005046:	60fa      	str	r2, [r7, #12]
 8005048:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800504c:	b2da      	uxtb	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005052:	4b1d      	ldr	r3, [pc, #116]	; (80050c8 <_SendPacket+0x26c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005058:	4b1a      	ldr	r3, [pc, #104]	; (80050c4 <_SendPacket+0x268>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	623b      	str	r3, [r7, #32]
 800506a:	e00b      	b.n	8005084 <_SendPacket+0x228>
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	1c59      	adds	r1, r3, #1
 8005074:	6279      	str	r1, [r7, #36]	; 0x24
 8005076:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	09db      	lsrs	r3, r3, #7
 8005082:	623b      	str	r3, [r7, #32]
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	2b7f      	cmp	r3, #127	; 0x7f
 8005088:	d8f0      	bhi.n	800506c <_SendPacket+0x210>
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	627a      	str	r2, [r7, #36]	; 0x24
 8005090:	6a3a      	ldr	r2, [r7, #32]
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800509a:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <_SendPacket+0x268>)
 800509c:	785b      	ldrb	r3, [r3, #1]
 800509e:	4618      	mov	r0, r3
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	68f9      	ldr	r1, [r7, #12]
 80050aa:	f7fb f8b1 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80050ae:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80050b0:	f7ff f9b6 	bl	8004420 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d008      	beq.n	80050cc <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80050ba:	4a02      	ldr	r2, [pc, #8]	; (80050c4 <_SendPacket+0x268>)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	60d3      	str	r3, [r2, #12]
 80050c0:	e010      	b.n	80050e4 <_SendPacket+0x288>
 80050c2:	bf00      	nop
 80050c4:	2001a730 	.word	0x2001a730
 80050c8:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80050cc:	4b19      	ldr	r3, [pc, #100]	; (8005134 <_SendPacket+0x2d8>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	4b17      	ldr	r3, [pc, #92]	; (8005134 <_SendPacket+0x2d8>)
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	e004      	b.n	80050e4 <_SendPacket+0x288>
    goto SendDone;
 80050da:	bf00      	nop
 80050dc:	e002      	b.n	80050e4 <_SendPacket+0x288>
      goto SendDone;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <_SendPacket+0x288>
      goto SendDone;
 80050e2:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80050e4:	4b13      	ldr	r3, [pc, #76]	; (8005134 <_SendPacket+0x2d8>)
 80050e6:	7e1b      	ldrb	r3, [r3, #24]
 80050e8:	4619      	mov	r1, r3
 80050ea:	4a13      	ldr	r2, [pc, #76]	; (8005138 <_SendPacket+0x2dc>)
 80050ec:	460b      	mov	r3, r1
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	440b      	add	r3, r1
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	4413      	add	r3, r2
 80050f6:	336c      	adds	r3, #108	; 0x6c
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <_SendPacket+0x2d8>)
 80050fc:	7e1b      	ldrb	r3, [r3, #24]
 80050fe:	4618      	mov	r0, r3
 8005100:	490d      	ldr	r1, [pc, #52]	; (8005138 <_SendPacket+0x2dc>)
 8005102:	4603      	mov	r3, r0
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4403      	add	r3, r0
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	440b      	add	r3, r1
 800510c:	3370      	adds	r3, #112	; 0x70
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d00b      	beq.n	800512c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005114:	4b07      	ldr	r3, [pc, #28]	; (8005134 <_SendPacket+0x2d8>)
 8005116:	789b      	ldrb	r3, [r3, #2]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d107      	bne.n	800512c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800511c:	4b05      	ldr	r3, [pc, #20]	; (8005134 <_SendPacket+0x2d8>)
 800511e:	2201      	movs	r2, #1
 8005120:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005122:	f7ff fdb7 	bl	8004c94 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005126:	4b03      	ldr	r3, [pc, #12]	; (8005134 <_SendPacket+0x2d8>)
 8005128:	2200      	movs	r2, #0
 800512a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800512c:	bf00      	nop
 800512e:	3728      	adds	r7, #40	; 0x28
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	2001a730 	.word	0x2001a730
 8005138:	20019270 	.word	0x20019270

0800513c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	3301      	adds	r3, #1
 8005152:	2b80      	cmp	r3, #128	; 0x80
 8005154:	d80a      	bhi.n	800516c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	1c59      	adds	r1, r3, #1
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6051      	str	r1, [r2, #4]
 8005160:	78fa      	ldrb	r2, [r7, #3]
 8005162:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2b80      	cmp	r3, #128	; 0x80
 8005172:	d15a      	bne.n	800522a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	623b      	str	r3, [r7, #32]
 8005194:	e00b      	b.n	80051ae <_StoreChar+0x72>
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	1c59      	adds	r1, r3, #1
 800519e:	6279      	str	r1, [r7, #36]	; 0x24
 80051a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	701a      	strb	r2, [r3, #0]
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	09db      	lsrs	r3, r3, #7
 80051ac:	623b      	str	r3, [r7, #32]
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	2b7f      	cmp	r3, #127	; 0x7f
 80051b2:	d8f0      	bhi.n	8005196 <_StoreChar+0x5a>
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	627a      	str	r2, [r7, #36]	; 0x24
 80051ba:	6a3a      	ldr	r2, [r7, #32]
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	61fb      	str	r3, [r7, #28]
 80051c8:	2300      	movs	r3, #0
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	e00b      	b.n	80051e6 <_StoreChar+0xaa>
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	1c59      	adds	r1, r3, #1
 80051d6:	61f9      	str	r1, [r7, #28]
 80051d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	09db      	lsrs	r3, r3, #7
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b7f      	cmp	r3, #127	; 0x7f
 80051ea:	d8f0      	bhi.n	80051ce <_StoreChar+0x92>
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	61fa      	str	r2, [r7, #28]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	221a      	movs	r2, #26
 8005202:	6939      	ldr	r1, [r7, #16]
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff fe29 	bl	8004e5c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fd34 	bl	8004c7c <_PreparePacket>
 8005214:	4602      	mov	r2, r0
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	611a      	str	r2, [r3, #16]
  }
}
 800522a:	bf00      	nop
 800522c:	3728      	adds	r7, #40	; 0x28
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b08a      	sub	sp, #40	; 0x28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005246:	2301      	movs	r3, #1
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800524a:	2301      	movs	r3, #1
 800524c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800524e:	e007      	b.n	8005260 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005250:	6a3a      	ldr	r2, [r7, #32]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	623b      	str	r3, [r7, #32]
    Width++;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3301      	adds	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005260:	6a3a      	ldr	r2, [r7, #32]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	429a      	cmp	r2, r3
 8005266:	d2f3      	bcs.n	8005250 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	429a      	cmp	r2, r3
 800526e:	d901      	bls.n	8005274 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d11f      	bne.n	80052be <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01c      	beq.n	80052be <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <_PrintUnsigned+0x66>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <_PrintUnsigned+0x66>
        c = '0';
 8005294:	2330      	movs	r3, #48	; 0x30
 8005296:	76fb      	strb	r3, [r7, #27]
 8005298:	e001      	b.n	800529e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800529a:	2320      	movs	r3, #32
 800529c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800529e:	e007      	b.n	80052b0 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	3b01      	subs	r3, #1
 80052a4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80052a6:	7efb      	ldrb	r3, [r7, #27]
 80052a8:	4619      	mov	r1, r3
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7ff ff46 	bl	800513c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <_PrintUnsigned+0x8a>
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d3f0      	bcc.n	80052a0 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d903      	bls.n	80052cc <_PrintUnsigned+0x98>
      NumDigits--;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	603b      	str	r3, [r7, #0]
 80052ca:	e009      	b.n	80052e0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d200      	bcs.n	80052e0 <_PrintUnsigned+0xac>
        break;
 80052de:	e005      	b.n	80052ec <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	fb02 f303 	mul.w	r3, r2, r3
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80052ea:	e7e8      	b.n	80052be <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fa:	fb02 f303 	mul.w	r3, r2, r3
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005304:	4a15      	ldr	r2, [pc, #84]	; (800535c <_PrintUnsigned+0x128>)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	4413      	add	r3, r2
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	4619      	mov	r1, r3
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff ff14 	bl	800513c <_StoreChar>
    Digit /= Base;
 8005314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	fbb2 f3f3 	udiv	r3, r2, r3
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e3      	bne.n	80052ec <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d011      	beq.n	8005352 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00e      	beq.n	8005352 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005334:	e006      	b.n	8005344 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	3b01      	subs	r3, #1
 800533a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 800533c:	2120      	movs	r1, #32
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7ff fefc 	bl	800513c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <_PrintUnsigned+0x11e>
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	429a      	cmp	r2, r3
 8005350:	d3f1      	bcc.n	8005336 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005352:	bf00      	nop
 8005354:	3728      	adds	r7, #40	; 0x28
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	08006ad4 	.word	0x08006ad4

08005360 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af02      	add	r7, sp, #8
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	bfb8      	it	lt
 8005374:	425b      	neglt	r3, r3
 8005376:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005378:	2301      	movs	r3, #1
 800537a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800537c:	e007      	b.n	800538e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	fb92 f3f3 	sdiv	r3, r2, r3
 8005386:	613b      	str	r3, [r7, #16]
    Width++;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	3301      	adds	r3, #1
 800538c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	429a      	cmp	r2, r3
 8005394:	daf3      	bge.n	800537e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	429a      	cmp	r2, r3
 800539c:	d901      	bls.n	80053a2 <_PrintInt+0x42>
    Width = NumDigits;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <_PrintInt+0x5e>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	db04      	blt.n	80053b8 <_PrintInt+0x58>
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <_PrintInt+0x5e>
    FieldWidth--;
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <_PrintInt+0x6e>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d016      	beq.n	80053fc <_PrintInt+0x9c>
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d111      	bne.n	80053fc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00e      	beq.n	80053fc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80053de:	e006      	b.n	80053ee <_PrintInt+0x8e>
        FieldWidth--;
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80053e6:	2120      	movs	r1, #32
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f7ff fea7 	bl	800513c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <_PrintInt+0x9c>
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d3f1      	bcc.n	80053e0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	da07      	bge.n	8005412 <_PrintInt+0xb2>
    v = -v;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	425b      	negs	r3, r3
 8005406:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005408:	212d      	movs	r1, #45	; 0x2d
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff fe96 	bl	800513c <_StoreChar>
 8005410:	e008      	b.n	8005424 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800541c:	212b      	movs	r1, #43	; 0x2b
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7ff fe8c 	bl	800513c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d019      	beq.n	8005462 <_PrintInt+0x102>
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d114      	bne.n	8005462 <_PrintInt+0x102>
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d111      	bne.n	8005462 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00e      	beq.n	8005462 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005444:	e006      	b.n	8005454 <_PrintInt+0xf4>
        FieldWidth--;
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	3b01      	subs	r3, #1
 800544a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800544c:	2130      	movs	r1, #48	; 0x30
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f7ff fe74 	bl	800513c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <_PrintInt+0x102>
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	429a      	cmp	r2, r3
 8005460:	d3f1      	bcc.n	8005446 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f7ff fedf 	bl	8005234 <_PrintUnsigned>
}
 8005476:	bf00      	nop
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b098      	sub	sp, #96	; 0x60
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800548c:	f3ef 8311 	mrs	r3, BASEPRI
 8005490:	f04f 0120 	mov.w	r1, #32
 8005494:	f381 8811 	msr	BASEPRI, r1
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800549a:	48b7      	ldr	r0, [pc, #732]	; (8005778 <_VPrintTarget+0x2f8>)
 800549c:	f7ff fbee 	bl	8004c7c <_PreparePacket>
 80054a0:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80054a2:	4bb5      	ldr	r3, [pc, #724]	; (8005778 <_VPrintTarget+0x2f8>)
 80054a4:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80054a6:	2300      	movs	r3, #0
 80054a8:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	3301      	adds	r3, #1
 80054b2:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80054c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 81a8 	beq.w	8005820 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80054d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054d4:	2b25      	cmp	r3, #37	; 0x25
 80054d6:	f040 8195 	bne.w	8005804 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80054da:	2300      	movs	r3, #0
 80054dc:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80054ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054ee:	3b23      	subs	r3, #35	; 0x23
 80054f0:	2b0d      	cmp	r3, #13
 80054f2:	d83f      	bhi.n	8005574 <_VPrintTarget+0xf4>
 80054f4:	a201      	add	r2, pc, #4	; (adr r2, 80054fc <_VPrintTarget+0x7c>)
 80054f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fa:	bf00      	nop
 80054fc:	08005565 	.word	0x08005565
 8005500:	08005575 	.word	0x08005575
 8005504:	08005575 	.word	0x08005575
 8005508:	08005575 	.word	0x08005575
 800550c:	08005575 	.word	0x08005575
 8005510:	08005575 	.word	0x08005575
 8005514:	08005575 	.word	0x08005575
 8005518:	08005575 	.word	0x08005575
 800551c:	08005555 	.word	0x08005555
 8005520:	08005575 	.word	0x08005575
 8005524:	08005535 	.word	0x08005535
 8005528:	08005575 	.word	0x08005575
 800552c:	08005575 	.word	0x08005575
 8005530:	08005545 	.word	0x08005545
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	64bb      	str	r3, [r7, #72]	; 0x48
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3301      	adds	r3, #1
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	e01a      	b.n	800557a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005546:	f043 0302 	orr.w	r3, r3, #2
 800554a:	64bb      	str	r3, [r7, #72]	; 0x48
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	3301      	adds	r3, #1
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e012      	b.n	800557a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005556:	f043 0304 	orr.w	r3, r3, #4
 800555a:	64bb      	str	r3, [r7, #72]	; 0x48
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3301      	adds	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	e00a      	b.n	800557a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005566:	f043 0308 	orr.w	r3, r3, #8
 800556a:	64bb      	str	r3, [r7, #72]	; 0x48
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	e002      	b.n	800557a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005574:	2300      	movs	r3, #0
 8005576:	653b      	str	r3, [r7, #80]	; 0x50
 8005578:	bf00      	nop
        }
      } while (v);
 800557a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1b0      	bne.n	80054e2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005580:	2300      	movs	r3, #0
 8005582:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800558c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005590:	2b2f      	cmp	r3, #47	; 0x2f
 8005592:	d912      	bls.n	80055ba <_VPrintTarget+0x13a>
 8005594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005598:	2b39      	cmp	r3, #57	; 0x39
 800559a:	d80e      	bhi.n	80055ba <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3301      	adds	r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80055a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	461a      	mov	r2, r3
 80055ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055b2:	4413      	add	r3, r2
 80055b4:	3b30      	subs	r3, #48	; 0x30
 80055b6:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80055b8:	e7e4      	b.n	8005584 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80055ba:	2300      	movs	r3, #0
 80055bc:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80055c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055ca:	2b2e      	cmp	r3, #46	; 0x2e
 80055cc:	d11d      	bne.n	800560a <_VPrintTarget+0x18a>
        sFormat++;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3301      	adds	r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80055dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055e0:	2b2f      	cmp	r3, #47	; 0x2f
 80055e2:	d912      	bls.n	800560a <_VPrintTarget+0x18a>
 80055e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055e8:	2b39      	cmp	r3, #57	; 0x39
 80055ea:	d80e      	bhi.n	800560a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3301      	adds	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80055f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	461a      	mov	r2, r3
 80055fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005602:	4413      	add	r3, r2
 8005604:	3b30      	subs	r3, #48	; 0x30
 8005606:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005608:	e7e4      	b.n	80055d4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005612:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005616:	2b6c      	cmp	r3, #108	; 0x6c
 8005618:	d003      	beq.n	8005622 <_VPrintTarget+0x1a2>
 800561a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800561e:	2b68      	cmp	r3, #104	; 0x68
 8005620:	d107      	bne.n	8005632 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3301      	adds	r3, #1
 800562e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005630:	e7ef      	b.n	8005612 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005632:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005636:	2b25      	cmp	r3, #37	; 0x25
 8005638:	f000 80d8 	beq.w	80057ec <_VPrintTarget+0x36c>
 800563c:	2b25      	cmp	r3, #37	; 0x25
 800563e:	f2c0 80dc 	blt.w	80057fa <_VPrintTarget+0x37a>
 8005642:	2b78      	cmp	r3, #120	; 0x78
 8005644:	f300 80d9 	bgt.w	80057fa <_VPrintTarget+0x37a>
 8005648:	2b58      	cmp	r3, #88	; 0x58
 800564a:	f2c0 80d6 	blt.w	80057fa <_VPrintTarget+0x37a>
 800564e:	3b58      	subs	r3, #88	; 0x58
 8005650:	2b20      	cmp	r3, #32
 8005652:	f200 80d2 	bhi.w	80057fa <_VPrintTarget+0x37a>
 8005656:	a201      	add	r2, pc, #4	; (adr r2, 800565c <_VPrintTarget+0x1dc>)
 8005658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565c:	08005753 	.word	0x08005753
 8005660:	080057fb 	.word	0x080057fb
 8005664:	080057fb 	.word	0x080057fb
 8005668:	080057fb 	.word	0x080057fb
 800566c:	080057fb 	.word	0x080057fb
 8005670:	080057fb 	.word	0x080057fb
 8005674:	080057fb 	.word	0x080057fb
 8005678:	080057fb 	.word	0x080057fb
 800567c:	080057fb 	.word	0x080057fb
 8005680:	080057fb 	.word	0x080057fb
 8005684:	080057fb 	.word	0x080057fb
 8005688:	080056e1 	.word	0x080056e1
 800568c:	08005707 	.word	0x08005707
 8005690:	080057fb 	.word	0x080057fb
 8005694:	080057fb 	.word	0x080057fb
 8005698:	080057fb 	.word	0x080057fb
 800569c:	080057fb 	.word	0x080057fb
 80056a0:	080057fb 	.word	0x080057fb
 80056a4:	080057fb 	.word	0x080057fb
 80056a8:	080057fb 	.word	0x080057fb
 80056ac:	080057fb 	.word	0x080057fb
 80056b0:	080057fb 	.word	0x080057fb
 80056b4:	080057fb 	.word	0x080057fb
 80056b8:	080057fb 	.word	0x080057fb
 80056bc:	080057c7 	.word	0x080057c7
 80056c0:	080057fb 	.word	0x080057fb
 80056c4:	080057fb 	.word	0x080057fb
 80056c8:	0800577d 	.word	0x0800577d
 80056cc:	080057fb 	.word	0x080057fb
 80056d0:	0800572d 	.word	0x0800572d
 80056d4:	080057fb 	.word	0x080057fb
 80056d8:	080057fb 	.word	0x080057fb
 80056dc:	08005753 	.word	0x08005753
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	1d19      	adds	r1, r3, #4
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6011      	str	r1, [r2, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80056ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 80056f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80056f8:	f107 0310 	add.w	r3, r7, #16
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff fd1c 	bl	800513c <_StoreChar>
        break;
 8005704:	e07a      	b.n	80057fc <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	1d19      	adds	r1, r3, #4
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6011      	str	r1, [r2, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005714:	f107 0010 	add.w	r0, r7, #16
 8005718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571a:	9301      	str	r3, [sp, #4]
 800571c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005722:	220a      	movs	r2, #10
 8005724:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005726:	f7ff fe1b 	bl	8005360 <_PrintInt>
        break;
 800572a:	e067      	b.n	80057fc <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	1d19      	adds	r1, r3, #4
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6011      	str	r1, [r2, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800573a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800573c:	f107 0010 	add.w	r0, r7, #16
 8005740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800574a:	220a      	movs	r2, #10
 800574c:	f7ff fd72 	bl	8005234 <_PrintUnsigned>
        break;
 8005750:	e054      	b.n	80057fc <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	1d19      	adds	r1, r3, #4
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6011      	str	r1, [r2, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005760:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005762:	f107 0010 	add.w	r0, r7, #16
 8005766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005770:	2210      	movs	r2, #16
 8005772:	f7ff fd5f 	bl	8005234 <_PrintUnsigned>
        break;
 8005776:	e041      	b.n	80057fc <_VPrintTarget+0x37c>
 8005778:	2001a760 	.word	0x2001a760
      case 's':
        s = va_arg(*pParamList, const char*);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	1d19      	adds	r1, r3, #4
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6011      	str	r1, [r2, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 800578a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <_VPrintTarget+0x314>
          s = "(null)";
 8005790:	4b4a      	ldr	r3, [pc, #296]	; (80058bc <_VPrintTarget+0x43c>)
 8005792:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 800579c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800579e:	3301      	adds	r3, #1
 80057a0:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 80057a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00b      	beq.n	80057c2 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80057aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80057ae:	f107 0310 	add.w	r3, r7, #16
 80057b2:	4611      	mov	r1, r2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff fcc1 	bl	800513c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	2b7f      	cmp	r3, #127	; 0x7f
 80057be:	d9e9      	bls.n	8005794 <_VPrintTarget+0x314>
        break;
 80057c0:	e01c      	b.n	80057fc <_VPrintTarget+0x37c>
            break;
 80057c2:	bf00      	nop
        break;
 80057c4:	e01a      	b.n	80057fc <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	1d19      	adds	r1, r3, #4
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6011      	str	r1, [r2, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80057d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057d6:	f107 0010 	add.w	r0, r7, #16
 80057da:	2300      	movs	r3, #0
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	2308      	movs	r3, #8
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	2308      	movs	r3, #8
 80057e4:	2210      	movs	r2, #16
 80057e6:	f7ff fd25 	bl	8005234 <_PrintUnsigned>
        break;
 80057ea:	e007      	b.n	80057fc <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80057ec:	f107 0310 	add.w	r3, r7, #16
 80057f0:	2125      	movs	r1, #37	; 0x25
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fca2 	bl	800513c <_StoreChar>
        break;
 80057f8:	e000      	b.n	80057fc <_VPrintTarget+0x37c>
      default:
        break;
 80057fa:	bf00      	nop
      }
      sFormat++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	e007      	b.n	8005814 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005804:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005808:	f107 0310 	add.w	r3, r7, #16
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fc94 	bl	800513c <_StoreChar>
    }
  } while (*sFormat);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f47f ae4d 	bne.w	80054b8 <_VPrintTarget+0x38>
 800581e:	e000      	b.n	8005822 <_VPrintTarget+0x3a2>
      break;
 8005820:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d041      	beq.n	80058ac <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005828:	6a3a      	ldr	r2, [r7, #32]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38
 8005838:	e00b      	b.n	8005852 <_VPrintTarget+0x3d2>
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	b2da      	uxtb	r2, r3
 800583e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005840:	1c59      	adds	r1, r3, #1
 8005842:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005844:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	09db      	lsrs	r3, r3, #7
 8005850:	63bb      	str	r3, [r7, #56]	; 0x38
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	2b7f      	cmp	r3, #127	; 0x7f
 8005856:	d8f0      	bhi.n	800583a <_VPrintTarget+0x3ba>
 8005858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800585e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005866:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	637b      	str	r3, [r7, #52]	; 0x34
 800586c:	2300      	movs	r3, #0
 800586e:	633b      	str	r3, [r7, #48]	; 0x30
 8005870:	e00b      	b.n	800588a <_VPrintTarget+0x40a>
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	b2da      	uxtb	r2, r3
 8005876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005878:	1c59      	adds	r1, r3, #1
 800587a:	6379      	str	r1, [r7, #52]	; 0x34
 800587c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	09db      	lsrs	r3, r3, #7
 8005888:	633b      	str	r3, [r7, #48]	; 0x30
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	2b7f      	cmp	r3, #127	; 0x7f
 800588e:	d8f0      	bhi.n	8005872 <_VPrintTarget+0x3f2>
 8005890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	637a      	str	r2, [r7, #52]	; 0x34
 8005896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	6979      	ldr	r1, [r7, #20]
 80058a4:	221a      	movs	r2, #26
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff fad8 	bl	8004e5c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80058ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ae:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80058b2:	bf00      	nop
 80058b4:	3758      	adds	r7, #88	; 0x58
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	08006a80 	.word	0x08006a80

080058c0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80058ce:	2300      	movs	r3, #0
 80058d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058d4:	4917      	ldr	r1, [pc, #92]	; (8005934 <SEGGER_SYSVIEW_Init+0x74>)
 80058d6:	4818      	ldr	r0, [pc, #96]	; (8005938 <SEGGER_SYSVIEW_Init+0x78>)
 80058d8:	f7ff f8d0 	bl	8004a7c <SEGGER_RTT_AllocUpBuffer>
 80058dc:	4603      	mov	r3, r0
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	4b16      	ldr	r3, [pc, #88]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 80058e2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80058e4:	4b15      	ldr	r3, [pc, #84]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 80058e6:	785a      	ldrb	r2, [r3, #1]
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 80058ea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80058ec:	4b13      	ldr	r3, [pc, #76]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 80058ee:	7e1b      	ldrb	r3, [r3, #24]
 80058f0:	4618      	mov	r0, r3
 80058f2:	2300      	movs	r3, #0
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	2308      	movs	r3, #8
 80058f8:	4a11      	ldr	r2, [pc, #68]	; (8005940 <SEGGER_SYSVIEW_Init+0x80>)
 80058fa:	490f      	ldr	r1, [pc, #60]	; (8005938 <SEGGER_SYSVIEW_Init+0x78>)
 80058fc:	f7ff f942 	bl	8004b84 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005900:	4b0e      	ldr	r3, [pc, #56]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 8005902:	2200      	movs	r2, #0
 8005904:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005906:	4b0f      	ldr	r3, [pc, #60]	; (8005944 <SEGGER_SYSVIEW_Init+0x84>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a0c      	ldr	r2, [pc, #48]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 800590c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800590e:	4a0b      	ldr	r2, [pc, #44]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005914:	4a09      	ldr	r2, [pc, #36]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800591a:	4a08      	ldr	r2, [pc, #32]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005920:	4a06      	ldr	r2, [pc, #24]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20019728 	.word	0x20019728
 8005938:	08006a88 	.word	0x08006a88
 800593c:	2001a730 	.word	0x2001a730
 8005940:	2001a728 	.word	0x2001a728
 8005944:	e0001004 	.word	0xe0001004

08005948 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005950:	4a04      	ldr	r2, [pc, #16]	; (8005964 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6113      	str	r3, [r2, #16]
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	2001a730 	.word	0x2001a730

08005968 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005970:	f3ef 8311 	mrs	r3, BASEPRI
 8005974:	f04f 0120 	mov.w	r1, #32
 8005978:	f381 8811 	msr	BASEPRI, r1
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	4808      	ldr	r0, [pc, #32]	; (80059a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005980:	f7ff f97c 	bl	8004c7c <_PreparePacket>
 8005984:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	68b8      	ldr	r0, [r7, #8]
 800598c:	f7ff fa66 	bl	8004e5c <_SendPacket>
  RECORD_END();
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f383 8811 	msr	BASEPRI, r3
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	2001a760 	.word	0x2001a760

080059a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059ae:	f3ef 8311 	mrs	r3, BASEPRI
 80059b2:	f04f 0120 	mov.w	r1, #32
 80059b6:	f381 8811 	msr	BASEPRI, r1
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	4816      	ldr	r0, [pc, #88]	; (8005a18 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80059be:	f7ff f95d 	bl	8004c7c <_PreparePacket>
 80059c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	61bb      	str	r3, [r7, #24]
 80059d0:	e00b      	b.n	80059ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	1c59      	adds	r1, r3, #1
 80059da:	61f9      	str	r1, [r7, #28]
 80059dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	09db      	lsrs	r3, r3, #7
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b7f      	cmp	r3, #127	; 0x7f
 80059ee:	d8f0      	bhi.n	80059d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	61fa      	str	r2, [r7, #28]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	701a      	strb	r2, [r3, #0]
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	6938      	ldr	r0, [r7, #16]
 8005a06:	f7ff fa29 	bl	8004e5c <_SendPacket>
  RECORD_END();
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f383 8811 	msr	BASEPRI, r3
}
 8005a10:	bf00      	nop
 8005a12:	3720      	adds	r7, #32
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	2001a760 	.word	0x2001a760

08005a1c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08c      	sub	sp, #48	; 0x30
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a28:	f3ef 8311 	mrs	r3, BASEPRI
 8005a2c:	f04f 0120 	mov.w	r1, #32
 8005a30:	f381 8811 	msr	BASEPRI, r1
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	4825      	ldr	r0, [pc, #148]	; (8005acc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005a38:	f7ff f920 	bl	8004c7c <_PreparePacket>
 8005a3c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a4a:	e00b      	b.n	8005a64 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a52:	1c59      	adds	r1, r3, #1
 8005a54:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	09db      	lsrs	r3, r3, #7
 8005a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	2b7f      	cmp	r3, #127	; 0x7f
 8005a68:	d8f0      	bhi.n	8005a4c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a78:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	623b      	str	r3, [r7, #32]
 8005a82:	e00b      	b.n	8005a9c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	1c59      	adds	r1, r3, #1
 8005a8c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	09db      	lsrs	r3, r3, #7
 8005a9a:	623b      	str	r3, [r7, #32]
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa0:	d8f0      	bhi.n	8005a84 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	627a      	str	r2, [r7, #36]	; 0x24
 8005aa8:	6a3a      	ldr	r2, [r7, #32]
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	6979      	ldr	r1, [r7, #20]
 8005ab6:	69b8      	ldr	r0, [r7, #24]
 8005ab8:	f7ff f9d0 	bl	8004e5c <_SendPacket>
  RECORD_END();
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f383 8811 	msr	BASEPRI, r3
}
 8005ac2:	bf00      	nop
 8005ac4:	3730      	adds	r7, #48	; 0x30
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	2001a760 	.word	0x2001a760

08005ad0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b090      	sub	sp, #64	; 0x40
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ade:	f3ef 8311 	mrs	r3, BASEPRI
 8005ae2:	f04f 0120 	mov.w	r1, #32
 8005ae6:	f381 8811 	msr	BASEPRI, r1
 8005aea:	61fb      	str	r3, [r7, #28]
 8005aec:	4840      	ldr	r0, [pc, #256]	; (8005bf0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005aee:	f7ff f8c5 	bl	8004c7c <_PreparePacket>
 8005af2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b00:	e00b      	b.n	8005b1a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b08:	1c59      	adds	r1, r3, #1
 8005b0a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	09db      	lsrs	r3, r3, #7
 8005b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b1e:	d8f0      	bhi.n	8005b02 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	637b      	str	r3, [r7, #52]	; 0x34
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	633b      	str	r3, [r7, #48]	; 0x30
 8005b38:	e00b      	b.n	8005b52 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b40:	1c59      	adds	r1, r3, #1
 8005b42:	6379      	str	r1, [r7, #52]	; 0x34
 8005b44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	09db      	lsrs	r3, r3, #7
 8005b50:	633b      	str	r3, [r7, #48]	; 0x30
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	2b7f      	cmp	r3, #127	; 0x7f
 8005b56:	d8f0      	bhi.n	8005b3a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	637a      	str	r2, [r7, #52]	; 0x34
 8005b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b70:	e00b      	b.n	8005b8a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	1c59      	adds	r1, r3, #1
 8005b7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	09db      	lsrs	r3, r3, #7
 8005b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b8e:	d8f0      	bhi.n	8005b72 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba6:	623b      	str	r3, [r7, #32]
 8005ba8:	e00b      	b.n	8005bc2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	1c59      	adds	r1, r3, #1
 8005bb2:	6279      	str	r1, [r7, #36]	; 0x24
 8005bb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	09db      	lsrs	r3, r3, #7
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc6:	d8f0      	bhi.n	8005baa <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	627a      	str	r2, [r7, #36]	; 0x24
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	6979      	ldr	r1, [r7, #20]
 8005bdc:	69b8      	ldr	r0, [r7, #24]
 8005bde:	f7ff f93d 	bl	8004e5c <_SendPacket>
  RECORD_END();
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f383 8811 	msr	BASEPRI, r3
}
 8005be8:	bf00      	nop
 8005bea:	3740      	adds	r7, #64	; 0x40
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	2001a760 	.word	0x2001a760

08005bf4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08c      	sub	sp, #48	; 0x30
 8005bf8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005bfa:	4b59      	ldr	r3, [pc, #356]	; (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005c00:	f3ef 8311 	mrs	r3, BASEPRI
 8005c04:	f04f 0120 	mov.w	r1, #32
 8005c08:	f381 8811 	msr	BASEPRI, r1
 8005c0c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005c0e:	4b54      	ldr	r3, [pc, #336]	; (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c10:	785b      	ldrb	r3, [r3, #1]
 8005c12:	220a      	movs	r2, #10
 8005c14:	4953      	ldr	r1, [pc, #332]	; (8005d64 <SEGGER_SYSVIEW_Start+0x170>)
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fa fafa 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005c22:	f7fe fbfd 	bl	8004420 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005c26:	200a      	movs	r0, #10
 8005c28:	f7ff fe9e 	bl	8005968 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c2c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c30:	f04f 0120 	mov.w	r1, #32
 8005c34:	f381 8811 	msr	BASEPRI, r1
 8005c38:	60bb      	str	r3, [r7, #8]
 8005c3a:	484b      	ldr	r0, [pc, #300]	; (8005d68 <SEGGER_SYSVIEW_Start+0x174>)
 8005c3c:	f7ff f81e 	bl	8004c7c <_PreparePacket>
 8005c40:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c4a:	4b45      	ldr	r3, [pc, #276]	; (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c50:	e00b      	b.n	8005c6a <SEGGER_SYSVIEW_Start+0x76>
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c58:	1c59      	adds	r1, r3, #1
 8005c5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	09db      	lsrs	r3, r3, #7
 8005c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c6e:	d8f0      	bhi.n	8005c52 <SEGGER_SYSVIEW_Start+0x5e>
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
 8005c84:	4b36      	ldr	r3, [pc, #216]	; (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	623b      	str	r3, [r7, #32]
 8005c8a:	e00b      	b.n	8005ca4 <SEGGER_SYSVIEW_Start+0xb0>
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	1c59      	adds	r1, r3, #1
 8005c94:	6279      	str	r1, [r7, #36]	; 0x24
 8005c96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	09db      	lsrs	r3, r3, #7
 8005ca2:	623b      	str	r3, [r7, #32]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca8:	d8f0      	bhi.n	8005c8c <SEGGER_SYSVIEW_Start+0x98>
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	627a      	str	r2, [r7, #36]	; 0x24
 8005cb0:	6a3a      	ldr	r2, [r7, #32]
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	4b28      	ldr	r3, [pc, #160]	; (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	61bb      	str	r3, [r7, #24]
 8005cc4:	e00b      	b.n	8005cde <SEGGER_SYSVIEW_Start+0xea>
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	1c59      	adds	r1, r3, #1
 8005cce:	61f9      	str	r1, [r7, #28]
 8005cd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	09db      	lsrs	r3, r3, #7
 8005cdc:	61bb      	str	r3, [r7, #24]
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce2:	d8f0      	bhi.n	8005cc6 <SEGGER_SYSVIEW_Start+0xd2>
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	61fa      	str	r2, [r7, #28]
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	e00b      	b.n	8005d16 <SEGGER_SYSVIEW_Start+0x122>
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	1c59      	adds	r1, r3, #1
 8005d06:	6179      	str	r1, [r7, #20]
 8005d08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	09db      	lsrs	r3, r3, #7
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b7f      	cmp	r3, #127	; 0x7f
 8005d1a:	d8f0      	bhi.n	8005cfe <SEGGER_SYSVIEW_Start+0x10a>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	617a      	str	r2, [r7, #20]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d2c:	2218      	movs	r2, #24
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff f893 	bl	8004e5c <_SendPacket>
      RECORD_END();
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d3c:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005d4a:	f000 f9eb 	bl	8006124 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005d4e:	f000 f9b1 	bl	80060b4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005d52:	f000 fc8d 	bl	8006670 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005d56:	bf00      	nop
 8005d58:	3730      	adds	r7, #48	; 0x30
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	2001a730 	.word	0x2001a730
 8005d64:	08006ac8 	.word	0x08006ac8
 8005d68:	2001a760 	.word	0x2001a760

08005d6c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d72:	f3ef 8311 	mrs	r3, BASEPRI
 8005d76:	f04f 0120 	mov.w	r1, #32
 8005d7a:	f381 8811 	msr	BASEPRI, r1
 8005d7e:	607b      	str	r3, [r7, #4]
 8005d80:	480b      	ldr	r0, [pc, #44]	; (8005db0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005d82:	f7fe ff7b 	bl	8004c7c <_PreparePacket>
 8005d86:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005d88:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005d90:	220b      	movs	r2, #11
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	6838      	ldr	r0, [r7, #0]
 8005d96:	f7ff f861 	bl	8004e5c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005d9a:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f383 8811 	msr	BASEPRI, r3
}
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	2001a760 	.word	0x2001a760
 8005db4:	2001a730 	.word	0x2001a730

08005db8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08c      	sub	sp, #48	; 0x30
 8005dbc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dbe:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc2:	f04f 0120 	mov.w	r1, #32
 8005dc6:	f381 8811 	msr	BASEPRI, r1
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	4845      	ldr	r0, [pc, #276]	; (8005ee4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005dce:	f7fe ff55 	bl	8004c7c <_PreparePacket>
 8005dd2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ddc:	4b42      	ldr	r3, [pc, #264]	; (8005ee8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005de2:	e00b      	b.n	8005dfc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	1c59      	adds	r1, r3, #1
 8005dec:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005dee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	09db      	lsrs	r3, r3, #7
 8005dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8005e00:	d8f0      	bhi.n	8005de4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
 8005e16:	4b34      	ldr	r3, [pc, #208]	; (8005ee8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	623b      	str	r3, [r7, #32]
 8005e1c:	e00b      	b.n	8005e36 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	1c59      	adds	r1, r3, #1
 8005e26:	6279      	str	r1, [r7, #36]	; 0x24
 8005e28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	09db      	lsrs	r3, r3, #7
 8005e34:	623b      	str	r3, [r7, #32]
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	2b7f      	cmp	r3, #127	; 0x7f
 8005e3a:	d8f0      	bhi.n	8005e1e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	627a      	str	r2, [r7, #36]	; 0x24
 8005e42:	6a3a      	ldr	r2, [r7, #32]
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	4b25      	ldr	r3, [pc, #148]	; (8005ee8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	e00b      	b.n	8005e70 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	1c59      	adds	r1, r3, #1
 8005e60:	61f9      	str	r1, [r7, #28]
 8005e62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	09db      	lsrs	r3, r3, #7
 8005e6e:	61bb      	str	r3, [r7, #24]
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	2b7f      	cmp	r3, #127	; 0x7f
 8005e74:	d8f0      	bhi.n	8005e58 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	61fa      	str	r2, [r7, #28]
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	e00b      	b.n	8005ea8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	1c59      	adds	r1, r3, #1
 8005e98:	6179      	str	r1, [r7, #20]
 8005e9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	09db      	lsrs	r3, r3, #7
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8005eac:	d8f0      	bhi.n	8005e90 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	617a      	str	r2, [r7, #20]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ebe:	2218      	movs	r2, #24
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	68b8      	ldr	r0, [r7, #8]
 8005ec4:	f7fe ffca 	bl	8004e5c <_SendPacket>
  RECORD_END();
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ece:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005ed6:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	4798      	blx	r3
  }
}
 8005edc:	bf00      	nop
 8005ede:	3730      	adds	r7, #48	; 0x30
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	2001a760 	.word	0x2001a760
 8005ee8:	2001a730 	.word	0x2001a730

08005eec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b092      	sub	sp, #72	; 0x48
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005ef4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ef8:	f04f 0120 	mov.w	r1, #32
 8005efc:	f381 8811 	msr	BASEPRI, r1
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	486a      	ldr	r0, [pc, #424]	; (80060ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005f04:	f7fe feba 	bl	8004c7c <_PreparePacket>
 8005f08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	647b      	str	r3, [r7, #68]	; 0x44
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	4b66      	ldr	r3, [pc, #408]	; (80060b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f1e:	e00b      	b.n	8005f38 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f26:	1c59      	adds	r1, r3, #1
 8005f28:	6479      	str	r1, [r7, #68]	; 0x44
 8005f2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f34:	09db      	lsrs	r3, r3, #7
 8005f36:	643b      	str	r3, [r7, #64]	; 0x40
 8005f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f3c:	d8f0      	bhi.n	8005f20 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	647a      	str	r2, [r7, #68]	; 0x44
 8005f44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f58:	e00b      	b.n	8005f72 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f60:	1c59      	adds	r1, r3, #1
 8005f62:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	09db      	lsrs	r3, r3, #7
 8005f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	2b7f      	cmp	r3, #127	; 0x7f
 8005f76:	d8f0      	bhi.n	8005f5a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f86:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	4619      	mov	r1, r3
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7fe fe43 	bl	8004c1c <_EncodeStr>
 8005f96:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005f98:	2209      	movs	r2, #9
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	6938      	ldr	r0, [r7, #16]
 8005f9e:	f7fe ff5d 	bl	8004e5c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	4b40      	ldr	r3, [pc, #256]	; (80060b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb6:	e00b      	b.n	8005fd0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbe:	1c59      	adds	r1, r3, #1
 8005fc0:	6379      	str	r1, [r7, #52]	; 0x34
 8005fc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	09db      	lsrs	r3, r3, #7
 8005fce:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fd4:	d8f0      	bhi.n	8005fb8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	637a      	str	r2, [r7, #52]	; 0x34
 8005fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff0:	e00b      	b.n	800600a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	1c59      	adds	r1, r3, #1
 8005ffa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ffc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	09db      	lsrs	r3, r3, #7
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	2b7f      	cmp	r3, #127	; 0x7f
 800600e:	d8f0      	bhi.n	8005ff2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	623b      	str	r3, [r7, #32]
 800602a:	e00b      	b.n	8006044 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	b2da      	uxtb	r2, r3
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	1c59      	adds	r1, r3, #1
 8006034:	6279      	str	r1, [r7, #36]	; 0x24
 8006036:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	09db      	lsrs	r3, r3, #7
 8006042:	623b      	str	r3, [r7, #32]
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	2b7f      	cmp	r3, #127	; 0x7f
 8006048:	d8f0      	bhi.n	800602c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	627a      	str	r2, [r7, #36]	; 0x24
 8006050:	6a3a      	ldr	r2, [r7, #32]
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	2300      	movs	r3, #0
 8006060:	61bb      	str	r3, [r7, #24]
 8006062:	e00b      	b.n	800607c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	b2da      	uxtb	r2, r3
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	1c59      	adds	r1, r3, #1
 800606c:	61f9      	str	r1, [r7, #28]
 800606e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	09db      	lsrs	r3, r3, #7
 800607a:	61bb      	str	r3, [r7, #24]
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b7f      	cmp	r3, #127	; 0x7f
 8006080:	d8f0      	bhi.n	8006064 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	61fa      	str	r2, [r7, #28]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006092:	2215      	movs	r2, #21
 8006094:	68f9      	ldr	r1, [r7, #12]
 8006096:	6938      	ldr	r0, [r7, #16]
 8006098:	f7fe fee0 	bl	8004e5c <_SendPacket>
  RECORD_END();
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f383 8811 	msr	BASEPRI, r3
}
 80060a2:	bf00      	nop
 80060a4:	3748      	adds	r7, #72	; 0x48
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	2001a760 	.word	0x2001a760
 80060b0:	2001a730 	.word	0x2001a730

080060b4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80060b8:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80060c0:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80060ca:	4b03      	ldr	r3, [pc, #12]	; (80060d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	4798      	blx	r3
  }
}
 80060d2:	bf00      	nop
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	2001a730 	.word	0x2001a730

080060dc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060e4:	f3ef 8311 	mrs	r3, BASEPRI
 80060e8:	f04f 0120 	mov.w	r1, #32
 80060ec:	f381 8811 	msr	BASEPRI, r1
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	480b      	ldr	r0, [pc, #44]	; (8006120 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80060f4:	f7fe fdc2 	bl	8004c7c <_PreparePacket>
 80060f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060fa:	2280      	movs	r2, #128	; 0x80
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	6938      	ldr	r0, [r7, #16]
 8006100:	f7fe fd8c 	bl	8004c1c <_EncodeStr>
 8006104:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006106:	220e      	movs	r2, #14
 8006108:	68f9      	ldr	r1, [r7, #12]
 800610a:	6938      	ldr	r0, [r7, #16]
 800610c:	f7fe fea6 	bl	8004e5c <_SendPacket>
  RECORD_END();
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f383 8811 	msr	BASEPRI, r3
}
 8006116:	bf00      	nop
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	2001a760 	.word	0x2001a760

08006124 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800612a:	4b15      	ldr	r3, [pc, #84]	; (8006180 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d01a      	beq.n	8006168 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006132:	4b13      	ldr	r3, [pc, #76]	; (8006180 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d015      	beq.n	8006168 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800613c:	4b10      	ldr	r3, [pc, #64]	; (8006180 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4798      	blx	r3
 8006144:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006148:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800614a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	000a      	movs	r2, r1
 8006158:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800615a:	4613      	mov	r3, r2
 800615c:	461a      	mov	r2, r3
 800615e:	4621      	mov	r1, r4
 8006160:	200d      	movs	r0, #13
 8006162:	f7ff fc5b 	bl	8005a1c <SEGGER_SYSVIEW_RecordU32x2>
 8006166:	e006      	b.n	8006176 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006168:	4b06      	ldr	r3, [pc, #24]	; (8006184 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4619      	mov	r1, r3
 800616e:	200c      	movs	r0, #12
 8006170:	f7ff fc18 	bl	80059a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	bd90      	pop	{r4, r7, pc}
 800617e:	bf00      	nop
 8006180:	2001a730 	.word	0x2001a730
 8006184:	e0001004 	.word	0xe0001004

08006188 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800618e:	f3ef 8311 	mrs	r3, BASEPRI
 8006192:	f04f 0120 	mov.w	r1, #32
 8006196:	f381 8811 	msr	BASEPRI, r1
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	4819      	ldr	r0, [pc, #100]	; (8006204 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800619e:	f7fe fd6d 	bl	8004c7c <_PreparePacket>
 80061a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80061a8:	4b17      	ldr	r3, [pc, #92]	; (8006208 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	613b      	str	r3, [r7, #16]
 80061ba:	e00b      	b.n	80061d4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	1c59      	adds	r1, r3, #1
 80061c4:	6179      	str	r1, [r7, #20]
 80061c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	09db      	lsrs	r3, r3, #7
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b7f      	cmp	r3, #127	; 0x7f
 80061d8:	d8f0      	bhi.n	80061bc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	617a      	str	r2, [r7, #20]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80061ea:	2202      	movs	r2, #2
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	68b8      	ldr	r0, [r7, #8]
 80061f0:	f7fe fe34 	bl	8004e5c <_SendPacket>
  RECORD_END();
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f383 8811 	msr	BASEPRI, r3
}
 80061fa:	bf00      	nop
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	2001a760 	.word	0x2001a760
 8006208:	e000ed04 	.word	0xe000ed04

0800620c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006212:	f3ef 8311 	mrs	r3, BASEPRI
 8006216:	f04f 0120 	mov.w	r1, #32
 800621a:	f381 8811 	msr	BASEPRI, r1
 800621e:	607b      	str	r3, [r7, #4]
 8006220:	4807      	ldr	r0, [pc, #28]	; (8006240 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006222:	f7fe fd2b 	bl	8004c7c <_PreparePacket>
 8006226:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006228:	2203      	movs	r2, #3
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6838      	ldr	r0, [r7, #0]
 800622e:	f7fe fe15 	bl	8004e5c <_SendPacket>
  RECORD_END();
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f383 8811 	msr	BASEPRI, r3
}
 8006238:	bf00      	nop
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	2001a760 	.word	0x2001a760

08006244 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800624a:	f3ef 8311 	mrs	r3, BASEPRI
 800624e:	f04f 0120 	mov.w	r1, #32
 8006252:	f381 8811 	msr	BASEPRI, r1
 8006256:	607b      	str	r3, [r7, #4]
 8006258:	4807      	ldr	r0, [pc, #28]	; (8006278 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800625a:	f7fe fd0f 	bl	8004c7c <_PreparePacket>
 800625e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006260:	2212      	movs	r2, #18
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6838      	ldr	r0, [r7, #0]
 8006266:	f7fe fdf9 	bl	8004e5c <_SendPacket>
  RECORD_END();
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f383 8811 	msr	BASEPRI, r3
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	2001a760 	.word	0x2001a760

0800627c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006282:	f3ef 8311 	mrs	r3, BASEPRI
 8006286:	f04f 0120 	mov.w	r1, #32
 800628a:	f381 8811 	msr	BASEPRI, r1
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	4807      	ldr	r0, [pc, #28]	; (80062b0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006292:	f7fe fcf3 	bl	8004c7c <_PreparePacket>
 8006296:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006298:	2211      	movs	r2, #17
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6838      	ldr	r0, [r7, #0]
 800629e:	f7fe fddd 	bl	8004e5c <_SendPacket>
  RECORD_END();
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f383 8811 	msr	BASEPRI, r3
}
 80062a8:	bf00      	nop
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	2001a760 	.word	0x2001a760

080062b4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b088      	sub	sp, #32
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062bc:	f3ef 8311 	mrs	r3, BASEPRI
 80062c0:	f04f 0120 	mov.w	r1, #32
 80062c4:	f381 8811 	msr	BASEPRI, r1
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	4819      	ldr	r0, [pc, #100]	; (8006330 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80062cc:	f7fe fcd6 	bl	8004c7c <_PreparePacket>
 80062d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062d6:	4b17      	ldr	r3, [pc, #92]	; (8006334 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	61fb      	str	r3, [r7, #28]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	e00b      	b.n	8006302 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	1c59      	adds	r1, r3, #1
 80062f2:	61f9      	str	r1, [r7, #28]
 80062f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	09db      	lsrs	r3, r3, #7
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	2b7f      	cmp	r3, #127	; 0x7f
 8006306:	d8f0      	bhi.n	80062ea <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	61fa      	str	r2, [r7, #28]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006318:	2208      	movs	r2, #8
 800631a:	68f9      	ldr	r1, [r7, #12]
 800631c:	6938      	ldr	r0, [r7, #16]
 800631e:	f7fe fd9d 	bl	8004e5c <_SendPacket>
  RECORD_END();
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f383 8811 	msr	BASEPRI, r3
}
 8006328:	bf00      	nop
 800632a:	3720      	adds	r7, #32
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	2001a760 	.word	0x2001a760
 8006334:	2001a730 	.word	0x2001a730

08006338 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006340:	f3ef 8311 	mrs	r3, BASEPRI
 8006344:	f04f 0120 	mov.w	r1, #32
 8006348:	f381 8811 	msr	BASEPRI, r1
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	4819      	ldr	r0, [pc, #100]	; (80063b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006350:	f7fe fc94 	bl	8004c7c <_PreparePacket>
 8006354:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800635a:	4b17      	ldr	r3, [pc, #92]	; (80063b8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	e00b      	b.n	8006386 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	b2da      	uxtb	r2, r3
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	1c59      	adds	r1, r3, #1
 8006376:	61f9      	str	r1, [r7, #28]
 8006378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	09db      	lsrs	r3, r3, #7
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	2b7f      	cmp	r3, #127	; 0x7f
 800638a:	d8f0      	bhi.n	800636e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	61fa      	str	r2, [r7, #28]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800639c:	2204      	movs	r2, #4
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	6938      	ldr	r0, [r7, #16]
 80063a2:	f7fe fd5b 	bl	8004e5c <_SendPacket>
  RECORD_END();
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f383 8811 	msr	BASEPRI, r3
}
 80063ac:	bf00      	nop
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	2001a760 	.word	0x2001a760
 80063b8:	2001a730 	.word	0x2001a730

080063bc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063c4:	f3ef 8311 	mrs	r3, BASEPRI
 80063c8:	f04f 0120 	mov.w	r1, #32
 80063cc:	f381 8811 	msr	BASEPRI, r1
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	4819      	ldr	r0, [pc, #100]	; (8006438 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80063d4:	f7fe fc52 	bl	8004c7c <_PreparePacket>
 80063d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063de:	4b17      	ldr	r3, [pc, #92]	; (800643c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	61fb      	str	r3, [r7, #28]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	e00b      	b.n	800640a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	1c59      	adds	r1, r3, #1
 80063fa:	61f9      	str	r1, [r7, #28]
 80063fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	09db      	lsrs	r3, r3, #7
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	2b7f      	cmp	r3, #127	; 0x7f
 800640e:	d8f0      	bhi.n	80063f2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	61fa      	str	r2, [r7, #28]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006420:	2206      	movs	r2, #6
 8006422:	68f9      	ldr	r1, [r7, #12]
 8006424:	6938      	ldr	r0, [r7, #16]
 8006426:	f7fe fd19 	bl	8004e5c <_SendPacket>
  RECORD_END();
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f383 8811 	msr	BASEPRI, r3
}
 8006430:	bf00      	nop
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	2001a760 	.word	0x2001a760
 800643c:	2001a730 	.word	0x2001a730

08006440 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800644a:	f3ef 8311 	mrs	r3, BASEPRI
 800644e:	f04f 0120 	mov.w	r1, #32
 8006452:	f381 8811 	msr	BASEPRI, r1
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	4827      	ldr	r0, [pc, #156]	; (80064f8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800645a:	f7fe fc0f 	bl	8004c7c <_PreparePacket>
 800645e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006464:	4b25      	ldr	r3, [pc, #148]	; (80064fc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	623b      	str	r3, [r7, #32]
 8006476:	e00b      	b.n	8006490 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	b2da      	uxtb	r2, r3
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	1c59      	adds	r1, r3, #1
 8006480:	6279      	str	r1, [r7, #36]	; 0x24
 8006482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	09db      	lsrs	r3, r3, #7
 800648e:	623b      	str	r3, [r7, #32]
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	2b7f      	cmp	r3, #127	; 0x7f
 8006494:	d8f0      	bhi.n	8006478 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	627a      	str	r2, [r7, #36]	; 0x24
 800649c:	6a3a      	ldr	r2, [r7, #32]
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	e00b      	b.n	80064c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	1c59      	adds	r1, r3, #1
 80064b8:	61f9      	str	r1, [r7, #28]
 80064ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	09db      	lsrs	r3, r3, #7
 80064c6:	61bb      	str	r3, [r7, #24]
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2b7f      	cmp	r3, #127	; 0x7f
 80064cc:	d8f0      	bhi.n	80064b0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	61fa      	str	r2, [r7, #28]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80064de:	2207      	movs	r2, #7
 80064e0:	68f9      	ldr	r1, [r7, #12]
 80064e2:	6938      	ldr	r0, [r7, #16]
 80064e4:	f7fe fcba 	bl	8004e5c <_SendPacket>
  RECORD_END();
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f383 8811 	msr	BASEPRI, r3
}
 80064ee:	bf00      	nop
 80064f0:	3728      	adds	r7, #40	; 0x28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	2001a760 	.word	0x2001a760
 80064fc:	2001a730 	.word	0x2001a730

08006500 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006508:	4b04      	ldr	r3, [pc, #16]	; (800651c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	1ad3      	subs	r3, r2, r3
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	2001a730 	.word	0x2001a730

08006520 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	; 0x30
 8006524:	af00      	add	r7, sp, #0
 8006526:	4603      	mov	r3, r0
 8006528:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800652a:	4b40      	ldr	r3, [pc, #256]	; (800662c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d077      	beq.n	8006622 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006532:	4b3e      	ldr	r3, [pc, #248]	; (800662c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006538:	2300      	movs	r3, #0
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28
 800653c:	e008      	b.n	8006550 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d007      	beq.n	800655a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	3301      	adds	r3, #1
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006554:	429a      	cmp	r2, r3
 8006556:	d3f2      	bcc.n	800653e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006558:	e000      	b.n	800655c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800655a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d055      	beq.n	800660e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006562:	f3ef 8311 	mrs	r3, BASEPRI
 8006566:	f04f 0120 	mov.w	r1, #32
 800656a:	f381 8811 	msr	BASEPRI, r1
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	482f      	ldr	r0, [pc, #188]	; (8006630 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006572:	f7fe fb83 	bl	8004c7c <_PreparePacket>
 8006576:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	623b      	str	r3, [r7, #32]
 8006584:	e00b      	b.n	800659e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	b2da      	uxtb	r2, r3
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	1c59      	adds	r1, r3, #1
 800658e:	6279      	str	r1, [r7, #36]	; 0x24
 8006590:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	09db      	lsrs	r3, r3, #7
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	2b7f      	cmp	r3, #127	; 0x7f
 80065a2:	d8f0      	bhi.n	8006586 <SEGGER_SYSVIEW_SendModule+0x66>
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	627a      	str	r2, [r7, #36]	; 0x24
 80065aa:	6a3a      	ldr	r2, [r7, #32]
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	61fb      	str	r3, [r7, #28]
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	61bb      	str	r3, [r7, #24]
 80065be:	e00b      	b.n	80065d8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	1c59      	adds	r1, r3, #1
 80065c8:	61f9      	str	r1, [r7, #28]
 80065ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	09db      	lsrs	r3, r3, #7
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	2b7f      	cmp	r3, #127	; 0x7f
 80065dc:	d8f0      	bhi.n	80065c0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	61fa      	str	r2, [r7, #28]
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2280      	movs	r2, #128	; 0x80
 80065f4:	4619      	mov	r1, r3
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7fe fb10 	bl	8004c1c <_EncodeStr>
 80065fc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80065fe:	2216      	movs	r2, #22
 8006600:	68f9      	ldr	r1, [r7, #12]
 8006602:	6938      	ldr	r0, [r7, #16]
 8006604:	f7fe fc2a 	bl	8004e5c <_SendPacket>
      RECORD_END();
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	2b00      	cmp	r3, #0
 8006612:	d006      	beq.n	8006622 <SEGGER_SYSVIEW_SendModule+0x102>
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	4798      	blx	r3
    }
  }
}
 8006622:	bf00      	nop
 8006624:	3730      	adds	r7, #48	; 0x30
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	2001a758 	.word	0x2001a758
 8006630:	2001a760 	.word	0x2001a760

08006634 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800663a:	4b0c      	ldr	r3, [pc, #48]	; (800666c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00f      	beq.n	8006662 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006642:	4b0a      	ldr	r3, [pc, #40]	; (800666c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f2      	bne.n	8006648 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	2001a758 	.word	0x2001a758

08006670 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006676:	f3ef 8311 	mrs	r3, BASEPRI
 800667a:	f04f 0120 	mov.w	r1, #32
 800667e:	f381 8811 	msr	BASEPRI, r1
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	4817      	ldr	r0, [pc, #92]	; (80066e4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006686:	f7fe faf9 	bl	8004c7c <_PreparePacket>
 800668a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	e00b      	b.n	80066b4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	1c59      	adds	r1, r3, #1
 80066a4:	6179      	str	r1, [r7, #20]
 80066a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	09db      	lsrs	r3, r3, #7
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b7f      	cmp	r3, #127	; 0x7f
 80066b8:	d8f0      	bhi.n	800669c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	617a      	str	r2, [r7, #20]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80066ca:	221b      	movs	r2, #27
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	68b8      	ldr	r0, [r7, #8]
 80066d0:	f7fe fbc4 	bl	8004e5c <_SendPacket>
  RECORD_END();
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f383 8811 	msr	BASEPRI, r3
}
 80066da:	bf00      	nop
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	2001a760 	.word	0x2001a760
 80066e8:	2001a75c 	.word	0x2001a75c

080066ec <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80066ec:	b40f      	push	{r0, r1, r2, r3}
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80066f4:	f107 0314 	add.w	r3, r7, #20
 80066f8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80066fa:	1d3b      	adds	r3, r7, #4
 80066fc:	461a      	mov	r2, r3
 80066fe:	2100      	movs	r1, #0
 8006700:	6938      	ldr	r0, [r7, #16]
 8006702:	f7fe febd 	bl	8005480 <_VPrintTarget>
  va_end(ParamList);
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006710:	b004      	add	sp, #16
 8006712:	4770      	bx	lr

08006714 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b08a      	sub	sp, #40	; 0x28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800671c:	f3ef 8311 	mrs	r3, BASEPRI
 8006720:	f04f 0120 	mov.w	r1, #32
 8006724:	f381 8811 	msr	BASEPRI, r1
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	4827      	ldr	r0, [pc, #156]	; (80067c8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800672c:	f7fe faa6 	bl	8004c7c <_PreparePacket>
 8006730:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006732:	2280      	movs	r2, #128	; 0x80
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	6938      	ldr	r0, [r7, #16]
 8006738:	f7fe fa70 	bl	8004c1c <_EncodeStr>
 800673c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
 8006742:	2301      	movs	r3, #1
 8006744:	623b      	str	r3, [r7, #32]
 8006746:	e00b      	b.n	8006760 <SEGGER_SYSVIEW_Warn+0x4c>
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	b2da      	uxtb	r2, r3
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	1c59      	adds	r1, r3, #1
 8006750:	6279      	str	r1, [r7, #36]	; 0x24
 8006752:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	09db      	lsrs	r3, r3, #7
 800675e:	623b      	str	r3, [r7, #32]
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	2b7f      	cmp	r3, #127	; 0x7f
 8006764:	d8f0      	bhi.n	8006748 <SEGGER_SYSVIEW_Warn+0x34>
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	627a      	str	r2, [r7, #36]	; 0x24
 800676c:	6a3a      	ldr	r2, [r7, #32]
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	61fb      	str	r3, [r7, #28]
 800677a:	2300      	movs	r3, #0
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	e00b      	b.n	8006798 <SEGGER_SYSVIEW_Warn+0x84>
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	b2da      	uxtb	r2, r3
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	1c59      	adds	r1, r3, #1
 8006788:	61f9      	str	r1, [r7, #28]
 800678a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	09db      	lsrs	r3, r3, #7
 8006796:	61bb      	str	r3, [r7, #24]
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	2b7f      	cmp	r3, #127	; 0x7f
 800679c:	d8f0      	bhi.n	8006780 <SEGGER_SYSVIEW_Warn+0x6c>
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	61fa      	str	r2, [r7, #28]
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80067ae:	221a      	movs	r2, #26
 80067b0:	68f9      	ldr	r1, [r7, #12]
 80067b2:	6938      	ldr	r0, [r7, #16]
 80067b4:	f7fe fb52 	bl	8004e5c <_SendPacket>
  RECORD_END();
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f383 8811 	msr	BASEPRI, r3
}
 80067be:	bf00      	nop
 80067c0:	3728      	adds	r7, #40	; 0x28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	2001a760 	.word	0x2001a760

080067cc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80067d0:	4b13      	ldr	r3, [pc, #76]	; (8006820 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80067d2:	7e1b      	ldrb	r3, [r3, #24]
 80067d4:	4619      	mov	r1, r3
 80067d6:	4a13      	ldr	r2, [pc, #76]	; (8006824 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80067d8:	460b      	mov	r3, r1
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	440b      	add	r3, r1
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	4413      	add	r3, r2
 80067e2:	336c      	adds	r3, #108	; 0x6c
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	4b0e      	ldr	r3, [pc, #56]	; (8006820 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80067e8:	7e1b      	ldrb	r3, [r3, #24]
 80067ea:	4618      	mov	r0, r3
 80067ec:	490d      	ldr	r1, [pc, #52]	; (8006824 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80067ee:	4603      	mov	r3, r0
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	4403      	add	r3, r0
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	440b      	add	r3, r1
 80067f8:	3370      	adds	r3, #112	; 0x70
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d00b      	beq.n	8006818 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006800:	4b07      	ldr	r3, [pc, #28]	; (8006820 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006802:	789b      	ldrb	r3, [r3, #2]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d107      	bne.n	8006818 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006808:	4b05      	ldr	r3, [pc, #20]	; (8006820 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800680a:	2201      	movs	r2, #1
 800680c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800680e:	f7fe fa41 	bl	8004c94 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006812:	4b03      	ldr	r3, [pc, #12]	; (8006820 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006814:	2200      	movs	r2, #0
 8006816:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006818:	4b01      	ldr	r3, [pc, #4]	; (8006820 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800681a:	781b      	ldrb	r3, [r3, #0]
}
 800681c:	4618      	mov	r0, r3
 800681e:	bd80      	pop	{r7, pc}
 8006820:	2001a730 	.word	0x2001a730
 8006824:	20019270 	.word	0x20019270

08006828 <__libc_init_array>:
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	4d0d      	ldr	r5, [pc, #52]	; (8006860 <__libc_init_array+0x38>)
 800682c:	4c0d      	ldr	r4, [pc, #52]	; (8006864 <__libc_init_array+0x3c>)
 800682e:	1b64      	subs	r4, r4, r5
 8006830:	10a4      	asrs	r4, r4, #2
 8006832:	2600      	movs	r6, #0
 8006834:	42a6      	cmp	r6, r4
 8006836:	d109      	bne.n	800684c <__libc_init_array+0x24>
 8006838:	4d0b      	ldr	r5, [pc, #44]	; (8006868 <__libc_init_array+0x40>)
 800683a:	4c0c      	ldr	r4, [pc, #48]	; (800686c <__libc_init_array+0x44>)
 800683c:	f000 f83e 	bl	80068bc <_init>
 8006840:	1b64      	subs	r4, r4, r5
 8006842:	10a4      	asrs	r4, r4, #2
 8006844:	2600      	movs	r6, #0
 8006846:	42a6      	cmp	r6, r4
 8006848:	d105      	bne.n	8006856 <__libc_init_array+0x2e>
 800684a:	bd70      	pop	{r4, r5, r6, pc}
 800684c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006850:	4798      	blx	r3
 8006852:	3601      	adds	r6, #1
 8006854:	e7ee      	b.n	8006834 <__libc_init_array+0xc>
 8006856:	f855 3b04 	ldr.w	r3, [r5], #4
 800685a:	4798      	blx	r3
 800685c:	3601      	adds	r6, #1
 800685e:	e7f2      	b.n	8006846 <__libc_init_array+0x1e>
 8006860:	08006aec 	.word	0x08006aec
 8006864:	08006aec 	.word	0x08006aec
 8006868:	08006aec 	.word	0x08006aec
 800686c:	08006af0 	.word	0x08006af0

08006870 <memcmp>:
 8006870:	b510      	push	{r4, lr}
 8006872:	3901      	subs	r1, #1
 8006874:	4402      	add	r2, r0
 8006876:	4290      	cmp	r0, r2
 8006878:	d101      	bne.n	800687e <memcmp+0xe>
 800687a:	2000      	movs	r0, #0
 800687c:	e005      	b.n	800688a <memcmp+0x1a>
 800687e:	7803      	ldrb	r3, [r0, #0]
 8006880:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006884:	42a3      	cmp	r3, r4
 8006886:	d001      	beq.n	800688c <memcmp+0x1c>
 8006888:	1b18      	subs	r0, r3, r4
 800688a:	bd10      	pop	{r4, pc}
 800688c:	3001      	adds	r0, #1
 800688e:	e7f2      	b.n	8006876 <memcmp+0x6>

08006890 <memcpy>:
 8006890:	440a      	add	r2, r1
 8006892:	4291      	cmp	r1, r2
 8006894:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006898:	d100      	bne.n	800689c <memcpy+0xc>
 800689a:	4770      	bx	lr
 800689c:	b510      	push	{r4, lr}
 800689e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068a6:	4291      	cmp	r1, r2
 80068a8:	d1f9      	bne.n	800689e <memcpy+0xe>
 80068aa:	bd10      	pop	{r4, pc}

080068ac <memset>:
 80068ac:	4402      	add	r2, r0
 80068ae:	4603      	mov	r3, r0
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d100      	bne.n	80068b6 <memset+0xa>
 80068b4:	4770      	bx	lr
 80068b6:	f803 1b01 	strb.w	r1, [r3], #1
 80068ba:	e7f9      	b.n	80068b0 <memset+0x4>

080068bc <_init>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	bf00      	nop
 80068c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c2:	bc08      	pop	{r3}
 80068c4:	469e      	mov	lr, r3
 80068c6:	4770      	bx	lr

080068c8 <_fini>:
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	bf00      	nop
 80068cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ce:	bc08      	pop	{r3}
 80068d0:	469e      	mov	lr, r3
 80068d2:	4770      	bx	lr
