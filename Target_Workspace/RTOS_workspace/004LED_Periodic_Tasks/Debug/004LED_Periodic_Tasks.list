
004LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006228  08006228  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006230  08006230  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a814  2000001c  08006254  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a830  08006254  0002a830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d49  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dde  00000000  00000000  00033d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00036b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  00037de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023981  00000000  00000000  00038ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f95  00000000  00000000  0005c841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db9cf  00000000  00000000  000727d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e1a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c3c  00000000  00000000  0014e1f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006080 	.word	0x08006080

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08006080 	.word	0x08006080

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	2001925c 	.word	0x2001925c

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b8:	f000 b974 	b.w	80005a4 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468e      	mov	lr, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14d      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4694      	mov	ip, r2
 80002e6:	d969      	bls.n	80003bc <__udivmoddi4+0xe8>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b152      	cbz	r2, 8000304 <__udivmoddi4+0x30>
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	f1c2 0120 	rsb	r1, r2, #32
 80002f6:	fa20 f101 	lsr.w	r1, r0, r1
 80002fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000302:	4094      	lsls	r4, r2
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	0c21      	lsrs	r1, r4, #16
 800030a:	fbbe f6f8 	udiv	r6, lr, r8
 800030e:	fa1f f78c 	uxth.w	r7, ip
 8000312:	fb08 e316 	mls	r3, r8, r6, lr
 8000316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800031a:	fb06 f107 	mul.w	r1, r6, r7
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800032a:	f080 811f 	bcs.w	800056c <__udivmoddi4+0x298>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 811c 	bls.w	800056c <__udivmoddi4+0x298>
 8000334:	3e02      	subs	r6, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a5b      	subs	r3, r3, r1
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000340:	fb08 3310 	mls	r3, r8, r0, r3
 8000344:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000348:	fb00 f707 	mul.w	r7, r0, r7
 800034c:	42a7      	cmp	r7, r4
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x92>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000358:	f080 810a 	bcs.w	8000570 <__udivmoddi4+0x29c>
 800035c:	42a7      	cmp	r7, r4
 800035e:	f240 8107 	bls.w	8000570 <__udivmoddi4+0x29c>
 8000362:	4464      	add	r4, ip
 8000364:	3802      	subs	r0, #2
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	1be4      	subs	r4, r4, r7
 800036c:	2600      	movs	r6, #0
 800036e:	b11d      	cbz	r5, 8000378 <__udivmoddi4+0xa4>
 8000370:	40d4      	lsrs	r4, r2
 8000372:	2300      	movs	r3, #0
 8000374:	e9c5 4300 	strd	r4, r3, [r5]
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0xc2>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80ef 	beq.w	8000566 <__udivmoddi4+0x292>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x160>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xd4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80f9 	bhi.w	800059a <__udivmoddi4+0x2c6>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0303 	sbc.w	r3, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	469e      	mov	lr, r3
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e0      	beq.n	8000378 <__udivmoddi4+0xa4>
 80003b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ba:	e7dd      	b.n	8000378 <__udivmoddi4+0xa4>
 80003bc:	b902      	cbnz	r2, 80003c0 <__udivmoddi4+0xec>
 80003be:	deff      	udf	#255	; 0xff
 80003c0:	fab2 f282 	clz	r2, r2
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	f040 8092 	bne.w	80004ee <__udivmoddi4+0x21a>
 80003ca:	eba1 010c 	sub.w	r1, r1, ip
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	2601      	movs	r6, #1
 80003d8:	0c20      	lsrs	r0, r4, #16
 80003da:	fbb1 f3f7 	udiv	r3, r1, r7
 80003de:	fb07 1113 	mls	r1, r7, r3, r1
 80003e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e6:	fb0e f003 	mul.w	r0, lr, r3
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x12c>
 80003ee:	eb1c 0101 	adds.w	r1, ip, r1
 80003f2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x12a>
 80003f8:	4288      	cmp	r0, r1
 80003fa:	f200 80cb 	bhi.w	8000594 <__udivmoddi4+0x2c0>
 80003fe:	4643      	mov	r3, r8
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f7 	udiv	r0, r1, r7
 8000408:	fb07 1110 	mls	r1, r7, r0, r1
 800040c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000410:	fb0e fe00 	mul.w	lr, lr, r0
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x156>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x154>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2ca>
 8000428:	4608      	mov	r0, r1
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000432:	e79c      	b.n	800036e <__udivmoddi4+0x9a>
 8000434:	f1c6 0720 	rsb	r7, r6, #32
 8000438:	40b3      	lsls	r3, r6
 800043a:	fa22 fc07 	lsr.w	ip, r2, r7
 800043e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000442:	fa20 f407 	lsr.w	r4, r0, r7
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	431c      	orrs	r4, r3
 800044c:	40f9      	lsrs	r1, r7
 800044e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000452:	fa00 f306 	lsl.w	r3, r0, r6
 8000456:	fbb1 f8f9 	udiv	r8, r1, r9
 800045a:	0c20      	lsrs	r0, r4, #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fb09 1118 	mls	r1, r9, r8, r1
 8000464:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000468:	fb08 f00e 	mul.w	r0, r8, lr
 800046c:	4288      	cmp	r0, r1
 800046e:	fa02 f206 	lsl.w	r2, r2, r6
 8000472:	d90b      	bls.n	800048c <__udivmoddi4+0x1b8>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800047c:	f080 8088 	bcs.w	8000590 <__udivmoddi4+0x2bc>
 8000480:	4288      	cmp	r0, r1
 8000482:	f240 8085 	bls.w	8000590 <__udivmoddi4+0x2bc>
 8000486:	f1a8 0802 	sub.w	r8, r8, #2
 800048a:	4461      	add	r1, ip
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f9 	udiv	r0, r1, r9
 8000494:	fb09 1110 	mls	r1, r9, r0, r1
 8000498:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800049c:	fb00 fe0e 	mul.w	lr, r0, lr
 80004a0:	458e      	cmp	lr, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x1e2>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004ac:	d26c      	bcs.n	8000588 <__udivmoddi4+0x2b4>
 80004ae:	458e      	cmp	lr, r1
 80004b0:	d96a      	bls.n	8000588 <__udivmoddi4+0x2b4>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ba:	fba0 9402 	umull	r9, r4, r0, r2
 80004be:	eba1 010e 	sub.w	r1, r1, lr
 80004c2:	42a1      	cmp	r1, r4
 80004c4:	46c8      	mov	r8, r9
 80004c6:	46a6      	mov	lr, r4
 80004c8:	d356      	bcc.n	8000578 <__udivmoddi4+0x2a4>
 80004ca:	d053      	beq.n	8000574 <__udivmoddi4+0x2a0>
 80004cc:	b15d      	cbz	r5, 80004e6 <__udivmoddi4+0x212>
 80004ce:	ebb3 0208 	subs.w	r2, r3, r8
 80004d2:	eb61 010e 	sbc.w	r1, r1, lr
 80004d6:	fa01 f707 	lsl.w	r7, r1, r7
 80004da:	fa22 f306 	lsr.w	r3, r2, r6
 80004de:	40f1      	lsrs	r1, r6
 80004e0:	431f      	orrs	r7, r3
 80004e2:	e9c5 7100 	strd	r7, r1, [r5]
 80004e6:	2600      	movs	r6, #0
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	40d8      	lsrs	r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa21 f303 	lsr.w	r3, r1, r3
 80004fc:	4091      	lsls	r1, r2
 80004fe:	4301      	orrs	r1, r0
 8000500:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000504:	fa1f fe8c 	uxth.w	lr, ip
 8000508:	fbb3 f0f7 	udiv	r0, r3, r7
 800050c:	fb07 3610 	mls	r6, r7, r0, r3
 8000510:	0c0b      	lsrs	r3, r1, #16
 8000512:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000516:	fb00 f60e 	mul.w	r6, r0, lr
 800051a:	429e      	cmp	r6, r3
 800051c:	fa04 f402 	lsl.w	r4, r4, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x260>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052a:	d22f      	bcs.n	800058c <__udivmoddi4+0x2b8>
 800052c:	429e      	cmp	r6, r3
 800052e:	d92d      	bls.n	800058c <__udivmoddi4+0x2b8>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1b9b      	subs	r3, r3, r6
 8000536:	b289      	uxth	r1, r1
 8000538:	fbb3 f6f7 	udiv	r6, r3, r7
 800053c:	fb07 3316 	mls	r3, r7, r6, r3
 8000540:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000544:	fb06 f30e 	mul.w	r3, r6, lr
 8000548:	428b      	cmp	r3, r1
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x28a>
 800054c:	eb1c 0101 	adds.w	r1, ip, r1
 8000550:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000554:	d216      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000556:	428b      	cmp	r3, r1
 8000558:	d914      	bls.n	8000584 <__udivmoddi4+0x2b0>
 800055a:	3e02      	subs	r6, #2
 800055c:	4461      	add	r1, ip
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000564:	e738      	b.n	80003d8 <__udivmoddi4+0x104>
 8000566:	462e      	mov	r6, r5
 8000568:	4628      	mov	r0, r5
 800056a:	e705      	b.n	8000378 <__udivmoddi4+0xa4>
 800056c:	4606      	mov	r6, r0
 800056e:	e6e3      	b.n	8000338 <__udivmoddi4+0x64>
 8000570:	4618      	mov	r0, r3
 8000572:	e6f8      	b.n	8000366 <__udivmoddi4+0x92>
 8000574:	454b      	cmp	r3, r9
 8000576:	d2a9      	bcs.n	80004cc <__udivmoddi4+0x1f8>
 8000578:	ebb9 0802 	subs.w	r8, r9, r2
 800057c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000580:	3801      	subs	r0, #1
 8000582:	e7a3      	b.n	80004cc <__udivmoddi4+0x1f8>
 8000584:	4646      	mov	r6, r8
 8000586:	e7ea      	b.n	800055e <__udivmoddi4+0x28a>
 8000588:	4620      	mov	r0, r4
 800058a:	e794      	b.n	80004b6 <__udivmoddi4+0x1e2>
 800058c:	4640      	mov	r0, r8
 800058e:	e7d1      	b.n	8000534 <__udivmoddi4+0x260>
 8000590:	46d0      	mov	r8, sl
 8000592:	e77b      	b.n	800048c <__udivmoddi4+0x1b8>
 8000594:	3b02      	subs	r3, #2
 8000596:	4461      	add	r1, ip
 8000598:	e732      	b.n	8000400 <__udivmoddi4+0x12c>
 800059a:	4630      	mov	r0, r6
 800059c:	e709      	b.n	80003b2 <__udivmoddi4+0xde>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x156>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fab9 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f86d 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8dd 	bl	8000774 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 80005ba:	482d      	ldr	r0, [pc, #180]	; (8000670 <main+0xc8>)
 80005bc:	f003 fb58 	bl	8003c70 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 80005c0:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <main+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a2b      	ldr	r2, [pc, #172]	; (8000674 <main+0xcc>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005cc:	f003 f97a 	bl	80038c4 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2302      	movs	r3, #2
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	22c8      	movs	r2, #200	; 0xc8
 80005de:	4926      	ldr	r1, [pc, #152]	; (8000678 <main+0xd0>)
 80005e0:	4826      	ldr	r0, [pc, #152]	; (800067c <main+0xd4>)
 80005e2:	f001 ff29 	bl	8002438 <xTaskCreate>
 80005e6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d00a      	beq.n	8000604 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f2:	f383 8811 	msr	BASEPRI, r3
 80005f6:	f3bf 8f6f 	isb	sy
 80005fa:	f3bf 8f4f 	dsb	sy
 80005fe:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000600:	bf00      	nop
 8000602:	e7fe      	b.n	8000602 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2302      	movs	r3, #2
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	22c8      	movs	r2, #200	; 0xc8
 8000612:	491b      	ldr	r1, [pc, #108]	; (8000680 <main+0xd8>)
 8000614:	481b      	ldr	r0, [pc, #108]	; (8000684 <main+0xdc>)
 8000616:	f001 ff0f 	bl	8002438 <xTaskCreate>
 800061a:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d00a      	beq.n	8000638 <main+0x90>
        __asm volatile
 8000622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000626:	f383 8811 	msr	BASEPRI, r3
 800062a:	f3bf 8f6f 	isb	sy
 800062e:	f3bf 8f4f 	dsb	sy
 8000632:	617b      	str	r3, [r7, #20]
    }
 8000634:	bf00      	nop
 8000636:	e7fe      	b.n	8000636 <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	2302      	movs	r3, #2
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2300      	movs	r3, #0
 8000642:	22c8      	movs	r2, #200	; 0xc8
 8000644:	4910      	ldr	r1, [pc, #64]	; (8000688 <main+0xe0>)
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <main+0xe4>)
 8000648:	f001 fef6 	bl	8002438 <xTaskCreate>
 800064c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00a      	beq.n	800066a <main+0xc2>
        __asm volatile
 8000654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	613b      	str	r3, [r7, #16]
    }
 8000666:	bf00      	nop
 8000668:	e7fe      	b.n	8000668 <main+0xc0>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800066a:	f002 f8cb 	bl	8002804 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066e:	e7fe      	b.n	800066e <main+0xc6>
 8000670:	0007a120 	.word	0x0007a120
 8000674:	e0001000 	.word	0xe0001000
 8000678:	08006098 	.word	0x08006098
 800067c:	08000871 	.word	0x08000871
 8000680:	080060a8 	.word	0x080060a8
 8000684:	080008c9 	.word	0x080008c9
 8000688:	080060b8 	.word	0x080060b8
 800068c:	0800089d 	.word	0x0800089d

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fce6 	bl	8006070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <SystemClock_Config+0xdc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a2b      	ldr	r2, [pc, #172]	; (800076c <SystemClock_Config+0xdc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <SystemClock_Config+0xdc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <SystemClock_Config+0xe0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a25      	ldr	r2, [pc, #148]	; (8000770 <SystemClock_Config+0xe0>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xe0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000700:	2308      	movs	r3, #8
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000704:	23b4      	movs	r3, #180	; 0xb4
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f001 f88d 	bl	8001838 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000724:	f000 f8f8 	bl	8000918 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000728:	f000 fcce 	bl	80010c8 <HAL_PWREx_EnableOverDrive>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000732:	f000 f8f1 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000742:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2105      	movs	r1, #5
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fd07 	bl	8001168 <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000760:	f000 f8da 	bl	8000918 <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3750      	adds	r7, #80	; 0x50
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b35      	ldr	r3, [pc, #212]	; (8000864 <MX_GPIO_Init+0xf0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a34      	ldr	r2, [pc, #208]	; (8000864 <MX_GPIO_Init+0xf0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <MX_GPIO_Init+0xf0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a2d      	ldr	r2, [pc, #180]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a26      	ldr	r2, [pc, #152]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	481a      	ldr	r0, [pc, #104]	; (8000868 <MX_GPIO_Init+0xf4>)
 8000800:	f000 fc48 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <MX_GPIO_Init+0xf8>)
 800081c:	f000 faa6 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000820:	230c      	movs	r3, #12
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000830:	2307      	movs	r3, #7
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	480b      	ldr	r0, [pc, #44]	; (8000868 <MX_GPIO_Init+0xf4>)
 800083c:	f000 fa96 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000840:	2320      	movs	r3, #32
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_GPIO_Init+0xf4>)
 8000858:	f000 fa88 	bl	8000d6c <HAL_GPIO_Init>

}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	40020800 	.word	0x40020800

08000870 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 8000878:	f002 f8ce 	bl	8002a18 <xTaskGetTickCount>
 800087c:	4603      	mov	r3, r0
 800087e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <led_green_handler+0x28>)
 8000882:	f005 fb15 	bl	8005eb0 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(1000));
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800088e:	4618      	mov	r0, r3
 8000890:	f001 ff36 	bl	8002700 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000894:	e7f4      	b.n	8000880 <led_green_handler+0x10>
 8000896:	bf00      	nop
 8000898:	080060c8 	.word	0x080060c8

0800089c <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 80008a4:	f002 f8b8 	bl	8002a18 <xTaskGetTickCount>
 80008a8:	4603      	mov	r3, r0
 80008aa:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <led_orange_handler+0x28>)
 80008ae:	f005 faff 	bl	8005eb0 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(800));
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 ff20 	bl	8002700 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80008c0:	e7f4      	b.n	80008ac <led_orange_handler+0x10>
 80008c2:	bf00      	nop
 80008c4:	080060dc 	.word	0x080060dc

080008c8 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 80008d0:	f002 f8a2 	bl	8002a18 <xTaskGetTickCount>
 80008d4:	4603      	mov	r3, r0
 80008d6:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <led_red_handler+0x28>)
 80008da:	f005 fae9 	bl	8005eb0 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(400));
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 ff0a 	bl	8002700 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80008ec:	e7f4      	b.n	80008d8 <led_red_handler+0x10>
 80008ee:	bf00      	nop
 80008f0:	080060f0 	.word	0x080060f0

080008f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d101      	bne.n	800090a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000906:	f000 f92f 	bl	8000b68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40001000 	.word	0x40001000

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000962:	f002 fbf9 	bl	8003158 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <HAL_InitTick+0xe4>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a32      	ldr	r2, [pc, #200]	; (8000a58 <HAL_InitTick+0xe4>)
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <HAL_InitTick+0xe4>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a0:	f107 0210 	add.w	r2, r7, #16
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fce2 	bl	8001374 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d103      	bne.n	80009c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ba:	f000 fcc7 	bl	800134c <HAL_RCC_GetPCLK1Freq>
 80009be:	6378      	str	r0, [r7, #52]	; 0x34
 80009c0:	e004      	b.n	80009cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009c2:	f000 fcc3 	bl	800134c <HAL_RCC_GetPCLK1Freq>
 80009c6:	4603      	mov	r3, r0
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ce:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <HAL_InitTick+0xe8>)
 80009d0:	fba2 2303 	umull	r2, r3, r2, r3
 80009d4:	0c9b      	lsrs	r3, r3, #18
 80009d6:	3b01      	subs	r3, #1
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009da:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <HAL_InitTick+0xec>)
 80009dc:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <HAL_InitTick+0xf0>)
 80009de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <HAL_InitTick+0xec>)
 80009e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009e8:	4a1d      	ldr	r2, [pc, #116]	; (8000a60 <HAL_InitTick+0xec>)
 80009ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <HAL_InitTick+0xec>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <HAL_InitTick+0xec>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_InitTick+0xec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a00:	4817      	ldr	r0, [pc, #92]	; (8000a60 <HAL_InitTick+0xec>)
 8000a02:	f001 f9b7 	bl	8001d74 <HAL_TIM_Base_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d11b      	bne.n	8000a4c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a14:	4812      	ldr	r0, [pc, #72]	; (8000a60 <HAL_InitTick+0xec>)
 8000a16:	f001 fa07 	bl	8001e28 <HAL_TIM_Base_Start_IT>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d111      	bne.n	8000a4c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a28:	2036      	movs	r0, #54	; 0x36
 8000a2a:	f000 f991 	bl	8000d50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d808      	bhi.n	8000a46 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	2036      	movs	r0, #54	; 0x36
 8000a3a:	f000 f96d 	bl	8000d18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <HAL_InitTick+0xf4>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	e002      	b.n	8000a4c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3738      	adds	r7, #56	; 0x38
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	431bde83 	.word	0x431bde83
 8000a60:	20000038 	.word	0x20000038
 8000a64:	40001000 	.word	0x40001000
 8000a68:	20000004 	.word	0x20000004

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <TIM6_DAC_IRQHandler+0x10>)
 8000a9e:	f001 fa33 	bl	8001f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000038 	.word	0x20000038

08000aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ad6:	490e      	ldr	r1, [pc, #56]	; (8000b10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aec:	4c0b      	ldr	r4, [pc, #44]	; (8000b1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000afa:	f7ff ffd7 	bl	8000aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afe:	f005 fa75 	bl	8005fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b02:	f7ff fd51 	bl	80005a8 <main>
  bx  lr    
 8000b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b14:	08006238 	.word	0x08006238
  ldr r2, =_sbss
 8000b18:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b1c:	2001a830 	.word	0x2001a830

08000b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <HAL_Init+0x40>)
 8000b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <HAL_Init+0x40>)
 8000b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x40>)
 8000b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f8d8 	bl	8000d02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff ff0e 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fee4 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023c00 	.word	0x40023c00

08000b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000080 	.word	0x20000080

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000080 	.word	0x20000080

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db0b      	blt.n	8000c36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	4907      	ldr	r1, [pc, #28]	; (8000c44 <__NVIC_EnableIRQ+0x38>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	490c      	ldr	r1, [pc, #48]	; (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4908      	ldr	r1, [pc, #32]	; (8000c98 <__NVIC_SetPriority+0x50>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	3b04      	subs	r3, #4
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf28      	it	cs
 8000cba:	2304      	movcs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b03      	subs	r3, #3
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43d9      	mvns	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	4313      	orrs	r3, r2
         );
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3724      	adds	r7, #36	; 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ff4c 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2a:	f7ff ff61 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	6978      	ldr	r0, [r7, #20]
 8000d36:	f7ff ffb1 	bl	8000c9c <NVIC_EncodePriority>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff80 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d48:	bf00      	nop
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff54 	bl	8000c0c <__NVIC_EnableIRQ>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
 8000d86:	e165      	b.n	8001054 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	f040 8154 	bne.w	800104e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d005      	beq.n	8000dbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d130      	bne.n	8000e20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	091b      	lsrs	r3, r3, #4
 8000e0a:	f003 0201 	and.w	r2, r3, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d017      	beq.n	8000e5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d123      	bne.n	8000eb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3208      	adds	r2, #8
 8000e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	220f      	movs	r2, #15
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	69b9      	ldr	r1, [r7, #24]
 8000eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0203 	and.w	r2, r3, #3
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f000 80ae 	beq.w	800104e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b5d      	ldr	r3, [pc, #372]	; (800106c <HAL_GPIO_Init+0x300>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a5c      	ldr	r2, [pc, #368]	; (800106c <HAL_GPIO_Init+0x300>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b5a      	ldr	r3, [pc, #360]	; (800106c <HAL_GPIO_Init+0x300>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f0e:	4a58      	ldr	r2, [pc, #352]	; (8001070 <HAL_GPIO_Init+0x304>)
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	3302      	adds	r3, #2
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4f      	ldr	r2, [pc, #316]	; (8001074 <HAL_GPIO_Init+0x308>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d025      	beq.n	8000f86 <HAL_GPIO_Init+0x21a>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4e      	ldr	r2, [pc, #312]	; (8001078 <HAL_GPIO_Init+0x30c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d01f      	beq.n	8000f82 <HAL_GPIO_Init+0x216>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4d      	ldr	r2, [pc, #308]	; (800107c <HAL_GPIO_Init+0x310>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d019      	beq.n	8000f7e <HAL_GPIO_Init+0x212>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4c      	ldr	r2, [pc, #304]	; (8001080 <HAL_GPIO_Init+0x314>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0x20e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4b      	ldr	r2, [pc, #300]	; (8001084 <HAL_GPIO_Init+0x318>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d00d      	beq.n	8000f76 <HAL_GPIO_Init+0x20a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4a      	ldr	r2, [pc, #296]	; (8001088 <HAL_GPIO_Init+0x31c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d007      	beq.n	8000f72 <HAL_GPIO_Init+0x206>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a49      	ldr	r2, [pc, #292]	; (800108c <HAL_GPIO_Init+0x320>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_GPIO_Init+0x202>
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	e00c      	b.n	8000f88 <HAL_GPIO_Init+0x21c>
 8000f6e:	2307      	movs	r3, #7
 8000f70:	e00a      	b.n	8000f88 <HAL_GPIO_Init+0x21c>
 8000f72:	2305      	movs	r3, #5
 8000f74:	e008      	b.n	8000f88 <HAL_GPIO_Init+0x21c>
 8000f76:	2304      	movs	r3, #4
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x21c>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e004      	b.n	8000f88 <HAL_GPIO_Init+0x21c>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_Init+0x21c>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x21c>
 8000f86:	2300      	movs	r3, #0
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	f002 0203 	and.w	r2, r2, #3
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	4093      	lsls	r3, r2
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f98:	4935      	ldr	r1, [pc, #212]	; (8001070 <HAL_GPIO_Init+0x304>)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <HAL_GPIO_Init+0x324>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fca:	4a31      	ldr	r2, [pc, #196]	; (8001090 <HAL_GPIO_Init+0x324>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <HAL_GPIO_Init+0x324>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff4:	4a26      	ldr	r2, [pc, #152]	; (8001090 <HAL_GPIO_Init+0x324>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <HAL_GPIO_Init+0x324>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800101e:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <HAL_GPIO_Init+0x324>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <HAL_GPIO_Init+0x324>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001048:	4a11      	ldr	r2, [pc, #68]	; (8001090 <HAL_GPIO_Init+0x324>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3301      	adds	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	2b0f      	cmp	r3, #15
 8001058:	f67f ae96 	bls.w	8000d88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3724      	adds	r7, #36	; 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40013800 	.word	0x40013800
 8001074:	40020000 	.word	0x40020000
 8001078:	40020400 	.word	0x40020400
 800107c:	40020800 	.word	0x40020800
 8001080:	40020c00 	.word	0x40020c00
 8001084:	40021000 	.word	0x40021000
 8001088:	40021400 	.word	0x40021400
 800108c:	40021800 	.word	0x40021800
 8001090:	40013c00 	.word	0x40013c00

08001094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	807b      	strh	r3, [r7, #2]
 80010a0:	4613      	mov	r3, r2
 80010a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a4:	787b      	ldrb	r3, [r7, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010b0:	e003      	b.n	80010ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010b2:	887b      	ldrh	r3, [r7, #2]
 80010b4:	041a      	lsls	r2, r3, #16
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	619a      	str	r2, [r3, #24]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <HAL_PWREx_EnableOverDrive+0x90>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a1f      	ldr	r2, [pc, #124]	; (8001158 <HAL_PWREx_EnableOverDrive+0x90>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_PWREx_EnableOverDrive+0x90>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_PWREx_EnableOverDrive+0x94>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f4:	f7ff fd4c 	bl	8000b90 <HAL_GetTick>
 80010f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010fa:	e009      	b.n	8001110 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010fc:	f7ff fd48 	bl	8000b90 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800110a:	d901      	bls.n	8001110 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e01f      	b.n	8001150 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <HAL_PWREx_EnableOverDrive+0x98>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111c:	d1ee      	bne.n	80010fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001124:	f7ff fd34 	bl	8000b90 <HAL_GetTick>
 8001128:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800112a:	e009      	b.n	8001140 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800112c:	f7ff fd30 	bl	8000b90 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800113a:	d901      	bls.n	8001140 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e007      	b.n	8001150 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <HAL_PWREx_EnableOverDrive+0x98>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800114c:	d1ee      	bne.n	800112c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40023800 	.word	0x40023800
 800115c:	420e0040 	.word	0x420e0040
 8001160:	40007000 	.word	0x40007000
 8001164:	420e0044 	.word	0x420e0044

08001168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0cc      	b.n	8001316 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800117c:	4b68      	ldr	r3, [pc, #416]	; (8001320 <HAL_RCC_ClockConfig+0x1b8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d90c      	bls.n	80011a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118a:	4b65      	ldr	r3, [pc, #404]	; (8001320 <HAL_RCC_ClockConfig+0x1b8>)
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001192:	4b63      	ldr	r3, [pc, #396]	; (8001320 <HAL_RCC_ClockConfig+0x1b8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	429a      	cmp	r2, r3
 800119e:	d001      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e0b8      	b.n	8001316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d020      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011bc:	4b59      	ldr	r3, [pc, #356]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	4a58      	ldr	r2, [pc, #352]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d4:	4b53      	ldr	r3, [pc, #332]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4a52      	ldr	r2, [pc, #328]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e0:	4b50      	ldr	r3, [pc, #320]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	494d      	ldr	r1, [pc, #308]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d044      	beq.n	8001288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d107      	bne.n	8001216 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	4b47      	ldr	r3, [pc, #284]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d119      	bne.n	8001246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e07f      	b.n	8001316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d003      	beq.n	8001226 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001222:	2b03      	cmp	r3, #3
 8001224:	d107      	bne.n	8001236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001226:	4b3f      	ldr	r3, [pc, #252]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d109      	bne.n	8001246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e06f      	b.n	8001316 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001236:	4b3b      	ldr	r3, [pc, #236]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e067      	b.n	8001316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001246:	4b37      	ldr	r3, [pc, #220]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f023 0203 	bic.w	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4934      	ldr	r1, [pc, #208]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	4313      	orrs	r3, r2
 8001256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001258:	f7ff fc9a 	bl	8000b90 <HAL_GetTick>
 800125c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125e:	e00a      	b.n	8001276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001260:	f7ff fc96 	bl	8000b90 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	f241 3288 	movw	r2, #5000	; 0x1388
 800126e:	4293      	cmp	r3, r2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e04f      	b.n	8001316 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001276:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 020c 	and.w	r2, r3, #12
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	429a      	cmp	r2, r3
 8001286:	d1eb      	bne.n	8001260 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <HAL_RCC_ClockConfig+0x1b8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d20c      	bcs.n	80012b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001296:	4b22      	ldr	r3, [pc, #136]	; (8001320 <HAL_RCC_ClockConfig+0x1b8>)
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HAL_RCC_ClockConfig+0x1b8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e032      	b.n	8001316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	4916      	ldr	r1, [pc, #88]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d009      	beq.n	80012ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	490e      	ldr	r1, [pc, #56]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012ee:	f000 f873 	bl	80013d8 <HAL_RCC_GetSysClockFreq>
 80012f2:	4602      	mov	r2, r0
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	091b      	lsrs	r3, r3, #4
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	490a      	ldr	r1, [pc, #40]	; (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	5ccb      	ldrb	r3, [r1, r3]
 8001302:	fa22 f303 	lsr.w	r3, r2, r3
 8001306:	4a09      	ldr	r2, [pc, #36]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_RCC_ClockConfig+0x1c8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fb30 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023c00 	.word	0x40023c00
 8001324:	40023800 	.word	0x40023800
 8001328:	080061d4 	.word	0x080061d4
 800132c:	20000000 	.word	0x20000000
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_RCC_GetHCLKFreq+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000000 	.word	0x20000000

0800134c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001350:	f7ff fff0 	bl	8001334 <HAL_RCC_GetHCLKFreq>
 8001354:	4602      	mov	r2, r0
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	0a9b      	lsrs	r3, r3, #10
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	4903      	ldr	r1, [pc, #12]	; (8001370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001362:	5ccb      	ldrb	r3, [r1, r3]
 8001364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001368:	4618      	mov	r0, r3
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	080061e4 	.word	0x080061e4

08001374 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	220f      	movs	r2, #15
 8001382:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 0203 	and.w	r2, r3, #3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_RCC_GetClockConfig+0x5c>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_RCC_GetClockConfig+0x5c>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	08db      	lsrs	r3, r3, #3
 80013ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_RCC_GetClockConfig+0x60>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 020f 	and.w	r2, r3, #15
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	601a      	str	r2, [r3, #0]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40023c00 	.word	0x40023c00

080013d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013dc:	b0ae      	sub	sp, #184	; 0xb8
 80013de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013fe:	4bcb      	ldr	r3, [pc, #812]	; (800172c <HAL_RCC_GetSysClockFreq+0x354>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b0c      	cmp	r3, #12
 8001408:	f200 8206 	bhi.w	8001818 <HAL_RCC_GetSysClockFreq+0x440>
 800140c:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <HAL_RCC_GetSysClockFreq+0x3c>)
 800140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001412:	bf00      	nop
 8001414:	08001449 	.word	0x08001449
 8001418:	08001819 	.word	0x08001819
 800141c:	08001819 	.word	0x08001819
 8001420:	08001819 	.word	0x08001819
 8001424:	08001451 	.word	0x08001451
 8001428:	08001819 	.word	0x08001819
 800142c:	08001819 	.word	0x08001819
 8001430:	08001819 	.word	0x08001819
 8001434:	08001459 	.word	0x08001459
 8001438:	08001819 	.word	0x08001819
 800143c:	08001819 	.word	0x08001819
 8001440:	08001819 	.word	0x08001819
 8001444:	08001649 	.word	0x08001649
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001448:	4bb9      	ldr	r3, [pc, #740]	; (8001730 <HAL_RCC_GetSysClockFreq+0x358>)
 800144a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800144e:	e1e7      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001450:	4bb8      	ldr	r3, [pc, #736]	; (8001734 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001452:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001456:	e1e3      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001458:	4bb4      	ldr	r3, [pc, #720]	; (800172c <HAL_RCC_GetSysClockFreq+0x354>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001460:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001464:	4bb1      	ldr	r3, [pc, #708]	; (800172c <HAL_RCC_GetSysClockFreq+0x354>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d071      	beq.n	8001554 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001470:	4bae      	ldr	r3, [pc, #696]	; (800172c <HAL_RCC_GetSysClockFreq+0x354>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	099b      	lsrs	r3, r3, #6
 8001476:	2200      	movs	r2, #0
 8001478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800147c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001488:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001492:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001496:	4622      	mov	r2, r4
 8001498:	462b      	mov	r3, r5
 800149a:	f04f 0000 	mov.w	r0, #0
 800149e:	f04f 0100 	mov.w	r1, #0
 80014a2:	0159      	lsls	r1, r3, #5
 80014a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014a8:	0150      	lsls	r0, r2, #5
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4621      	mov	r1, r4
 80014b0:	1a51      	subs	r1, r2, r1
 80014b2:	6439      	str	r1, [r7, #64]	; 0x40
 80014b4:	4629      	mov	r1, r5
 80014b6:	eb63 0301 	sbc.w	r3, r3, r1
 80014ba:	647b      	str	r3, [r7, #68]	; 0x44
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80014c8:	4649      	mov	r1, r9
 80014ca:	018b      	lsls	r3, r1, #6
 80014cc:	4641      	mov	r1, r8
 80014ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014d2:	4641      	mov	r1, r8
 80014d4:	018a      	lsls	r2, r1, #6
 80014d6:	4641      	mov	r1, r8
 80014d8:	1a51      	subs	r1, r2, r1
 80014da:	63b9      	str	r1, [r7, #56]	; 0x38
 80014dc:	4649      	mov	r1, r9
 80014de:	eb63 0301 	sbc.w	r3, r3, r1
 80014e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80014f0:	4649      	mov	r1, r9
 80014f2:	00cb      	lsls	r3, r1, #3
 80014f4:	4641      	mov	r1, r8
 80014f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014fa:	4641      	mov	r1, r8
 80014fc:	00ca      	lsls	r2, r1, #3
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	4603      	mov	r3, r0
 8001504:	4622      	mov	r2, r4
 8001506:	189b      	adds	r3, r3, r2
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
 800150a:	462b      	mov	r3, r5
 800150c:	460a      	mov	r2, r1
 800150e:	eb42 0303 	adc.w	r3, r2, r3
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001520:	4629      	mov	r1, r5
 8001522:	024b      	lsls	r3, r1, #9
 8001524:	4621      	mov	r1, r4
 8001526:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800152a:	4621      	mov	r1, r4
 800152c:	024a      	lsls	r2, r1, #9
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001536:	2200      	movs	r2, #0
 8001538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800153c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001540:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001544:	f7fe feae 	bl	80002a4 <__aeabi_uldivmod>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4613      	mov	r3, r2
 800154e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001552:	e067      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001554:	4b75      	ldr	r3, [pc, #468]	; (800172c <HAL_RCC_GetSysClockFreq+0x354>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	2200      	movs	r2, #0
 800155c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001560:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001564:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800156c:	67bb      	str	r3, [r7, #120]	; 0x78
 800156e:	2300      	movs	r3, #0
 8001570:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001572:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001576:	4622      	mov	r2, r4
 8001578:	462b      	mov	r3, r5
 800157a:	f04f 0000 	mov.w	r0, #0
 800157e:	f04f 0100 	mov.w	r1, #0
 8001582:	0159      	lsls	r1, r3, #5
 8001584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001588:	0150      	lsls	r0, r2, #5
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4621      	mov	r1, r4
 8001590:	1a51      	subs	r1, r2, r1
 8001592:	62b9      	str	r1, [r7, #40]	; 0x28
 8001594:	4629      	mov	r1, r5
 8001596:	eb63 0301 	sbc.w	r3, r3, r1
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80015a8:	4649      	mov	r1, r9
 80015aa:	018b      	lsls	r3, r1, #6
 80015ac:	4641      	mov	r1, r8
 80015ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015b2:	4641      	mov	r1, r8
 80015b4:	018a      	lsls	r2, r1, #6
 80015b6:	4641      	mov	r1, r8
 80015b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80015bc:	4649      	mov	r1, r9
 80015be:	eb63 0b01 	sbc.w	fp, r3, r1
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015d6:	4692      	mov	sl, r2
 80015d8:	469b      	mov	fp, r3
 80015da:	4623      	mov	r3, r4
 80015dc:	eb1a 0303 	adds.w	r3, sl, r3
 80015e0:	623b      	str	r3, [r7, #32]
 80015e2:	462b      	mov	r3, r5
 80015e4:	eb4b 0303 	adc.w	r3, fp, r3
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015f6:	4629      	mov	r1, r5
 80015f8:	028b      	lsls	r3, r1, #10
 80015fa:	4621      	mov	r1, r4
 80015fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001600:	4621      	mov	r1, r4
 8001602:	028a      	lsls	r2, r1, #10
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800160c:	2200      	movs	r2, #0
 800160e:	673b      	str	r3, [r7, #112]	; 0x70
 8001610:	677a      	str	r2, [r7, #116]	; 0x74
 8001612:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001616:	f7fe fe45 	bl	80002a4 <__aeabi_uldivmod>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4613      	mov	r3, r2
 8001620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001624:	4b41      	ldr	r3, [pc, #260]	; (800172c <HAL_RCC_GetSysClockFreq+0x354>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	0c1b      	lsrs	r3, r3, #16
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	3301      	adds	r3, #1
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001636:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800163a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001646:	e0eb      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001648:	4b38      	ldr	r3, [pc, #224]	; (800172c <HAL_RCC_GetSysClockFreq+0x354>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001650:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001654:	4b35      	ldr	r3, [pc, #212]	; (800172c <HAL_RCC_GetSysClockFreq+0x354>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d06b      	beq.n	8001738 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001660:	4b32      	ldr	r3, [pc, #200]	; (800172c <HAL_RCC_GetSysClockFreq+0x354>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	099b      	lsrs	r3, r3, #6
 8001666:	2200      	movs	r2, #0
 8001668:	66bb      	str	r3, [r7, #104]	; 0x68
 800166a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800166c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800166e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001672:	663b      	str	r3, [r7, #96]	; 0x60
 8001674:	2300      	movs	r3, #0
 8001676:	667b      	str	r3, [r7, #100]	; 0x64
 8001678:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800167c:	4622      	mov	r2, r4
 800167e:	462b      	mov	r3, r5
 8001680:	f04f 0000 	mov.w	r0, #0
 8001684:	f04f 0100 	mov.w	r1, #0
 8001688:	0159      	lsls	r1, r3, #5
 800168a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800168e:	0150      	lsls	r0, r2, #5
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4621      	mov	r1, r4
 8001696:	1a51      	subs	r1, r2, r1
 8001698:	61b9      	str	r1, [r7, #24]
 800169a:	4629      	mov	r1, r5
 800169c:	eb63 0301 	sbc.w	r3, r3, r1
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016ae:	4659      	mov	r1, fp
 80016b0:	018b      	lsls	r3, r1, #6
 80016b2:	4651      	mov	r1, sl
 80016b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016b8:	4651      	mov	r1, sl
 80016ba:	018a      	lsls	r2, r1, #6
 80016bc:	4651      	mov	r1, sl
 80016be:	ebb2 0801 	subs.w	r8, r2, r1
 80016c2:	4659      	mov	r1, fp
 80016c4:	eb63 0901 	sbc.w	r9, r3, r1
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016dc:	4690      	mov	r8, r2
 80016de:	4699      	mov	r9, r3
 80016e0:	4623      	mov	r3, r4
 80016e2:	eb18 0303 	adds.w	r3, r8, r3
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	462b      	mov	r3, r5
 80016ea:	eb49 0303 	adc.w	r3, r9, r3
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016fc:	4629      	mov	r1, r5
 80016fe:	024b      	lsls	r3, r1, #9
 8001700:	4621      	mov	r1, r4
 8001702:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001706:	4621      	mov	r1, r4
 8001708:	024a      	lsls	r2, r1, #9
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001712:	2200      	movs	r2, #0
 8001714:	65bb      	str	r3, [r7, #88]	; 0x58
 8001716:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001718:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800171c:	f7fe fdc2 	bl	80002a4 <__aeabi_uldivmod>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4613      	mov	r3, r2
 8001726:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800172a:	e065      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x420>
 800172c:	40023800 	.word	0x40023800
 8001730:	00f42400 	.word	0x00f42400
 8001734:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001738:	4b3d      	ldr	r3, [pc, #244]	; (8001830 <HAL_RCC_GetSysClockFreq+0x458>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	2200      	movs	r2, #0
 8001740:	4618      	mov	r0, r3
 8001742:	4611      	mov	r1, r2
 8001744:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001748:	653b      	str	r3, [r7, #80]	; 0x50
 800174a:	2300      	movs	r3, #0
 800174c:	657b      	str	r3, [r7, #84]	; 0x54
 800174e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001752:	4642      	mov	r2, r8
 8001754:	464b      	mov	r3, r9
 8001756:	f04f 0000 	mov.w	r0, #0
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	0159      	lsls	r1, r3, #5
 8001760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001764:	0150      	lsls	r0, r2, #5
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4641      	mov	r1, r8
 800176c:	1a51      	subs	r1, r2, r1
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	4649      	mov	r1, r9
 8001772:	eb63 0301 	sbc.w	r3, r3, r1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001784:	4659      	mov	r1, fp
 8001786:	018b      	lsls	r3, r1, #6
 8001788:	4651      	mov	r1, sl
 800178a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800178e:	4651      	mov	r1, sl
 8001790:	018a      	lsls	r2, r1, #6
 8001792:	4651      	mov	r1, sl
 8001794:	1a54      	subs	r4, r2, r1
 8001796:	4659      	mov	r1, fp
 8001798:	eb63 0501 	sbc.w	r5, r3, r1
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	00eb      	lsls	r3, r5, #3
 80017a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017aa:	00e2      	lsls	r2, r4, #3
 80017ac:	4614      	mov	r4, r2
 80017ae:	461d      	mov	r5, r3
 80017b0:	4643      	mov	r3, r8
 80017b2:	18e3      	adds	r3, r4, r3
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	464b      	mov	r3, r9
 80017b8:	eb45 0303 	adc.w	r3, r5, r3
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ca:	4629      	mov	r1, r5
 80017cc:	028b      	lsls	r3, r1, #10
 80017ce:	4621      	mov	r1, r4
 80017d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017d4:	4621      	mov	r1, r4
 80017d6:	028a      	lsls	r2, r1, #10
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017e0:	2200      	movs	r2, #0
 80017e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80017e4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017ea:	f7fe fd5b 	bl	80002a4 <__aeabi_uldivmod>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4613      	mov	r3, r2
 80017f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_RCC_GetSysClockFreq+0x458>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	0f1b      	lsrs	r3, r3, #28
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800180a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001816:	e003      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RCC_GetSysClockFreq+0x45c>)
 800181a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800181e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001820:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001824:	4618      	mov	r0, r3
 8001826:	37b8      	adds	r7, #184	; 0xb8
 8001828:	46bd      	mov	sp, r7
 800182a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	00f42400 	.word	0x00f42400

08001838 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e28d      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 8083 	beq.w	800195e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001858:	4b94      	ldr	r3, [pc, #592]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b04      	cmp	r3, #4
 8001862:	d019      	beq.n	8001898 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001864:	4b91      	ldr	r3, [pc, #580]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800186c:	2b08      	cmp	r3, #8
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001870:	4b8e      	ldr	r3, [pc, #568]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800187c:	d00c      	beq.n	8001898 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187e:	4b8b      	ldr	r3, [pc, #556]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001886:	2b0c      	cmp	r3, #12
 8001888:	d112      	bne.n	80018b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188a:	4b88      	ldr	r3, [pc, #544]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001896:	d10b      	bne.n	80018b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	4b84      	ldr	r3, [pc, #528]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d05b      	beq.n	800195c <HAL_RCC_OscConfig+0x124>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d157      	bne.n	800195c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e25a      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_OscConfig+0x90>
 80018ba:	4b7c      	ldr	r3, [pc, #496]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a7b      	ldr	r2, [pc, #492]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e01d      	b.n	8001904 <HAL_RCC_OscConfig+0xcc>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0xb4>
 80018d2:	4b76      	ldr	r3, [pc, #472]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a75      	ldr	r2, [pc, #468]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 80018d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b73      	ldr	r3, [pc, #460]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a72      	ldr	r2, [pc, #456]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0xcc>
 80018ec:	4b6f      	ldr	r3, [pc, #444]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a6e      	ldr	r2, [pc, #440]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 80018f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b6c      	ldr	r3, [pc, #432]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a6b      	ldr	r2, [pc, #428]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 80018fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d013      	beq.n	8001934 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff f940 	bl	8000b90 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff f93c 	bl	8000b90 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e21f      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b61      	ldr	r3, [pc, #388]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0xdc>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff f92c 	bl	8000b90 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff f928 	bl	8000b90 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e20b      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	4b57      	ldr	r3, [pc, #348]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x104>
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d06f      	beq.n	8001a4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800196a:	4b50      	ldr	r3, [pc, #320]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b00      	cmp	r3, #0
 8001974:	d017      	beq.n	80019a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001976:	4b4d      	ldr	r3, [pc, #308]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800197e:	2b08      	cmp	r3, #8
 8001980:	d105      	bne.n	800198e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001982:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00b      	beq.n	80019a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198e:	4b47      	ldr	r3, [pc, #284]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001996:	2b0c      	cmp	r3, #12
 8001998:	d11c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199a:	4b44      	ldr	r3, [pc, #272]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d116      	bne.n	80019d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a6:	4b41      	ldr	r3, [pc, #260]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_RCC_OscConfig+0x186>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e1d3      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4937      	ldr	r1, [pc, #220]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	e03a      	b.n	8001a4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d020      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019dc:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <HAL_RCC_OscConfig+0x278>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e2:	f7ff f8d5 	bl	8000b90 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ea:	f7ff f8d1 	bl	8000b90 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e1b4      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fc:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4925      	ldr	r1, [pc, #148]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	600b      	str	r3, [r1, #0]
 8001a1c:	e015      	b.n	8001a4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_RCC_OscConfig+0x278>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff f8b4 	bl	8000b90 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a2c:	f7ff f8b0 	bl	8000b90 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e193      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d036      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d016      	beq.n	8001a8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_RCC_OscConfig+0x27c>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff f894 	bl	8000b90 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a6c:	f7ff f890 	bl	8000b90 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e173      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 8001a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x234>
 8001a8a:	e01b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_RCC_OscConfig+0x27c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a92:	f7ff f87d 	bl	8000b90 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a98:	e00e      	b.n	8001ab8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a9a:	f7ff f879 	bl	8000b90 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d907      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e15c      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	42470000 	.word	0x42470000
 8001ab4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab8:	4b8a      	ldr	r3, [pc, #552]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1ea      	bne.n	8001a9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 8097 	beq.w	8001c00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad6:	4b83      	ldr	r3, [pc, #524]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10f      	bne.n	8001b02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b7f      	ldr	r3, [pc, #508]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a7e      	ldr	r2, [pc, #504]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b7c      	ldr	r3, [pc, #496]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afe:	2301      	movs	r3, #1
 8001b00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b02:	4b79      	ldr	r3, [pc, #484]	; (8001ce8 <HAL_RCC_OscConfig+0x4b0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d118      	bne.n	8001b40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0e:	4b76      	ldr	r3, [pc, #472]	; (8001ce8 <HAL_RCC_OscConfig+0x4b0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a75      	ldr	r2, [pc, #468]	; (8001ce8 <HAL_RCC_OscConfig+0x4b0>)
 8001b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff f839 	bl	8000b90 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b22:	f7ff f835 	bl	8000b90 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e118      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	4b6c      	ldr	r3, [pc, #432]	; (8001ce8 <HAL_RCC_OscConfig+0x4b0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0x31e>
 8001b48:	4b66      	ldr	r3, [pc, #408]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	4a65      	ldr	r2, [pc, #404]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6713      	str	r3, [r2, #112]	; 0x70
 8001b54:	e01c      	b.n	8001b90 <HAL_RCC_OscConfig+0x358>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2b05      	cmp	r3, #5
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x340>
 8001b5e:	4b61      	ldr	r3, [pc, #388]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	4a60      	ldr	r2, [pc, #384]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a5d      	ldr	r2, [pc, #372]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_OscConfig+0x358>
 8001b78:	4b5a      	ldr	r3, [pc, #360]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	4a59      	ldr	r2, [pc, #356]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	6713      	str	r3, [r2, #112]	; 0x70
 8001b84:	4b57      	ldr	r3, [pc, #348]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	4a56      	ldr	r2, [pc, #344]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001b8a:	f023 0304 	bic.w	r3, r3, #4
 8001b8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d015      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7fe fffa 	bl	8000b90 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba0:	f7fe fff6 	bl	8000b90 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e0d7      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb6:	4b4b      	ldr	r3, [pc, #300]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0ee      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x368>
 8001bc2:	e014      	b.n	8001bee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7fe ffe4 	bl	8000b90 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7fe ffe0 	bl	8000b90 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0c1      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be2:	4b40      	ldr	r3, [pc, #256]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1ee      	bne.n	8001bcc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf4:	4b3b      	ldr	r3, [pc, #236]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	4a3a      	ldr	r2, [pc, #232]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80ad 	beq.w	8001d64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c0a:	4b36      	ldr	r3, [pc, #216]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d060      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d145      	bne.n	8001caa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1e:	4b33      	ldr	r3, [pc, #204]	; (8001cec <HAL_RCC_OscConfig+0x4b4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7fe ffb4 	bl	8000b90 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7fe ffb0 	bl	8000b90 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e093      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3e:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69da      	ldr	r2, [r3, #28]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	019b      	lsls	r3, r3, #6
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	085b      	lsrs	r3, r3, #1
 8001c62:	3b01      	subs	r3, #1
 8001c64:	041b      	lsls	r3, r3, #16
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	061b      	lsls	r3, r3, #24
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	071b      	lsls	r3, r3, #28
 8001c76:	491b      	ldr	r1, [pc, #108]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_RCC_OscConfig+0x4b4>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c82:	f7fe ff85 	bl	8000b90 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7fe ff81 	bl	8000b90 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e064      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x452>
 8001ca8:	e05c      	b.n	8001d64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_RCC_OscConfig+0x4b4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb0:	f7fe ff6e 	bl	8000b90 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7fe ff6a 	bl	8000b90 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e04d      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_RCC_OscConfig+0x4ac>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x480>
 8001cd6:	e045      	b.n	8001d64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e040      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40007000 	.word	0x40007000
 8001cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cf0:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <HAL_RCC_OscConfig+0x538>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d030      	beq.n	8001d60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d129      	bne.n	8001d60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d122      	bne.n	8001d60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d20:	4013      	ands	r3, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d119      	bne.n	8001d60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	085b      	lsrs	r3, r3, #1
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d10f      	bne.n	8001d60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d107      	bne.n	8001d60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800

08001d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e041      	b.n	8001e0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f839 	bl	8001e12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3304      	adds	r3, #4
 8001db0:	4619      	mov	r1, r3
 8001db2:	4610      	mov	r0, r2
 8001db4:	f000 f9d8 	bl	8002168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d001      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e04e      	b.n	8001ede <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a23      	ldr	r2, [pc, #140]	; (8001eec <HAL_TIM_Base_Start_IT+0xc4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d022      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x80>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6a:	d01d      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x80>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d018      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x80>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ef4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d013      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x80>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1c      	ldr	r2, [pc, #112]	; (8001ef8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00e      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x80>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1b      	ldr	r2, [pc, #108]	; (8001efc <HAL_TIM_Base_Start_IT+0xd4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d009      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x80>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d004      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x80>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d111      	bne.n	8001ecc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d010      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0201 	orr.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eca:	e007      	b.n	8001edc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40010000 	.word	0x40010000
 8001ef0:	40000400 	.word	0x40000400
 8001ef4:	40000800 	.word	0x40000800
 8001ef8:	40000c00 	.word	0x40000c00
 8001efc:	40010400 	.word	0x40010400
 8001f00:	40014000 	.word	0x40014000
 8001f04:	40001800 	.word	0x40001800

08001f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d122      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d11b      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0202 	mvn.w	r2, #2
 8001f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8ee 	bl	800212c <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8e0 	bl	8002118 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f8f1 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d122      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0204 	mvn.w	r2, #4
 8001f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8c4 	bl	800212c <HAL_TIM_IC_CaptureCallback>
 8001fa4:	e005      	b.n	8001fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f8b6 	bl	8002118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f8c7 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d122      	bne.n	800200c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d11b      	bne.n	800200c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0208 	mvn.w	r2, #8
 8001fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f89a 	bl	800212c <HAL_TIM_IC_CaptureCallback>
 8001ff8:	e005      	b.n	8002006 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f88c 	bl	8002118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f89d 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b10      	cmp	r3, #16
 8002018:	d122      	bne.n	8002060 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b10      	cmp	r3, #16
 8002026:	d11b      	bne.n	8002060 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0210 	mvn.w	r2, #16
 8002030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2208      	movs	r2, #8
 8002036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f870 	bl	800212c <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f862 	bl	8002118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f873 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b01      	cmp	r3, #1
 800206c:	d10e      	bne.n	800208c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d107      	bne.n	800208c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0201 	mvn.w	r2, #1
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7fe fc34 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	2b80      	cmp	r3, #128	; 0x80
 8002098:	d10e      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a4:	2b80      	cmp	r3, #128	; 0x80
 80020a6:	d107      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f902 	bl	80022bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c2:	2b40      	cmp	r3, #64	; 0x40
 80020c4:	d10e      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d0:	2b40      	cmp	r3, #64	; 0x40
 80020d2:	d107      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f838 	bl	8002154 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	2b20      	cmp	r3, #32
 80020f0:	d10e      	bne.n	8002110 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d107      	bne.n	8002110 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0220 	mvn.w	r2, #32
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f8cc 	bl	80022a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a40      	ldr	r2, [pc, #256]	; (800227c <TIM_Base_SetConfig+0x114>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d013      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002186:	d00f      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3d      	ldr	r2, [pc, #244]	; (8002280 <TIM_Base_SetConfig+0x118>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00b      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3c      	ldr	r2, [pc, #240]	; (8002284 <TIM_Base_SetConfig+0x11c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a3b      	ldr	r2, [pc, #236]	; (8002288 <TIM_Base_SetConfig+0x120>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d003      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3a      	ldr	r2, [pc, #232]	; (800228c <TIM_Base_SetConfig+0x124>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d108      	bne.n	80021ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2f      	ldr	r2, [pc, #188]	; (800227c <TIM_Base_SetConfig+0x114>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d02b      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c8:	d027      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2c      	ldr	r2, [pc, #176]	; (8002280 <TIM_Base_SetConfig+0x118>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d023      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2b      	ldr	r2, [pc, #172]	; (8002284 <TIM_Base_SetConfig+0x11c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01f      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2a      	ldr	r2, [pc, #168]	; (8002288 <TIM_Base_SetConfig+0x120>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d01b      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a29      	ldr	r2, [pc, #164]	; (800228c <TIM_Base_SetConfig+0x124>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d017      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a28      	ldr	r2, [pc, #160]	; (8002290 <TIM_Base_SetConfig+0x128>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a27      	ldr	r2, [pc, #156]	; (8002294 <TIM_Base_SetConfig+0x12c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00f      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a26      	ldr	r2, [pc, #152]	; (8002298 <TIM_Base_SetConfig+0x130>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00b      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a25      	ldr	r2, [pc, #148]	; (800229c <TIM_Base_SetConfig+0x134>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <TIM_Base_SetConfig+0x138>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d003      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <TIM_Base_SetConfig+0x13c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d108      	bne.n	800222c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <TIM_Base_SetConfig+0x114>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d003      	beq.n	8002260 <TIM_Base_SetConfig+0xf8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a0c      	ldr	r2, [pc, #48]	; (800228c <TIM_Base_SetConfig+0x124>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d103      	bne.n	8002268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	615a      	str	r2, [r3, #20]
}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40010000 	.word	0x40010000
 8002280:	40000400 	.word	0x40000400
 8002284:	40000800 	.word	0x40000800
 8002288:	40000c00 	.word	0x40000c00
 800228c:	40010400 	.word	0x40010400
 8002290:	40014000 	.word	0x40014000
 8002294:	40014400 	.word	0x40014400
 8002298:	40014800 	.word	0x40014800
 800229c:	40001800 	.word	0x40001800
 80022a0:	40001c00 	.word	0x40001c00
 80022a4:	40002000 	.word	0x40002000

080022a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f103 0208 	add.w	r2, r3, #8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022e8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f103 0208 	add.w	r2, r3, #8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f103 0208 	add.w	r2, r3, #8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800232a:	b480      	push	{r7}
 800232c:	b085      	sub	sp, #20
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002388:	d103      	bne.n	8002392 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	e00c      	b.n	80023ac <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3308      	adds	r3, #8
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	e002      	b.n	80023a0 <vListInsert+0x2e>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d2f6      	bcs.n	800239a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	601a      	str	r2, [r3, #0]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6892      	ldr	r2, [r2, #8]
 80023fa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6852      	ldr	r2, [r2, #4]
 8002404:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	429a      	cmp	r2, r3
 800240e:	d103      	bne.n	8002418 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	1e5a      	subs	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002438:	b580      	push	{r7, lr}
 800243a:	b08c      	sub	sp, #48	; 0x30
 800243c:	af04      	add	r7, sp, #16
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4618      	mov	r0, r3
 800244e:	f001 f82d 	bl	80034ac <pvPortMalloc>
 8002452:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00e      	beq.n	8002478 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800245a:	2058      	movs	r0, #88	; 0x58
 800245c:	f001 f826 	bl	80034ac <pvPortMalloc>
 8002460:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
 800246e:	e005      	b.n	800247c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002470:	6978      	ldr	r0, [r7, #20]
 8002472:	f001 f8fb 	bl	800366c <vPortFree>
 8002476:	e001      	b.n	800247c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d013      	beq.n	80024aa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002482:	88fa      	ldrh	r2, [r7, #6]
 8002484:	2300      	movs	r3, #0
 8002486:	9303      	str	r3, [sp, #12]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	9302      	str	r3, [sp, #8]
 800248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f80e 	bl	80024ba <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800249e:	69f8      	ldr	r0, [r7, #28]
 80024a0:	f000 f8a2 	bl	80025e8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80024a4:	2301      	movs	r3, #1
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	e002      	b.n	80024b0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ae:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80024b0:	69bb      	ldr	r3, [r7, #24]
    }
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b088      	sub	sp, #32
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	461a      	mov	r2, r3
 80024d2:	21a5      	movs	r1, #165	; 0xa5
 80024d4:	f003 fdcc 	bl	8006070 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024e2:	3b01      	subs	r3, #1
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f023 0307 	bic.w	r3, r3, #7
 80024f0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <prvInitialiseNewTask+0x58>
        __asm volatile
 80024fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002500:	f383 8811 	msr	BASEPRI, r3
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	617b      	str	r3, [r7, #20]
    }
 800250e:	bf00      	nop
 8002510:	e7fe      	b.n	8002510 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01f      	beq.n	8002558 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	e012      	b.n	8002544 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	4413      	add	r3, r2
 8002524:	7819      	ldrb	r1, [r3, #0]
 8002526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	4413      	add	r3, r2
 800252c:	3334      	adds	r3, #52	; 0x34
 800252e:	460a      	mov	r2, r1
 8002530:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	4413      	add	r3, r2
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3301      	adds	r3, #1
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	2b09      	cmp	r3, #9
 8002548:	d9e9      	bls.n	800251e <prvInitialiseNewTask+0x64>
 800254a:	e000      	b.n	800254e <prvInitialiseNewTask+0x94>
            {
                break;
 800254c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002556:	e003      	b.n	8002560 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	2b04      	cmp	r3, #4
 8002564:	d901      	bls.n	800256a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002566:	2304      	movs	r3, #4
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002574:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	2200      	movs	r2, #0
 800257a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257e:	3304      	adds	r3, #4
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fec5 	bl	8002310 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	3318      	adds	r3, #24
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fec0 	bl	8002310 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002594:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002598:	f1c3 0205 	rsb	r2, r3, #5
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	3350      	adds	r3, #80	; 0x50
 80025aa:	2204      	movs	r2, #4
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 fd5e 	bl	8006070 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	3354      	adds	r3, #84	; 0x54
 80025b8:	2201      	movs	r2, #1
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 fd57 	bl	8006070 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	68f9      	ldr	r1, [r7, #12]
 80025c6:	69b8      	ldr	r0, [r7, #24]
 80025c8:	f000 fc98 	bl	8002efc <pxPortInitialiseStack>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025de:	bf00      	nop
 80025e0:	3720      	adds	r7, #32
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80025e8:	b5b0      	push	{r4, r5, r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80025f0:	f000 fe30 	bl	8003254 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80025f4:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <prvAddNewTaskToReadyList+0xfc>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	4a3a      	ldr	r2, [pc, #232]	; (80026e4 <prvAddNewTaskToReadyList+0xfc>)
 80025fc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80025fe:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <prvAddNewTaskToReadyList+0x100>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002606:	4a38      	ldr	r2, [pc, #224]	; (80026e8 <prvAddNewTaskToReadyList+0x100>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800260c:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <prvAddNewTaskToReadyList+0xfc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d110      	bne.n	8002636 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002614:	f000 fb60 	bl	8002cd8 <prvInitialiseTaskLists>
 8002618:	e00d      	b.n	8002636 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800261a:	4b34      	ldr	r3, [pc, #208]	; (80026ec <prvAddNewTaskToReadyList+0x104>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002622:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <prvAddNewTaskToReadyList+0x100>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	429a      	cmp	r2, r3
 800262e:	d802      	bhi.n	8002636 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002630:	4a2d      	ldr	r2, [pc, #180]	; (80026e8 <prvAddNewTaskToReadyList+0x100>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002636:	4b2e      	ldr	r3, [pc, #184]	; (80026f0 <prvAddNewTaskToReadyList+0x108>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	4a2c      	ldr	r2, [pc, #176]	; (80026f0 <prvAddNewTaskToReadyList+0x108>)
 800263e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002640:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <prvAddNewTaskToReadyList+0x108>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d016      	beq.n	800267c <prvAddNewTaskToReadyList+0x94>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4618      	mov	r0, r3
 8002652:	f003 fa21 	bl	8005a98 <SEGGER_SYSVIEW_OnTaskCreate>
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	461d      	mov	r5, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	461c      	mov	r4, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	1ae3      	subs	r3, r4, r3
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	462b      	mov	r3, r5
 8002678:	f001 f9c6 	bl	8003a08 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4618      	mov	r0, r3
 8002680:	f003 fa8e 	bl	8005ba0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	2201      	movs	r2, #1
 800268a:	409a      	lsls	r2, r3
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <prvAddNewTaskToReadyList+0x10c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4313      	orrs	r3, r2
 8002692:	4a18      	ldr	r2, [pc, #96]	; (80026f4 <prvAddNewTaskToReadyList+0x10c>)
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4a15      	ldr	r2, [pc, #84]	; (80026f8 <prvAddNewTaskToReadyList+0x110>)
 80026a4:	441a      	add	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3304      	adds	r3, #4
 80026aa:	4619      	mov	r1, r3
 80026ac:	4610      	mov	r0, r2
 80026ae:	f7ff fe3c 	bl	800232a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80026b2:	f000 fdff 	bl	80032b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <prvAddNewTaskToReadyList+0x104>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00e      	beq.n	80026dc <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <prvAddNewTaskToReadyList+0x100>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d207      	bcs.n	80026dc <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <prvAddNewTaskToReadyList+0x114>)
 80026ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bdb0      	pop	{r4, r5, r7, pc}
 80026e4:	2000015c 	.word	0x2000015c
 80026e8:	20000084 	.word	0x20000084
 80026ec:	20000168 	.word	0x20000168
 80026f0:	20000178 	.word	0x20000178
 80026f4:	20000164 	.word	0x20000164
 80026f8:	20000088 	.word	0x20000088
 80026fc:	e000ed04 	.word	0xe000ed04

08002700 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <xTaskDelayUntil+0x2a>
        __asm volatile
 8002714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002718:	f383 8811 	msr	BASEPRI, r3
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	617b      	str	r3, [r7, #20]
    }
 8002726:	bf00      	nop
 8002728:	e7fe      	b.n	8002728 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <xTaskDelayUntil+0x46>
        __asm volatile
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	613b      	str	r3, [r7, #16]
    }
 8002742:	bf00      	nop
 8002744:	e7fe      	b.n	8002744 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8002746:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <xTaskDelayUntil+0xf8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <xTaskDelayUntil+0x64>
        __asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	60fb      	str	r3, [r7, #12]
    }
 8002760:	bf00      	nop
 8002762:	e7fe      	b.n	8002762 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8002764:	f000 f8aa 	bl	80028bc <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <xTaskDelayUntil+0xfc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	4413      	add	r3, r2
 8002776:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6a3a      	ldr	r2, [r7, #32]
 800277e:	429a      	cmp	r2, r3
 8002780:	d20b      	bcs.n	800279a <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	429a      	cmp	r2, r3
 800278a:	d211      	bcs.n	80027b0 <xTaskDelayUntil+0xb0>
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	429a      	cmp	r2, r3
 8002792:	d90d      	bls.n	80027b0 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002794:	2301      	movs	r3, #1
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
 8002798:	e00a      	b.n	80027b0 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d303      	bcc.n	80027ac <xTaskDelayUntil+0xac>
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d901      	bls.n	80027b0 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d009      	beq.n	80027d0 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80027bc:	2024      	movs	r0, #36	; 0x24
 80027be:	f002 fd57 	bl	8005270 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fb1e 	bl	8002e0c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80027d0:	f000 f882 	bl	80028d8 <xTaskResumeAll>
 80027d4:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <xTaskDelayUntil+0x100>)
 80027de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80027ee:	4618      	mov	r0, r3
 80027f0:	3728      	adds	r7, #40	; 0x28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000184 	.word	0x20000184
 80027fc:	20000160 	.word	0x20000160
 8002800:	e000ed04 	.word	0xe000ed04

08002804 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <vTaskStartScheduler+0x98>)
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	2300      	movs	r3, #0
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2300      	movs	r3, #0
 8002814:	2282      	movs	r2, #130	; 0x82
 8002816:	4922      	ldr	r1, [pc, #136]	; (80028a0 <vTaskStartScheduler+0x9c>)
 8002818:	4822      	ldr	r0, [pc, #136]	; (80028a4 <vTaskStartScheduler+0xa0>)
 800281a:	f7ff fe0d 	bl	8002438 <xTaskCreate>
 800281e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d124      	bne.n	8002870 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282a:	f383 8811 	msr	BASEPRI, r3
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	60bb      	str	r3, [r7, #8]
    }
 8002838:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800283a:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <vTaskStartScheduler+0xa4>)
 800283c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002840:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <vTaskStartScheduler+0xa8>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <vTaskStartScheduler+0xac>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800284e:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <vTaskStartScheduler+0xb0>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <vTaskStartScheduler+0x98>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d102      	bne.n	8002860 <vTaskStartScheduler+0x5c>
 800285a:	f003 f901 	bl	8005a60 <SEGGER_SYSVIEW_OnIdle>
 800285e:	e004      	b.n	800286a <vTaskStartScheduler+0x66>
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <vTaskStartScheduler+0xb0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f003 f959 	bl	8005b1c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800286a:	f000 fbd3 	bl	8003014 <xPortStartScheduler>
 800286e:	e00e      	b.n	800288e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002876:	d10a      	bne.n	800288e <vTaskStartScheduler+0x8a>
        __asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	607b      	str	r3, [r7, #4]
    }
 800288a:	bf00      	nop
 800288c:	e7fe      	b.n	800288c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <vTaskStartScheduler+0xb4>)
 8002890:	681b      	ldr	r3, [r3, #0]
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000180 	.word	0x20000180
 80028a0:	08006104 	.word	0x08006104
 80028a4:	08002ca9 	.word	0x08002ca9
 80028a8:	2000017c 	.word	0x2000017c
 80028ac:	20000168 	.word	0x20000168
 80028b0:	20000160 	.word	0x20000160
 80028b4:	20000084 	.word	0x20000084
 80028b8:	2000000c 	.word	0x2000000c

080028bc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <vTaskSuspendAll+0x18>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	4a03      	ldr	r2, [pc, #12]	; (80028d4 <vTaskSuspendAll+0x18>)
 80028c8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	20000184 	.word	0x20000184

080028d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80028e6:	4b43      	ldr	r3, [pc, #268]	; (80029f4 <xTaskResumeAll+0x11c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10a      	bne.n	8002904 <xTaskResumeAll+0x2c>
        __asm volatile
 80028ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f2:	f383 8811 	msr	BASEPRI, r3
 80028f6:	f3bf 8f6f 	isb	sy
 80028fa:	f3bf 8f4f 	dsb	sy
 80028fe:	603b      	str	r3, [r7, #0]
    }
 8002900:	bf00      	nop
 8002902:	e7fe      	b.n	8002902 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002904:	f000 fca6 	bl	8003254 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002908:	4b3a      	ldr	r3, [pc, #232]	; (80029f4 <xTaskResumeAll+0x11c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3b01      	subs	r3, #1
 800290e:	4a39      	ldr	r2, [pc, #228]	; (80029f4 <xTaskResumeAll+0x11c>)
 8002910:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002912:	4b38      	ldr	r3, [pc, #224]	; (80029f4 <xTaskResumeAll+0x11c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d165      	bne.n	80029e6 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800291a:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <xTaskResumeAll+0x120>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d061      	beq.n	80029e6 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002922:	e032      	b.n	800298a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002924:	4b35      	ldr	r3, [pc, #212]	; (80029fc <xTaskResumeAll+0x124>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3318      	adds	r3, #24
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fd57 	bl	80023e4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3304      	adds	r3, #4
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fd52 	bl	80023e4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4618      	mov	r0, r3
 8002944:	f003 f92c 	bl	8005ba0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	2201      	movs	r2, #1
 800294e:	409a      	lsls	r2, r3
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <xTaskResumeAll+0x128>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4313      	orrs	r3, r2
 8002956:	4a2a      	ldr	r2, [pc, #168]	; (8002a00 <xTaskResumeAll+0x128>)
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4a27      	ldr	r2, [pc, #156]	; (8002a04 <xTaskResumeAll+0x12c>)
 8002968:	441a      	add	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3304      	adds	r3, #4
 800296e:	4619      	mov	r1, r3
 8002970:	4610      	mov	r0, r2
 8002972:	f7ff fcda 	bl	800232a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297a:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <xTaskResumeAll+0x130>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	429a      	cmp	r2, r3
 8002982:	d302      	bcc.n	800298a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002984:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <xTaskResumeAll+0x134>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800298a:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <xTaskResumeAll+0x124>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1c8      	bne.n	8002924 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002998:	f000 fa1c 	bl	8002dd4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <xTaskResumeAll+0x138>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d010      	beq.n	80029ca <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80029a8:	f000 f858 	bl	8002a5c <xTaskIncrementTick>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <xTaskResumeAll+0x134>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f1      	bne.n	80029a8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <xTaskResumeAll+0x138>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <xTaskResumeAll+0x134>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80029d2:	2301      	movs	r3, #1
 80029d4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <xTaskResumeAll+0x13c>)
 80029d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80029e6:	f000 fc65 	bl	80032b4 <vPortExitCritical>

    return xAlreadyYielded;
 80029ea:	68bb      	ldr	r3, [r7, #8]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000184 	.word	0x20000184
 80029f8:	2000015c 	.word	0x2000015c
 80029fc:	2000011c 	.word	0x2000011c
 8002a00:	20000164 	.word	0x20000164
 8002a04:	20000088 	.word	0x20000088
 8002a08:	20000084 	.word	0x20000084
 8002a0c:	20000170 	.word	0x20000170
 8002a10:	2000016c 	.word	0x2000016c
 8002a14:	e000ed04 	.word	0xe000ed04

08002a18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <xTaskGetTickCount+0x1c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002a24:	687b      	ldr	r3, [r7, #4]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000160 	.word	0x20000160

08002a38 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a3e:	f000 fcf5 	bl	800342c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002a46:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <xTaskGetTickCountFromISR+0x20>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a4c:	683b      	ldr	r3, [r7, #0]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000160 	.word	0x20000160

08002a5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a66:	4b50      	ldr	r3, [pc, #320]	; (8002ba8 <xTaskIncrementTick+0x14c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f040 8092 	bne.w	8002b94 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a70:	4b4e      	ldr	r3, [pc, #312]	; (8002bac <xTaskIncrementTick+0x150>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a78:	4a4c      	ldr	r2, [pc, #304]	; (8002bac <xTaskIncrementTick+0x150>)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d120      	bne.n	8002ac6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a84:	4b4a      	ldr	r3, [pc, #296]	; (8002bb0 <xTaskIncrementTick+0x154>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <xTaskIncrementTick+0x48>
        __asm volatile
 8002a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a92:	f383 8811 	msr	BASEPRI, r3
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	603b      	str	r3, [r7, #0]
    }
 8002aa0:	bf00      	nop
 8002aa2:	e7fe      	b.n	8002aa2 <xTaskIncrementTick+0x46>
 8002aa4:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <xTaskIncrementTick+0x154>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b42      	ldr	r3, [pc, #264]	; (8002bb4 <xTaskIncrementTick+0x158>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a40      	ldr	r2, [pc, #256]	; (8002bb0 <xTaskIncrementTick+0x154>)
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4a40      	ldr	r2, [pc, #256]	; (8002bb4 <xTaskIncrementTick+0x158>)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <xTaskIncrementTick+0x15c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	4a3e      	ldr	r2, [pc, #248]	; (8002bb8 <xTaskIncrementTick+0x15c>)
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	f000 f987 	bl	8002dd4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	; (8002bbc <xTaskIncrementTick+0x160>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d34c      	bcc.n	8002b6a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ad0:	4b37      	ldr	r3, [pc, #220]	; (8002bb0 <xTaskIncrementTick+0x154>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d104      	bne.n	8002ae4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ada:	4b38      	ldr	r3, [pc, #224]	; (8002bbc <xTaskIncrementTick+0x160>)
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ae0:	601a      	str	r2, [r3, #0]
                    break;
 8002ae2:	e042      	b.n	8002b6a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ae4:	4b32      	ldr	r3, [pc, #200]	; (8002bb0 <xTaskIncrementTick+0x154>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d203      	bcs.n	8002b04 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002afc:	4a2f      	ldr	r2, [pc, #188]	; (8002bbc <xTaskIncrementTick+0x160>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b02:	e032      	b.n	8002b6a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	3304      	adds	r3, #4
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fc6b 	bl	80023e4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d004      	beq.n	8002b20 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	3318      	adds	r3, #24
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fc62 	bl	80023e4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f003 f83c 	bl	8005ba0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <xTaskIncrementTick+0x164>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	4a22      	ldr	r2, [pc, #136]	; (8002bc0 <xTaskIncrementTick+0x164>)
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4a1f      	ldr	r2, [pc, #124]	; (8002bc4 <xTaskIncrementTick+0x168>)
 8002b48:	441a      	add	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4610      	mov	r0, r2
 8002b52:	f7ff fbea 	bl	800232a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <xTaskIncrementTick+0x16c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d3b5      	bcc.n	8002ad0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002b64:	2301      	movs	r3, #1
 8002b66:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b68:	e7b2      	b.n	8002ad0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <xTaskIncrementTick+0x16c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b70:	4914      	ldr	r1, [pc, #80]	; (8002bc4 <xTaskIncrementTick+0x168>)
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d901      	bls.n	8002b86 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002b82:	2301      	movs	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <xTaskIncrementTick+0x170>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e004      	b.n	8002b9e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002b94:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <xTaskIncrementTick+0x174>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <xTaskIncrementTick+0x174>)
 8002b9c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002b9e:	697b      	ldr	r3, [r7, #20]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000184 	.word	0x20000184
 8002bac:	20000160 	.word	0x20000160
 8002bb0:	20000114 	.word	0x20000114
 8002bb4:	20000118 	.word	0x20000118
 8002bb8:	20000174 	.word	0x20000174
 8002bbc:	2000017c 	.word	0x2000017c
 8002bc0:	20000164 	.word	0x20000164
 8002bc4:	20000088 	.word	0x20000088
 8002bc8:	20000084 	.word	0x20000084
 8002bcc:	20000170 	.word	0x20000170
 8002bd0:	2000016c 	.word	0x2000016c

08002bd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002bda:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <vTaskSwitchContext+0xbc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002be2:	4b2c      	ldr	r3, [pc, #176]	; (8002c94 <vTaskSwitchContext+0xc0>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002be8:	e04d      	b.n	8002c86 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002bea:	4b2a      	ldr	r3, [pc, #168]	; (8002c94 <vTaskSwitchContext+0xc0>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bf0:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <vTaskSwitchContext+0xc4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
 8002c00:	f1c3 031f 	rsb	r3, r3, #31
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	4925      	ldr	r1, [pc, #148]	; (8002c9c <vTaskSwitchContext+0xc8>)
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10a      	bne.n	8002c30 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1e:	f383 8811 	msr	BASEPRI, r3
 8002c22:	f3bf 8f6f 	isb	sy
 8002c26:	f3bf 8f4f 	dsb	sy
 8002c2a:	607b      	str	r3, [r7, #4]
    }
 8002c2c:	bf00      	nop
 8002c2e:	e7fe      	b.n	8002c2e <vTaskSwitchContext+0x5a>
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <vTaskSwitchContext+0xc8>)
 8002c3c:	4413      	add	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	3308      	adds	r3, #8
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d104      	bne.n	8002c60 <vTaskSwitchContext+0x8c>
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	4a0e      	ldr	r2, [pc, #56]	; (8002ca0 <vTaskSwitchContext+0xcc>)
 8002c68:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <vTaskSwitchContext+0xcc>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <vTaskSwitchContext+0xd0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d102      	bne.n	8002c7c <vTaskSwitchContext+0xa8>
 8002c76:	f002 fef3 	bl	8005a60 <SEGGER_SYSVIEW_OnIdle>
}
 8002c7a:	e004      	b.n	8002c86 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <vTaskSwitchContext+0xcc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f002 ff4b 	bl	8005b1c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002c86:	bf00      	nop
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000184 	.word	0x20000184
 8002c94:	20000170 	.word	0x20000170
 8002c98:	20000164 	.word	0x20000164
 8002c9c:	20000088 	.word	0x20000088
 8002ca0:	20000084 	.word	0x20000084
 8002ca4:	20000180 	.word	0x20000180

08002ca8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002cb0:	f000 f852 	bl	8002d58 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <prvIdleTask+0x28>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d9f9      	bls.n	8002cb0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <prvIdleTask+0x2c>)
 8002cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ccc:	e7f0      	b.n	8002cb0 <prvIdleTask+0x8>
 8002cce:	bf00      	nop
 8002cd0:	20000088 	.word	0x20000088
 8002cd4:	e000ed04 	.word	0xe000ed04

08002cd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	e00c      	b.n	8002cfe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <prvInitialiseTaskLists+0x60>)
 8002cf0:	4413      	add	r3, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff faec 	bl	80022d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d9ef      	bls.n	8002ce4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002d04:	480d      	ldr	r0, [pc, #52]	; (8002d3c <prvInitialiseTaskLists+0x64>)
 8002d06:	f7ff fae3 	bl	80022d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002d0a:	480d      	ldr	r0, [pc, #52]	; (8002d40 <prvInitialiseTaskLists+0x68>)
 8002d0c:	f7ff fae0 	bl	80022d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d10:	480c      	ldr	r0, [pc, #48]	; (8002d44 <prvInitialiseTaskLists+0x6c>)
 8002d12:	f7ff fadd 	bl	80022d0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002d16:	480c      	ldr	r0, [pc, #48]	; (8002d48 <prvInitialiseTaskLists+0x70>)
 8002d18:	f7ff fada 	bl	80022d0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002d1c:	480b      	ldr	r0, [pc, #44]	; (8002d4c <prvInitialiseTaskLists+0x74>)
 8002d1e:	f7ff fad7 	bl	80022d0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <prvInitialiseTaskLists+0x78>)
 8002d24:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <prvInitialiseTaskLists+0x64>)
 8002d26:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <prvInitialiseTaskLists+0x7c>)
 8002d2a:	4a05      	ldr	r2, [pc, #20]	; (8002d40 <prvInitialiseTaskLists+0x68>)
 8002d2c:	601a      	str	r2, [r3, #0]
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000088 	.word	0x20000088
 8002d3c:	200000ec 	.word	0x200000ec
 8002d40:	20000100 	.word	0x20000100
 8002d44:	2000011c 	.word	0x2000011c
 8002d48:	20000130 	.word	0x20000130
 8002d4c:	20000148 	.word	0x20000148
 8002d50:	20000114 	.word	0x20000114
 8002d54:	20000118 	.word	0x20000118

08002d58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d5e:	e019      	b.n	8002d94 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002d60:	f000 fa78 	bl	8003254 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d64:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <prvCheckTasksWaitingTermination+0x50>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fb37 	bl	80023e4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002d76:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <prvCheckTasksWaitingTermination+0x54>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	4a0b      	ldr	r2, [pc, #44]	; (8002dac <prvCheckTasksWaitingTermination+0x54>)
 8002d7e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <prvCheckTasksWaitingTermination+0x58>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <prvCheckTasksWaitingTermination+0x58>)
 8002d88:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002d8a:	f000 fa93 	bl	80032b4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f810 	bl	8002db4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <prvCheckTasksWaitingTermination+0x58>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e1      	bne.n	8002d60 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000130 	.word	0x20000130
 8002dac:	2000015c 	.word	0x2000015c
 8002db0:	20000144 	.word	0x20000144

08002db4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fc53 	bl	800366c <vPortFree>
                vPortFree( pxTCB );
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fc50 	bl	800366c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <prvResetNextTaskUnblockTime+0x30>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d104      	bne.n	8002dec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <prvResetNextTaskUnblockTime+0x34>)
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002de8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002dea:	e005      	b.n	8002df8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <prvResetNextTaskUnblockTime+0x30>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <prvResetNextTaskUnblockTime+0x34>)
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000114 	.word	0x20000114
 8002e08:	2000017c 	.word	0x2000017c

08002e0c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002e16:	4b32      	ldr	r3, [pc, #200]	; (8002ee0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e1c:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3304      	adds	r3, #4
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fade 	bl	80023e4 <uxListRemove>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10b      	bne.n	8002e46 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002e2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ee4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	2201      	movs	r2, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4013      	ands	r3, r2
 8002e42:	4a29      	ldr	r2, [pc, #164]	; (8002ee8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002e44:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e4c:	d110      	bne.n	8002e70 <prvAddCurrentTaskToDelayedList+0x64>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002e54:	4b23      	ldr	r3, [pc, #140]	; (8002ee4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	211b      	movs	r1, #27
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f002 fee2 	bl	8005c24 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e60:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3304      	adds	r3, #4
 8002e66:	4619      	mov	r1, r3
 8002e68:	4820      	ldr	r0, [pc, #128]	; (8002eec <prvAddCurrentTaskToDelayedList+0xe0>)
 8002e6a:	f7ff fa5e 	bl	800232a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002e6e:	e032      	b.n	8002ed6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d20f      	bcs.n	8002ea8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2104      	movs	r1, #4
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f002 fec8 	bl	8005c24 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e94:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f7ff fa66 	bl	8002372 <vListInsert>
}
 8002ea6:	e016      	b.n	8002ed6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002ea8:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2104      	movs	r1, #4
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 feb8 	bl	8005c24 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	f7ff fa56 	bl	8002372 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <prvAddCurrentTaskToDelayedList+0xec>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d202      	bcs.n	8002ed6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002ed0:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <prvAddCurrentTaskToDelayedList+0xec>)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	6013      	str	r3, [r2, #0]
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000160 	.word	0x20000160
 8002ee4:	20000084 	.word	0x20000084
 8002ee8:	20000164 	.word	0x20000164
 8002eec:	20000148 	.word	0x20000148
 8002ef0:	20000118 	.word	0x20000118
 8002ef4:	20000114 	.word	0x20000114
 8002ef8:	2000017c 	.word	0x2000017c

08002efc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3b04      	subs	r3, #4
 8002f0c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f14:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3b04      	subs	r3, #4
 8002f1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f023 0201 	bic.w	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3b04      	subs	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f2c:	4a0c      	ldr	r2, [pc, #48]	; (8002f60 <pxPortInitialiseStack+0x64>)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3b14      	subs	r3, #20
 8002f36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3b04      	subs	r3, #4
 8002f42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f06f 0202 	mvn.w	r2, #2
 8002f4a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3b20      	subs	r3, #32
 8002f50:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002f52:	68fb      	ldr	r3, [r7, #12]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	08002f65 	.word	0x08002f65

08002f64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <prvTaskExitError+0x54>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f76:	d00a      	beq.n	8002f8e <prvTaskExitError+0x2a>
        __asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	60fb      	str	r3, [r7, #12]
    }
 8002f8a:	bf00      	nop
 8002f8c:	e7fe      	b.n	8002f8c <prvTaskExitError+0x28>
        __asm volatile
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	60bb      	str	r3, [r7, #8]
    }
 8002fa0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002fa2:	bf00      	nop
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0fc      	beq.n	8002fa4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	20000010 	.word	0x20000010
 8002fbc:	00000000 	.word	0x00000000

08002fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002fc0:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <pxCurrentTCBConst2>)
 8002fc2:	6819      	ldr	r1, [r3, #0]
 8002fc4:	6808      	ldr	r0, [r1, #0]
 8002fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fca:	f380 8809 	msr	PSP, r0
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f380 8811 	msr	BASEPRI, r0
 8002fda:	4770      	bx	lr
 8002fdc:	f3af 8000 	nop.w

08002fe0 <pxCurrentTCBConst2>:
 8002fe0:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop

08002fe8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002fe8:	4808      	ldr	r0, [pc, #32]	; (800300c <prvPortStartFirstTask+0x24>)
 8002fea:	6800      	ldr	r0, [r0, #0]
 8002fec:	6800      	ldr	r0, [r0, #0]
 8002fee:	f380 8808 	msr	MSP, r0
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	f380 8814 	msr	CONTROL, r0
 8002ffa:	b662      	cpsie	i
 8002ffc:	b661      	cpsie	f
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	df00      	svc	0
 8003008:	bf00      	nop
 800300a:	0000      	.short	0x0000
 800300c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop

08003014 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800301a:	4b46      	ldr	r3, [pc, #280]	; (8003134 <xPortStartScheduler+0x120>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a46      	ldr	r2, [pc, #280]	; (8003138 <xPortStartScheduler+0x124>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10a      	bne.n	800303a <xPortStartScheduler+0x26>
        __asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	613b      	str	r3, [r7, #16]
    }
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800303a:	4b3e      	ldr	r3, [pc, #248]	; (8003134 <xPortStartScheduler+0x120>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a3f      	ldr	r2, [pc, #252]	; (800313c <xPortStartScheduler+0x128>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d10a      	bne.n	800305a <xPortStartScheduler+0x46>
        __asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	60fb      	str	r3, [r7, #12]
    }
 8003056:	bf00      	nop
 8003058:	e7fe      	b.n	8003058 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800305a:	4b39      	ldr	r3, [pc, #228]	; (8003140 <xPortStartScheduler+0x12c>)
 800305c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	22ff      	movs	r2, #255	; 0xff
 800306a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4b31      	ldr	r3, [pc, #196]	; (8003144 <xPortStartScheduler+0x130>)
 8003080:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003082:	4b31      	ldr	r3, [pc, #196]	; (8003148 <xPortStartScheduler+0x134>)
 8003084:	2207      	movs	r2, #7
 8003086:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003088:	e009      	b.n	800309e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800308a:	4b2f      	ldr	r3, [pc, #188]	; (8003148 <xPortStartScheduler+0x134>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3b01      	subs	r3, #1
 8003090:	4a2d      	ldr	r2, [pc, #180]	; (8003148 <xPortStartScheduler+0x134>)
 8003092:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	b2db      	uxtb	r3, r3
 800309c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a6:	2b80      	cmp	r3, #128	; 0x80
 80030a8:	d0ef      	beq.n	800308a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80030aa:	4b27      	ldr	r3, [pc, #156]	; (8003148 <xPortStartScheduler+0x134>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f1c3 0307 	rsb	r3, r3, #7
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d00a      	beq.n	80030cc <xPortStartScheduler+0xb8>
        __asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	60bb      	str	r3, [r7, #8]
    }
 80030c8:	bf00      	nop
 80030ca:	e7fe      	b.n	80030ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030cc:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <xPortStartScheduler+0x134>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	4a1d      	ldr	r2, [pc, #116]	; (8003148 <xPortStartScheduler+0x134>)
 80030d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030d6:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <xPortStartScheduler+0x134>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030de:	4a1a      	ldr	r2, [pc, #104]	; (8003148 <xPortStartScheduler+0x134>)
 80030e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <xPortStartScheduler+0x138>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a17      	ldr	r2, [pc, #92]	; (800314c <xPortStartScheduler+0x138>)
 80030f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <xPortStartScheduler+0x138>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a14      	ldr	r2, [pc, #80]	; (800314c <xPortStartScheduler+0x138>)
 80030fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003100:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003102:	f000 f963 	bl	80033cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003106:	4b12      	ldr	r3, [pc, #72]	; (8003150 <xPortStartScheduler+0x13c>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800310c:	f000 f982 	bl	8003414 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <xPortStartScheduler+0x140>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0f      	ldr	r2, [pc, #60]	; (8003154 <xPortStartScheduler+0x140>)
 8003116:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800311a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800311c:	f7ff ff64 	bl	8002fe8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003120:	f7ff fd58 	bl	8002bd4 <vTaskSwitchContext>
    prvTaskExitError();
 8003124:	f7ff ff1e 	bl	8002f64 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	e000ed00 	.word	0xe000ed00
 8003138:	410fc271 	.word	0x410fc271
 800313c:	410fc270 	.word	0x410fc270
 8003140:	e000e400 	.word	0xe000e400
 8003144:	20000188 	.word	0x20000188
 8003148:	2000018c 	.word	0x2000018c
 800314c:	e000ed20 	.word	0xe000ed20
 8003150:	20000010 	.word	0x20000010
 8003154:	e000ef34 	.word	0xe000ef34

08003158 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800315e:	4b37      	ldr	r3, [pc, #220]	; (800323c <vInitPrioGroupValue+0xe4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a37      	ldr	r2, [pc, #220]	; (8003240 <vInitPrioGroupValue+0xe8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d10a      	bne.n	800317e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	613b      	str	r3, [r7, #16]
    }
 800317a:	bf00      	nop
 800317c:	e7fe      	b.n	800317c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800317e:	4b2f      	ldr	r3, [pc, #188]	; (800323c <vInitPrioGroupValue+0xe4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a30      	ldr	r2, [pc, #192]	; (8003244 <vInitPrioGroupValue+0xec>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d10a      	bne.n	800319e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	60fb      	str	r3, [r7, #12]
    }
 800319a:	bf00      	nop
 800319c:	e7fe      	b.n	800319c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800319e:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <vInitPrioGroupValue+0xf0>)
 80031a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	22ff      	movs	r2, #255	; 0xff
 80031ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4b22      	ldr	r3, [pc, #136]	; (800324c <vInitPrioGroupValue+0xf4>)
 80031c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031c6:	4b22      	ldr	r3, [pc, #136]	; (8003250 <vInitPrioGroupValue+0xf8>)
 80031c8:	2207      	movs	r2, #7
 80031ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031cc:	e009      	b.n	80031e2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80031ce:	4b20      	ldr	r3, [pc, #128]	; (8003250 <vInitPrioGroupValue+0xf8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	4a1e      	ldr	r2, [pc, #120]	; (8003250 <vInitPrioGroupValue+0xf8>)
 80031d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	2b80      	cmp	r3, #128	; 0x80
 80031ec:	d0ef      	beq.n	80031ce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031ee:	4b18      	ldr	r3, [pc, #96]	; (8003250 <vInitPrioGroupValue+0xf8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f1c3 0307 	rsb	r3, r3, #7
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d00a      	beq.n	8003210 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	60bb      	str	r3, [r7, #8]
    }
 800320c:	bf00      	nop
 800320e:	e7fe      	b.n	800320e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003210:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <vInitPrioGroupValue+0xf8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	4a0e      	ldr	r2, [pc, #56]	; (8003250 <vInitPrioGroupValue+0xf8>)
 8003218:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <vInitPrioGroupValue+0xf8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003222:	4a0b      	ldr	r2, [pc, #44]	; (8003250 <vInitPrioGroupValue+0xf8>)
 8003224:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	b2da      	uxtb	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800322e:	bf00      	nop
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000ed00 	.word	0xe000ed00
 8003240:	410fc271 	.word	0x410fc271
 8003244:	410fc270 	.word	0x410fc270
 8003248:	e000e400 	.word	0xe000e400
 800324c:	20000188 	.word	0x20000188
 8003250:	2000018c 	.word	0x2000018c

08003254 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
        __asm volatile
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	607b      	str	r3, [r7, #4]
    }
 800326c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800326e:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <vPortEnterCritical+0x58>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3301      	adds	r3, #1
 8003274:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <vPortEnterCritical+0x58>)
 8003276:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <vPortEnterCritical+0x58>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d10f      	bne.n	80032a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <vPortEnterCritical+0x5c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	603b      	str	r3, [r7, #0]
    }
 800329c:	bf00      	nop
 800329e:	e7fe      	b.n	800329e <vPortEnterCritical+0x4a>
    }
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	20000010 	.word	0x20000010
 80032b0:	e000ed04 	.word	0xe000ed04

080032b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <vPortExitCritical+0x50>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <vPortExitCritical+0x24>
        __asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	607b      	str	r3, [r7, #4]
    }
 80032d4:	bf00      	nop
 80032d6:	e7fe      	b.n	80032d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <vPortExitCritical+0x50>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3b01      	subs	r3, #1
 80032de:	4a09      	ldr	r2, [pc, #36]	; (8003304 <vPortExitCritical+0x50>)
 80032e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <vPortExitCritical+0x50>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <vPortExitCritical+0x42>
 80032ea:	2300      	movs	r3, #0
 80032ec:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80032f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000010 	.word	0x20000010
	...

08003310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003310:	f3ef 8009 	mrs	r0, PSP
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	4b15      	ldr	r3, [pc, #84]	; (8003370 <pxCurrentTCBConst>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	f01e 0f10 	tst.w	lr, #16
 8003320:	bf08      	it	eq
 8003322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800332a:	6010      	str	r0, [r2, #0]
 800332c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003334:	f380 8811 	msr	BASEPRI, r0
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f7ff fc48 	bl	8002bd4 <vTaskSwitchContext>
 8003344:	f04f 0000 	mov.w	r0, #0
 8003348:	f380 8811 	msr	BASEPRI, r0
 800334c:	bc09      	pop	{r0, r3}
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	6808      	ldr	r0, [r1, #0]
 8003352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003356:	f01e 0f10 	tst.w	lr, #16
 800335a:	bf08      	it	eq
 800335c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003360:	f380 8809 	msr	PSP, r0
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	f3af 8000 	nop.w

08003370 <pxCurrentTCBConst>:
 8003370:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop

08003378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
        __asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	607b      	str	r3, [r7, #4]
    }
 8003390:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003392:	f002 faeb 	bl	800596c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003396:	f7ff fb61 	bl	8002a5c <xTaskIncrementTick>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d006      	beq.n	80033ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80033a0:	f002 fb42 	bl	8005a28 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80033a4:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <SysTick_Handler+0x50>)
 80033a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	e001      	b.n	80033b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80033ae:	f002 fb1f 	bl	80059f0 <SEGGER_SYSVIEW_RecordExitISR>
 80033b2:	2300      	movs	r3, #0
 80033b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f383 8811 	msr	BASEPRI, r3
    }
 80033bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	e000ed04 	.word	0xe000ed04

080033cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <vPortSetupTimerInterrupt+0x34>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <vPortSetupTimerInterrupt+0x38>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <vPortSetupTimerInterrupt+0x3c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a0a      	ldr	r2, [pc, #40]	; (800340c <vPortSetupTimerInterrupt+0x40>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	099b      	lsrs	r3, r3, #6
 80033e8:	4a09      	ldr	r2, [pc, #36]	; (8003410 <vPortSetupTimerInterrupt+0x44>)
 80033ea:	3b01      	subs	r3, #1
 80033ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <vPortSetupTimerInterrupt+0x34>)
 80033f0:	2207      	movs	r2, #7
 80033f2:	601a      	str	r2, [r3, #0]
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000e010 	.word	0xe000e010
 8003404:	e000e018 	.word	0xe000e018
 8003408:	20000000 	.word	0x20000000
 800340c:	10624dd3 	.word	0x10624dd3
 8003410:	e000e014 	.word	0xe000e014

08003414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003424 <vPortEnableVFP+0x10>
 8003418:	6801      	ldr	r1, [r0, #0]
 800341a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800341e:	6001      	str	r1, [r0, #0]
 8003420:	4770      	bx	lr
 8003422:	0000      	.short	0x0000
 8003424:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop

0800342c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003432:	f3ef 8305 	mrs	r3, IPSR
 8003436:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b0f      	cmp	r3, #15
 800343c:	d914      	bls.n	8003468 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800343e:	4a17      	ldr	r2, [pc, #92]	; (800349c <vPortValidateInterruptPriority+0x70>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4413      	add	r3, r2
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003448:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <vPortValidateInterruptPriority+0x74>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	7afa      	ldrb	r2, [r7, #11]
 800344e:	429a      	cmp	r2, r3
 8003450:	d20a      	bcs.n	8003468 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	607b      	str	r3, [r7, #4]
    }
 8003464:	bf00      	nop
 8003466:	e7fe      	b.n	8003466 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003468:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <vPortValidateInterruptPriority+0x78>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003470:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <vPortValidateInterruptPriority+0x7c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d90a      	bls.n	800348e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	603b      	str	r3, [r7, #0]
    }
 800348a:	bf00      	nop
 800348c:	e7fe      	b.n	800348c <vPortValidateInterruptPriority+0x60>
    }
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	e000e3f0 	.word	0xe000e3f0
 80034a0:	20000188 	.word	0x20000188
 80034a4:	e000ed0c 	.word	0xe000ed0c
 80034a8:	2000018c 	.word	0x2000018c

080034ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	; 0x28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80034b8:	f7ff fa00 	bl	80028bc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80034bc:	4b65      	ldr	r3, [pc, #404]	; (8003654 <pvPortMalloc+0x1a8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80034c4:	f000 f934 	bl	8003730 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80034c8:	4b63      	ldr	r3, [pc, #396]	; (8003658 <pvPortMalloc+0x1ac>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f040 80a7 	bne.w	8003624 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d02d      	beq.n	8003538 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80034dc:	2208      	movs	r2, #8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d227      	bcs.n	8003538 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80034e8:	2208      	movs	r2, #8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d021      	beq.n	800353e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f023 0307 	bic.w	r3, r3, #7
 8003500:	3308      	adds	r3, #8
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	429a      	cmp	r2, r3
 8003506:	d214      	bcs.n	8003532 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f023 0307 	bic.w	r3, r3, #7
 800350e:	3308      	adds	r3, #8
 8003510:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	2b00      	cmp	r3, #0
 800351a:	d010      	beq.n	800353e <pvPortMalloc+0x92>
        __asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	617b      	str	r3, [r7, #20]
    }
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003536:	e002      	b.n	800353e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	607b      	str	r3, [r7, #4]
 800353c:	e000      	b.n	8003540 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800353e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d06e      	beq.n	8003624 <pvPortMalloc+0x178>
 8003546:	4b45      	ldr	r3, [pc, #276]	; (800365c <pvPortMalloc+0x1b0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	d869      	bhi.n	8003624 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003550:	4b43      	ldr	r3, [pc, #268]	; (8003660 <pvPortMalloc+0x1b4>)
 8003552:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003554:	4b42      	ldr	r3, [pc, #264]	; (8003660 <pvPortMalloc+0x1b4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800355a:	e004      	b.n	8003566 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	429a      	cmp	r2, r3
 800356e:	d903      	bls.n	8003578 <pvPortMalloc+0xcc>
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f1      	bne.n	800355c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003578:	4b36      	ldr	r3, [pc, #216]	; (8003654 <pvPortMalloc+0x1a8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357e:	429a      	cmp	r2, r3
 8003580:	d050      	beq.n	8003624 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2208      	movs	r2, #8
 8003588:	4413      	add	r3, r2
 800358a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	1ad2      	subs	r2, r2, r3
 800359c:	2308      	movs	r3, #8
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d91f      	bls.n	80035e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80035a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <pvPortMalloc+0x120>
        __asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	613b      	str	r3, [r7, #16]
    }
 80035c8:	bf00      	nop
 80035ca:	e7fe      	b.n	80035ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	1ad2      	subs	r2, r2, r3
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80035de:	69b8      	ldr	r0, [r7, #24]
 80035e0:	f000 f908 	bl	80037f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80035e4:	4b1d      	ldr	r3, [pc, #116]	; (800365c <pvPortMalloc+0x1b0>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	4a1b      	ldr	r2, [pc, #108]	; (800365c <pvPortMalloc+0x1b0>)
 80035f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80035f2:	4b1a      	ldr	r3, [pc, #104]	; (800365c <pvPortMalloc+0x1b0>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <pvPortMalloc+0x1b8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d203      	bcs.n	8003606 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80035fe:	4b17      	ldr	r3, [pc, #92]	; (800365c <pvPortMalloc+0x1b0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a18      	ldr	r2, [pc, #96]	; (8003664 <pvPortMalloc+0x1b8>)
 8003604:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <pvPortMalloc+0x1ac>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	431a      	orrs	r2, r3
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800361a:	4b13      	ldr	r3, [pc, #76]	; (8003668 <pvPortMalloc+0x1bc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3301      	adds	r3, #1
 8003620:	4a11      	ldr	r2, [pc, #68]	; (8003668 <pvPortMalloc+0x1bc>)
 8003622:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003624:	f7ff f958 	bl	80028d8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <pvPortMalloc+0x19c>
        __asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	60fb      	str	r3, [r7, #12]
    }
 8003644:	bf00      	nop
 8003646:	e7fe      	b.n	8003646 <pvPortMalloc+0x19a>
    return pvReturn;
 8003648:	69fb      	ldr	r3, [r7, #28]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3728      	adds	r7, #40	; 0x28
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20019198 	.word	0x20019198
 8003658:	200191ac 	.word	0x200191ac
 800365c:	2001919c 	.word	0x2001919c
 8003660:	20019190 	.word	0x20019190
 8003664:	200191a0 	.word	0x200191a0
 8003668:	200191a4 	.word	0x200191a4

0800366c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d04d      	beq.n	800371a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800367e:	2308      	movs	r3, #8
 8003680:	425b      	negs	r3, r3
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4413      	add	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	4b24      	ldr	r3, [pc, #144]	; (8003724 <vPortFree+0xb8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10a      	bne.n	80036b0 <vPortFree+0x44>
        __asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	60fb      	str	r3, [r7, #12]
    }
 80036ac:	bf00      	nop
 80036ae:	e7fe      	b.n	80036ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <vPortFree+0x62>
        __asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	60bb      	str	r3, [r7, #8]
    }
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	4b14      	ldr	r3, [pc, #80]	; (8003724 <vPortFree+0xb8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01e      	beq.n	800371a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d11a      	bne.n	800371a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <vPortFree+0xb8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	401a      	ands	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80036f4:	f7ff f8e2 	bl	80028bc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <vPortFree+0xbc>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4413      	add	r3, r2
 8003702:	4a09      	ldr	r2, [pc, #36]	; (8003728 <vPortFree+0xbc>)
 8003704:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003706:	6938      	ldr	r0, [r7, #16]
 8003708:	f000 f874 	bl	80037f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800370c:	4b07      	ldr	r3, [pc, #28]	; (800372c <vPortFree+0xc0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	4a06      	ldr	r2, [pc, #24]	; (800372c <vPortFree+0xc0>)
 8003714:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003716:	f7ff f8df 	bl	80028d8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800371a:	bf00      	nop
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	200191ac 	.word	0x200191ac
 8003728:	2001919c 	.word	0x2001919c
 800372c:	200191a8 	.word	0x200191a8

08003730 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003736:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800373a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800373c:	4b27      	ldr	r3, [pc, #156]	; (80037dc <prvHeapInit+0xac>)
 800373e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	3307      	adds	r3, #7
 800374e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0307 	bic.w	r3, r3, #7
 8003756:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <prvHeapInit+0xac>)
 8003760:	4413      	add	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003768:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <prvHeapInit+0xb0>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800376e:	4b1c      	ldr	r3, [pc, #112]	; (80037e0 <prvHeapInit+0xb0>)
 8003770:	2200      	movs	r2, #0
 8003772:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	4413      	add	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800377c:	2208      	movs	r2, #8
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0307 	bic.w	r3, r3, #7
 800378a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <prvHeapInit+0xb4>)
 8003790:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003792:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <prvHeapInit+0xb4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <prvHeapInit+0xb4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	1ad2      	subs	r2, r2, r3
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037b0:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <prvHeapInit+0xb4>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <prvHeapInit+0xb8>)
 80037be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a09      	ldr	r2, [pc, #36]	; (80037ec <prvHeapInit+0xbc>)
 80037c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <prvHeapInit+0xc0>)
 80037ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037ce:	601a      	str	r2, [r3, #0]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	20000190 	.word	0x20000190
 80037e0:	20019190 	.word	0x20019190
 80037e4:	20019198 	.word	0x20019198
 80037e8:	200191a0 	.word	0x200191a0
 80037ec:	2001919c 	.word	0x2001919c
 80037f0:	200191ac 	.word	0x200191ac

080037f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037fc:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <prvInsertBlockIntoFreeList+0xac>)
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e002      	b.n	8003808 <prvInsertBlockIntoFreeList+0x14>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	429a      	cmp	r2, r3
 8003810:	d8f7      	bhi.n	8003802 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	4413      	add	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	d108      	bne.n	8003836 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	441a      	add	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	441a      	add	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d118      	bne.n	800387c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d00d      	beq.n	8003872 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	441a      	add	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e008      	b.n	8003884 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e003      	b.n	8003884 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	429a      	cmp	r2, r3
 800388a:	d002      	beq.n	8003892 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003892:	bf00      	nop
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20019190 	.word	0x20019190
 80038a4:	20019198 	.word	0x20019198

080038a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80038ac:	4803      	ldr	r0, [pc, #12]	; (80038bc <_cbSendSystemDesc+0x14>)
 80038ae:	f002 f807 	bl	80058c0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80038b2:	4803      	ldr	r0, [pc, #12]	; (80038c0 <_cbSendSystemDesc+0x18>)
 80038b4:	f002 f804 	bl	80058c0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80038b8:	bf00      	nop
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	0800610c 	.word	0x0800610c
 80038c0:	08006150 	.word	0x08006150

080038c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80038d2:	4a06      	ldr	r2, [pc, #24]	; (80038ec <SEGGER_SYSVIEW_Conf+0x28>)
 80038d4:	f001 fc78 	bl	80051c8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80038d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80038dc:	f001 fcb8 	bl	8005250 <SEGGER_SYSVIEW_SetRAMBase>
}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000000 	.word	0x20000000
 80038e8:	080038a9 	.word	0x080038a9
 80038ec:	080061ec 	.word	0x080061ec

080038f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80038f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80038f6:	2300      	movs	r3, #0
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	e033      	b.n	8003964 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80038fc:	491e      	ldr	r1, [pc, #120]	; (8003978 <_cbSendTaskList+0x88>)
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	491a      	ldr	r1, [pc, #104]	; (8003978 <_cbSendTaskList+0x88>)
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	3304      	adds	r3, #4
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	4c16      	ldr	r4, [pc, #88]	; (8003978 <_cbSendTaskList+0x88>)
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4423      	add	r3, r4
 800392c:	3308      	adds	r3, #8
 800392e:	681c      	ldr	r4, [r3, #0]
 8003930:	4d11      	ldr	r5, [pc, #68]	; (8003978 <_cbSendTaskList+0x88>)
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	442b      	add	r3, r5
 800393e:	330c      	adds	r3, #12
 8003940:	681d      	ldr	r5, [r3, #0]
 8003942:	4e0d      	ldr	r6, [pc, #52]	; (8003978 <_cbSendTaskList+0x88>)
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4433      	add	r3, r6
 8003950:	3310      	adds	r3, #16
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	462b      	mov	r3, r5
 8003958:	4622      	mov	r2, r4
 800395a:	f000 f8bd 	bl	8003ad8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3301      	adds	r3, #1
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <_cbSendTaskList+0x8c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d3c6      	bcc.n	80038fc <_cbSendTaskList+0xc>
  }
}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003978:	200191b0 	.word	0x200191b0
 800397c:	20019250 	.word	0x20019250

08003980 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003988:	f7ff f856 	bl	8002a38 <xTaskGetTickCountFromISR>
 800398c:	4603      	mov	r3, r0
 800398e:	2200      	movs	r2, #0
 8003990:	469a      	mov	sl, r3
 8003992:	4693      	mov	fp, r2
 8003994:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003998:	e9d7 0100 	ldrd	r0, r1, [r7]
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	f04f 0a00 	mov.w	sl, #0
 80039a4:	f04f 0b00 	mov.w	fp, #0
 80039a8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80039ac:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80039b0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80039b4:	4652      	mov	r2, sl
 80039b6:	465b      	mov	r3, fp
 80039b8:	1a14      	subs	r4, r2, r0
 80039ba:	eb63 0501 	sbc.w	r5, r3, r1
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	00ab      	lsls	r3, r5, #2
 80039c8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80039cc:	00a2      	lsls	r2, r4, #2
 80039ce:	4614      	mov	r4, r2
 80039d0:	461d      	mov	r5, r3
 80039d2:	eb14 0800 	adds.w	r8, r4, r0
 80039d6:	eb45 0901 	adc.w	r9, r5, r1
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ee:	4690      	mov	r8, r2
 80039f0:	4699      	mov	r9, r3
 80039f2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80039f6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003a08 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003a16:	2205      	movs	r2, #5
 8003a18:	492b      	ldr	r1, [pc, #172]	; (8003ac8 <SYSVIEW_AddTask+0xc0>)
 8003a1a:	68b8      	ldr	r0, [r7, #8]
 8003a1c:	f002 fb0a 	bl	8006034 <memcmp>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d04b      	beq.n	8003abe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003a26:	4b29      	ldr	r3, [pc, #164]	; (8003acc <SYSVIEW_AddTask+0xc4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b07      	cmp	r3, #7
 8003a2c:	d903      	bls.n	8003a36 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003a2e:	4828      	ldr	r0, [pc, #160]	; (8003ad0 <SYSVIEW_AddTask+0xc8>)
 8003a30:	f002 fa52 	bl	8005ed8 <SEGGER_SYSVIEW_Warn>
    return;
 8003a34:	e044      	b.n	8003ac0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003a36:	4b25      	ldr	r3, [pc, #148]	; (8003acc <SYSVIEW_AddTask+0xc4>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4926      	ldr	r1, [pc, #152]	; (8003ad4 <SYSVIEW_AddTask+0xcc>)
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <SYSVIEW_AddTask+0xc4>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4921      	ldr	r1, [pc, #132]	; (8003ad4 <SYSVIEW_AddTask+0xcc>)
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <SYSVIEW_AddTask+0xc4>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	491b      	ldr	r1, [pc, #108]	; (8003ad4 <SYSVIEW_AddTask+0xcc>)
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	3308      	adds	r3, #8
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003a76:	4b15      	ldr	r3, [pc, #84]	; (8003acc <SYSVIEW_AddTask+0xc4>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4916      	ldr	r1, [pc, #88]	; (8003ad4 <SYSVIEW_AddTask+0xcc>)
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	330c      	adds	r3, #12
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <SYSVIEW_AddTask+0xc4>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4910      	ldr	r1, [pc, #64]	; (8003ad4 <SYSVIEW_AddTask+0xcc>)
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	3310      	adds	r3, #16
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003aa2:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <SYSVIEW_AddTask+0xc4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	4a08      	ldr	r2, [pc, #32]	; (8003acc <SYSVIEW_AddTask+0xc4>)
 8003aaa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f80e 	bl	8003ad8 <SYSVIEW_SendTaskInfo>
 8003abc:	e000      	b.n	8003ac0 <SYSVIEW_AddTask+0xb8>
    return;
 8003abe:	bf00      	nop

}
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	08006160 	.word	0x08006160
 8003acc:	20019250 	.word	0x20019250
 8003ad0:	08006168 	.word	0x08006168
 8003ad4:	200191b0 	.word	0x200191b0

08003ad8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	; 0x28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	2214      	movs	r2, #20
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f002 fabe 	bl	8006070 <memset>
  TaskInfo.TaskID     = TaskID;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003b08:	f107 0314 	add.w	r3, r7, #20
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 fddf 	bl	80056d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003b12:	bf00      	nop
 8003b14:	3728      	adds	r7, #40	; 0x28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <__NVIC_EnableIRQ>:
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	db0b      	blt.n	8003b46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	f003 021f 	and.w	r2, r3, #31
 8003b34:	4907      	ldr	r1, [pc, #28]	; (8003b54 <__NVIC_EnableIRQ+0x38>)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e000e100 	.word	0xe000e100

08003b58 <__NVIC_SetPriority>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	6039      	str	r1, [r7, #0]
 8003b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	db0a      	blt.n	8003b82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	490c      	ldr	r1, [pc, #48]	; (8003ba4 <__NVIC_SetPriority+0x4c>)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	0112      	lsls	r2, r2, #4
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b80:	e00a      	b.n	8003b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4908      	ldr	r1, [pc, #32]	; (8003ba8 <__NVIC_SetPriority+0x50>)
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	3b04      	subs	r3, #4
 8003b90:	0112      	lsls	r2, r2, #4
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	440b      	add	r3, r1
 8003b96:	761a      	strb	r2, [r3, #24]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	e000e100 	.word	0xe000e100
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003bb2:	f002 f9ed 	bl	8005f90 <SEGGER_SYSVIEW_IsStarted>
 8003bb6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003bbe:	f001 fc0b 	bl	80053d8 <SEGGER_SYSVIEW_Start>
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <_cbOnUARTRx+0x3c>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d806      	bhi.n	8003bec <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003bde:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <_cbOnUARTRx+0x3c>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <_cbOnUARTRx+0x3c>)
 8003be8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003bea:	e009      	b.n	8003c00 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003bec:	f7ff ffde 	bl	8003bac <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <_cbOnUARTRx+0x3c>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	1dfb      	adds	r3, r7, #7
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f000 fb9c 	bl	8004338 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003c00:	bf00      	nop
}
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000014 	.word	0x20000014

08003c0c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <_cbOnUARTTx+0x5c>)
 8003c16:	785b      	ldrb	r3, [r3, #1]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d80f      	bhi.n	8003c3c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003c1c:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <_cbOnUARTTx+0x5c>)
 8003c1e:	785b      	ldrb	r3, [r3, #1]
 8003c20:	461a      	mov	r2, r3
 8003c22:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <_cbOnUARTTx+0x60>)
 8003c24:	5c9a      	ldrb	r2, [r3, r2]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003c2a:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <_cbOnUARTTx+0x5c>)
 8003c2c:	785b      	ldrb	r3, [r3, #1]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <_cbOnUARTTx+0x5c>)
 8003c34:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003c36:	2301      	movs	r3, #1
 8003c38:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003c3a:	e00f      	b.n	8003c5c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <_cbOnUARTTx+0x5c>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fa1b 	bl	8004080 <SEGGER_RTT_ReadUpBufferNoLock>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	da02      	bge.n	8003c5a <_cbOnUARTTx+0x4e>
    r = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e000      	b.n	8003c5c <_cbOnUARTTx+0x50>
  }
Done:
 8003c5a:	bf00      	nop
  return r;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000014 	.word	0x20000014
 8003c6c:	080061f4 	.word	0x080061f4

08003c70 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003c78:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <SEGGER_UART_init+0x1c>)
 8003c7a:	4905      	ldr	r1, [pc, #20]	; (8003c90 <SEGGER_UART_init+0x20>)
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f863 	bl	8003d48 <HIF_UART_Init>
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	08003bcd 	.word	0x08003bcd
 8003c90:	08003c0d 	.word	0x08003c0d

08003c94 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <USART2_IRQHandler+0x80>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d011      	beq.n	8003cce <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003caa:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <USART2_IRQHandler+0x84>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f003 030b 	and.w	r3, r3, #11
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d108      	bne.n	8003cce <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003cbc:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <USART2_IRQHandler+0x88>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003cc4:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <USART2_IRQHandler+0x88>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	79fa      	ldrb	r2, [r7, #7]
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d01a      	beq.n	8003d0e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003cd8:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <USART2_IRQHandler+0x8c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d015      	beq.n	8003d0c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <USART2_IRQHandler+0x8c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	1dfa      	adds	r2, r7, #7
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4798      	blx	r3
 8003cea:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <USART2_IRQHandler+0x90>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a0b      	ldr	r2, [pc, #44]	; (8003d24 <USART2_IRQHandler+0x90>)
 8003cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	e006      	b.n	8003d0e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <USART2_IRQHandler+0x80>)
 8003d02:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003d04:	79fa      	ldrb	r2, [r7, #7]
 8003d06:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <USART2_IRQHandler+0x84>)
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e000      	b.n	8003d0e <USART2_IRQHandler+0x7a>
      return;
 8003d0c:	bf00      	nop
    }
  }
}
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40004400 	.word	0x40004400
 8003d18:	40004404 	.word	0x40004404
 8003d1c:	20019254 	.word	0x20019254
 8003d20:	20019258 	.word	0x20019258
 8003d24:	4000440c 	.word	0x4000440c

08003d28 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d36:	6013      	str	r3, [r2, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	4000440c 	.word	0x4000440c

08003d48 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003d54:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <HIF_UART_Init+0xc8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a2d      	ldr	r2, [pc, #180]	; (8003e10 <HIF_UART_Init+0xc8>)
 8003d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003d60:	4b2c      	ldr	r3, [pc, #176]	; (8003e14 <HIF_UART_Init+0xcc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2b      	ldr	r2, [pc, #172]	; (8003e14 <HIF_UART_Init+0xcc>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003d6c:	4b2a      	ldr	r3, [pc, #168]	; (8003e18 <HIF_UART_Init+0xd0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d78:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003d80:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003d82:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <HIF_UART_Init+0xd0>)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003d88:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <HIF_UART_Init+0xd4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d94:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003d9c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003d9e:	4a1f      	ldr	r2, [pc, #124]	; (8003e1c <HIF_UART_Init+0xd4>)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003da4:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <HIF_UART_Init+0xd8>)
 8003da6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003daa:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003dac:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HIF_UART_Init+0xdc>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003db2:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <HIF_UART_Init+0xe0>)
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003dbe:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <HIF_UART_Init+0xe4>)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	d302      	bcc.n	8003dde <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003dd8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003ddc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	4a11      	ldr	r2, [pc, #68]	; (8003e30 <HIF_UART_Init+0xe8>)
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003dee:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <HIF_UART_Init+0xec>)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003df4:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <HIF_UART_Init+0xf0>)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003dfa:	2106      	movs	r1, #6
 8003dfc:	2026      	movs	r0, #38	; 0x26
 8003dfe:	f7ff feab 	bl	8003b58 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003e02:	2026      	movs	r0, #38	; 0x26
 8003e04:	f7ff fe8a 	bl	8003b1c <__NVIC_EnableIRQ>
}
 8003e08:	bf00      	nop
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40023840 	.word	0x40023840
 8003e14:	40023830 	.word	0x40023830
 8003e18:	40020020 	.word	0x40020020
 8003e1c:	40020000 	.word	0x40020000
 8003e20:	4000440c 	.word	0x4000440c
 8003e24:	40004410 	.word	0x40004410
 8003e28:	40004414 	.word	0x40004414
 8003e2c:	055d4a80 	.word	0x055d4a80
 8003e30:	40004408 	.word	0x40004408
 8003e34:	20019254 	.word	0x20019254
 8003e38:	20019258 	.word	0x20019258

08003e3c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003e42:	4b26      	ldr	r3, [pc, #152]	; (8003edc <_DoInit+0xa0>)
 8003e44:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003e46:	22a8      	movs	r2, #168	; 0xa8
 8003e48:	2100      	movs	r1, #0
 8003e4a:	6838      	ldr	r0, [r7, #0]
 8003e4c:	f002 f910 	bl	8006070 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2203      	movs	r2, #3
 8003e54:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2203      	movs	r2, #3
 8003e5a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4a20      	ldr	r2, [pc, #128]	; (8003ee0 <_DoInit+0xa4>)
 8003e60:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <_DoInit+0xa8>)
 8003e66:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e6e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2200      	movs	r2, #0
 8003e74:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <_DoInit+0xa4>)
 8003e86:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	4a17      	ldr	r2, [pc, #92]	; (8003ee8 <_DoInit+0xac>)
 8003e8c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2210      	movs	r2, #16
 8003e92:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003ea6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	e00c      	b.n	8003eca <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f1c3 030f 	rsb	r3, r3, #15
 8003eb6:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <_DoInit+0xb0>)
 8003eb8:	5cd1      	ldrb	r1, [r2, r3]
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	460a      	mov	r2, r1
 8003ec2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b0f      	cmp	r3, #15
 8003ece:	d9ef      	bls.n	8003eb0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003ed0:	f3bf 8f5f 	dmb	sy
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	2001925c 	.word	0x2001925c
 8003ee0:	080061b8 	.word	0x080061b8
 8003ee4:	20019304 	.word	0x20019304
 8003ee8:	20019704 	.word	0x20019704
 8003eec:	080061f8 	.word	0x080061f8

08003ef0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	; 0x28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003efc:	2300      	movs	r3, #0
 8003efe:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d905      	bls.n	8003f20 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1e:	e007      	b.n	8003f30 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	69b9      	ldr	r1, [r7, #24]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	1acb      	subs	r3, r1, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	bf28      	it	cs
 8003f3e:	4613      	movcs	r3, r2
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4293      	cmp	r3, r2
 8003f48:	bf28      	it	cs
 8003f4a:	4613      	movcs	r3, r2
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	6978      	ldr	r0, [r7, #20]
 8003f5e:	f002 f879 	bl	8006054 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003f62:	6a3a      	ldr	r2, [r7, #32]
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	4413      	add	r3, r2
 8003f68:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	4413      	add	r3, r2
 8003f70:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	4413      	add	r3, r2
 8003f80:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d101      	bne.n	8003f90 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f90:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1b2      	bne.n	8003f06 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3728      	adds	r7, #40	; 0x28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b088      	sub	sp, #32
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d911      	bls.n	8003ff2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	6938      	ldr	r0, [r7, #16]
 8003fde:	f002 f839 	bl	8006054 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003fe2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	441a      	add	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003ff0:	e01f      	b.n	8004032 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	6938      	ldr	r0, [r7, #16]
 8004006:	f002 f825 	bl	8006054 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	4413      	add	r3, r2
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4619      	mov	r1, r3
 8004022:	6938      	ldr	r0, [r7, #16]
 8004024:	f002 f816 	bl	8006054 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004028:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	60da      	str	r2, [r3, #12]
}
 8004032:	bf00      	nop
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800403a:	b480      	push	{r7}
 800403c:	b087      	sub	sp, #28
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	429a      	cmp	r2, r3
 8004054:	d808      	bhi.n	8004068 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad2      	subs	r2, r2, r3
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4413      	add	r3, r2
 8004062:	3b01      	subs	r3, #1
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	e004      	b.n	8004072 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004072:	697b      	ldr	r3, [r7, #20]
}
 8004074:	4618      	mov	r0, r3
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004080:	b580      	push	{r7, lr}
 8004082:	b08c      	sub	sp, #48	; 0x30
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800408c:	4b3e      	ldr	r3, [pc, #248]	; (8004188 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800408e:	623b      	str	r3, [r7, #32]
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b53      	cmp	r3, #83	; 0x53
 8004098:	d001      	beq.n	800409e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800409a:	f7ff fecf 	bl	8003e3c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4a37      	ldr	r2, [pc, #220]	; (8004188 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80040ac:	4413      	add	r3, r2
 80040ae:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80040c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d92b      	bls.n	8004124 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4293      	cmp	r3, r2
 80040dc:	bf28      	it	cs
 80040de:	4613      	movcs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	4413      	add	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	6939      	ldr	r1, [r7, #16]
 80040f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040f2:	f001 ffaf 	bl	8006054 <memcpy>
    NumBytesRead += NumBytesRem;
 80040f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	4413      	add	r3, r2
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80040fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	4413      	add	r3, r2
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800410e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	4413      	add	r3, r2
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800411c:	429a      	cmp	r2, r3
 800411e:	d101      	bne.n	8004124 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004120:	2300      	movs	r3, #0
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4293      	cmp	r3, r2
 8004132:	bf28      	it	cs
 8004134:	4613      	movcs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d019      	beq.n	8004172 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	4413      	add	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	6939      	ldr	r1, [r7, #16]
 800414c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800414e:	f001 ff81 	bl	8006054 <memcpy>
    NumBytesRead += NumBytesRem;
 8004152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	4413      	add	r3, r2
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800415a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	4413      	add	r3, r2
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800416a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	4413      	add	r3, r2
 8004170:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004180:	4618      	mov	r0, r3
 8004182:	3730      	adds	r7, #48	; 0x30
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	2001925c 	.word	0x2001925c

0800418c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b08c      	sub	sp, #48	; 0x30
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004198:	4b3e      	ldr	r3, [pc, #248]	; (8004294 <SEGGER_RTT_ReadNoLock+0x108>)
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b53      	cmp	r3, #83	; 0x53
 80041a4:	d001      	beq.n	80041aa <SEGGER_RTT_ReadNoLock+0x1e>
 80041a6:	f7ff fe49 	bl	8003e3c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4613      	mov	r3, r2
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	4413      	add	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	3360      	adds	r3, #96	; 0x60
 80041b6:	4a37      	ldr	r2, [pc, #220]	; (8004294 <SEGGER_RTT_ReadNoLock+0x108>)
 80041b8:	4413      	add	r3, r2
 80041ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80041cc:	2300      	movs	r3, #0
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80041d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d92b      	bls.n	8004230 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4293      	cmp	r3, r2
 80041e8:	bf28      	it	cs
 80041ea:	4613      	movcs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	4413      	add	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	6939      	ldr	r1, [r7, #16]
 80041fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041fe:	f001 ff29 	bl	8006054 <memcpy>
    NumBytesRead += NumBytesRem;
 8004202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	4413      	add	r3, r2
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800420a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	4413      	add	r3, r2
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800421a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	4413      	add	r3, r2
 8004220:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004228:	429a      	cmp	r2, r3
 800422a:	d101      	bne.n	8004230 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800422c:	2300      	movs	r3, #0
 800422e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4293      	cmp	r3, r2
 800423e:	bf28      	it	cs
 8004240:	4613      	movcs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d019      	beq.n	800427e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	4413      	add	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	6939      	ldr	r1, [r7, #16]
 8004258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800425a:	f001 fefb 	bl	8006054 <memcpy>
    NumBytesRead += NumBytesRem;
 800425e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	4413      	add	r3, r2
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	4413      	add	r3, r2
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	4413      	add	r3, r2
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004288:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800428c:	4618      	mov	r0, r3
 800428e:	3730      	adds	r7, #48	; 0x30
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	2001925c 	.word	0x2001925c

08004298 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4613      	mov	r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4413      	add	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	3360      	adds	r3, #96	; 0x60
 80042b4:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80042b6:	4413      	add	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d029      	beq.n	8004316 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d82e      	bhi.n	8004324 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d013      	beq.n	80042f6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80042ce:	e029      	b.n	8004324 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80042d0:	6978      	ldr	r0, [r7, #20]
 80042d2:	f7ff feb2 	bl	800403a <_GetAvailWriteSpace>
 80042d6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d202      	bcs.n	80042e6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80042e4:	e021      	b.n	800432a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	69b9      	ldr	r1, [r7, #24]
 80042ee:	6978      	ldr	r0, [r7, #20]
 80042f0:	f7ff fe5b 	bl	8003faa <_WriteNoCheck>
    break;
 80042f4:	e019      	b.n	800432a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80042f6:	6978      	ldr	r0, [r7, #20]
 80042f8:	f7ff fe9f 	bl	800403a <_GetAvailWriteSpace>
 80042fc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4293      	cmp	r3, r2
 8004304:	bf28      	it	cs
 8004306:	4613      	movcs	r3, r2
 8004308:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	69b9      	ldr	r1, [r7, #24]
 800430e:	6978      	ldr	r0, [r7, #20]
 8004310:	f7ff fe4b 	bl	8003faa <_WriteNoCheck>
    break;
 8004314:	e009      	b.n	800432a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	69b9      	ldr	r1, [r7, #24]
 800431a:	6978      	ldr	r0, [r7, #20]
 800431c:	f7ff fde8 	bl	8003ef0 <_WriteBlocking>
 8004320:	61f8      	str	r0, [r7, #28]
    break;
 8004322:	e002      	b.n	800432a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
    break;
 8004328:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800432a:	69fb      	ldr	r3, [r7, #28]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3720      	adds	r7, #32
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	2001925c 	.word	0x2001925c

08004338 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004344:	4b0e      	ldr	r3, [pc, #56]	; (8004380 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b53      	cmp	r3, #83	; 0x53
 8004350:	d001      	beq.n	8004356 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004352:	f7ff fd73 	bl	8003e3c <_DoInit>
  SEGGER_RTT_LOCK();
 8004356:	f3ef 8311 	mrs	r3, BASEPRI
 800435a:	f04f 0120 	mov.w	r1, #32
 800435e:	f381 8811 	msr	BASEPRI, r1
 8004362:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f7ff ff95 	bl	8004298 <SEGGER_RTT_WriteDownBufferNoLock>
 800436e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004376:	697b      	ldr	r3, [r7, #20]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3720      	adds	r7, #32
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	2001925c 	.word	0x2001925c

08004384 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004392:	4b3d      	ldr	r3, [pc, #244]	; (8004488 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b53      	cmp	r3, #83	; 0x53
 800439e:	d001      	beq.n	80043a4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80043a0:	f7ff fd4c 	bl	8003e3c <_DoInit>
  SEGGER_RTT_LOCK();
 80043a4:	f3ef 8311 	mrs	r3, BASEPRI
 80043a8:	f04f 0120 	mov.w	r1, #32
 80043ac:	f381 8811 	msr	BASEPRI, r1
 80043b0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80043b2:	4b35      	ldr	r3, [pc, #212]	; (8004488 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80043b4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80043ba:	6939      	ldr	r1, [r7, #16]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	4613      	mov	r3, r2
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	440b      	add	r3, r1
 80043ca:	3304      	adds	r3, #4
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3301      	adds	r3, #1
 80043d6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	429a      	cmp	r2, r3
 80043e0:	dbeb      	blt.n	80043ba <SEGGER_RTT_AllocUpBuffer+0x36>
 80043e2:	e000      	b.n	80043e6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80043e4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	da3f      	bge.n	8004470 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80043f0:	6939      	ldr	r1, [r7, #16]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	440b      	add	r3, r1
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004404:	6939      	ldr	r1, [r7, #16]
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	4613      	mov	r3, r2
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	4413      	add	r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	440b      	add	r3, r1
 8004414:	3304      	adds	r3, #4
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800441a:	6939      	ldr	r1, [r7, #16]
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	4613      	mov	r3, r2
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	4413      	add	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	440b      	add	r3, r1
 8004428:	3320      	adds	r3, #32
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800442e:	6939      	ldr	r1, [r7, #16]
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	4613      	mov	r3, r2
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	4413      	add	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	440b      	add	r3, r1
 800443c:	3328      	adds	r3, #40	; 0x28
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004442:	6939      	ldr	r1, [r7, #16]
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	4613      	mov	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	4413      	add	r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	440b      	add	r3, r1
 8004450:	3324      	adds	r3, #36	; 0x24
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004456:	6939      	ldr	r1, [r7, #16]
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	4613      	mov	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4413      	add	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	440b      	add	r3, r1
 8004464:	332c      	adds	r3, #44	; 0x2c
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800446a:	f3bf 8f5f 	dmb	sy
 800446e:	e002      	b.n	8004476 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004474:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800447c:	69fb      	ldr	r3, [r7, #28]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3720      	adds	r7, #32
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	2001925c 	.word	0x2001925c

0800448c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	; 0x28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800449a:	4b21      	ldr	r3, [pc, #132]	; (8004520 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800449c:	623b      	str	r3, [r7, #32]
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b53      	cmp	r3, #83	; 0x53
 80044a6:	d001      	beq.n	80044ac <SEGGER_RTT_ConfigDownBuffer+0x20>
 80044a8:	f7ff fcc8 	bl	8003e3c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80044ac:	4b1c      	ldr	r3, [pc, #112]	; (8004520 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80044ae:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d82c      	bhi.n	8004510 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80044b6:	f3ef 8311 	mrs	r3, BASEPRI
 80044ba:	f04f 0120 	mov.w	r1, #32
 80044be:	f381 8811 	msr	BASEPRI, r1
 80044c2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4613      	mov	r3, r2
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	4413      	add	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	3360      	adds	r3, #96	; 0x60
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	4413      	add	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00e      	beq.n	80044fa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2200      	movs	r2, #0
 80044f2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2200      	movs	r2, #0
 80044f8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044fe:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004500:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800450a:	2300      	movs	r3, #0
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
 800450e:	e002      	b.n	8004516 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004518:	4618      	mov	r0, r3
 800451a:	3728      	adds	r7, #40	; 0x28
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	2001925c 	.word	0x2001925c

08004524 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	60fa      	str	r2, [r7, #12]
 800453a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b80      	cmp	r3, #128	; 0x80
 8004540:	d90a      	bls.n	8004558 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004546:	e007      	b.n	8004558 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	1c53      	adds	r3, r2, #1
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1c59      	adds	r1, r3, #1
 8004552:	60f9      	str	r1, [r7, #12]
 8004554:	7812      	ldrb	r2, [r2, #0]
 8004556:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	1e5a      	subs	r2, r3, #1
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <_EncodeStr+0x46>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1ee      	bne.n	8004548 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	b2da      	uxtb	r2, r3
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004576:	68fb      	ldr	r3, [r7, #12]
}
 8004578:	4618      	mov	r0, r3
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3307      	adds	r3, #7
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80045a2:	4b35      	ldr	r3, [pc, #212]	; (8004678 <_HandleIncomingPacket+0xdc>)
 80045a4:	7e1b      	ldrb	r3, [r3, #24]
 80045a6:	4618      	mov	r0, r3
 80045a8:	1cfb      	adds	r3, r7, #3
 80045aa:	2201      	movs	r2, #1
 80045ac:	4619      	mov	r1, r3
 80045ae:	f7ff fded 	bl	800418c <SEGGER_RTT_ReadNoLock>
 80045b2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d052      	beq.n	8004660 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	2b80      	cmp	r3, #128	; 0x80
 80045be:	d031      	beq.n	8004624 <_HandleIncomingPacket+0x88>
 80045c0:	2b80      	cmp	r3, #128	; 0x80
 80045c2:	dc40      	bgt.n	8004646 <_HandleIncomingPacket+0xaa>
 80045c4:	2b07      	cmp	r3, #7
 80045c6:	dc15      	bgt.n	80045f4 <_HandleIncomingPacket+0x58>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	dd3c      	ble.n	8004646 <_HandleIncomingPacket+0xaa>
 80045cc:	3b01      	subs	r3, #1
 80045ce:	2b06      	cmp	r3, #6
 80045d0:	d839      	bhi.n	8004646 <_HandleIncomingPacket+0xaa>
 80045d2:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <_HandleIncomingPacket+0x3c>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	080045fb 	.word	0x080045fb
 80045dc:	08004601 	.word	0x08004601
 80045e0:	08004607 	.word	0x08004607
 80045e4:	0800460d 	.word	0x0800460d
 80045e8:	08004613 	.word	0x08004613
 80045ec:	08004619 	.word	0x08004619
 80045f0:	0800461f 	.word	0x0800461f
 80045f4:	2b7f      	cmp	r3, #127	; 0x7f
 80045f6:	d035      	beq.n	8004664 <_HandleIncomingPacket+0xc8>
 80045f8:	e025      	b.n	8004646 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80045fa:	f000 feed 	bl	80053d8 <SEGGER_SYSVIEW_Start>
      break;
 80045fe:	e036      	b.n	800466e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004600:	f000 ffa6 	bl	8005550 <SEGGER_SYSVIEW_Stop>
      break;
 8004604:	e033      	b.n	800466e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004606:	f001 f97f 	bl	8005908 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800460a:	e030      	b.n	800466e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800460c:	f001 f944 	bl	8005898 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004610:	e02d      	b.n	800466e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004612:	f000 ffc3 	bl	800559c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004616:	e02a      	b.n	800466e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004618:	f001 fc0c 	bl	8005e34 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800461c:	e027      	b.n	800466e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800461e:	f001 fbeb 	bl	8005df8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004622:	e024      	b.n	800466e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004624:	4b14      	ldr	r3, [pc, #80]	; (8004678 <_HandleIncomingPacket+0xdc>)
 8004626:	7e1b      	ldrb	r3, [r3, #24]
 8004628:	4618      	mov	r0, r3
 800462a:	1cfb      	adds	r3, r7, #3
 800462c:	2201      	movs	r2, #1
 800462e:	4619      	mov	r1, r3
 8004630:	f7ff fdac 	bl	800418c <SEGGER_RTT_ReadNoLock>
 8004634:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d015      	beq.n	8004668 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	4618      	mov	r0, r3
 8004640:	f001 fb50 	bl	8005ce4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004644:	e010      	b.n	8004668 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	b25b      	sxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	da0e      	bge.n	800466c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800464e:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <_HandleIncomingPacket+0xdc>)
 8004650:	7e1b      	ldrb	r3, [r3, #24]
 8004652:	4618      	mov	r0, r3
 8004654:	1cfb      	adds	r3, r7, #3
 8004656:	2201      	movs	r2, #1
 8004658:	4619      	mov	r1, r3
 800465a:	f7ff fd97 	bl	800418c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800465e:	e005      	b.n	800466c <_HandleIncomingPacket+0xd0>
    }
  }
 8004660:	bf00      	nop
 8004662:	e004      	b.n	800466e <_HandleIncomingPacket+0xd2>
      break;
 8004664:	bf00      	nop
 8004666:	e002      	b.n	800466e <_HandleIncomingPacket+0xd2>
      break;
 8004668:	bf00      	nop
 800466a:	e000      	b.n	800466e <_HandleIncomingPacket+0xd2>
      break;
 800466c:	bf00      	nop
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	2001a71c 	.word	0x2001a71c

0800467c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800467c:	b580      	push	{r7, lr}
 800467e:	b08c      	sub	sp, #48	; 0x30
 8004680:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004682:	2301      	movs	r3, #1
 8004684:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004686:	1d3b      	adds	r3, r7, #4
 8004688:	3301      	adds	r3, #1
 800468a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004690:	4b32      	ldr	r3, [pc, #200]	; (800475c <_TrySendOverflowPacket+0xe0>)
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
 8004696:	e00b      	b.n	80046b0 <_TrySendOverflowPacket+0x34>
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	b2da      	uxtb	r2, r3
 800469c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469e:	1c59      	adds	r1, r3, #1
 80046a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	09db      	lsrs	r3, r3, #7
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	2b7f      	cmp	r3, #127	; 0x7f
 80046b4:	d8f0      	bhi.n	8004698 <_TrySendOverflowPacket+0x1c>
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80046c6:	4b26      	ldr	r3, [pc, #152]	; (8004760 <_TrySendOverflowPacket+0xe4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80046cc:	4b23      	ldr	r3, [pc, #140]	; (800475c <_TrySendOverflowPacket+0xe0>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	623b      	str	r3, [r7, #32]
 80046de:	e00b      	b.n	80046f8 <_TrySendOverflowPacket+0x7c>
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	1c59      	adds	r1, r3, #1
 80046e8:	6279      	str	r1, [r7, #36]	; 0x24
 80046ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	09db      	lsrs	r3, r3, #7
 80046f6:	623b      	str	r3, [r7, #32]
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	2b7f      	cmp	r3, #127	; 0x7f
 80046fc:	d8f0      	bhi.n	80046e0 <_TrySendOverflowPacket+0x64>
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	627a      	str	r2, [r7, #36]	; 0x24
 8004704:	6a3a      	ldr	r2, [r7, #32]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800470e:	4b13      	ldr	r3, [pc, #76]	; (800475c <_TrySendOverflowPacket+0xe0>)
 8004710:	785b      	ldrb	r3, [r3, #1]
 8004712:	4618      	mov	r0, r3
 8004714:	1d3b      	adds	r3, r7, #4
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	461a      	mov	r2, r3
 800471c:	1d3b      	adds	r3, r7, #4
 800471e:	4619      	mov	r1, r3
 8004720:	f7fb fd76 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004724:	4603      	mov	r3, r0
 8004726:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004728:	f7ff fafe 	bl	8003d28 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004732:	4a0a      	ldr	r2, [pc, #40]	; (800475c <_TrySendOverflowPacket+0xe0>)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004738:	4b08      	ldr	r3, [pc, #32]	; (800475c <_TrySendOverflowPacket+0xe0>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	3b01      	subs	r3, #1
 800473e:	b2da      	uxtb	r2, r3
 8004740:	4b06      	ldr	r3, [pc, #24]	; (800475c <_TrySendOverflowPacket+0xe0>)
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e004      	b.n	8004750 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <_TrySendOverflowPacket+0xe0>)
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	3301      	adds	r3, #1
 800474c:	4a03      	ldr	r2, [pc, #12]	; (800475c <_TrySendOverflowPacket+0xe0>)
 800474e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004750:	693b      	ldr	r3, [r7, #16]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3730      	adds	r7, #48	; 0x30
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	2001a71c 	.word	0x2001a71c
 8004760:	e0001004 	.word	0xe0001004

08004764 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004770:	4b96      	ldr	r3, [pc, #600]	; (80049cc <_SendPacket+0x268>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d010      	beq.n	800479a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004778:	4b94      	ldr	r3, [pc, #592]	; (80049cc <_SendPacket+0x268>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8130 	beq.w	80049e2 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004782:	4b92      	ldr	r3, [pc, #584]	; (80049cc <_SendPacket+0x268>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d109      	bne.n	800479e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800478a:	f7ff ff77 	bl	800467c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800478e:	4b8f      	ldr	r3, [pc, #572]	; (80049cc <_SendPacket+0x268>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b01      	cmp	r3, #1
 8004794:	f040 8127 	bne.w	80049e6 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004798:	e001      	b.n	800479e <_SendPacket+0x3a>
    goto Send;
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <_SendPacket+0x3c>
Send:
 800479e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b1f      	cmp	r3, #31
 80047a4:	d809      	bhi.n	80047ba <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80047a6:	4b89      	ldr	r3, [pc, #548]	; (80049cc <_SendPacket+0x268>)
 80047a8:	69da      	ldr	r2, [r3, #28]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f040 8118 	bne.w	80049ea <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b17      	cmp	r3, #23
 80047be:	d807      	bhi.n	80047d0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	701a      	strb	r2, [r3, #0]
 80047ce:	e0c4      	b.n	800495a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b7f      	cmp	r3, #127	; 0x7f
 80047dc:	d912      	bls.n	8004804 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	09da      	lsrs	r2, r3, #7
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	3a01      	subs	r2, #1
 80047f6:	60fa      	str	r2, [r7, #12]
 80047f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	e006      	b.n	8004812 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3b01      	subs	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b7e      	cmp	r3, #126	; 0x7e
 8004816:	d807      	bhi.n	8004828 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3b01      	subs	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	e098      	b.n	800495a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800482e:	d212      	bcs.n	8004856 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	09da      	lsrs	r2, r3, #7
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3b01      	subs	r3, #1
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	3a01      	subs	r2, #1
 8004848:	60fa      	str	r2, [r7, #12]
 800484a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800484e:	b2da      	uxtb	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	e081      	b.n	800495a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800485c:	d21d      	bcs.n	800489a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	0b9a      	lsrs	r2, r3, #14
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3b01      	subs	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	09db      	lsrs	r3, r3, #7
 8004872:	b2db      	uxtb	r3, r3
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	3a01      	subs	r2, #1
 8004878:	60fa      	str	r2, [r7, #12]
 800487a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800487e:	b2da      	uxtb	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	3a01      	subs	r2, #1
 800488c:	60fa      	str	r2, [r7, #12]
 800488e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004892:	b2da      	uxtb	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	701a      	strb	r2, [r3, #0]
 8004898:	e05f      	b.n	800495a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048a0:	d228      	bcs.n	80048f4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	0d5a      	lsrs	r2, r3, #21
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	0b9b      	lsrs	r3, r3, #14
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	3a01      	subs	r2, #1
 80048bc:	60fa      	str	r2, [r7, #12]
 80048be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	09db      	lsrs	r3, r3, #7
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	3a01      	subs	r2, #1
 80048d2:	60fa      	str	r2, [r7, #12]
 80048d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	3a01      	subs	r2, #1
 80048e6:	60fa      	str	r2, [r7, #12]
 80048e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	e032      	b.n	800495a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	0f1a      	lsrs	r2, r3, #28
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	0d5b      	lsrs	r3, r3, #21
 8004908:	b2db      	uxtb	r3, r3
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	3a01      	subs	r2, #1
 800490e:	60fa      	str	r2, [r7, #12]
 8004910:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	0b9b      	lsrs	r3, r3, #14
 800491e:	b2db      	uxtb	r3, r3
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	3a01      	subs	r2, #1
 8004924:	60fa      	str	r2, [r7, #12]
 8004926:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800492a:	b2da      	uxtb	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	09db      	lsrs	r3, r3, #7
 8004934:	b2db      	uxtb	r3, r3
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	3a01      	subs	r2, #1
 800493a:	60fa      	str	r2, [r7, #12]
 800493c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004940:	b2da      	uxtb	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	3a01      	subs	r2, #1
 800494e:	60fa      	str	r2, [r7, #12]
 8004950:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004954:	b2da      	uxtb	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800495a:	4b1d      	ldr	r3, [pc, #116]	; (80049d0 <_SendPacket+0x26c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <_SendPacket+0x268>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	627b      	str	r3, [r7, #36]	; 0x24
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	623b      	str	r3, [r7, #32]
 8004972:	e00b      	b.n	800498c <_SendPacket+0x228>
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	b2da      	uxtb	r2, r3
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	1c59      	adds	r1, r3, #1
 800497c:	6279      	str	r1, [r7, #36]	; 0x24
 800497e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	09db      	lsrs	r3, r3, #7
 800498a:	623b      	str	r3, [r7, #32]
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	2b7f      	cmp	r3, #127	; 0x7f
 8004990:	d8f0      	bhi.n	8004974 <_SendPacket+0x210>
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	627a      	str	r2, [r7, #36]	; 0x24
 8004998:	6a3a      	ldr	r2, [r7, #32]
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80049a2:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <_SendPacket+0x268>)
 80049a4:	785b      	ldrb	r3, [r3, #1]
 80049a6:	4618      	mov	r0, r3
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	68f9      	ldr	r1, [r7, #12]
 80049b2:	f7fb fc2d 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80049b6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80049b8:	f7ff f9b6 	bl	8003d28 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80049c2:	4a02      	ldr	r2, [pc, #8]	; (80049cc <_SendPacket+0x268>)
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	60d3      	str	r3, [r2, #12]
 80049c8:	e010      	b.n	80049ec <_SendPacket+0x288>
 80049ca:	bf00      	nop
 80049cc:	2001a71c 	.word	0x2001a71c
 80049d0:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80049d4:	4b19      	ldr	r3, [pc, #100]	; (8004a3c <_SendPacket+0x2d8>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	3301      	adds	r3, #1
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	4b17      	ldr	r3, [pc, #92]	; (8004a3c <_SendPacket+0x2d8>)
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	e004      	b.n	80049ec <_SendPacket+0x288>
    goto SendDone;
 80049e2:	bf00      	nop
 80049e4:	e002      	b.n	80049ec <_SendPacket+0x288>
      goto SendDone;
 80049e6:	bf00      	nop
 80049e8:	e000      	b.n	80049ec <_SendPacket+0x288>
      goto SendDone;
 80049ea:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80049ec:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <_SendPacket+0x2d8>)
 80049ee:	7e1b      	ldrb	r3, [r3, #24]
 80049f0:	4619      	mov	r1, r3
 80049f2:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <_SendPacket+0x2dc>)
 80049f4:	460b      	mov	r3, r1
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	440b      	add	r3, r1
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4413      	add	r3, r2
 80049fe:	336c      	adds	r3, #108	; 0x6c
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <_SendPacket+0x2d8>)
 8004a04:	7e1b      	ldrb	r3, [r3, #24]
 8004a06:	4618      	mov	r0, r3
 8004a08:	490d      	ldr	r1, [pc, #52]	; (8004a40 <_SendPacket+0x2dc>)
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	4403      	add	r3, r0
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	440b      	add	r3, r1
 8004a14:	3370      	adds	r3, #112	; 0x70
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d00b      	beq.n	8004a34 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <_SendPacket+0x2d8>)
 8004a1e:	789b      	ldrb	r3, [r3, #2]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d107      	bne.n	8004a34 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <_SendPacket+0x2d8>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004a2a:	f7ff fdb7 	bl	800459c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004a2e:	4b03      	ldr	r3, [pc, #12]	; (8004a3c <_SendPacket+0x2d8>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004a34:	bf00      	nop
 8004a36:	3728      	adds	r7, #40	; 0x28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	2001a71c 	.word	0x2001a71c
 8004a40:	2001925c 	.word	0x2001925c

08004a44 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	; 0x28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d80a      	bhi.n	8004a74 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	1c59      	adds	r1, r3, #1
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6051      	str	r1, [r2, #4]
 8004a68:	78fa      	ldrb	r2, [r7, #3]
 8004a6a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b80      	cmp	r3, #128	; 0x80
 8004a7a:	d15a      	bne.n	8004b32 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	623b      	str	r3, [r7, #32]
 8004a9c:	e00b      	b.n	8004ab6 <_StoreChar+0x72>
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	1c59      	adds	r1, r3, #1
 8004aa6:	6279      	str	r1, [r7, #36]	; 0x24
 8004aa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	09db      	lsrs	r3, r3, #7
 8004ab4:	623b      	str	r3, [r7, #32]
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8004aba:	d8f0      	bhi.n	8004a9e <_StoreChar+0x5a>
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	627a      	str	r2, [r7, #36]	; 0x24
 8004ac2:	6a3a      	ldr	r2, [r7, #32]
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	701a      	strb	r2, [r3, #0]
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61bb      	str	r3, [r7, #24]
 8004ad4:	e00b      	b.n	8004aee <_StoreChar+0xaa>
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	1c59      	adds	r1, r3, #1
 8004ade:	61f9      	str	r1, [r7, #28]
 8004ae0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	09db      	lsrs	r3, r3, #7
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b7f      	cmp	r3, #127	; 0x7f
 8004af2:	d8f0      	bhi.n	8004ad6 <_StoreChar+0x92>
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	61fa      	str	r2, [r7, #28]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	221a      	movs	r2, #26
 8004b0a:	6939      	ldr	r1, [r7, #16]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fe29 	bl	8004764 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fd34 	bl	8004584 <_PreparePacket>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	611a      	str	r2, [r3, #16]
  }
}
 8004b32:	bf00      	nop
 8004b34:	3728      	adds	r7, #40	; 0x28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08a      	sub	sp, #40	; 0x28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004b52:	2301      	movs	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004b56:	e007      	b.n	8004b68 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004b58:	6a3a      	ldr	r2, [r7, #32]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	623b      	str	r3, [r7, #32]
    Width++;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	3301      	adds	r3, #1
 8004b66:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004b68:	6a3a      	ldr	r2, [r7, #32]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d2f3      	bcs.n	8004b58 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d901      	bls.n	8004b7c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d11f      	bne.n	8004bc6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d01c      	beq.n	8004bc6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <_PrintUnsigned+0x66>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <_PrintUnsigned+0x66>
        c = '0';
 8004b9c:	2330      	movs	r3, #48	; 0x30
 8004b9e:	76fb      	strb	r3, [r7, #27]
 8004ba0:	e001      	b.n	8004ba6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004ba2:	2320      	movs	r3, #32
 8004ba4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ba6:	e007      	b.n	8004bb8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	3b01      	subs	r3, #1
 8004bac:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004bae:	7efb      	ldrb	r3, [r7, #27]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7ff ff46 	bl	8004a44 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <_PrintUnsigned+0x8a>
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d3f0      	bcc.n	8004ba8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d903      	bls.n	8004bd4 <_PrintUnsigned+0x98>
      NumDigits--;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	603b      	str	r3, [r7, #0]
 8004bd2:	e009      	b.n	8004be8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bdc:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d200      	bcs.n	8004be8 <_PrintUnsigned+0xac>
        break;
 8004be6:	e005      	b.n	8004bf4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	fb02 f303 	mul.w	r3, r2, r3
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004bf2:	e7e8      	b.n	8004bc6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfc:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004c0c:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <_PrintUnsigned+0x128>)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	4413      	add	r3, r2
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	4619      	mov	r1, r3
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f7ff ff14 	bl	8004a44 <_StoreChar>
    Digit /= Base;
 8004c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e3      	bne.n	8004bf4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d011      	beq.n	8004c5a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00e      	beq.n	8004c5a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c3c:	e006      	b.n	8004c4c <_PrintUnsigned+0x110>
        FieldWidth--;
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	3b01      	subs	r3, #1
 8004c42:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004c44:	2120      	movs	r1, #32
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff fefc 	bl	8004a44 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <_PrintUnsigned+0x11e>
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d3f1      	bcc.n	8004c3e <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	3728      	adds	r7, #40	; 0x28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	08006218 	.word	0x08006218

08004c68 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bfb8      	it	lt
 8004c7c:	425b      	neglt	r3, r3
 8004c7e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004c80:	2301      	movs	r3, #1
 8004c82:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004c84:	e007      	b.n	8004c96 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c8e:	613b      	str	r3, [r7, #16]
    Width++;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	3301      	adds	r3, #1
 8004c94:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	daf3      	bge.n	8004c86 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d901      	bls.n	8004caa <_PrintInt+0x42>
    Width = NumDigits;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <_PrintInt+0x5e>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	db04      	blt.n	8004cc0 <_PrintInt+0x58>
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <_PrintInt+0x5e>
    FieldWidth--;
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <_PrintInt+0x6e>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d016      	beq.n	8004d04 <_PrintInt+0x9c>
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d111      	bne.n	8004d04 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00e      	beq.n	8004d04 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ce6:	e006      	b.n	8004cf6 <_PrintInt+0x8e>
        FieldWidth--;
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004cee:	2120      	movs	r1, #32
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff fea7 	bl	8004a44 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <_PrintInt+0x9c>
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d3f1      	bcc.n	8004ce8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	da07      	bge.n	8004d1a <_PrintInt+0xb2>
    v = -v;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	425b      	negs	r3, r3
 8004d0e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004d10:	212d      	movs	r1, #45	; 0x2d
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7ff fe96 	bl	8004a44 <_StoreChar>
 8004d18:	e008      	b.n	8004d2c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004d24:	212b      	movs	r1, #43	; 0x2b
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff fe8c 	bl	8004a44 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d019      	beq.n	8004d6a <_PrintInt+0x102>
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d114      	bne.n	8004d6a <_PrintInt+0x102>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d111      	bne.n	8004d6a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00e      	beq.n	8004d6a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d4c:	e006      	b.n	8004d5c <_PrintInt+0xf4>
        FieldWidth--;
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004d54:	2130      	movs	r1, #48	; 0x30
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff fe74 	bl	8004a44 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <_PrintInt+0x102>
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d3f1      	bcc.n	8004d4e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	9301      	str	r3, [sp, #4]
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7ff fedf 	bl	8004b3c <_PrintUnsigned>
}
 8004d7e:	bf00      	nop
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b098      	sub	sp, #96	; 0x60
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d94:	f3ef 8311 	mrs	r3, BASEPRI
 8004d98:	f04f 0120 	mov.w	r1, #32
 8004d9c:	f381 8811 	msr	BASEPRI, r1
 8004da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da2:	48b7      	ldr	r0, [pc, #732]	; (8005080 <_VPrintTarget+0x2f8>)
 8004da4:	f7ff fbee 	bl	8004584 <_PreparePacket>
 8004da8:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004daa:	4bb5      	ldr	r3, [pc, #724]	; (8005080 <_VPrintTarget+0x2f8>)
 8004dac:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004dae:	2300      	movs	r3, #0
 8004db0:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	3301      	adds	r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004dce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 81a8 	beq.w	8005128 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ddc:	2b25      	cmp	r3, #37	; 0x25
 8004dde:	f040 8195 	bne.w	800510c <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004de2:	2300      	movs	r3, #0
 8004de4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004de6:	2301      	movs	r3, #1
 8004de8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004df2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004df6:	3b23      	subs	r3, #35	; 0x23
 8004df8:	2b0d      	cmp	r3, #13
 8004dfa:	d83f      	bhi.n	8004e7c <_VPrintTarget+0xf4>
 8004dfc:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <_VPrintTarget+0x7c>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e6d 	.word	0x08004e6d
 8004e08:	08004e7d 	.word	0x08004e7d
 8004e0c:	08004e7d 	.word	0x08004e7d
 8004e10:	08004e7d 	.word	0x08004e7d
 8004e14:	08004e7d 	.word	0x08004e7d
 8004e18:	08004e7d 	.word	0x08004e7d
 8004e1c:	08004e7d 	.word	0x08004e7d
 8004e20:	08004e7d 	.word	0x08004e7d
 8004e24:	08004e5d 	.word	0x08004e5d
 8004e28:	08004e7d 	.word	0x08004e7d
 8004e2c:	08004e3d 	.word	0x08004e3d
 8004e30:	08004e7d 	.word	0x08004e7d
 8004e34:	08004e7d 	.word	0x08004e7d
 8004e38:	08004e4d 	.word	0x08004e4d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3301      	adds	r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	e01a      	b.n	8004e82 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4e:	f043 0302 	orr.w	r3, r3, #2
 8004e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e012      	b.n	8004e82 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5e:	f043 0304 	orr.w	r3, r3, #4
 8004e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3301      	adds	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e00a      	b.n	8004e82 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e6e:	f043 0308 	orr.w	r3, r3, #8
 8004e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3301      	adds	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e002      	b.n	8004e82 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e80:	bf00      	nop
        }
      } while (v);
 8004e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1b0      	bne.n	8004dea <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004e94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e98:	2b2f      	cmp	r3, #47	; 0x2f
 8004e9a:	d912      	bls.n	8004ec2 <_VPrintTarget+0x13a>
 8004e9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ea0:	2b39      	cmp	r3, #57	; 0x39
 8004ea2:	d80e      	bhi.n	8004ec2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eba:	4413      	add	r3, r2
 8004ebc:	3b30      	subs	r3, #48	; 0x30
 8004ebe:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004ec0:	e7e4      	b.n	8004e8c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004ece:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ed4:	d11d      	bne.n	8004f12 <_VPrintTarget+0x18a>
        sFormat++;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004ee4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ee8:	2b2f      	cmp	r3, #47	; 0x2f
 8004eea:	d912      	bls.n	8004f12 <_VPrintTarget+0x18a>
 8004eec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ef0:	2b39      	cmp	r3, #57	; 0x39
 8004ef2:	d80e      	bhi.n	8004f12 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004efa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	461a      	mov	r2, r3
 8004f06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3b30      	subs	r3, #48	; 0x30
 8004f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004f10:	e7e4      	b.n	8004edc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004f1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f1e:	2b6c      	cmp	r3, #108	; 0x6c
 8004f20:	d003      	beq.n	8004f2a <_VPrintTarget+0x1a2>
 8004f22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f26:	2b68      	cmp	r3, #104	; 0x68
 8004f28:	d107      	bne.n	8004f3a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3301      	adds	r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004f38:	e7ef      	b.n	8004f1a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004f3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f3e:	2b25      	cmp	r3, #37	; 0x25
 8004f40:	f000 80d8 	beq.w	80050f4 <_VPrintTarget+0x36c>
 8004f44:	2b25      	cmp	r3, #37	; 0x25
 8004f46:	f2c0 80dc 	blt.w	8005102 <_VPrintTarget+0x37a>
 8004f4a:	2b78      	cmp	r3, #120	; 0x78
 8004f4c:	f300 80d9 	bgt.w	8005102 <_VPrintTarget+0x37a>
 8004f50:	2b58      	cmp	r3, #88	; 0x58
 8004f52:	f2c0 80d6 	blt.w	8005102 <_VPrintTarget+0x37a>
 8004f56:	3b58      	subs	r3, #88	; 0x58
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	f200 80d2 	bhi.w	8005102 <_VPrintTarget+0x37a>
 8004f5e:	a201      	add	r2, pc, #4	; (adr r2, 8004f64 <_VPrintTarget+0x1dc>)
 8004f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f64:	0800505b 	.word	0x0800505b
 8004f68:	08005103 	.word	0x08005103
 8004f6c:	08005103 	.word	0x08005103
 8004f70:	08005103 	.word	0x08005103
 8004f74:	08005103 	.word	0x08005103
 8004f78:	08005103 	.word	0x08005103
 8004f7c:	08005103 	.word	0x08005103
 8004f80:	08005103 	.word	0x08005103
 8004f84:	08005103 	.word	0x08005103
 8004f88:	08005103 	.word	0x08005103
 8004f8c:	08005103 	.word	0x08005103
 8004f90:	08004fe9 	.word	0x08004fe9
 8004f94:	0800500f 	.word	0x0800500f
 8004f98:	08005103 	.word	0x08005103
 8004f9c:	08005103 	.word	0x08005103
 8004fa0:	08005103 	.word	0x08005103
 8004fa4:	08005103 	.word	0x08005103
 8004fa8:	08005103 	.word	0x08005103
 8004fac:	08005103 	.word	0x08005103
 8004fb0:	08005103 	.word	0x08005103
 8004fb4:	08005103 	.word	0x08005103
 8004fb8:	08005103 	.word	0x08005103
 8004fbc:	08005103 	.word	0x08005103
 8004fc0:	08005103 	.word	0x08005103
 8004fc4:	080050cf 	.word	0x080050cf
 8004fc8:	08005103 	.word	0x08005103
 8004fcc:	08005103 	.word	0x08005103
 8004fd0:	08005085 	.word	0x08005085
 8004fd4:	08005103 	.word	0x08005103
 8004fd8:	08005035 	.word	0x08005035
 8004fdc:	08005103 	.word	0x08005103
 8004fe0:	08005103 	.word	0x08005103
 8004fe4:	0800505b 	.word	0x0800505b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	1d19      	adds	r1, r3, #4
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6011      	str	r1, [r2, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8004ffc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005000:	f107 0310 	add.w	r3, r7, #16
 8005004:	4611      	mov	r1, r2
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff fd1c 	bl	8004a44 <_StoreChar>
        break;
 800500c:	e07a      	b.n	8005104 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	1d19      	adds	r1, r3, #4
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6011      	str	r1, [r2, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800501c:	f107 0010 	add.w	r0, r7, #16
 8005020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800502a:	220a      	movs	r2, #10
 800502c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800502e:	f7ff fe1b 	bl	8004c68 <_PrintInt>
        break;
 8005032:	e067      	b.n	8005104 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	1d19      	adds	r1, r3, #4
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6011      	str	r1, [r2, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005042:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005044:	f107 0010 	add.w	r0, r7, #16
 8005048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005052:	220a      	movs	r2, #10
 8005054:	f7ff fd72 	bl	8004b3c <_PrintUnsigned>
        break;
 8005058:	e054      	b.n	8005104 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	1d19      	adds	r1, r3, #4
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6011      	str	r1, [r2, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005068:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800506a:	f107 0010 	add.w	r0, r7, #16
 800506e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005078:	2210      	movs	r2, #16
 800507a:	f7ff fd5f 	bl	8004b3c <_PrintUnsigned>
        break;
 800507e:	e041      	b.n	8005104 <_VPrintTarget+0x37c>
 8005080:	2001a74c 	.word	0x2001a74c
      case 's':
        s = va_arg(*pParamList, const char*);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	1d19      	adds	r1, r3, #4
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6011      	str	r1, [r2, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <_VPrintTarget+0x314>
          s = "(null)";
 8005098:	4b4a      	ldr	r3, [pc, #296]	; (80051c4 <_VPrintTarget+0x43c>)
 800509a:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 800509c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 80050a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a6:	3301      	adds	r3, #1
 80050a8:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 80050aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80050b2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80050b6:	f107 0310 	add.w	r3, r7, #16
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fcc1 	bl	8004a44 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	2b7f      	cmp	r3, #127	; 0x7f
 80050c6:	d9e9      	bls.n	800509c <_VPrintTarget+0x314>
        break;
 80050c8:	e01c      	b.n	8005104 <_VPrintTarget+0x37c>
            break;
 80050ca:	bf00      	nop
        break;
 80050cc:	e01a      	b.n	8005104 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	1d19      	adds	r1, r3, #4
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6011      	str	r1, [r2, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80050dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050de:	f107 0010 	add.w	r0, r7, #16
 80050e2:	2300      	movs	r3, #0
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	2308      	movs	r3, #8
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	2308      	movs	r3, #8
 80050ec:	2210      	movs	r2, #16
 80050ee:	f7ff fd25 	bl	8004b3c <_PrintUnsigned>
        break;
 80050f2:	e007      	b.n	8005104 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80050f4:	f107 0310 	add.w	r3, r7, #16
 80050f8:	2125      	movs	r1, #37	; 0x25
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff fca2 	bl	8004a44 <_StoreChar>
        break;
 8005100:	e000      	b.n	8005104 <_VPrintTarget+0x37c>
      default:
        break;
 8005102:	bf00      	nop
      }
      sFormat++;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3301      	adds	r3, #1
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	e007      	b.n	800511c <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 800510c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005110:	f107 0310 	add.w	r3, r7, #16
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fc94 	bl	8004a44 <_StoreChar>
    }
  } while (*sFormat);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f47f ae4d 	bne.w	8004dc0 <_VPrintTarget+0x38>
 8005126:	e000      	b.n	800512a <_VPrintTarget+0x3a2>
      break;
 8005128:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d041      	beq.n	80051b4 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005130:	6a3a      	ldr	r2, [r7, #32]
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005140:	e00b      	b.n	800515a <_VPrintTarget+0x3d2>
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	b2da      	uxtb	r2, r3
 8005146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005148:	1c59      	adds	r1, r3, #1
 800514a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800514c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	09db      	lsrs	r3, r3, #7
 8005158:	63bb      	str	r3, [r7, #56]	; 0x38
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	2b7f      	cmp	r3, #127	; 0x7f
 800515e:	d8f0      	bhi.n	8005142 <_VPrintTarget+0x3ba>
 8005160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	701a      	strb	r2, [r3, #0]
 800516c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516e:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	637b      	str	r3, [r7, #52]	; 0x34
 8005174:	2300      	movs	r3, #0
 8005176:	633b      	str	r3, [r7, #48]	; 0x30
 8005178:	e00b      	b.n	8005192 <_VPrintTarget+0x40a>
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	b2da      	uxtb	r2, r3
 800517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005180:	1c59      	adds	r1, r3, #1
 8005182:	6379      	str	r1, [r7, #52]	; 0x34
 8005184:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	09db      	lsrs	r3, r3, #7
 8005190:	633b      	str	r3, [r7, #48]	; 0x30
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	2b7f      	cmp	r3, #127	; 0x7f
 8005196:	d8f0      	bhi.n	800517a <_VPrintTarget+0x3f2>
 8005198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	637a      	str	r2, [r7, #52]	; 0x34
 800519e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a6:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	6979      	ldr	r1, [r7, #20]
 80051ac:	221a      	movs	r2, #26
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fad8 	bl	8004764 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80051ba:	bf00      	nop
 80051bc:	3758      	adds	r7, #88	; 0x58
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	080061c4 	.word	0x080061c4

080051c8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80051d6:	2300      	movs	r3, #0
 80051d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051dc:	4917      	ldr	r1, [pc, #92]	; (800523c <SEGGER_SYSVIEW_Init+0x74>)
 80051de:	4818      	ldr	r0, [pc, #96]	; (8005240 <SEGGER_SYSVIEW_Init+0x78>)
 80051e0:	f7ff f8d0 	bl	8004384 <SEGGER_RTT_AllocUpBuffer>
 80051e4:	4603      	mov	r3, r0
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	4b16      	ldr	r3, [pc, #88]	; (8005244 <SEGGER_SYSVIEW_Init+0x7c>)
 80051ea:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80051ec:	4b15      	ldr	r3, [pc, #84]	; (8005244 <SEGGER_SYSVIEW_Init+0x7c>)
 80051ee:	785a      	ldrb	r2, [r3, #1]
 80051f0:	4b14      	ldr	r3, [pc, #80]	; (8005244 <SEGGER_SYSVIEW_Init+0x7c>)
 80051f2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80051f4:	4b13      	ldr	r3, [pc, #76]	; (8005244 <SEGGER_SYSVIEW_Init+0x7c>)
 80051f6:	7e1b      	ldrb	r3, [r3, #24]
 80051f8:	4618      	mov	r0, r3
 80051fa:	2300      	movs	r3, #0
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	2308      	movs	r3, #8
 8005200:	4a11      	ldr	r2, [pc, #68]	; (8005248 <SEGGER_SYSVIEW_Init+0x80>)
 8005202:	490f      	ldr	r1, [pc, #60]	; (8005240 <SEGGER_SYSVIEW_Init+0x78>)
 8005204:	f7ff f942 	bl	800448c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005208:	4b0e      	ldr	r3, [pc, #56]	; (8005244 <SEGGER_SYSVIEW_Init+0x7c>)
 800520a:	2200      	movs	r2, #0
 800520c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800520e:	4b0f      	ldr	r3, [pc, #60]	; (800524c <SEGGER_SYSVIEW_Init+0x84>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a0c      	ldr	r2, [pc, #48]	; (8005244 <SEGGER_SYSVIEW_Init+0x7c>)
 8005214:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005216:	4a0b      	ldr	r2, [pc, #44]	; (8005244 <SEGGER_SYSVIEW_Init+0x7c>)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800521c:	4a09      	ldr	r2, [pc, #36]	; (8005244 <SEGGER_SYSVIEW_Init+0x7c>)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005222:	4a08      	ldr	r2, [pc, #32]	; (8005244 <SEGGER_SYSVIEW_Init+0x7c>)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005228:	4a06      	ldr	r2, [pc, #24]	; (8005244 <SEGGER_SYSVIEW_Init+0x7c>)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800522e:	4b05      	ldr	r3, [pc, #20]	; (8005244 <SEGGER_SYSVIEW_Init+0x7c>)
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005234:	bf00      	nop
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20019714 	.word	0x20019714
 8005240:	080061cc 	.word	0x080061cc
 8005244:	2001a71c 	.word	0x2001a71c
 8005248:	2001a714 	.word	0x2001a714
 800524c:	e0001004 	.word	0xe0001004

08005250 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005258:	4a04      	ldr	r2, [pc, #16]	; (800526c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6113      	str	r3, [r2, #16]
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	2001a71c 	.word	0x2001a71c

08005270 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005278:	f3ef 8311 	mrs	r3, BASEPRI
 800527c:	f04f 0120 	mov.w	r1, #32
 8005280:	f381 8811 	msr	BASEPRI, r1
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	4808      	ldr	r0, [pc, #32]	; (80052a8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005288:	f7ff f97c 	bl	8004584 <_PreparePacket>
 800528c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	68b9      	ldr	r1, [r7, #8]
 8005292:	68b8      	ldr	r0, [r7, #8]
 8005294:	f7ff fa66 	bl	8004764 <_SendPacket>
  RECORD_END();
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f383 8811 	msr	BASEPRI, r3
}
 800529e:	bf00      	nop
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	2001a74c 	.word	0x2001a74c

080052ac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80052b6:	f3ef 8311 	mrs	r3, BASEPRI
 80052ba:	f04f 0120 	mov.w	r1, #32
 80052be:	f381 8811 	msr	BASEPRI, r1
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	4816      	ldr	r0, [pc, #88]	; (8005320 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80052c6:	f7ff f95d 	bl	8004584 <_PreparePacket>
 80052ca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	61bb      	str	r3, [r7, #24]
 80052d8:	e00b      	b.n	80052f2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	1c59      	adds	r1, r3, #1
 80052e2:	61f9      	str	r1, [r7, #28]
 80052e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	09db      	lsrs	r3, r3, #7
 80052f0:	61bb      	str	r3, [r7, #24]
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b7f      	cmp	r3, #127	; 0x7f
 80052f6:	d8f0      	bhi.n	80052da <SEGGER_SYSVIEW_RecordU32+0x2e>
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	61fa      	str	r2, [r7, #28]
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	68f9      	ldr	r1, [r7, #12]
 800530c:	6938      	ldr	r0, [r7, #16]
 800530e:	f7ff fa29 	bl	8004764 <_SendPacket>
  RECORD_END();
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f383 8811 	msr	BASEPRI, r3
}
 8005318:	bf00      	nop
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	2001a74c 	.word	0x2001a74c

08005324 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b08c      	sub	sp, #48	; 0x30
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005330:	f3ef 8311 	mrs	r3, BASEPRI
 8005334:	f04f 0120 	mov.w	r1, #32
 8005338:	f381 8811 	msr	BASEPRI, r1
 800533c:	61fb      	str	r3, [r7, #28]
 800533e:	4825      	ldr	r0, [pc, #148]	; (80053d4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005340:	f7ff f920 	bl	8004584 <_PreparePacket>
 8005344:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	62bb      	str	r3, [r7, #40]	; 0x28
 8005352:	e00b      	b.n	800536c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005356:	b2da      	uxtb	r2, r3
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	1c59      	adds	r1, r3, #1
 800535c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800535e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	09db      	lsrs	r3, r3, #7
 800536a:	62bb      	str	r3, [r7, #40]	; 0x28
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	2b7f      	cmp	r3, #127	; 0x7f
 8005370:	d8f0      	bhi.n	8005354 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	623b      	str	r3, [r7, #32]
 800538a:	e00b      	b.n	80053a4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	b2da      	uxtb	r2, r3
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	1c59      	adds	r1, r3, #1
 8005394:	6279      	str	r1, [r7, #36]	; 0x24
 8005396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	09db      	lsrs	r3, r3, #7
 80053a2:	623b      	str	r3, [r7, #32]
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	2b7f      	cmp	r3, #127	; 0x7f
 80053a8:	d8f0      	bhi.n	800538c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	627a      	str	r2, [r7, #36]	; 0x24
 80053b0:	6a3a      	ldr	r2, [r7, #32]
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	6979      	ldr	r1, [r7, #20]
 80053be:	69b8      	ldr	r0, [r7, #24]
 80053c0:	f7ff f9d0 	bl	8004764 <_SendPacket>
  RECORD_END();
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f383 8811 	msr	BASEPRI, r3
}
 80053ca:	bf00      	nop
 80053cc:	3730      	adds	r7, #48	; 0x30
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	2001a74c 	.word	0x2001a74c

080053d8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08c      	sub	sp, #48	; 0x30
 80053dc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80053de:	4b59      	ldr	r3, [pc, #356]	; (8005544 <SEGGER_SYSVIEW_Start+0x16c>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80053e4:	f3ef 8311 	mrs	r3, BASEPRI
 80053e8:	f04f 0120 	mov.w	r1, #32
 80053ec:	f381 8811 	msr	BASEPRI, r1
 80053f0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80053f2:	4b54      	ldr	r3, [pc, #336]	; (8005544 <SEGGER_SYSVIEW_Start+0x16c>)
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	220a      	movs	r2, #10
 80053f8:	4953      	ldr	r1, [pc, #332]	; (8005548 <SEGGER_SYSVIEW_Start+0x170>)
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fa ff08 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005406:	f7fe fc8f 	bl	8003d28 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800540a:	200a      	movs	r0, #10
 800540c:	f7ff ff30 	bl	8005270 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005410:	f3ef 8311 	mrs	r3, BASEPRI
 8005414:	f04f 0120 	mov.w	r1, #32
 8005418:	f381 8811 	msr	BASEPRI, r1
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	484b      	ldr	r0, [pc, #300]	; (800554c <SEGGER_SYSVIEW_Start+0x174>)
 8005420:	f7ff f8b0 	bl	8004584 <_PreparePacket>
 8005424:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800542e:	4b45      	ldr	r3, [pc, #276]	; (8005544 <SEGGER_SYSVIEW_Start+0x16c>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	62bb      	str	r3, [r7, #40]	; 0x28
 8005434:	e00b      	b.n	800544e <SEGGER_SYSVIEW_Start+0x76>
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	b2da      	uxtb	r2, r3
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	1c59      	adds	r1, r3, #1
 800543e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005440:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	09db      	lsrs	r3, r3, #7
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	2b7f      	cmp	r3, #127	; 0x7f
 8005452:	d8f0      	bhi.n	8005436 <SEGGER_SYSVIEW_Start+0x5e>
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	62fa      	str	r2, [r7, #44]	; 0x2c
 800545a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005462:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
 8005468:	4b36      	ldr	r3, [pc, #216]	; (8005544 <SEGGER_SYSVIEW_Start+0x16c>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	623b      	str	r3, [r7, #32]
 800546e:	e00b      	b.n	8005488 <SEGGER_SYSVIEW_Start+0xb0>
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	b2da      	uxtb	r2, r3
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	1c59      	adds	r1, r3, #1
 8005478:	6279      	str	r1, [r7, #36]	; 0x24
 800547a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	09db      	lsrs	r3, r3, #7
 8005486:	623b      	str	r3, [r7, #32]
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	2b7f      	cmp	r3, #127	; 0x7f
 800548c:	d8f0      	bhi.n	8005470 <SEGGER_SYSVIEW_Start+0x98>
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	627a      	str	r2, [r7, #36]	; 0x24
 8005494:	6a3a      	ldr	r2, [r7, #32]
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	61fb      	str	r3, [r7, #28]
 80054a2:	4b28      	ldr	r3, [pc, #160]	; (8005544 <SEGGER_SYSVIEW_Start+0x16c>)
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	e00b      	b.n	80054c2 <SEGGER_SYSVIEW_Start+0xea>
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	1c59      	adds	r1, r3, #1
 80054b2:	61f9      	str	r1, [r7, #28]
 80054b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	701a      	strb	r2, [r3, #0]
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	09db      	lsrs	r3, r3, #7
 80054c0:	61bb      	str	r3, [r7, #24]
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	2b7f      	cmp	r3, #127	; 0x7f
 80054c6:	d8f0      	bhi.n	80054aa <SEGGER_SYSVIEW_Start+0xd2>
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	61fa      	str	r2, [r7, #28]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	701a      	strb	r2, [r3, #0]
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	e00b      	b.n	80054fa <SEGGER_SYSVIEW_Start+0x122>
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	1c59      	adds	r1, r3, #1
 80054ea:	6179      	str	r1, [r7, #20]
 80054ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	09db      	lsrs	r3, r3, #7
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b7f      	cmp	r3, #127	; 0x7f
 80054fe:	d8f0      	bhi.n	80054e2 <SEGGER_SYSVIEW_Start+0x10a>
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	617a      	str	r2, [r7, #20]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005510:	2218      	movs	r2, #24
 8005512:	6839      	ldr	r1, [r7, #0]
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff f925 	bl	8004764 <_SendPacket>
      RECORD_END();
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005520:	4b08      	ldr	r3, [pc, #32]	; (8005544 <SEGGER_SYSVIEW_Start+0x16c>)
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <SEGGER_SYSVIEW_Start+0x16c>)
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800552e:	f000 f9eb 	bl	8005908 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005532:	f000 f9b1 	bl	8005898 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005536:	f000 fc7d 	bl	8005e34 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800553a:	bf00      	nop
 800553c:	3730      	adds	r7, #48	; 0x30
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	2001a71c 	.word	0x2001a71c
 8005548:	0800620c 	.word	0x0800620c
 800554c:	2001a74c 	.word	0x2001a74c

08005550 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005556:	f3ef 8311 	mrs	r3, BASEPRI
 800555a:	f04f 0120 	mov.w	r1, #32
 800555e:	f381 8811 	msr	BASEPRI, r1
 8005562:	607b      	str	r3, [r7, #4]
 8005564:	480b      	ldr	r0, [pc, #44]	; (8005594 <SEGGER_SYSVIEW_Stop+0x44>)
 8005566:	f7ff f80d 	bl	8004584 <_PreparePacket>
 800556a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800556c:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <SEGGER_SYSVIEW_Stop+0x48>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d007      	beq.n	8005584 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005574:	220b      	movs	r2, #11
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	6838      	ldr	r0, [r7, #0]
 800557a:	f7ff f8f3 	bl	8004764 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <SEGGER_SYSVIEW_Stop+0x48>)
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f383 8811 	msr	BASEPRI, r3
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	2001a74c 	.word	0x2001a74c
 8005598:	2001a71c 	.word	0x2001a71c

0800559c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	; 0x30
 80055a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80055a2:	f3ef 8311 	mrs	r3, BASEPRI
 80055a6:	f04f 0120 	mov.w	r1, #32
 80055aa:	f381 8811 	msr	BASEPRI, r1
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	4845      	ldr	r0, [pc, #276]	; (80056c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80055b2:	f7fe ffe7 	bl	8004584 <_PreparePacket>
 80055b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055c0:	4b42      	ldr	r3, [pc, #264]	; (80056cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c6:	e00b      	b.n	80055e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ce:	1c59      	adds	r1, r3, #1
 80055d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	09db      	lsrs	r3, r3, #7
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	2b7f      	cmp	r3, #127	; 0x7f
 80055e4:	d8f0      	bhi.n	80055c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80055e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
 80055fa:	4b34      	ldr	r3, [pc, #208]	; (80056cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	623b      	str	r3, [r7, #32]
 8005600:	e00b      	b.n	800561a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	b2da      	uxtb	r2, r3
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	1c59      	adds	r1, r3, #1
 800560a:	6279      	str	r1, [r7, #36]	; 0x24
 800560c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	09db      	lsrs	r3, r3, #7
 8005618:	623b      	str	r3, [r7, #32]
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	2b7f      	cmp	r3, #127	; 0x7f
 800561e:	d8f0      	bhi.n	8005602 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	627a      	str	r2, [r7, #36]	; 0x24
 8005626:	6a3a      	ldr	r2, [r7, #32]
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	4b25      	ldr	r3, [pc, #148]	; (80056cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	61bb      	str	r3, [r7, #24]
 800563a:	e00b      	b.n	8005654 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	b2da      	uxtb	r2, r3
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	1c59      	adds	r1, r3, #1
 8005644:	61f9      	str	r1, [r7, #28]
 8005646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	09db      	lsrs	r3, r3, #7
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	2b7f      	cmp	r3, #127	; 0x7f
 8005658:	d8f0      	bhi.n	800563c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	61fa      	str	r2, [r7, #28]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	2300      	movs	r3, #0
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	e00b      	b.n	800568c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	b2da      	uxtb	r2, r3
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	1c59      	adds	r1, r3, #1
 800567c:	6179      	str	r1, [r7, #20]
 800567e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	09db      	lsrs	r3, r3, #7
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	2b7f      	cmp	r3, #127	; 0x7f
 8005690:	d8f0      	bhi.n	8005674 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	617a      	str	r2, [r7, #20]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80056a2:	2218      	movs	r2, #24
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	68b8      	ldr	r0, [r7, #8]
 80056a8:	f7ff f85c 	bl	8004764 <_SendPacket>
  RECORD_END();
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80056ba:	4b04      	ldr	r3, [pc, #16]	; (80056cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	4798      	blx	r3
  }
}
 80056c0:	bf00      	nop
 80056c2:	3730      	adds	r7, #48	; 0x30
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	2001a74c 	.word	0x2001a74c
 80056cc:	2001a71c 	.word	0x2001a71c

080056d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b092      	sub	sp, #72	; 0x48
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80056d8:	f3ef 8311 	mrs	r3, BASEPRI
 80056dc:	f04f 0120 	mov.w	r1, #32
 80056e0:	f381 8811 	msr	BASEPRI, r1
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	486a      	ldr	r0, [pc, #424]	; (8005890 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80056e8:	f7fe ff4c 	bl	8004584 <_PreparePacket>
 80056ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	647b      	str	r3, [r7, #68]	; 0x44
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4b66      	ldr	r3, [pc, #408]	; (8005894 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	643b      	str	r3, [r7, #64]	; 0x40
 8005702:	e00b      	b.n	800571c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005706:	b2da      	uxtb	r2, r3
 8005708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570a:	1c59      	adds	r1, r3, #1
 800570c:	6479      	str	r1, [r7, #68]	; 0x44
 800570e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005718:	09db      	lsrs	r3, r3, #7
 800571a:	643b      	str	r3, [r7, #64]	; 0x40
 800571c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571e:	2b7f      	cmp	r3, #127	; 0x7f
 8005720:	d8f0      	bhi.n	8005704 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	647a      	str	r2, [r7, #68]	; 0x44
 8005728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005730:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	63bb      	str	r3, [r7, #56]	; 0x38
 800573c:	e00b      	b.n	8005756 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	b2da      	uxtb	r2, r3
 8005742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005744:	1c59      	adds	r1, r3, #1
 8005746:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005748:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	09db      	lsrs	r3, r3, #7
 8005754:	63bb      	str	r3, [r7, #56]	; 0x38
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	2b7f      	cmp	r3, #127	; 0x7f
 800575a:	d8f0      	bhi.n	800573e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800575c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	4619      	mov	r1, r3
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7fe fed5 	bl	8004524 <_EncodeStr>
 800577a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800577c:	2209      	movs	r2, #9
 800577e:	68f9      	ldr	r1, [r7, #12]
 8005780:	6938      	ldr	r0, [r7, #16]
 8005782:	f7fe ffef 	bl	8004764 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	637b      	str	r3, [r7, #52]	; 0x34
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b40      	ldr	r3, [pc, #256]	; (8005894 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	633b      	str	r3, [r7, #48]	; 0x30
 800579a:	e00b      	b.n	80057b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a2:	1c59      	adds	r1, r3, #1
 80057a4:	6379      	str	r1, [r7, #52]	; 0x34
 80057a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	09db      	lsrs	r3, r3, #7
 80057b2:	633b      	str	r3, [r7, #48]	; 0x30
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	2b7f      	cmp	r3, #127	; 0x7f
 80057b8:	d8f0      	bhi.n	800579c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80057ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	637a      	str	r2, [r7, #52]	; 0x34
 80057c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d4:	e00b      	b.n	80057ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	1c59      	adds	r1, r3, #1
 80057de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	09db      	lsrs	r3, r3, #7
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	2b7f      	cmp	r3, #127	; 0x7f
 80057f2:	d8f0      	bhi.n	80057d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	623b      	str	r3, [r7, #32]
 800580e:	e00b      	b.n	8005828 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	b2da      	uxtb	r2, r3
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	1c59      	adds	r1, r3, #1
 8005818:	6279      	str	r1, [r7, #36]	; 0x24
 800581a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	09db      	lsrs	r3, r3, #7
 8005826:	623b      	str	r3, [r7, #32]
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	2b7f      	cmp	r3, #127	; 0x7f
 800582c:	d8f0      	bhi.n	8005810 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	627a      	str	r2, [r7, #36]	; 0x24
 8005834:	6a3a      	ldr	r2, [r7, #32]
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	61fb      	str	r3, [r7, #28]
 8005842:	2300      	movs	r3, #0
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	e00b      	b.n	8005860 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	b2da      	uxtb	r2, r3
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	1c59      	adds	r1, r3, #1
 8005850:	61f9      	str	r1, [r7, #28]
 8005852:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	09db      	lsrs	r3, r3, #7
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	2b7f      	cmp	r3, #127	; 0x7f
 8005864:	d8f0      	bhi.n	8005848 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	61fa      	str	r2, [r7, #28]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005876:	2215      	movs	r2, #21
 8005878:	68f9      	ldr	r1, [r7, #12]
 800587a:	6938      	ldr	r0, [r7, #16]
 800587c:	f7fe ff72 	bl	8004764 <_SendPacket>
  RECORD_END();
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f383 8811 	msr	BASEPRI, r3
}
 8005886:	bf00      	nop
 8005888:	3748      	adds	r7, #72	; 0x48
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	2001a74c 	.word	0x2001a74c
 8005894:	2001a71c 	.word	0x2001a71c

08005898 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800589c:	4b07      	ldr	r3, [pc, #28]	; (80058bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d008      	beq.n	80058b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80058ae:	4b03      	ldr	r3, [pc, #12]	; (80058bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4798      	blx	r3
  }
}
 80058b6:	bf00      	nop
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	2001a71c 	.word	0x2001a71c

080058c0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058c8:	f3ef 8311 	mrs	r3, BASEPRI
 80058cc:	f04f 0120 	mov.w	r1, #32
 80058d0:	f381 8811 	msr	BASEPRI, r1
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	480b      	ldr	r0, [pc, #44]	; (8005904 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80058d8:	f7fe fe54 	bl	8004584 <_PreparePacket>
 80058dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058de:	2280      	movs	r2, #128	; 0x80
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	6938      	ldr	r0, [r7, #16]
 80058e4:	f7fe fe1e 	bl	8004524 <_EncodeStr>
 80058e8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80058ea:	220e      	movs	r2, #14
 80058ec:	68f9      	ldr	r1, [r7, #12]
 80058ee:	6938      	ldr	r0, [r7, #16]
 80058f0:	f7fe ff38 	bl	8004764 <_SendPacket>
  RECORD_END();
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f383 8811 	msr	BASEPRI, r3
}
 80058fa:	bf00      	nop
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	2001a74c 	.word	0x2001a74c

08005908 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005908:	b590      	push	{r4, r7, lr}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800590e:	4b15      	ldr	r3, [pc, #84]	; (8005964 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d01a      	beq.n	800594c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005916:	4b13      	ldr	r3, [pc, #76]	; (8005964 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d015      	beq.n	800594c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005920:	4b10      	ldr	r3, [pc, #64]	; (8005964 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4798      	blx	r3
 8005928:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800592c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800592e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	f04f 0300 	mov.w	r3, #0
 800593a:	000a      	movs	r2, r1
 800593c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800593e:	4613      	mov	r3, r2
 8005940:	461a      	mov	r2, r3
 8005942:	4621      	mov	r1, r4
 8005944:	200d      	movs	r0, #13
 8005946:	f7ff fced 	bl	8005324 <SEGGER_SYSVIEW_RecordU32x2>
 800594a:	e006      	b.n	800595a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800594c:	4b06      	ldr	r3, [pc, #24]	; (8005968 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4619      	mov	r1, r3
 8005952:	200c      	movs	r0, #12
 8005954:	f7ff fcaa 	bl	80052ac <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005958:	bf00      	nop
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	bd90      	pop	{r4, r7, pc}
 8005962:	bf00      	nop
 8005964:	2001a71c 	.word	0x2001a71c
 8005968:	e0001004 	.word	0xe0001004

0800596c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005972:	f3ef 8311 	mrs	r3, BASEPRI
 8005976:	f04f 0120 	mov.w	r1, #32
 800597a:	f381 8811 	msr	BASEPRI, r1
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	4819      	ldr	r0, [pc, #100]	; (80059e8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005982:	f7fe fdff 	bl	8004584 <_PreparePacket>
 8005986:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800598c:	4b17      	ldr	r3, [pc, #92]	; (80059ec <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005994:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	e00b      	b.n	80059b8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1c59      	adds	r1, r3, #1
 80059a8:	6179      	str	r1, [r7, #20]
 80059aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	09db      	lsrs	r3, r3, #7
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b7f      	cmp	r3, #127	; 0x7f
 80059bc:	d8f0      	bhi.n	80059a0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	617a      	str	r2, [r7, #20]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80059ce:	2202      	movs	r2, #2
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	68b8      	ldr	r0, [r7, #8]
 80059d4:	f7fe fec6 	bl	8004764 <_SendPacket>
  RECORD_END();
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f383 8811 	msr	BASEPRI, r3
}
 80059de:	bf00      	nop
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	2001a74c 	.word	0x2001a74c
 80059ec:	e000ed04 	.word	0xe000ed04

080059f0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059f6:	f3ef 8311 	mrs	r3, BASEPRI
 80059fa:	f04f 0120 	mov.w	r1, #32
 80059fe:	f381 8811 	msr	BASEPRI, r1
 8005a02:	607b      	str	r3, [r7, #4]
 8005a04:	4807      	ldr	r0, [pc, #28]	; (8005a24 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005a06:	f7fe fdbd 	bl	8004584 <_PreparePacket>
 8005a0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005a0c:	2203      	movs	r2, #3
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	6838      	ldr	r0, [r7, #0]
 8005a12:	f7fe fea7 	bl	8004764 <_SendPacket>
  RECORD_END();
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f383 8811 	msr	BASEPRI, r3
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	2001a74c 	.word	0x2001a74c

08005a28 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a2e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a32:	f04f 0120 	mov.w	r1, #32
 8005a36:	f381 8811 	msr	BASEPRI, r1
 8005a3a:	607b      	str	r3, [r7, #4]
 8005a3c:	4807      	ldr	r0, [pc, #28]	; (8005a5c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005a3e:	f7fe fda1 	bl	8004584 <_PreparePacket>
 8005a42:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005a44:	2212      	movs	r2, #18
 8005a46:	6839      	ldr	r1, [r7, #0]
 8005a48:	6838      	ldr	r0, [r7, #0]
 8005a4a:	f7fe fe8b 	bl	8004764 <_SendPacket>
  RECORD_END();
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f383 8811 	msr	BASEPRI, r3
}
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	2001a74c 	.word	0x2001a74c

08005a60 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a66:	f3ef 8311 	mrs	r3, BASEPRI
 8005a6a:	f04f 0120 	mov.w	r1, #32
 8005a6e:	f381 8811 	msr	BASEPRI, r1
 8005a72:	607b      	str	r3, [r7, #4]
 8005a74:	4807      	ldr	r0, [pc, #28]	; (8005a94 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005a76:	f7fe fd85 	bl	8004584 <_PreparePacket>
 8005a7a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005a7c:	2211      	movs	r2, #17
 8005a7e:	6839      	ldr	r1, [r7, #0]
 8005a80:	6838      	ldr	r0, [r7, #0]
 8005a82:	f7fe fe6f 	bl	8004764 <_SendPacket>
  RECORD_END();
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f383 8811 	msr	BASEPRI, r3
}
 8005a8c:	bf00      	nop
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	2001a74c 	.word	0x2001a74c

08005a98 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005aa0:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa4:	f04f 0120 	mov.w	r1, #32
 8005aa8:	f381 8811 	msr	BASEPRI, r1
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	4819      	ldr	r0, [pc, #100]	; (8005b14 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005ab0:	f7fe fd68 	bl	8004584 <_PreparePacket>
 8005ab4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005aba:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	61bb      	str	r3, [r7, #24]
 8005acc:	e00b      	b.n	8005ae6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	1c59      	adds	r1, r3, #1
 8005ad6:	61f9      	str	r1, [r7, #28]
 8005ad8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	09db      	lsrs	r3, r3, #7
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8005aea:	d8f0      	bhi.n	8005ace <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	61fa      	str	r2, [r7, #28]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005afc:	2208      	movs	r2, #8
 8005afe:	68f9      	ldr	r1, [r7, #12]
 8005b00:	6938      	ldr	r0, [r7, #16]
 8005b02:	f7fe fe2f 	bl	8004764 <_SendPacket>
  RECORD_END();
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f383 8811 	msr	BASEPRI, r3
}
 8005b0c:	bf00      	nop
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	2001a74c 	.word	0x2001a74c
 8005b18:	2001a71c 	.word	0x2001a71c

08005b1c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b24:	f3ef 8311 	mrs	r3, BASEPRI
 8005b28:	f04f 0120 	mov.w	r1, #32
 8005b2c:	f381 8811 	msr	BASEPRI, r1
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	4819      	ldr	r0, [pc, #100]	; (8005b98 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005b34:	f7fe fd26 	bl	8004584 <_PreparePacket>
 8005b38:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b3e:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	61fb      	str	r3, [r7, #28]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	61bb      	str	r3, [r7, #24]
 8005b50:	e00b      	b.n	8005b6a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	1c59      	adds	r1, r3, #1
 8005b5a:	61f9      	str	r1, [r7, #28]
 8005b5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	09db      	lsrs	r3, r3, #7
 8005b68:	61bb      	str	r3, [r7, #24]
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b6e:	d8f0      	bhi.n	8005b52 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	61fa      	str	r2, [r7, #28]
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005b80:	2204      	movs	r2, #4
 8005b82:	68f9      	ldr	r1, [r7, #12]
 8005b84:	6938      	ldr	r0, [r7, #16]
 8005b86:	f7fe fded 	bl	8004764 <_SendPacket>
  RECORD_END();
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f383 8811 	msr	BASEPRI, r3
}
 8005b90:	bf00      	nop
 8005b92:	3720      	adds	r7, #32
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	2001a74c 	.word	0x2001a74c
 8005b9c:	2001a71c 	.word	0x2001a71c

08005ba0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ba8:	f3ef 8311 	mrs	r3, BASEPRI
 8005bac:	f04f 0120 	mov.w	r1, #32
 8005bb0:	f381 8811 	msr	BASEPRI, r1
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	4819      	ldr	r0, [pc, #100]	; (8005c1c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005bb8:	f7fe fce4 	bl	8004584 <_PreparePacket>
 8005bbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005bc2:	4b17      	ldr	r3, [pc, #92]	; (8005c20 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	61bb      	str	r3, [r7, #24]
 8005bd4:	e00b      	b.n	8005bee <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	1c59      	adds	r1, r3, #1
 8005bde:	61f9      	str	r1, [r7, #28]
 8005be0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	701a      	strb	r2, [r3, #0]
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	09db      	lsrs	r3, r3, #7
 8005bec:	61bb      	str	r3, [r7, #24]
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b7f      	cmp	r3, #127	; 0x7f
 8005bf2:	d8f0      	bhi.n	8005bd6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	61fa      	str	r2, [r7, #28]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	701a      	strb	r2, [r3, #0]
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005c04:	2206      	movs	r2, #6
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	6938      	ldr	r0, [r7, #16]
 8005c0a:	f7fe fdab 	bl	8004764 <_SendPacket>
  RECORD_END();
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f383 8811 	msr	BASEPRI, r3
}
 8005c14:	bf00      	nop
 8005c16:	3720      	adds	r7, #32
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	2001a74c 	.word	0x2001a74c
 8005c20:	2001a71c 	.word	0x2001a71c

08005c24 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08a      	sub	sp, #40	; 0x28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c32:	f04f 0120 	mov.w	r1, #32
 8005c36:	f381 8811 	msr	BASEPRI, r1
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	4827      	ldr	r0, [pc, #156]	; (8005cdc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005c3e:	f7fe fca1 	bl	8004584 <_PreparePacket>
 8005c42:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005c48:	4b25      	ldr	r3, [pc, #148]	; (8005ce0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	623b      	str	r3, [r7, #32]
 8005c5a:	e00b      	b.n	8005c74 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	1c59      	adds	r1, r3, #1
 8005c64:	6279      	str	r1, [r7, #36]	; 0x24
 8005c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	09db      	lsrs	r3, r3, #7
 8005c72:	623b      	str	r3, [r7, #32]
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	2b7f      	cmp	r3, #127	; 0x7f
 8005c78:	d8f0      	bhi.n	8005c5c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	627a      	str	r2, [r7, #36]	; 0x24
 8005c80:	6a3a      	ldr	r2, [r7, #32]
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	61fb      	str	r3, [r7, #28]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	e00b      	b.n	8005cac <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	1c59      	adds	r1, r3, #1
 8005c9c:	61f9      	str	r1, [r7, #28]
 8005c9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	09db      	lsrs	r3, r3, #7
 8005caa:	61bb      	str	r3, [r7, #24]
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2b7f      	cmp	r3, #127	; 0x7f
 8005cb0:	d8f0      	bhi.n	8005c94 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	61fa      	str	r2, [r7, #28]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005cc2:	2207      	movs	r2, #7
 8005cc4:	68f9      	ldr	r1, [r7, #12]
 8005cc6:	6938      	ldr	r0, [r7, #16]
 8005cc8:	f7fe fd4c 	bl	8004764 <_SendPacket>
  RECORD_END();
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f383 8811 	msr	BASEPRI, r3
}
 8005cd2:	bf00      	nop
 8005cd4:	3728      	adds	r7, #40	; 0x28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	2001a74c 	.word	0x2001a74c
 8005ce0:	2001a71c 	.word	0x2001a71c

08005ce4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08c      	sub	sp, #48	; 0x30
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005cee:	4b40      	ldr	r3, [pc, #256]	; (8005df0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d077      	beq.n	8005de6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005cf6:	4b3e      	ldr	r3, [pc, #248]	; (8005df0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d00:	e008      	b.n	8005d14 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	3301      	adds	r3, #1
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d3f2      	bcc.n	8005d02 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005d1c:	e000      	b.n	8005d20 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005d1e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d055      	beq.n	8005dd2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d26:	f3ef 8311 	mrs	r3, BASEPRI
 8005d2a:	f04f 0120 	mov.w	r1, #32
 8005d2e:	f381 8811 	msr	BASEPRI, r1
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	482f      	ldr	r0, [pc, #188]	; (8005df4 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005d36:	f7fe fc25 	bl	8004584 <_PreparePacket>
 8005d3a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
 8005d44:	79fb      	ldrb	r3, [r7, #7]
 8005d46:	623b      	str	r3, [r7, #32]
 8005d48:	e00b      	b.n	8005d62 <SEGGER_SYSVIEW_SendModule+0x7e>
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	1c59      	adds	r1, r3, #1
 8005d52:	6279      	str	r1, [r7, #36]	; 0x24
 8005d54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	701a      	strb	r2, [r3, #0]
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	09db      	lsrs	r3, r3, #7
 8005d60:	623b      	str	r3, [r7, #32]
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	2b7f      	cmp	r3, #127	; 0x7f
 8005d66:	d8f0      	bhi.n	8005d4a <SEGGER_SYSVIEW_SendModule+0x66>
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	627a      	str	r2, [r7, #36]	; 0x24
 8005d6e:	6a3a      	ldr	r2, [r7, #32]
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	61fb      	str	r3, [r7, #28]
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	e00b      	b.n	8005d9c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	1c59      	adds	r1, r3, #1
 8005d8c:	61f9      	str	r1, [r7, #28]
 8005d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	09db      	lsrs	r3, r3, #7
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005da0:	d8f0      	bhi.n	8005d84 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	61fa      	str	r2, [r7, #28]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2280      	movs	r2, #128	; 0x80
 8005db8:	4619      	mov	r1, r3
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7fe fbb2 	bl	8004524 <_EncodeStr>
 8005dc0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005dc2:	2216      	movs	r2, #22
 8005dc4:	68f9      	ldr	r1, [r7, #12]
 8005dc6:	6938      	ldr	r0, [r7, #16]
 8005dc8:	f7fe fccc 	bl	8004764 <_SendPacket>
      RECORD_END();
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d006      	beq.n	8005de6 <SEGGER_SYSVIEW_SendModule+0x102>
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4798      	blx	r3
    }
  }
}
 8005de6:	bf00      	nop
 8005de8:	3730      	adds	r7, #48	; 0x30
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	2001a744 	.word	0x2001a744
 8005df4:	2001a74c 	.word	0x2001a74c

08005df8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00f      	beq.n	8005e26 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005e06:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f2      	bne.n	8005e0c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	2001a744 	.word	0x2001a744

08005e34 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e3e:	f04f 0120 	mov.w	r1, #32
 8005e42:	f381 8811 	msr	BASEPRI, r1
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	4817      	ldr	r0, [pc, #92]	; (8005ea8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005e4a:	f7fe fb9b 	bl	8004584 <_PreparePacket>
 8005e4e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	4b14      	ldr	r3, [pc, #80]	; (8005eac <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	e00b      	b.n	8005e78 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	1c59      	adds	r1, r3, #1
 8005e68:	6179      	str	r1, [r7, #20]
 8005e6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	09db      	lsrs	r3, r3, #7
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e7c:	d8f0      	bhi.n	8005e60 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	617a      	str	r2, [r7, #20]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005e8e:	221b      	movs	r2, #27
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	68b8      	ldr	r0, [r7, #8]
 8005e94:	f7fe fc66 	bl	8004764 <_SendPacket>
  RECORD_END();
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f383 8811 	msr	BASEPRI, r3
}
 8005e9e:	bf00      	nop
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	2001a74c 	.word	0x2001a74c
 8005eac:	2001a748 	.word	0x2001a748

08005eb0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005eb0:	b40f      	push	{r0, r1, r2, r3}
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005eb8:	f107 0314 	add.w	r3, r7, #20
 8005ebc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005ebe:	1d3b      	adds	r3, r7, #4
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	6938      	ldr	r0, [r7, #16]
 8005ec6:	f7fe ff5f 	bl	8004d88 <_VPrintTarget>
  va_end(ParamList);
}
 8005eca:	bf00      	nop
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ed4:	b004      	add	sp, #16
 8005ed6:	4770      	bx	lr

08005ed8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08a      	sub	sp, #40	; 0x28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ee0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee4:	f04f 0120 	mov.w	r1, #32
 8005ee8:	f381 8811 	msr	BASEPRI, r1
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	4827      	ldr	r0, [pc, #156]	; (8005f8c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005ef0:	f7fe fb48 	bl	8004584 <_PreparePacket>
 8005ef4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ef6:	2280      	movs	r2, #128	; 0x80
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	6938      	ldr	r0, [r7, #16]
 8005efc:	f7fe fb12 	bl	8004524 <_EncodeStr>
 8005f00:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
 8005f06:	2301      	movs	r3, #1
 8005f08:	623b      	str	r3, [r7, #32]
 8005f0a:	e00b      	b.n	8005f24 <SEGGER_SYSVIEW_Warn+0x4c>
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	1c59      	adds	r1, r3, #1
 8005f14:	6279      	str	r1, [r7, #36]	; 0x24
 8005f16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	09db      	lsrs	r3, r3, #7
 8005f22:	623b      	str	r3, [r7, #32]
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	2b7f      	cmp	r3, #127	; 0x7f
 8005f28:	d8f0      	bhi.n	8005f0c <SEGGER_SYSVIEW_Warn+0x34>
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	627a      	str	r2, [r7, #36]	; 0x24
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	e00b      	b.n	8005f5c <SEGGER_SYSVIEW_Warn+0x84>
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	1c59      	adds	r1, r3, #1
 8005f4c:	61f9      	str	r1, [r7, #28]
 8005f4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	09db      	lsrs	r3, r3, #7
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f60:	d8f0      	bhi.n	8005f44 <SEGGER_SYSVIEW_Warn+0x6c>
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	61fa      	str	r2, [r7, #28]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f72:	221a      	movs	r2, #26
 8005f74:	68f9      	ldr	r1, [r7, #12]
 8005f76:	6938      	ldr	r0, [r7, #16]
 8005f78:	f7fe fbf4 	bl	8004764 <_SendPacket>
  RECORD_END();
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f383 8811 	msr	BASEPRI, r3
}
 8005f82:	bf00      	nop
 8005f84:	3728      	adds	r7, #40	; 0x28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	2001a74c 	.word	0x2001a74c

08005f90 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005f94:	4b13      	ldr	r3, [pc, #76]	; (8005fe4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005f96:	7e1b      	ldrb	r3, [r3, #24]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	440b      	add	r3, r1
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	336c      	adds	r3, #108	; 0x6c
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005fac:	7e1b      	ldrb	r3, [r3, #24]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	490d      	ldr	r1, [pc, #52]	; (8005fe8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	4403      	add	r3, r0
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	440b      	add	r3, r1
 8005fbc:	3370      	adds	r3, #112	; 0x70
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d00b      	beq.n	8005fdc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005fc4:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005fc6:	789b      	ldrb	r3, [r3, #2]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d107      	bne.n	8005fdc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005fd2:	f7fe fae3 	bl	800459c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005fd6:	4b03      	ldr	r3, [pc, #12]	; (8005fe4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005fdc:	4b01      	ldr	r3, [pc, #4]	; (8005fe4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	2001a71c 	.word	0x2001a71c
 8005fe8:	2001925c 	.word	0x2001925c

08005fec <__libc_init_array>:
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	4d0d      	ldr	r5, [pc, #52]	; (8006024 <__libc_init_array+0x38>)
 8005ff0:	4c0d      	ldr	r4, [pc, #52]	; (8006028 <__libc_init_array+0x3c>)
 8005ff2:	1b64      	subs	r4, r4, r5
 8005ff4:	10a4      	asrs	r4, r4, #2
 8005ff6:	2600      	movs	r6, #0
 8005ff8:	42a6      	cmp	r6, r4
 8005ffa:	d109      	bne.n	8006010 <__libc_init_array+0x24>
 8005ffc:	4d0b      	ldr	r5, [pc, #44]	; (800602c <__libc_init_array+0x40>)
 8005ffe:	4c0c      	ldr	r4, [pc, #48]	; (8006030 <__libc_init_array+0x44>)
 8006000:	f000 f83e 	bl	8006080 <_init>
 8006004:	1b64      	subs	r4, r4, r5
 8006006:	10a4      	asrs	r4, r4, #2
 8006008:	2600      	movs	r6, #0
 800600a:	42a6      	cmp	r6, r4
 800600c:	d105      	bne.n	800601a <__libc_init_array+0x2e>
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	f855 3b04 	ldr.w	r3, [r5], #4
 8006014:	4798      	blx	r3
 8006016:	3601      	adds	r6, #1
 8006018:	e7ee      	b.n	8005ff8 <__libc_init_array+0xc>
 800601a:	f855 3b04 	ldr.w	r3, [r5], #4
 800601e:	4798      	blx	r3
 8006020:	3601      	adds	r6, #1
 8006022:	e7f2      	b.n	800600a <__libc_init_array+0x1e>
 8006024:	08006230 	.word	0x08006230
 8006028:	08006230 	.word	0x08006230
 800602c:	08006230 	.word	0x08006230
 8006030:	08006234 	.word	0x08006234

08006034 <memcmp>:
 8006034:	b510      	push	{r4, lr}
 8006036:	3901      	subs	r1, #1
 8006038:	4402      	add	r2, r0
 800603a:	4290      	cmp	r0, r2
 800603c:	d101      	bne.n	8006042 <memcmp+0xe>
 800603e:	2000      	movs	r0, #0
 8006040:	e005      	b.n	800604e <memcmp+0x1a>
 8006042:	7803      	ldrb	r3, [r0, #0]
 8006044:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006048:	42a3      	cmp	r3, r4
 800604a:	d001      	beq.n	8006050 <memcmp+0x1c>
 800604c:	1b18      	subs	r0, r3, r4
 800604e:	bd10      	pop	{r4, pc}
 8006050:	3001      	adds	r0, #1
 8006052:	e7f2      	b.n	800603a <memcmp+0x6>

08006054 <memcpy>:
 8006054:	440a      	add	r2, r1
 8006056:	4291      	cmp	r1, r2
 8006058:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800605c:	d100      	bne.n	8006060 <memcpy+0xc>
 800605e:	4770      	bx	lr
 8006060:	b510      	push	{r4, lr}
 8006062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800606a:	4291      	cmp	r1, r2
 800606c:	d1f9      	bne.n	8006062 <memcpy+0xe>
 800606e:	bd10      	pop	{r4, pc}

08006070 <memset>:
 8006070:	4402      	add	r2, r0
 8006072:	4603      	mov	r3, r0
 8006074:	4293      	cmp	r3, r2
 8006076:	d100      	bne.n	800607a <memset+0xa>
 8006078:	4770      	bx	lr
 800607a:	f803 1b01 	strb.w	r1, [r3], #1
 800607e:	e7f9      	b.n	8006074 <memset+0x4>

08006080 <_init>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	bf00      	nop
 8006084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006086:	bc08      	pop	{r3}
 8006088:	469e      	mov	lr, r3
 800608a:	4770      	bx	lr

0800608c <_fini>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	bf00      	nop
 8006090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006092:	bc08      	pop	{r3}
 8006094:	469e      	mov	lr, r3
 8006096:	4770      	bx	lr
