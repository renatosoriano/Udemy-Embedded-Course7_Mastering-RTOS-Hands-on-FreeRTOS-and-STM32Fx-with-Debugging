
012MutexAPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007718  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b08  08007b08  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007b08  08007b08  00017b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b10  08007b10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b10  08007b10  00017b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b14  08007b14  00017b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000193b8  20000074  08007b8c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001942c  08007b8c  0002942c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001561d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003215  00000000  00000000  000356c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  000388d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  00039be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002559e  00000000  00000000  0003ada0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017887  00000000  00000000  0006033e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e14db  00000000  00000000  00077bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001590a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa4  00000000  00000000  001590f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080078d0 	.word	0x080078d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080078d0 	.word	0x080078d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <printmsg>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void printmsg(char *format,...)
{
 80005c4:	b40f      	push	{r0, r1, r2, r3}
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b096      	sub	sp, #88	; 0x58
 80005ca:	af00      	add	r7, sp, #0

	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80005cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005d0:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 ffc6 	bl	800656c <vsiprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe13 	bl	8000210 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f107 0108 	add.w	r1, r7, #8
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <printmsg+0x48>)
 80005f8:	f002 f8ab 	bl	8002752 <HAL_UART_Transmit>
	va_end(args);

}
 80005fc:	bf00      	nop
 80005fe:	3758      	adds	r7, #88	; 0x58
 8000600:	46bd      	mov	sp, r7
 8000602:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000606:	b004      	add	sp, #16
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000090 	.word	0x20000090

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fbdd 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f849 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f8e7 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000622:	f000 f8bb 	bl	800079c <MX_USART2_UART_Init>

  //SEGGER_UART_init(500000);

  //this is here to collect segger event time stamp
  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <main+0x7c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a18      	ldr	r2, [pc, #96]	; (800068c <main+0x7c>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

  //SEGGER_SYSVIEW_Conf();

  //SEGGER_SYSVIEW_Start();

  sprintf(usr_msg,"Demo of mutual exclusion using Mutex APIs\r\n");
 8000632:	4917      	ldr	r1, [pc, #92]	; (8000690 <main+0x80>)
 8000634:	4817      	ldr	r0, [pc, #92]	; (8000694 <main+0x84>)
 8000636:	f005 ff63 	bl	8006500 <siprintf>
  printmsg(usr_msg);
 800063a:	4816      	ldr	r0, [pc, #88]	; (8000694 <main+0x84>)
 800063c:	f7ff ffc2 	bl	80005c4 <printmsg>

#ifdef USE_MUTEX
    /* Before a semaphore is used it must be explicitly created.  In this example
	a mutex type semaphore is created. */
    xMutex = xSemaphoreCreateMutex();
 8000640:	2001      	movs	r0, #1
 8000642:	f003 fa05 	bl	8003a50 <xQueueCreateMutex>
 8000646:	4603      	mov	r3, r0
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <main+0x88>)
 800064a:	6013      	str	r3, [r2, #0]
#endif

  /* The tasks are going to use a pseudo random delay, seed the random number
	generator. */
  srand( 567 );
 800064c:	f240 2037 	movw	r0, #567	; 0x237
 8000650:	f005 feea 	bl	8006428 <srand>

#ifdef USE_MUTEX
	/* Only create the tasks if the semaphore was created successfully. */
	if( xMutex != NULL )
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <main+0x88>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d015      	beq.n	8000688 <main+0x78>
	{
#endif
		/* Create two instances of the tasks that attempt to write stdout.  The
		string they attempt to write is passed in as the task parameter.  The tasks
		are created at different priorities so some pre-emption will occur. */
		xTaskCreate( prvPrintTask, "Print1", 240, "Task 1 ******************************************\r\n", 1, NULL );
 800065c:	2300      	movs	r3, #0
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	2301      	movs	r3, #1
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	4b0d      	ldr	r3, [pc, #52]	; (800069c <main+0x8c>)
 8000666:	22f0      	movs	r2, #240	; 0xf0
 8000668:	490d      	ldr	r1, [pc, #52]	; (80006a0 <main+0x90>)
 800066a:	480e      	ldr	r0, [pc, #56]	; (80006a4 <main+0x94>)
 800066c:	f003 ff22 	bl	80044b4 <xTaskCreate>
		xTaskCreate( prvPrintTask, "Print2", 240, "Task 2 ------------------------------------------\r\n", 2, NULL );
 8000670:	2300      	movs	r3, #0
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2302      	movs	r3, #2
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <main+0x98>)
 800067a:	22f0      	movs	r2, #240	; 0xf0
 800067c:	490b      	ldr	r1, [pc, #44]	; (80006ac <main+0x9c>)
 800067e:	4809      	ldr	r0, [pc, #36]	; (80006a4 <main+0x94>)
 8000680:	f003 ff18 	bl	80044b4 <xTaskCreate>

	  /* Start the scheduler so our tasks start executing. */
	  vTaskStartScheduler();
 8000684:	f004 f890 	bl	80047a8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000688:	e7fe      	b.n	8000688 <main+0x78>
 800068a:	bf00      	nop
 800068c:	e0001000 	.word	0xe0001000
 8000690:	080078e8 	.word	0x080078e8
 8000694:	200000d4 	.word	0x200000d4
 8000698:	200001d0 	.word	0x200001d0
 800069c:	08007914 	.word	0x08007914
 80006a0:	08007948 	.word	0x08007948
 80006a4:	08000915 	.word	0x08000915
 80006a8:	08007950 	.word	0x08007950
 80006ac:	08007984 	.word	0x08007984

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2234      	movs	r2, #52	; 0x34
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 feaa 	bl	8006418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <SystemClock_Config+0xe4>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <SystemClock_Config+0xe4>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <SystemClock_Config+0xe4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemClock_Config+0xe8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a27      	ldr	r2, [pc, #156]	; (8000798 <SystemClock_Config+0xe8>)
 80006fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <SystemClock_Config+0xe8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800070c:	230a      	movs	r3, #10
 800070e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000728:	2308      	movs	r3, #8
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800072c:	23b4      	movs	r3, #180	; 0xb4
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fa63 	bl	8001c0c <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800074c:	f000 f8f4 	bl	8000938 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000750:	f000 fe90 	bl	8001474 <HAL_PWREx_EnableOverDrive>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800075a:	f000 f8ed 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	2105      	movs	r1, #5
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fec9 	bl	8001514 <HAL_RCC_ClockConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000788:	f000 f8d6 	bl	8000938 <Error_Handler>
  }}
 800078c:	bf00      	nop
 800078e:	3750      	adds	r7, #80	; 0x50
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_USART2_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f001 ff70 	bl	80026b8 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007de:	f000 f8ab 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000090 	.word	0x20000090
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a2c      	ldr	r2, [pc, #176]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <MX_GPIO_Init+0xd0>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	4812      	ldr	r0, [pc, #72]	; (80008c4 <MX_GPIO_Init+0xd4>)
 800087c:	f000 fde0 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000886:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	480c      	ldr	r0, [pc, #48]	; (80008c8 <MX_GPIO_Init+0xd8>)
 8000898:	f000 fc3e 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800089c:	2320      	movs	r3, #32
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_GPIO_Init+0xd4>)
 80008b4:	f000 fc30 	bl	8001118 <HAL_GPIO_Init>

}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	; 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020800 	.word	0x40020800

080008cc <prvNewPrintString>:

/* USER CODE BEGIN 4 */

static void prvNewPrintString( const portCHAR *pcString )
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	available immediately.  The call to xSemaphoreTake() will only return when
	the semaphore has been successfully obtained so there is no need to check the
	return value.  If any other delay period was used then the code must check
	that xSemaphoreTake() returns pdTRUE before accessing the resource (in this
	case standard out. */
	xSemaphoreTake( xMutex, portMAX_DELAY );
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <prvNewPrintString+0x3c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fb57 	bl	8003f90 <xQueueSemaphoreTake>
	{
#endif
		/* The following line will only execute once the semaphore has been
		successfully obtained - so standard out can be accessed freely. */
		sprintf( cBuffer, "%s", pcString );
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	4909      	ldr	r1, [pc, #36]	; (800090c <prvNewPrintString+0x40>)
 80008e6:	480a      	ldr	r0, [pc, #40]	; (8000910 <prvNewPrintString+0x44>)
 80008e8:	f005 fe0a 	bl	8006500 <siprintf>
		printmsg(cBuffer);
 80008ec:	4808      	ldr	r0, [pc, #32]	; (8000910 <prvNewPrintString+0x44>)
 80008ee:	f7ff fe69 	bl	80005c4 <printmsg>
#ifdef USE_MUTEX
	}
	xSemaphoreGive( xMutex );
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <prvNewPrintString+0x3c>)
 80008f4:	6818      	ldr	r0, [r3, #0]
 80008f6:	2300      	movs	r3, #0
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	f003 f8c0 	bl	8003a80 <xQueueGenericSend>
#endif

}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200001d0 	.word	0x200001d0
 800090c:	0800798c 	.word	0x0800798c
 8000910:	200001d4 	.word	0x200001d4

08000914 <prvPrintTask>:

static void prvPrintTask( void *pvParameters )
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	char *pcStringToPrint;

	/* Two instances of this task are created so the string the task will send
	to prvNewPrintString() is passed in the task parameter.  Cast this to the
	required type. */
	pcStringToPrint = ( char * ) pvParameters;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		/* Print out the string using the newly defined function. */
		prvNewPrintString( pcStringToPrint );
 8000920:	68f8      	ldr	r0, [r7, #12]
 8000922:	f7ff ffd3 	bl	80008cc <prvNewPrintString>
		/* Wait a pseudo random time.  Note that rand() is not necessarily
		re-entrant, but in this case it does not really matter as the code does
		not care what value is returned.  In a more secure application a version
		of rand() that is known to be re-entrant should be used - or calls to
		rand() should be protected using a critical section. */
		vTaskDelay( rand() & 0XF );
 8000926:	f005 fdad 	bl	8006484 <rand>
 800092a:	4603      	mov	r3, r0
 800092c:	f003 030f 	and.w	r3, r3, #15
 8000930:	4618      	mov	r0, r3
 8000932:	f003 ff05 	bl	8004740 <vTaskDelay>
		prvNewPrintString( pcStringToPrint );
 8000936:	e7f3      	b.n	8000920 <prvPrintTask+0xc>

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000982:	f005 f971 	bl	8005c68 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <HAL_UART_MspInit+0x94>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d133      	bne.n	8000a1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ee:	230c      	movs	r3, #12
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fe:	2307      	movs	r3, #7
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <HAL_UART_MspInit+0x9c>)
 8000a0a:	f000 fb85 	bl	8001118 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2106      	movs	r1, #6
 8000a12:	2026      	movs	r0, #38	; 0x26
 8000a14:	f000 fac4 	bl	8000fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a18:	2026      	movs	r0, #38	; 0x26
 8000a1a:	f000 fadd 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40004400 	.word	0x40004400
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08e      	sub	sp, #56	; 0x38
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <HAL_InitTick+0xe4>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a32      	ldr	r2, [pc, #200]	; (8000b18 <HAL_InitTick+0xe4>)
 8000a4e:	f043 0310 	orr.w	r3, r3, #16
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <HAL_InitTick+0xe4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f003 0310 	and.w	r3, r3, #16
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a60:	f107 0210 	add.w	r2, r7, #16
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fe6c 	bl	8001748 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a70:	6a3b      	ldr	r3, [r7, #32]
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d103      	bne.n	8000a82 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a7a:	f000 fe3d 	bl	80016f8 <HAL_RCC_GetPCLK1Freq>
 8000a7e:	6378      	str	r0, [r7, #52]	; 0x34
 8000a80:	e004      	b.n	8000a8c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a82:	f000 fe39 	bl	80016f8 <HAL_RCC_GetPCLK1Freq>
 8000a86:	4603      	mov	r3, r0
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <HAL_InitTick+0xe8>)
 8000a90:	fba2 2303 	umull	r2, r3, r2, r3
 8000a94:	0c9b      	lsrs	r3, r3, #18
 8000a96:	3b01      	subs	r3, #1
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <HAL_InitTick+0xec>)
 8000a9c:	4a21      	ldr	r2, [pc, #132]	; (8000b24 <HAL_InitTick+0xf0>)
 8000a9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <HAL_InitTick+0xec>)
 8000aa2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <HAL_InitTick+0xec>)
 8000aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_InitTick+0xec>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_InitTick+0xec>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_InitTick+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ac0:	4817      	ldr	r0, [pc, #92]	; (8000b20 <HAL_InitTick+0xec>)
 8000ac2:	f001 fb41 	bl	8002148 <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d11b      	bne.n	8000b0c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ad4:	4812      	ldr	r0, [pc, #72]	; (8000b20 <HAL_InitTick+0xec>)
 8000ad6:	f001 fb91 	bl	80021fc <HAL_TIM_Base_Start_IT>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d111      	bne.n	8000b0c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ae8:	2036      	movs	r0, #54	; 0x36
 8000aea:	f000 fa75 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d808      	bhi.n	8000b06 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	2036      	movs	r0, #54	; 0x36
 8000afa:	f000 fa51 	bl	8000fa0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_InitTick+0xf4>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	e002      	b.n	8000b0c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3738      	adds	r7, #56	; 0x38
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	431bde83 	.word	0x431bde83
 8000b20:	20000224 	.word	0x20000224
 8000b24:	40001000 	.word	0x40001000
 8000b28:	20000004 	.word	0x20000004

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <USART2_IRQHandler+0x10>)
 8000b5e:	f001 fe8b 	bl	8002878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000090 	.word	0x20000090

08000b6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <TIM6_DAC_IRQHandler+0x10>)
 8000b72:	f001 fbb3 	bl	80022dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000224 	.word	0x20000224

08000b80 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <ITM_SendChar+0x48>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <ITM_SendChar+0x48>)
 8000b90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b94:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <ITM_SendChar+0x4c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a0c      	ldr	r2, [pc, #48]	; (8000bcc <ITM_SendChar+0x4c>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000ba2:	bf00      	nop
 8000ba4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0f8      	beq.n	8000ba4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000bb2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	6013      	str	r3, [r2, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000edfc 	.word	0xe000edfc
 8000bcc:	e0000e00 	.word	0xe0000e00

08000bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
	return 1;
 8000bd4:	2301      	movs	r3, #1
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_kill>:

int _kill(int pid, int sig)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bea:	f005 fbdd 	bl	80063a8 <__errno>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2216      	movs	r2, #22
 8000bf2:	601a      	str	r2, [r3, #0]
	return -1;
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_exit>:

void _exit (int status)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ffe7 	bl	8000be0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c12:	e7fe      	b.n	8000c12 <_exit+0x12>

08000c14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	e00a      	b.n	8000c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c26:	f3af 8000 	nop.w
 8000c2a:	4601      	mov	r1, r0
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	60ba      	str	r2, [r7, #8]
 8000c32:	b2ca      	uxtb	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dbf0      	blt.n	8000c26 <_read+0x12>
	}

return len;
 8000c44:	687b      	ldr	r3, [r7, #4]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	e009      	b.n	8000c74 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	60ba      	str	r2, [r7, #8]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff89 	bl	8000b80 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dbf1      	blt.n	8000c60 <_write+0x12>
	}
	return len;
 8000c7c:	687b      	ldr	r3, [r7, #4]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_close>:

int _close(int file)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cae:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_isatty>:

int _isatty(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf8:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <_sbrk+0x5c>)
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <_sbrk+0x60>)
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <_sbrk+0x64>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <_sbrk+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d20:	f005 fb42 	bl	80063a8 <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20020000 	.word	0x20020000
 8000d50:	00000400 	.word	0x00000400
 8000d54:	2000026c 	.word	0x2000026c
 8000d58:	20019430 	.word	0x20019430

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d86:	490e      	ldr	r1, [pc, #56]	; (8000dc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d88:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d9c:	4c0b      	ldr	r4, [pc, #44]	; (8000dcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000daa:	f7ff ffd7 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f005 fb01 	bl	80063b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fc2d 	bl	8000610 <main>
  bx  lr    
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dc4:	08007b18 	.word	0x08007b18
  ldr r2, =_sbss
 8000dc8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dcc:	2001942c 	.word	0x2001942c

08000dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <HAL_Init+0x40>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_Init+0x40>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_Init+0x40>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f8c4 	bl	8000f8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fe16 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fd9c 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023c00 	.word	0x40023c00

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000270 	.word	0x20000270

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ff4c 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb2:	f7ff ff61 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000fb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	6978      	ldr	r0, [r7, #20]
 8000fbe:	f7ff ffb1 	bl	8000f24 <NVIC_EncodePriority>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff80 	bl	8000ed0 <__NVIC_SetPriority>
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff54 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001000:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001002:	f7ff ff09 	bl	8000e18 <HAL_GetTick>
 8001006:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d008      	beq.n	8001026 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e052      	b.n	80010cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0216 	bic.w	r2, r2, #22
 8001034:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	695a      	ldr	r2, [r3, #20]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001044:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	2b00      	cmp	r3, #0
 800104c:	d103      	bne.n	8001056 <HAL_DMA_Abort+0x62>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 0208 	bic.w	r2, r2, #8
 8001064:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0201 	bic.w	r2, r2, #1
 8001074:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001076:	e013      	b.n	80010a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001078:	f7ff fece 	bl	8000e18 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b05      	cmp	r3, #5
 8001084:	d90c      	bls.n	80010a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2220      	movs	r2, #32
 800108a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2203      	movs	r2, #3
 8001090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e015      	b.n	80010cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1e4      	bne.n	8001078 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b2:	223f      	movs	r2, #63	; 0x3f
 80010b4:	409a      	lsls	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d004      	beq.n	80010f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00c      	b.n	800110c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2205      	movs	r2, #5
 80010f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0201 	bic.w	r2, r2, #1
 8001108:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	e165      	b.n	8001400 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	429a      	cmp	r2, r3
 800114e:	f040 8154 	bne.w	80013fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d005      	beq.n	800116a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001166:	2b02      	cmp	r3, #2
 8001168:	d130      	bne.n	80011cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d017      	beq.n	8001208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	69b9      	ldr	r1, [r7, #24]
 8001258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80ae 	beq.w	80013fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b5d      	ldr	r3, [pc, #372]	; (8001418 <HAL_GPIO_Init+0x300>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a5c      	ldr	r2, [pc, #368]	; (8001418 <HAL_GPIO_Init+0x300>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b5a      	ldr	r3, [pc, #360]	; (8001418 <HAL_GPIO_Init+0x300>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ba:	4a58      	ldr	r2, [pc, #352]	; (800141c <HAL_GPIO_Init+0x304>)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4f      	ldr	r2, [pc, #316]	; (8001420 <HAL_GPIO_Init+0x308>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d025      	beq.n	8001332 <HAL_GPIO_Init+0x21a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4e      	ldr	r2, [pc, #312]	; (8001424 <HAL_GPIO_Init+0x30c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01f      	beq.n	800132e <HAL_GPIO_Init+0x216>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4d      	ldr	r2, [pc, #308]	; (8001428 <HAL_GPIO_Init+0x310>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d019      	beq.n	800132a <HAL_GPIO_Init+0x212>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_GPIO_Init+0x314>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x20e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4b      	ldr	r2, [pc, #300]	; (8001430 <HAL_GPIO_Init+0x318>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x20a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4a      	ldr	r2, [pc, #296]	; (8001434 <HAL_GPIO_Init+0x31c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x206>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a49      	ldr	r2, [pc, #292]	; (8001438 <HAL_GPIO_Init+0x320>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x202>
 8001316:	2306      	movs	r3, #6
 8001318:	e00c      	b.n	8001334 <HAL_GPIO_Init+0x21c>
 800131a:	2307      	movs	r3, #7
 800131c:	e00a      	b.n	8001334 <HAL_GPIO_Init+0x21c>
 800131e:	2305      	movs	r3, #5
 8001320:	e008      	b.n	8001334 <HAL_GPIO_Init+0x21c>
 8001322:	2304      	movs	r3, #4
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x21c>
 8001326:	2303      	movs	r3, #3
 8001328:	e004      	b.n	8001334 <HAL_GPIO_Init+0x21c>
 800132a:	2302      	movs	r3, #2
 800132c:	e002      	b.n	8001334 <HAL_GPIO_Init+0x21c>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_GPIO_Init+0x21c>
 8001332:	2300      	movs	r3, #0
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	f002 0203 	and.w	r2, r2, #3
 800133a:	0092      	lsls	r2, r2, #2
 800133c:	4093      	lsls	r3, r2
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001344:	4935      	ldr	r1, [pc, #212]	; (800141c <HAL_GPIO_Init+0x304>)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001352:	4b3a      	ldr	r3, [pc, #232]	; (800143c <HAL_GPIO_Init+0x324>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001376:	4a31      	ldr	r2, [pc, #196]	; (800143c <HAL_GPIO_Init+0x324>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137c:	4b2f      	ldr	r3, [pc, #188]	; (800143c <HAL_GPIO_Init+0x324>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a0:	4a26      	ldr	r2, [pc, #152]	; (800143c <HAL_GPIO_Init+0x324>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <HAL_GPIO_Init+0x324>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ca:	4a1c      	ldr	r2, [pc, #112]	; (800143c <HAL_GPIO_Init+0x324>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_GPIO_Init+0x324>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <HAL_GPIO_Init+0x324>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3301      	adds	r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	2b0f      	cmp	r3, #15
 8001404:	f67f ae96 	bls.w	8001134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40013800 	.word	0x40013800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020400 	.word	0x40020400
 8001428:	40020800 	.word	0x40020800
 800142c:	40020c00 	.word	0x40020c00
 8001430:	40021000 	.word	0x40021000
 8001434:	40021400 	.word	0x40021400
 8001438:	40021800 	.word	0x40021800
 800143c:	40013c00 	.word	0x40013c00

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800145c:	e003      	b.n	8001466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	619a      	str	r2, [r3, #24]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_PWREx_EnableOverDrive+0x90>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a1f      	ldr	r2, [pc, #124]	; (8001504 <HAL_PWREx_EnableOverDrive+0x90>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_PWREx_EnableOverDrive+0x90>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_PWREx_EnableOverDrive+0x94>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a0:	f7ff fcba 	bl	8000e18 <HAL_GetTick>
 80014a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014a6:	e009      	b.n	80014bc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014a8:	f7ff fcb6 	bl	8000e18 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014b6:	d901      	bls.n	80014bc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e01f      	b.n	80014fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_PWREx_EnableOverDrive+0x98>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c8:	d1ee      	bne.n	80014a8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d0:	f7ff fca2 	bl	8000e18 <HAL_GetTick>
 80014d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014d6:	e009      	b.n	80014ec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014d8:	f7ff fc9e 	bl	8000e18 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014e6:	d901      	bls.n	80014ec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e007      	b.n	80014fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_PWREx_EnableOverDrive+0x98>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014f8:	d1ee      	bne.n	80014d8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	420e0040 	.word	0x420e0040
 800150c:	40007000 	.word	0x40007000
 8001510:	420e0044 	.word	0x420e0044

08001514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0cc      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001528:	4b68      	ldr	r3, [pc, #416]	; (80016cc <HAL_RCC_ClockConfig+0x1b8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d90c      	bls.n	8001550 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b65      	ldr	r3, [pc, #404]	; (80016cc <HAL_RCC_ClockConfig+0x1b8>)
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b63      	ldr	r3, [pc, #396]	; (80016cc <HAL_RCC_ClockConfig+0x1b8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0b8      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d020      	beq.n	800159e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001568:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001572:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001580:	4b53      	ldr	r3, [pc, #332]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800158a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800158c:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	494d      	ldr	r1, [pc, #308]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	4313      	orrs	r3, r2
 800159c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d044      	beq.n	8001634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d119      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e07f      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d003      	beq.n	80015d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d109      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e06f      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e067      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f2:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f023 0203 	bic.w	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4934      	ldr	r1, [pc, #208]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	4313      	orrs	r3, r2
 8001602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001604:	f7ff fc08 	bl	8000e18 <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	e00a      	b.n	8001622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160c:	f7ff fc04 	bl	8000e18 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	; 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e04f      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 020c 	and.w	r2, r3, #12
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	429a      	cmp	r2, r3
 8001632:	d1eb      	bne.n	800160c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <HAL_RCC_ClockConfig+0x1b8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d20c      	bcs.n	800165c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_RCC_ClockConfig+0x1b8>)
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_RCC_ClockConfig+0x1b8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e032      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4916      	ldr	r1, [pc, #88]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	d009      	beq.n	800169a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	490e      	ldr	r1, [pc, #56]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	4313      	orrs	r3, r2
 8001698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800169a:	f000 f887 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 800169e:	4602      	mov	r2, r0
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	490a      	ldr	r1, [pc, #40]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	5ccb      	ldrb	r3, [r1, r3]
 80016ae:	fa22 f303 	lsr.w	r3, r2, r3
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_RCC_ClockConfig+0x1c8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f9ba 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023c00 	.word	0x40023c00
 80016d0:	40023800 	.word	0x40023800
 80016d4:	080079a8 	.word	0x080079a8
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000004 	.word	0x20000004

080016e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000000 	.word	0x20000000

080016f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016fc:	f7ff fff0 	bl	80016e0 <HAL_RCC_GetHCLKFreq>
 8001700:	4602      	mov	r2, r0
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	0a9b      	lsrs	r3, r3, #10
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	4903      	ldr	r1, [pc, #12]	; (800171c <HAL_RCC_GetPCLK1Freq+0x24>)
 800170e:	5ccb      	ldrb	r3, [r1, r3]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	080079b8 	.word	0x080079b8

08001720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001724:	f7ff ffdc 	bl	80016e0 <HAL_RCC_GetHCLKFreq>
 8001728:	4602      	mov	r2, r0
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	0b5b      	lsrs	r3, r3, #13
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	4903      	ldr	r1, [pc, #12]	; (8001744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001736:	5ccb      	ldrb	r3, [r1, r3]
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800173c:	4618      	mov	r0, r3
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40023800 	.word	0x40023800
 8001744:	080079b8 	.word	0x080079b8

08001748 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	220f      	movs	r2, #15
 8001756:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_RCC_GetClockConfig+0x5c>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 0203 	and.w	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_RCC_GetClockConfig+0x5c>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <HAL_RCC_GetClockConfig+0x60>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 020f 	and.w	r2, r3, #15
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	601a      	str	r2, [r3, #0]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40023c00 	.word	0x40023c00

080017ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b0:	b0ae      	sub	sp, #184	; 0xb8
 80017b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d2:	4bcb      	ldr	r3, [pc, #812]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	f200 8206 	bhi.w	8001bec <HAL_RCC_GetSysClockFreq+0x440>
 80017e0:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e6:	bf00      	nop
 80017e8:	0800181d 	.word	0x0800181d
 80017ec:	08001bed 	.word	0x08001bed
 80017f0:	08001bed 	.word	0x08001bed
 80017f4:	08001bed 	.word	0x08001bed
 80017f8:	08001825 	.word	0x08001825
 80017fc:	08001bed 	.word	0x08001bed
 8001800:	08001bed 	.word	0x08001bed
 8001804:	08001bed 	.word	0x08001bed
 8001808:	0800182d 	.word	0x0800182d
 800180c:	08001bed 	.word	0x08001bed
 8001810:	08001bed 	.word	0x08001bed
 8001814:	08001bed 	.word	0x08001bed
 8001818:	08001a1d 	.word	0x08001a1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800181c:	4bb9      	ldr	r3, [pc, #740]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x358>)
 800181e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001822:	e1e7      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001824:	4bb8      	ldr	r3, [pc, #736]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800182a:	e1e3      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800182c:	4bb4      	ldr	r3, [pc, #720]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001838:	4bb1      	ldr	r3, [pc, #708]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d071      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001844:	4bae      	ldr	r3, [pc, #696]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	2200      	movs	r2, #0
 800184c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001850:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800185c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800186a:	4622      	mov	r2, r4
 800186c:	462b      	mov	r3, r5
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	0159      	lsls	r1, r3, #5
 8001878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187c:	0150      	lsls	r0, r2, #5
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4621      	mov	r1, r4
 8001884:	1a51      	subs	r1, r2, r1
 8001886:	6439      	str	r1, [r7, #64]	; 0x40
 8001888:	4629      	mov	r1, r5
 800188a:	eb63 0301 	sbc.w	r3, r3, r1
 800188e:	647b      	str	r3, [r7, #68]	; 0x44
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800189c:	4649      	mov	r1, r9
 800189e:	018b      	lsls	r3, r1, #6
 80018a0:	4641      	mov	r1, r8
 80018a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a6:	4641      	mov	r1, r8
 80018a8:	018a      	lsls	r2, r1, #6
 80018aa:	4641      	mov	r1, r8
 80018ac:	1a51      	subs	r1, r2, r1
 80018ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80018b0:	4649      	mov	r1, r9
 80018b2:	eb63 0301 	sbc.w	r3, r3, r1
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80018c4:	4649      	mov	r1, r9
 80018c6:	00cb      	lsls	r3, r1, #3
 80018c8:	4641      	mov	r1, r8
 80018ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018ce:	4641      	mov	r1, r8
 80018d0:	00ca      	lsls	r2, r1, #3
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	4622      	mov	r2, r4
 80018da:	189b      	adds	r3, r3, r2
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
 80018de:	462b      	mov	r3, r5
 80018e0:	460a      	mov	r2, r1
 80018e2:	eb42 0303 	adc.w	r3, r2, r3
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018f4:	4629      	mov	r1, r5
 80018f6:	024b      	lsls	r3, r1, #9
 80018f8:	4621      	mov	r1, r4
 80018fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018fe:	4621      	mov	r1, r4
 8001900:	024a      	lsls	r2, r1, #9
 8001902:	4610      	mov	r0, r2
 8001904:	4619      	mov	r1, r3
 8001906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800190a:	2200      	movs	r2, #0
 800190c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001910:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001914:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001918:	f7fe fcd2 	bl	80002c0 <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4613      	mov	r3, r2
 8001922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001926:	e067      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001928:	4b75      	ldr	r3, [pc, #468]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	2200      	movs	r2, #0
 8001930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001934:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800193c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001940:	67bb      	str	r3, [r7, #120]	; 0x78
 8001942:	2300      	movs	r3, #0
 8001944:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001946:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800194a:	4622      	mov	r2, r4
 800194c:	462b      	mov	r3, r5
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	0159      	lsls	r1, r3, #5
 8001958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195c:	0150      	lsls	r0, r2, #5
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4621      	mov	r1, r4
 8001964:	1a51      	subs	r1, r2, r1
 8001966:	62b9      	str	r1, [r7, #40]	; 0x28
 8001968:	4629      	mov	r1, r5
 800196a:	eb63 0301 	sbc.w	r3, r3, r1
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800197c:	4649      	mov	r1, r9
 800197e:	018b      	lsls	r3, r1, #6
 8001980:	4641      	mov	r1, r8
 8001982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001986:	4641      	mov	r1, r8
 8001988:	018a      	lsls	r2, r1, #6
 800198a:	4641      	mov	r1, r8
 800198c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001990:	4649      	mov	r1, r9
 8001992:	eb63 0b01 	sbc.w	fp, r3, r1
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019aa:	4692      	mov	sl, r2
 80019ac:	469b      	mov	fp, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	eb1a 0303 	adds.w	r3, sl, r3
 80019b4:	623b      	str	r3, [r7, #32]
 80019b6:	462b      	mov	r3, r5
 80019b8:	eb4b 0303 	adc.w	r3, fp, r3
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019ca:	4629      	mov	r1, r5
 80019cc:	028b      	lsls	r3, r1, #10
 80019ce:	4621      	mov	r1, r4
 80019d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019d4:	4621      	mov	r1, r4
 80019d6:	028a      	lsls	r2, r1, #10
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019e0:	2200      	movs	r2, #0
 80019e2:	673b      	str	r3, [r7, #112]	; 0x70
 80019e4:	677a      	str	r2, [r7, #116]	; 0x74
 80019e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80019ea:	f7fe fc69 	bl	80002c0 <__aeabi_uldivmod>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4613      	mov	r3, r2
 80019f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019f8:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	0c1b      	lsrs	r3, r3, #16
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	3301      	adds	r3, #1
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a1a:	e0eb      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a1c:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a28:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d06b      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a34:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	099b      	lsrs	r3, r3, #6
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a46:	663b      	str	r3, [r7, #96]	; 0x60
 8001a48:	2300      	movs	r3, #0
 8001a4a:	667b      	str	r3, [r7, #100]	; 0x64
 8001a4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a50:	4622      	mov	r2, r4
 8001a52:	462b      	mov	r3, r5
 8001a54:	f04f 0000 	mov.w	r0, #0
 8001a58:	f04f 0100 	mov.w	r1, #0
 8001a5c:	0159      	lsls	r1, r3, #5
 8001a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a62:	0150      	lsls	r0, r2, #5
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4621      	mov	r1, r4
 8001a6a:	1a51      	subs	r1, r2, r1
 8001a6c:	61b9      	str	r1, [r7, #24]
 8001a6e:	4629      	mov	r1, r5
 8001a70:	eb63 0301 	sbc.w	r3, r3, r1
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a82:	4659      	mov	r1, fp
 8001a84:	018b      	lsls	r3, r1, #6
 8001a86:	4651      	mov	r1, sl
 8001a88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a8c:	4651      	mov	r1, sl
 8001a8e:	018a      	lsls	r2, r1, #6
 8001a90:	4651      	mov	r1, sl
 8001a92:	ebb2 0801 	subs.w	r8, r2, r1
 8001a96:	4659      	mov	r1, fp
 8001a98:	eb63 0901 	sbc.w	r9, r3, r1
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ab0:	4690      	mov	r8, r2
 8001ab2:	4699      	mov	r9, r3
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	eb18 0303 	adds.w	r3, r8, r3
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	462b      	mov	r3, r5
 8001abe:	eb49 0303 	adc.w	r3, r9, r3
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	024b      	lsls	r3, r1, #9
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ada:	4621      	mov	r1, r4
 8001adc:	024a      	lsls	r2, r1, #9
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001aea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001aec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001af0:	f7fe fbe6 	bl	80002c0 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001afe:	e065      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x420>
 8001b00:	40023800 	.word	0x40023800
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0c:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	2200      	movs	r2, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	4611      	mov	r1, r2
 8001b18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b1c:	653b      	str	r3, [r7, #80]	; 0x50
 8001b1e:	2300      	movs	r3, #0
 8001b20:	657b      	str	r3, [r7, #84]	; 0x54
 8001b22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b26:	4642      	mov	r2, r8
 8001b28:	464b      	mov	r3, r9
 8001b2a:	f04f 0000 	mov.w	r0, #0
 8001b2e:	f04f 0100 	mov.w	r1, #0
 8001b32:	0159      	lsls	r1, r3, #5
 8001b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b38:	0150      	lsls	r0, r2, #5
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4641      	mov	r1, r8
 8001b40:	1a51      	subs	r1, r2, r1
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	4649      	mov	r1, r9
 8001b46:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b58:	4659      	mov	r1, fp
 8001b5a:	018b      	lsls	r3, r1, #6
 8001b5c:	4651      	mov	r1, sl
 8001b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b62:	4651      	mov	r1, sl
 8001b64:	018a      	lsls	r2, r1, #6
 8001b66:	4651      	mov	r1, sl
 8001b68:	1a54      	subs	r4, r2, r1
 8001b6a:	4659      	mov	r1, fp
 8001b6c:	eb63 0501 	sbc.w	r5, r3, r1
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	00eb      	lsls	r3, r5, #3
 8001b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b7e:	00e2      	lsls	r2, r4, #3
 8001b80:	4614      	mov	r4, r2
 8001b82:	461d      	mov	r5, r3
 8001b84:	4643      	mov	r3, r8
 8001b86:	18e3      	adds	r3, r4, r3
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	464b      	mov	r3, r9
 8001b8c:	eb45 0303 	adc.w	r3, r5, r3
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	028b      	lsls	r3, r1, #10
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba8:	4621      	mov	r1, r4
 8001baa:	028a      	lsls	r2, r1, #10
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bb8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001bba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bbe:	f7fe fb7f 	bl	80002c0 <__aeabi_uldivmod>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	0f1b      	lsrs	r3, r3, #28
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bea:	e003      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	37b8      	adds	r7, #184	; 0xb8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	00f42400 	.word	0x00f42400

08001c0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e28d      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8083 	beq.w	8001d32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c2c:	4b94      	ldr	r3, [pc, #592]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d019      	beq.n	8001c6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c38:	4b91      	ldr	r3, [pc, #580]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c44:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c50:	d00c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d112      	bne.n	8001c84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5e:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c6a:	d10b      	bne.n	8001c84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	4b84      	ldr	r3, [pc, #528]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d05b      	beq.n	8001d30 <HAL_RCC_OscConfig+0x124>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d157      	bne.n	8001d30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e25a      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCC_OscConfig+0x90>
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7b      	ldr	r2, [pc, #492]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xcc>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xb4>
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a75      	ldr	r2, [pc, #468]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b73      	ldr	r3, [pc, #460]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a72      	ldr	r2, [pc, #456]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xcc>
 8001cc0:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6e      	ldr	r2, [pc, #440]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b6c      	ldr	r3, [pc, #432]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a6b      	ldr	r2, [pc, #428]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f89a 	bl	8000e18 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f896 	bl	8000e18 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e21f      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xdc>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff f886 	bl	8000e18 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff f882 	bl	8000e18 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e20b      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b57      	ldr	r3, [pc, #348]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x104>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d06f      	beq.n	8001e1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d3e:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d017      	beq.n	8001d7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d4a:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d56:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d62:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d11c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6e:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x186>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1d3      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4937      	ldr	r1, [pc, #220]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	e03a      	b.n	8001e1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db0:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HAL_RCC_OscConfig+0x278>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff f82f 	bl	8000e18 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff f82b 	bl	8000e18 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e1b4      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4925      	ldr	r1, [pc, #148]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
 8001df0:	e015      	b.n	8001e1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_OscConfig+0x278>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff f80e 	bl	8000e18 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff f80a 	bl	8000e18 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e193      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d036      	beq.n	8001e98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d016      	beq.n	8001e60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e38:	f7fe ffee 	bl	8000e18 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e40:	f7fe ffea 	bl	8000e18 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e173      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x234>
 8001e5e:	e01b      	b.n	8001e98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e66:	f7fe ffd7 	bl	8000e18 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6c:	e00e      	b.n	8001e8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7fe ffd3 	bl	8000e18 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d907      	bls.n	8001e8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e15c      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	42470000 	.word	0x42470000
 8001e88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	4b8a      	ldr	r3, [pc, #552]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ea      	bne.n	8001e6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 8097 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eaa:	4b83      	ldr	r3, [pc, #524]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b7f      	ldr	r3, [pc, #508]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a7e      	ldr	r2, [pc, #504]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b7c      	ldr	r3, [pc, #496]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	4b79      	ldr	r3, [pc, #484]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d118      	bne.n	8001f14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee2:	4b76      	ldr	r3, [pc, #472]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a75      	ldr	r2, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eee:	f7fe ff93 	bl	8000e18 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef6:	f7fe ff8f 	bl	8000e18 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e118      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x31e>
 8001f1c:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a65      	ldr	r2, [pc, #404]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x358>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x340>
 8001f32:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	4a60      	ldr	r2, [pc, #384]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3e:	4b5e      	ldr	r3, [pc, #376]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	4a5d      	ldr	r2, [pc, #372]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0x358>
 8001f4c:	4b5a      	ldr	r3, [pc, #360]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a59      	ldr	r2, [pc, #356]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	4a56      	ldr	r2, [pc, #344]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f5e:	f023 0304 	bic.w	r3, r3, #4
 8001f62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d015      	beq.n	8001f98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7fe ff54 	bl	8000e18 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7fe ff50 	bl	8000e18 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e0d7      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8a:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0ee      	beq.n	8001f74 <HAL_RCC_OscConfig+0x368>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7fe ff3e 	bl	8000e18 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7fe ff3a 	bl	8000e18 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0c1      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb6:	4b40      	ldr	r3, [pc, #256]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ee      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	4a3a      	ldr	r2, [pc, #232]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80ad 	beq.w	8002138 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d060      	beq.n	80020ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d145      	bne.n	800207e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff2:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <HAL_RCC_OscConfig+0x4b4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7fe ff0e 	bl	8000e18 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002000:	f7fe ff0a 	bl	8000e18 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e093      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	019b      	lsls	r3, r3, #6
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	085b      	lsrs	r3, r3, #1
 8002036:	3b01      	subs	r3, #1
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	071b      	lsls	r3, r3, #28
 800204a:	491b      	ldr	r1, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x4b4>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7fe fedf 	bl	8000e18 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205e:	f7fe fedb 	bl	8000e18 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e064      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x452>
 800207c:	e05c      	b.n	8002138 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_RCC_OscConfig+0x4b4>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe fec8 	bl	8000e18 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fec4 	bl	8000e18 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e04d      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x480>
 80020aa:	e045      	b.n	8002138 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e040      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000
 80020c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_RCC_OscConfig+0x538>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d030      	beq.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d129      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d122      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d119      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	3b01      	subs	r3, #1
 800210e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d10f      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d107      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e041      	b.n	80021de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f839 	bl	80021e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3304      	adds	r3, #4
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f000 f9e2 	bl	8002550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d001      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e04e      	b.n	80022b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a23      	ldr	r2, [pc, #140]	; (80022c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d022      	beq.n	800227c <HAL_TIM_Base_Start_IT+0x80>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223e:	d01d      	beq.n	800227c <HAL_TIM_Base_Start_IT+0x80>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1f      	ldr	r2, [pc, #124]	; (80022c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d018      	beq.n	800227c <HAL_TIM_Base_Start_IT+0x80>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1e      	ldr	r2, [pc, #120]	; (80022c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d013      	beq.n	800227c <HAL_TIM_Base_Start_IT+0x80>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <HAL_TIM_Base_Start_IT+0xd0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00e      	beq.n	800227c <HAL_TIM_Base_Start_IT+0x80>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d009      	beq.n	800227c <HAL_TIM_Base_Start_IT+0x80>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d004      	beq.n	800227c <HAL_TIM_Base_Start_IT+0x80>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d111      	bne.n	80022a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b06      	cmp	r3, #6
 800228c:	d010      	beq.n	80022b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229e:	e007      	b.n	80022b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40010000 	.word	0x40010000
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40000800 	.word	0x40000800
 80022cc:	40000c00 	.word	0x40000c00
 80022d0:	40010400 	.word	0x40010400
 80022d4:	40014000 	.word	0x40014000
 80022d8:	40001800 	.word	0x40001800

080022dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d122      	bne.n	8002338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d11b      	bne.n	8002338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0202 	mvn.w	r2, #2
 8002308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8f8 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 8002324:	e005      	b.n	8002332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8ea 	bl	8002500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f8fb 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b04      	cmp	r3, #4
 8002344:	d122      	bne.n	800238c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b04      	cmp	r3, #4
 8002352:	d11b      	bne.n	800238c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0204 	mvn.w	r2, #4
 800235c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2202      	movs	r2, #2
 8002362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f8ce 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 8002378:	e005      	b.n	8002386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8c0 	bl	8002500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f8d1 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b08      	cmp	r3, #8
 8002398:	d122      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d11b      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0208 	mvn.w	r2, #8
 80023b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2204      	movs	r2, #4
 80023b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8a4 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 80023cc:	e005      	b.n	80023da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f896 	bl	8002500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f8a7 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d122      	bne.n	8002434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b10      	cmp	r3, #16
 80023fa:	d11b      	bne.n	8002434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0210 	mvn.w	r2, #16
 8002404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2208      	movs	r2, #8
 800240a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f87a 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 8002420:	e005      	b.n	800242e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f86c 	bl	8002500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f87d 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d10e      	bne.n	8002460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b01      	cmp	r3, #1
 800244e:	d107      	bne.n	8002460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0201 	mvn.w	r2, #1
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f846 	bl	80024ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246a:	2b80      	cmp	r3, #128	; 0x80
 800246c:	d10e      	bne.n	800248c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d107      	bne.n	800248c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f90c 	bl	80026a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002496:	2b40      	cmp	r3, #64	; 0x40
 8002498:	d10e      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a4:	2b40      	cmp	r3, #64	; 0x40
 80024a6:	d107      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f842 	bl	800253c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	d10e      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d107      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0220 	mvn.w	r2, #32
 80024dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8d6 	bl	8002690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a40      	ldr	r2, [pc, #256]	; (8002664 <TIM_Base_SetConfig+0x114>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d013      	beq.n	8002590 <TIM_Base_SetConfig+0x40>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256e:	d00f      	beq.n	8002590 <TIM_Base_SetConfig+0x40>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a3d      	ldr	r2, [pc, #244]	; (8002668 <TIM_Base_SetConfig+0x118>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00b      	beq.n	8002590 <TIM_Base_SetConfig+0x40>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3c      	ldr	r2, [pc, #240]	; (800266c <TIM_Base_SetConfig+0x11c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d007      	beq.n	8002590 <TIM_Base_SetConfig+0x40>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a3b      	ldr	r2, [pc, #236]	; (8002670 <TIM_Base_SetConfig+0x120>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d003      	beq.n	8002590 <TIM_Base_SetConfig+0x40>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a3a      	ldr	r2, [pc, #232]	; (8002674 <TIM_Base_SetConfig+0x124>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d108      	bne.n	80025a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a2f      	ldr	r2, [pc, #188]	; (8002664 <TIM_Base_SetConfig+0x114>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d02b      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b0:	d027      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a2c      	ldr	r2, [pc, #176]	; (8002668 <TIM_Base_SetConfig+0x118>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d023      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a2b      	ldr	r2, [pc, #172]	; (800266c <TIM_Base_SetConfig+0x11c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01f      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a2a      	ldr	r2, [pc, #168]	; (8002670 <TIM_Base_SetConfig+0x120>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01b      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a29      	ldr	r2, [pc, #164]	; (8002674 <TIM_Base_SetConfig+0x124>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d017      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a28      	ldr	r2, [pc, #160]	; (8002678 <TIM_Base_SetConfig+0x128>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a27      	ldr	r2, [pc, #156]	; (800267c <TIM_Base_SetConfig+0x12c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00f      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a26      	ldr	r2, [pc, #152]	; (8002680 <TIM_Base_SetConfig+0x130>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00b      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a25      	ldr	r2, [pc, #148]	; (8002684 <TIM_Base_SetConfig+0x134>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a24      	ldr	r2, [pc, #144]	; (8002688 <TIM_Base_SetConfig+0x138>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d003      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a23      	ldr	r2, [pc, #140]	; (800268c <TIM_Base_SetConfig+0x13c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d108      	bne.n	8002614 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <TIM_Base_SetConfig+0x114>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d003      	beq.n	8002648 <TIM_Base_SetConfig+0xf8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a0c      	ldr	r2, [pc, #48]	; (8002674 <TIM_Base_SetConfig+0x124>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d103      	bne.n	8002650 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	615a      	str	r2, [r3, #20]
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40010000 	.word	0x40010000
 8002668:	40000400 	.word	0x40000400
 800266c:	40000800 	.word	0x40000800
 8002670:	40000c00 	.word	0x40000c00
 8002674:	40010400 	.word	0x40010400
 8002678:	40014000 	.word	0x40014000
 800267c:	40014400 	.word	0x40014400
 8002680:	40014800 	.word	0x40014800
 8002684:	40001800 	.word	0x40001800
 8002688:	40001c00 	.word	0x40001c00
 800268c:	40002000 	.word	0x40002000

08002690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e03f      	b.n	800274a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe f958 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2224      	movs	r2, #36	; 0x24
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fd7b 	bl	80031f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002710:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002720:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002730:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b08a      	sub	sp, #40	; 0x28
 8002756:	af02      	add	r7, sp, #8
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	4613      	mov	r3, r2
 8002760:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b20      	cmp	r3, #32
 8002770:	d17c      	bne.n	800286c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_UART_Transmit+0x2c>
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e075      	b.n	800286e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_UART_Transmit+0x3e>
 800278c:	2302      	movs	r3, #2
 800278e:	e06e      	b.n	800286e <HAL_UART_Transmit+0x11c>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2221      	movs	r2, #33	; 0x21
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027a6:	f7fe fb37 	bl	8000e18 <HAL_GetTick>
 80027aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	88fa      	ldrh	r2, [r7, #6]
 80027b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	88fa      	ldrh	r2, [r7, #6]
 80027b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c0:	d108      	bne.n	80027d4 <HAL_UART_Transmit+0x82>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d104      	bne.n	80027d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	e003      	b.n	80027dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027e4:	e02a      	b.n	800283c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	2180      	movs	r1, #128	; 0x80
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 faf9 	bl	8002de8 <UART_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e036      	b.n	800286e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10b      	bne.n	800281e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002814:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	3302      	adds	r3, #2
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	e007      	b.n	800282e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	781a      	ldrb	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	3301      	adds	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1cf      	bne.n	80027e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2200      	movs	r2, #0
 800284e:	2140      	movs	r1, #64	; 0x40
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fac9 	bl	8002de8 <UART_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e006      	b.n	800286e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800286c:	2302      	movs	r3, #2
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b0ba      	sub	sp, #232	; 0xe8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80028b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10f      	bne.n	80028de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_UART_IRQHandler+0x66>
 80028ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fbd3 	bl	8003082 <UART_Receive_IT>
      return;
 80028dc:	e256      	b.n	8002d8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 80de 	beq.w	8002aa4 <HAL_UART_IRQHandler+0x22c>
 80028e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d106      	bne.n	8002902 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80d1 	beq.w	8002aa4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_UART_IRQHandler+0xae>
 800290e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_UART_IRQHandler+0xd2>
 8002932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f043 0202 	orr.w	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800294a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <HAL_UART_IRQHandler+0xf6>
 8002956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f043 0204 	orr.w	r2, r3, #4
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800296e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d011      	beq.n	800299e <HAL_UART_IRQHandler+0x126>
 800297a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b00      	cmp	r3, #0
 8002984:	d105      	bne.n	8002992 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0208 	orr.w	r2, r3, #8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 81ed 	beq.w	8002d82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_UART_IRQHandler+0x14e>
 80029b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fb5e 	bl	8003082 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	2b40      	cmp	r3, #64	; 0x40
 80029d2:	bf0c      	ite	eq
 80029d4:	2301      	moveq	r3, #1
 80029d6:	2300      	movne	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d103      	bne.n	80029f2 <HAL_UART_IRQHandler+0x17a>
 80029ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d04f      	beq.n	8002a92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fa66 	bl	8002ec4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b40      	cmp	r3, #64	; 0x40
 8002a04:	d141      	bne.n	8002a8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a14:	e853 3f00 	ldrex	r3, [r3]
 8002a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3314      	adds	r3, #20
 8002a2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a42:	e841 2300 	strex	r3, r2, [r1]
 8002a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1d9      	bne.n	8002a06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d013      	beq.n	8002a82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	4a7d      	ldr	r2, [pc, #500]	; (8002c54 <HAL_UART_IRQHandler+0x3dc>)
 8002a60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fb34 	bl	80010d4 <HAL_DMA_Abort_IT>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d016      	beq.n	8002aa0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a80:	e00e      	b.n	8002aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f99a 	bl	8002dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a88:	e00a      	b.n	8002aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f996 	bl	8002dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a90:	e006      	b.n	8002aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f992 	bl	8002dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a9e:	e170      	b.n	8002d82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa0:	bf00      	nop
    return;
 8002aa2:	e16e      	b.n	8002d82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	f040 814a 	bne.w	8002d42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8143 	beq.w	8002d42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 813c 	beq.w	8002d42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	f040 80b4 	bne.w	8002c58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002afc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 8140 	beq.w	8002d86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	f080 8139 	bcs.w	8002d86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b26:	f000 8088 	beq.w	8002c3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	330c      	adds	r3, #12
 8002b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b38:	e853 3f00 	ldrex	r3, [r3]
 8002b3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	330c      	adds	r3, #12
 8002b52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b66:	e841 2300 	strex	r3, r2, [r1]
 8002b6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1d9      	bne.n	8002b2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3314      	adds	r3, #20
 8002b7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b80:	e853 3f00 	ldrex	r3, [r3]
 8002b84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3314      	adds	r3, #20
 8002b96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ba2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ba6:	e841 2300 	strex	r3, r2, [r1]
 8002baa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1e1      	bne.n	8002b76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3314      	adds	r3, #20
 8002bb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bbc:	e853 3f00 	ldrex	r3, [r3]
 8002bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3314      	adds	r3, #20
 8002bd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002bd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bde:	e841 2300 	strex	r3, r2, [r1]
 8002be2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1e3      	bne.n	8002bb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c02:	e853 3f00 	ldrex	r3, [r3]
 8002c06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0a:	f023 0310 	bic.w	r3, r3, #16
 8002c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	330c      	adds	r3, #12
 8002c18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c24:	e841 2300 	strex	r3, r2, [r1]
 8002c28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e3      	bne.n	8002bf8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe f9dd 	bl	8000ff4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	4619      	mov	r1, r3
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8c0 	bl	8002dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c50:	e099      	b.n	8002d86 <HAL_UART_IRQHandler+0x50e>
 8002c52:	bf00      	nop
 8002c54:	08002f8b 	.word	0x08002f8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 808b 	beq.w	8002d8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002c74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 8086 	beq.w	8002d8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	330c      	adds	r3, #12
 8002c84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ca2:	647a      	str	r2, [r7, #68]	; 0x44
 8002ca4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ca8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002caa:	e841 2300 	strex	r3, r2, [r1]
 8002cae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1e3      	bne.n	8002c7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3314      	adds	r3, #20
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	e853 3f00 	ldrex	r3, [r3]
 8002cc4:	623b      	str	r3, [r7, #32]
   return(result);
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3314      	adds	r3, #20
 8002cd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cda:	633a      	str	r2, [r7, #48]	; 0x30
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ce2:	e841 2300 	strex	r3, r2, [r1]
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1e3      	bne.n	8002cb6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	330c      	adds	r3, #12
 8002d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0310 	bic.w	r3, r3, #16
 8002d12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d20:	61fa      	str	r2, [r7, #28]
 8002d22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d24:	69b9      	ldr	r1, [r7, #24]
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	e841 2300 	strex	r3, r2, [r1]
 8002d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1e3      	bne.n	8002cfc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d38:	4619      	mov	r1, r3
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f848 	bl	8002dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d40:	e023      	b.n	8002d8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <HAL_UART_IRQHandler+0x4ea>
 8002d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f929 	bl	8002fb2 <UART_Transmit_IT>
    return;
 8002d60:	e014      	b.n	8002d8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00e      	beq.n	8002d8c <HAL_UART_IRQHandler+0x514>
 8002d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f969 	bl	8003052 <UART_EndTransmit_IT>
    return;
 8002d80:	e004      	b.n	8002d8c <HAL_UART_IRQHandler+0x514>
    return;
 8002d82:	bf00      	nop
 8002d84:	e002      	b.n	8002d8c <HAL_UART_IRQHandler+0x514>
      return;
 8002d86:	bf00      	nop
 8002d88:	e000      	b.n	8002d8c <HAL_UART_IRQHandler+0x514>
      return;
 8002d8a:	bf00      	nop
  }
}
 8002d8c:	37e8      	adds	r7, #232	; 0xe8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop

08002d94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b090      	sub	sp, #64	; 0x40
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df8:	e050      	b.n	8002e9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e00:	d04c      	beq.n	8002e9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e08:	f7fe f806 	bl	8000e18 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d241      	bcs.n	8002e9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	330c      	adds	r3, #12
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	e853 3f00 	ldrex	r3, [r3]
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	330c      	adds	r3, #12
 8002e36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e38:	637a      	str	r2, [r7, #52]	; 0x34
 8002e3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e40:	e841 2300 	strex	r3, r2, [r1]
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e5      	bne.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3314      	adds	r3, #20
 8002e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3314      	adds	r3, #20
 8002e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e6c:	623a      	str	r2, [r7, #32]
 8002e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e70:	69f9      	ldr	r1, [r7, #28]
 8002e72:	6a3a      	ldr	r2, [r7, #32]
 8002e74:	e841 2300 	strex	r3, r2, [r1]
 8002e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e5      	bne.n	8002e4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e00f      	b.n	8002ebc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d09f      	beq.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3740      	adds	r7, #64	; 0x40
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b095      	sub	sp, #84	; 0x54
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed6:	e853 3f00 	ldrex	r3, [r3]
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	330c      	adds	r3, #12
 8002eea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eec:	643a      	str	r2, [r7, #64]	; 0x40
 8002eee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ef4:	e841 2300 	strex	r3, r2, [r1]
 8002ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e5      	bne.n	8002ecc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3314      	adds	r3, #20
 8002f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	e853 3f00 	ldrex	r3, [r3]
 8002f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3314      	adds	r3, #20
 8002f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e5      	bne.n	8002f00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d119      	bne.n	8002f70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	e853 3f00 	ldrex	r3, [r3]
 8002f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f023 0310 	bic.w	r3, r3, #16
 8002f52:	647b      	str	r3, [r7, #68]	; 0x44
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f5c:	61ba      	str	r2, [r7, #24]
 8002f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	6979      	ldr	r1, [r7, #20]
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	e841 2300 	strex	r3, r2, [r1]
 8002f68:	613b      	str	r3, [r7, #16]
   return(result);
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e5      	bne.n	8002f3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f7e:	bf00      	nop
 8002f80:	3754      	adds	r7, #84	; 0x54
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7ff ff09 	bl	8002dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b085      	sub	sp, #20
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b21      	cmp	r3, #33	; 0x21
 8002fc4:	d13e      	bne.n	8003044 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fce:	d114      	bne.n	8002ffa <UART_Transmit_IT+0x48>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d110      	bne.n	8002ffa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	1c9a      	adds	r2, r3, #2
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	621a      	str	r2, [r3, #32]
 8002ff8:	e008      	b.n	800300c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	1c59      	adds	r1, r3, #1
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6211      	str	r1, [r2, #32]
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29b      	uxth	r3, r3
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4619      	mov	r1, r3
 800301a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10f      	bne.n	8003040 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800302e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800303e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	e000      	b.n	8003046 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003068:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fe8e 	bl	8002d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b08c      	sub	sp, #48	; 0x30
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b22      	cmp	r3, #34	; 0x22
 8003094:	f040 80ab 	bne.w	80031ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a0:	d117      	bne.n	80030d2 <UART_Receive_IT+0x50>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d113      	bne.n	80030d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	1c9a      	adds	r2, r3, #2
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
 80030d0:	e026      	b.n	8003120 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e4:	d007      	beq.n	80030f6 <UART_Receive_IT+0x74>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <UART_Receive_IT+0x82>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e008      	b.n	8003116 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003110:	b2da      	uxtb	r2, r3
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29b      	uxth	r3, r3
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4619      	mov	r1, r3
 800312e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003130:	2b00      	cmp	r3, #0
 8003132:	d15a      	bne.n	80031ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0220 	bic.w	r2, r2, #32
 8003142:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003152:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	2b01      	cmp	r3, #1
 8003172:	d135      	bne.n	80031e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	330c      	adds	r3, #12
 8003180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	e853 3f00 	ldrex	r3, [r3]
 8003188:	613b      	str	r3, [r7, #16]
   return(result);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f023 0310 	bic.w	r3, r3, #16
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	330c      	adds	r3, #12
 8003198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319a:	623a      	str	r2, [r7, #32]
 800319c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	69f9      	ldr	r1, [r7, #28]
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e5      	bne.n	800317a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d10a      	bne.n	80031d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031d6:	4619      	mov	r1, r3
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff fdf9 	bl	8002dd0 <HAL_UARTEx_RxEventCallback>
 80031de:	e002      	b.n	80031e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff fde1 	bl	8002da8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e002      	b.n	80031f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e000      	b.n	80031f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80031ee:	2302      	movs	r3, #2
  }
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3730      	adds	r7, #48	; 0x30
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031fc:	b0c0      	sub	sp, #256	; 0x100
 80031fe:	af00      	add	r7, sp, #0
 8003200:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003214:	68d9      	ldr	r1, [r3, #12]
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	ea40 0301 	orr.w	r3, r0, r1
 8003220:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	431a      	orrs	r2, r3
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	431a      	orrs	r2, r3
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003250:	f021 010c 	bic.w	r1, r1, #12
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800325e:	430b      	orrs	r3, r1
 8003260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003272:	6999      	ldr	r1, [r3, #24]
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	ea40 0301 	orr.w	r3, r0, r1
 800327e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b8f      	ldr	r3, [pc, #572]	; (80034c4 <UART_SetConfig+0x2cc>)
 8003288:	429a      	cmp	r2, r3
 800328a:	d005      	beq.n	8003298 <UART_SetConfig+0xa0>
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b8d      	ldr	r3, [pc, #564]	; (80034c8 <UART_SetConfig+0x2d0>)
 8003294:	429a      	cmp	r2, r3
 8003296:	d104      	bne.n	80032a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003298:	f7fe fa42 	bl	8001720 <HAL_RCC_GetPCLK2Freq>
 800329c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032a0:	e003      	b.n	80032aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032a2:	f7fe fa29 	bl	80016f8 <HAL_RCC_GetPCLK1Freq>
 80032a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b4:	f040 810c 	bne.w	80034d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032bc:	2200      	movs	r2, #0
 80032be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032ca:	4622      	mov	r2, r4
 80032cc:	462b      	mov	r3, r5
 80032ce:	1891      	adds	r1, r2, r2
 80032d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80032d2:	415b      	adcs	r3, r3
 80032d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032da:	4621      	mov	r1, r4
 80032dc:	eb12 0801 	adds.w	r8, r2, r1
 80032e0:	4629      	mov	r1, r5
 80032e2:	eb43 0901 	adc.w	r9, r3, r1
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032fa:	4690      	mov	r8, r2
 80032fc:	4699      	mov	r9, r3
 80032fe:	4623      	mov	r3, r4
 8003300:	eb18 0303 	adds.w	r3, r8, r3
 8003304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003308:	462b      	mov	r3, r5
 800330a:	eb49 0303 	adc.w	r3, r9, r3
 800330e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800331e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003322:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003326:	460b      	mov	r3, r1
 8003328:	18db      	adds	r3, r3, r3
 800332a:	653b      	str	r3, [r7, #80]	; 0x50
 800332c:	4613      	mov	r3, r2
 800332e:	eb42 0303 	adc.w	r3, r2, r3
 8003332:	657b      	str	r3, [r7, #84]	; 0x54
 8003334:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003338:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800333c:	f7fc ffc0 	bl	80002c0 <__aeabi_uldivmod>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4b61      	ldr	r3, [pc, #388]	; (80034cc <UART_SetConfig+0x2d4>)
 8003346:	fba3 2302 	umull	r2, r3, r3, r2
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	011c      	lsls	r4, r3, #4
 800334e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003352:	2200      	movs	r2, #0
 8003354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003358:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800335c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003360:	4642      	mov	r2, r8
 8003362:	464b      	mov	r3, r9
 8003364:	1891      	adds	r1, r2, r2
 8003366:	64b9      	str	r1, [r7, #72]	; 0x48
 8003368:	415b      	adcs	r3, r3
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003370:	4641      	mov	r1, r8
 8003372:	eb12 0a01 	adds.w	sl, r2, r1
 8003376:	4649      	mov	r1, r9
 8003378:	eb43 0b01 	adc.w	fp, r3, r1
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003388:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800338c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003390:	4692      	mov	sl, r2
 8003392:	469b      	mov	fp, r3
 8003394:	4643      	mov	r3, r8
 8003396:	eb1a 0303 	adds.w	r3, sl, r3
 800339a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800339e:	464b      	mov	r3, r9
 80033a0:	eb4b 0303 	adc.w	r3, fp, r3
 80033a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033bc:	460b      	mov	r3, r1
 80033be:	18db      	adds	r3, r3, r3
 80033c0:	643b      	str	r3, [r7, #64]	; 0x40
 80033c2:	4613      	mov	r3, r2
 80033c4:	eb42 0303 	adc.w	r3, r2, r3
 80033c8:	647b      	str	r3, [r7, #68]	; 0x44
 80033ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033d2:	f7fc ff75 	bl	80002c0 <__aeabi_uldivmod>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4611      	mov	r1, r2
 80033dc:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <UART_SetConfig+0x2d4>)
 80033de:	fba3 2301 	umull	r2, r3, r3, r1
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2264      	movs	r2, #100	; 0x64
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	1acb      	subs	r3, r1, r3
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033f2:	4b36      	ldr	r3, [pc, #216]	; (80034cc <UART_SetConfig+0x2d4>)
 80033f4:	fba3 2302 	umull	r2, r3, r3, r2
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003400:	441c      	add	r4, r3
 8003402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003406:	2200      	movs	r2, #0
 8003408:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800340c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003410:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003414:	4642      	mov	r2, r8
 8003416:	464b      	mov	r3, r9
 8003418:	1891      	adds	r1, r2, r2
 800341a:	63b9      	str	r1, [r7, #56]	; 0x38
 800341c:	415b      	adcs	r3, r3
 800341e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003420:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003424:	4641      	mov	r1, r8
 8003426:	1851      	adds	r1, r2, r1
 8003428:	6339      	str	r1, [r7, #48]	; 0x30
 800342a:	4649      	mov	r1, r9
 800342c:	414b      	adcs	r3, r1
 800342e:	637b      	str	r3, [r7, #52]	; 0x34
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800343c:	4659      	mov	r1, fp
 800343e:	00cb      	lsls	r3, r1, #3
 8003440:	4651      	mov	r1, sl
 8003442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003446:	4651      	mov	r1, sl
 8003448:	00ca      	lsls	r2, r1, #3
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	4603      	mov	r3, r0
 8003450:	4642      	mov	r2, r8
 8003452:	189b      	adds	r3, r3, r2
 8003454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003458:	464b      	mov	r3, r9
 800345a:	460a      	mov	r2, r1
 800345c:	eb42 0303 	adc.w	r3, r2, r3
 8003460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003470:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003474:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003478:	460b      	mov	r3, r1
 800347a:	18db      	adds	r3, r3, r3
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
 800347e:	4613      	mov	r3, r2
 8003480:	eb42 0303 	adc.w	r3, r2, r3
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003486:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800348a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800348e:	f7fc ff17 	bl	80002c0 <__aeabi_uldivmod>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <UART_SetConfig+0x2d4>)
 8003498:	fba3 1302 	umull	r1, r3, r3, r2
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	2164      	movs	r1, #100	; 0x64
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	3332      	adds	r3, #50	; 0x32
 80034aa:	4a08      	ldr	r2, [pc, #32]	; (80034cc <UART_SetConfig+0x2d4>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	f003 0207 	and.w	r2, r3, #7
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4422      	add	r2, r4
 80034be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034c0:	e105      	b.n	80036ce <UART_SetConfig+0x4d6>
 80034c2:	bf00      	nop
 80034c4:	40011000 	.word	0x40011000
 80034c8:	40011400 	.word	0x40011400
 80034cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d4:	2200      	movs	r2, #0
 80034d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034e2:	4642      	mov	r2, r8
 80034e4:	464b      	mov	r3, r9
 80034e6:	1891      	adds	r1, r2, r2
 80034e8:	6239      	str	r1, [r7, #32]
 80034ea:	415b      	adcs	r3, r3
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034f2:	4641      	mov	r1, r8
 80034f4:	1854      	adds	r4, r2, r1
 80034f6:	4649      	mov	r1, r9
 80034f8:	eb43 0501 	adc.w	r5, r3, r1
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	00eb      	lsls	r3, r5, #3
 8003506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800350a:	00e2      	lsls	r2, r4, #3
 800350c:	4614      	mov	r4, r2
 800350e:	461d      	mov	r5, r3
 8003510:	4643      	mov	r3, r8
 8003512:	18e3      	adds	r3, r4, r3
 8003514:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003518:	464b      	mov	r3, r9
 800351a:	eb45 0303 	adc.w	r3, r5, r3
 800351e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800352e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800353e:	4629      	mov	r1, r5
 8003540:	008b      	lsls	r3, r1, #2
 8003542:	4621      	mov	r1, r4
 8003544:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003548:	4621      	mov	r1, r4
 800354a:	008a      	lsls	r2, r1, #2
 800354c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003550:	f7fc feb6 	bl	80002c0 <__aeabi_uldivmod>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4b60      	ldr	r3, [pc, #384]	; (80036dc <UART_SetConfig+0x4e4>)
 800355a:	fba3 2302 	umull	r2, r3, r3, r2
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	011c      	lsls	r4, r3, #4
 8003562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003566:	2200      	movs	r2, #0
 8003568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800356c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003570:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003574:	4642      	mov	r2, r8
 8003576:	464b      	mov	r3, r9
 8003578:	1891      	adds	r1, r2, r2
 800357a:	61b9      	str	r1, [r7, #24]
 800357c:	415b      	adcs	r3, r3
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003584:	4641      	mov	r1, r8
 8003586:	1851      	adds	r1, r2, r1
 8003588:	6139      	str	r1, [r7, #16]
 800358a:	4649      	mov	r1, r9
 800358c:	414b      	adcs	r3, r1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800359c:	4659      	mov	r1, fp
 800359e:	00cb      	lsls	r3, r1, #3
 80035a0:	4651      	mov	r1, sl
 80035a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a6:	4651      	mov	r1, sl
 80035a8:	00ca      	lsls	r2, r1, #3
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	4642      	mov	r2, r8
 80035b2:	189b      	adds	r3, r3, r2
 80035b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035b8:	464b      	mov	r3, r9
 80035ba:	460a      	mov	r2, r1
 80035bc:	eb42 0303 	adc.w	r3, r2, r3
 80035c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80035ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035dc:	4649      	mov	r1, r9
 80035de:	008b      	lsls	r3, r1, #2
 80035e0:	4641      	mov	r1, r8
 80035e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035e6:	4641      	mov	r1, r8
 80035e8:	008a      	lsls	r2, r1, #2
 80035ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035ee:	f7fc fe67 	bl	80002c0 <__aeabi_uldivmod>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4b39      	ldr	r3, [pc, #228]	; (80036dc <UART_SetConfig+0x4e4>)
 80035f8:	fba3 1302 	umull	r1, r3, r3, r2
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	2164      	movs	r1, #100	; 0x64
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	3332      	adds	r3, #50	; 0x32
 800360a:	4a34      	ldr	r2, [pc, #208]	; (80036dc <UART_SetConfig+0x4e4>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003616:	441c      	add	r4, r3
 8003618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800361c:	2200      	movs	r2, #0
 800361e:	673b      	str	r3, [r7, #112]	; 0x70
 8003620:	677a      	str	r2, [r7, #116]	; 0x74
 8003622:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003626:	4642      	mov	r2, r8
 8003628:	464b      	mov	r3, r9
 800362a:	1891      	adds	r1, r2, r2
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	415b      	adcs	r3, r3
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003636:	4641      	mov	r1, r8
 8003638:	1851      	adds	r1, r2, r1
 800363a:	6039      	str	r1, [r7, #0]
 800363c:	4649      	mov	r1, r9
 800363e:	414b      	adcs	r3, r1
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800364e:	4659      	mov	r1, fp
 8003650:	00cb      	lsls	r3, r1, #3
 8003652:	4651      	mov	r1, sl
 8003654:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003658:	4651      	mov	r1, sl
 800365a:	00ca      	lsls	r2, r1, #3
 800365c:	4610      	mov	r0, r2
 800365e:	4619      	mov	r1, r3
 8003660:	4603      	mov	r3, r0
 8003662:	4642      	mov	r2, r8
 8003664:	189b      	adds	r3, r3, r2
 8003666:	66bb      	str	r3, [r7, #104]	; 0x68
 8003668:	464b      	mov	r3, r9
 800366a:	460a      	mov	r2, r1
 800366c:	eb42 0303 	adc.w	r3, r2, r3
 8003670:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	663b      	str	r3, [r7, #96]	; 0x60
 800367c:	667a      	str	r2, [r7, #100]	; 0x64
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800368a:	4649      	mov	r1, r9
 800368c:	008b      	lsls	r3, r1, #2
 800368e:	4641      	mov	r1, r8
 8003690:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003694:	4641      	mov	r1, r8
 8003696:	008a      	lsls	r2, r1, #2
 8003698:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800369c:	f7fc fe10 	bl	80002c0 <__aeabi_uldivmod>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <UART_SetConfig+0x4e4>)
 80036a6:	fba3 1302 	umull	r1, r3, r3, r2
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	2164      	movs	r1, #100	; 0x64
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	3332      	adds	r3, #50	; 0x32
 80036b8:	4a08      	ldr	r2, [pc, #32]	; (80036dc <UART_SetConfig+0x4e4>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	f003 020f 	and.w	r2, r3, #15
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4422      	add	r2, r4
 80036cc:	609a      	str	r2, [r3, #8]
}
 80036ce:	bf00      	nop
 80036d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036d4:	46bd      	mov	sp, r7
 80036d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036da:	bf00      	nop
 80036dc:	51eb851f 	.word	0x51eb851f

080036e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f103 0208 	add.w	r2, r3, #8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f103 0208 	add.w	r2, r3, #8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f103 0208 	add.w	r2, r3, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	601a      	str	r2, [r3, #0]
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003782:	b480      	push	{r7}
 8003784:	b085      	sub	sp, #20
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003798:	d103      	bne.n	80037a2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e00c      	b.n	80037bc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3308      	adds	r3, #8
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e002      	b.n	80037b0 <vListInsert+0x2e>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d2f6      	bcs.n	80037aa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	601a      	str	r2, [r3, #0]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6892      	ldr	r2, [r2, #8]
 800380a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6852      	ldr	r2, [r2, #4]
 8003814:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	d103      	bne.n	8003828 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	1e5a      	subs	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003872:	f002 fa77 	bl	8005d64 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387e:	68f9      	ldr	r1, [r7, #12]
 8003880:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	441a      	add	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a2:	3b01      	subs	r3, #1
 80038a4:	68f9      	ldr	r1, [r7, #12]
 80038a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	441a      	add	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	22ff      	movs	r2, #255	; 0xff
 80038b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	22ff      	movs	r2, #255	; 0xff
 80038be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d114      	bne.n	80038f2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01a      	beq.n	8003906 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	3310      	adds	r3, #16
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 f9d7 	bl	8004c88 <xTaskRemoveFromEventList>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d012      	beq.n	8003906 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <xQueueGenericReset+0xcc>)
 80038e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	e009      	b.n	8003906 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3310      	adds	r3, #16
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fef2 	bl	80036e0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3324      	adds	r3, #36	; 0x24
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff feed 	bl	80036e0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003906:	f002 fa5d 	bl	8005dc4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800390a:	2301      	movs	r3, #1
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	e000ed04 	.word	0xe000ed04

08003918 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003918:	b580      	push	{r7, lr}
 800391a:	b08c      	sub	sp, #48	; 0x30
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	4613      	mov	r3, r2
 8003924:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <xQueueGenericCreate+0x2a>
        __asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	61bb      	str	r3, [r7, #24]
    }
 800393e:	bf00      	nop
 8003940:	e7fe      	b.n	8003940 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d006      	beq.n	8003960 <xQueueGenericCreate+0x48>
 8003952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	fbb2 f3f3 	udiv	r3, r2, r3
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	429a      	cmp	r2, r3
 800395e:	d101      	bne.n	8003964 <xQueueGenericCreate+0x4c>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <xQueueGenericCreate+0x4e>
 8003964:	2300      	movs	r3, #0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10a      	bne.n	8003980 <xQueueGenericCreate+0x68>
        __asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	617b      	str	r3, [r7, #20]
    }
 800397c:	bf00      	nop
 800397e:	e7fe      	b.n	800397e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003986:	d90a      	bls.n	800399e <xQueueGenericCreate+0x86>
        __asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	613b      	str	r3, [r7, #16]
    }
 800399a:	bf00      	nop
 800399c:	e7fe      	b.n	800399c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	3350      	adds	r3, #80	; 0x50
 80039a2:	4618      	mov	r0, r3
 80039a4:	f002 fb02 	bl	8005fac <pvPortMalloc>
 80039a8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	3350      	adds	r3, #80	; 0x50
 80039b8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039ba:	79fa      	ldrb	r2, [r7, #7]
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f805 	bl	80039d6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80039cc:	6a3b      	ldr	r3, [r7, #32]
    }
 80039ce:	4618      	mov	r0, r3
 80039d0:	3728      	adds	r7, #40	; 0x28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	e002      	b.n	80039f8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a04:	2101      	movs	r1, #1
 8003a06:	69b8      	ldr	r0, [r7, #24]
 8003a08:	f7ff ff1e 	bl	8003848 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003a14:	bf00      	nop
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00e      	beq.n	8003a48 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2100      	movs	r1, #0
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f81c 	bl	8003a80 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	461a      	mov	r2, r3
 8003a66:	6939      	ldr	r1, [r7, #16]
 8003a68:	6978      	ldr	r0, [r7, #20]
 8003a6a:	f7ff ff55 	bl	8003918 <xQueueGenericCreate>
 8003a6e:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f7ff ffd3 	bl	8003a1c <prvInitialiseMutex>

        return xNewQueue;
 8003a76:	68fb      	ldr	r3, [r7, #12]
    }
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08e      	sub	sp, #56	; 0x38
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <xQueueGenericSend+0x32>
        __asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d103      	bne.n	8003ac0 <xQueueGenericSend+0x40>
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <xQueueGenericSend+0x44>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <xQueueGenericSend+0x46>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <xQueueGenericSend+0x60>
        __asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003adc:	bf00      	nop
 8003ade:	e7fe      	b.n	8003ade <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d103      	bne.n	8003aee <xQueueGenericSend+0x6e>
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <xQueueGenericSend+0x72>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <xQueueGenericSend+0x74>
 8003af2:	2300      	movs	r3, #0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <xQueueGenericSend+0x8e>
        __asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	623b      	str	r3, [r7, #32]
    }
 8003b0a:	bf00      	nop
 8003b0c:	e7fe      	b.n	8003b0c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b0e:	f001 fa57 	bl	8004fc0 <xTaskGetSchedulerState>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <xQueueGenericSend+0x9e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <xQueueGenericSend+0xa2>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <xQueueGenericSend+0xa4>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <xQueueGenericSend+0xbe>
        __asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	61fb      	str	r3, [r7, #28]
    }
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003b3e:	f002 f911 	bl	8005d64 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <xQueueGenericSend+0xd4>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d129      	bne.n	8003ba8 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b5a:	f000 fb3d 	bl	80041d8 <prvCopyDataToQueue>
 8003b5e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d010      	beq.n	8003b8a <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	3324      	adds	r3, #36	; 0x24
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 f88b 	bl	8004c88 <xTaskRemoveFromEventList>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003b78:	4b3f      	ldr	r3, [pc, #252]	; (8003c78 <xQueueGenericSend+0x1f8>)
 8003b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	e00a      	b.n	8003ba0 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003b90:	4b39      	ldr	r3, [pc, #228]	; (8003c78 <xQueueGenericSend+0x1f8>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003ba0:	f002 f910 	bl	8005dc4 <vPortExitCritical>
                return pdPASS;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e063      	b.n	8003c70 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003bae:	f002 f909 	bl	8005dc4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e05c      	b.n	8003c70 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f001 f8c3 	bl	8004d4c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003bca:	f002 f8fb 	bl	8005dc4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003bce:	f000 fe3d 	bl	800484c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003bd2:	f002 f8c7 	bl	8005d64 <vPortEnterCritical>
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bdc:	b25b      	sxtb	r3, r3
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be2:	d103      	bne.n	8003bec <xQueueGenericSend+0x16c>
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf2:	b25b      	sxtb	r3, r3
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf8:	d103      	bne.n	8003c02 <xQueueGenericSend+0x182>
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c02:	f002 f8df 	bl	8005dc4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c06:	1d3a      	adds	r2, r7, #4
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f001 f8b2 	bl	8004d78 <xTaskCheckForTimeOut>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d124      	bne.n	8003c64 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c1c:	f000 fbd4 	bl	80043c8 <prvIsQueueFull>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d018      	beq.n	8003c58 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	3310      	adds	r3, #16
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 ffda 	bl	8004be8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c36:	f000 fb5f 	bl	80042f8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003c3a:	f000 fe15 	bl	8004868 <xTaskResumeAll>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f47f af7c 	bne.w	8003b3e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <xQueueGenericSend+0x1f8>)
 8003c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	e772      	b.n	8003b3e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c5a:	f000 fb4d 	bl	80042f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003c5e:	f000 fe03 	bl	8004868 <xTaskResumeAll>
 8003c62:	e76c      	b.n	8003b3e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c66:	f000 fb47 	bl	80042f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003c6a:	f000 fdfd 	bl	8004868 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003c6e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3738      	adds	r7, #56	; 0x38
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	e000ed04 	.word	0xe000ed04

08003c7c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b090      	sub	sp, #64	; 0x40
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d103      	bne.n	8003cb8 <xQueueGenericSendFromISR+0x3c>
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <xQueueGenericSendFromISR+0x40>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <xQueueGenericSendFromISR+0x42>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d103      	bne.n	8003ce6 <xQueueGenericSendFromISR+0x6a>
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <xQueueGenericSendFromISR+0x6e>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <xQueueGenericSendFromISR+0x70>
 8003cea:	2300      	movs	r3, #0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	623b      	str	r3, [r7, #32]
    }
 8003d02:	bf00      	nop
 8003d04:	e7fe      	b.n	8003d04 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d06:	f002 f911 	bl	8005f2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	61fa      	str	r2, [r7, #28]
 8003d20:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003d22:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d24:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <xQueueGenericSendFromISR+0xbc>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d13e      	bne.n	8003db6 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d4e:	f000 fa43 	bl	80041d8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003d52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d5a:	d112      	bne.n	8003d82 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d025      	beq.n	8003db0 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d66:	3324      	adds	r3, #36	; 0x24
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 ff8d 	bl	8004c88 <xTaskRemoveFromEventList>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01d      	beq.n	8003db0 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d01a      	beq.n	8003db0 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e016      	b.n	8003db0 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003d82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d86:	2b7f      	cmp	r3, #127	; 0x7f
 8003d88:	d10a      	bne.n	8003da0 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	617b      	str	r3, [r7, #20]
    }
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003da0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003da4:	3301      	adds	r3, #1
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	b25a      	sxtb	r2, r3
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003db0:	2301      	movs	r3, #1
 8003db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003db4:	e001      	b.n	8003dba <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbc:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003dc4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3740      	adds	r7, #64	; 0x40
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08c      	sub	sp, #48	; 0x30
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <xQueueReceive+0x30>
        __asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	623b      	str	r3, [r7, #32]
    }
 8003dfc:	bf00      	nop
 8003dfe:	e7fe      	b.n	8003dfe <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d103      	bne.n	8003e0e <xQueueReceive+0x3e>
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <xQueueReceive+0x42>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <xQueueReceive+0x44>
 8003e12:	2300      	movs	r3, #0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <xQueueReceive+0x5e>
        __asm volatile
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	61fb      	str	r3, [r7, #28]
    }
 8003e2a:	bf00      	nop
 8003e2c:	e7fe      	b.n	8003e2c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e2e:	f001 f8c7 	bl	8004fc0 <xTaskGetSchedulerState>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d102      	bne.n	8003e3e <xQueueReceive+0x6e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <xQueueReceive+0x72>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <xQueueReceive+0x74>
 8003e42:	2300      	movs	r3, #0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <xQueueReceive+0x8e>
        __asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	61bb      	str	r3, [r7, #24]
    }
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003e5e:	f001 ff81 	bl	8005d64 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01f      	beq.n	8003eae <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e72:	f000 fa1b 	bl	80042ac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	1e5a      	subs	r2, r3, #1
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00f      	beq.n	8003ea6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	3310      	adds	r3, #16
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fefc 	bl	8004c88 <xTaskRemoveFromEventList>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003e96:	4b3d      	ldr	r3, [pc, #244]	; (8003f8c <xQueueReceive+0x1bc>)
 8003e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003ea6:	f001 ff8d 	bl	8005dc4 <vPortExitCritical>
                return pdPASS;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e069      	b.n	8003f82 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d103      	bne.n	8003ebc <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003eb4:	f001 ff86 	bl	8005dc4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e062      	b.n	8003f82 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003ec2:	f107 0310 	add.w	r3, r7, #16
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 ff40 	bl	8004d4c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003ed0:	f001 ff78 	bl	8005dc4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003ed4:	f000 fcba 	bl	800484c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003ed8:	f001 ff44 	bl	8005d64 <vPortEnterCritical>
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ee2:	b25b      	sxtb	r3, r3
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee8:	d103      	bne.n	8003ef2 <xQueueReceive+0x122>
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ef8:	b25b      	sxtb	r3, r3
 8003efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003efe:	d103      	bne.n	8003f08 <xQueueReceive+0x138>
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f08:	f001 ff5c 	bl	8005dc4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f0c:	1d3a      	adds	r2, r7, #4
 8003f0e:	f107 0310 	add.w	r3, r7, #16
 8003f12:	4611      	mov	r1, r2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 ff2f 	bl	8004d78 <xTaskCheckForTimeOut>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d123      	bne.n	8003f68 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f22:	f000 fa3b 	bl	800439c <prvIsQueueEmpty>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d017      	beq.n	8003f5c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	3324      	adds	r3, #36	; 0x24
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fe57 	bl	8004be8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f3c:	f000 f9dc 	bl	80042f8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003f40:	f000 fc92 	bl	8004868 <xTaskResumeAll>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d189      	bne.n	8003e5e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003f4a:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <xQueueReceive+0x1bc>)
 8003f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	e780      	b.n	8003e5e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f5e:	f000 f9cb 	bl	80042f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003f62:	f000 fc81 	bl	8004868 <xTaskResumeAll>
 8003f66:	e77a      	b.n	8003e5e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f6a:	f000 f9c5 	bl	80042f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003f6e:	f000 fc7b 	bl	8004868 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f74:	f000 fa12 	bl	800439c <prvIsQueueEmpty>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f43f af6f 	beq.w	8003e5e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003f80:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3730      	adds	r7, #48	; 0x30
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	e000ed04 	.word	0xe000ed04

08003f90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08e      	sub	sp, #56	; 0x38
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	623b      	str	r3, [r7, #32]
    }
 8003fbe:	bf00      	nop
 8003fc0:	e7fe      	b.n	8003fc0 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	61fb      	str	r3, [r7, #28]
    }
 8003fdc:	bf00      	nop
 8003fde:	e7fe      	b.n	8003fde <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fe0:	f000 ffee 	bl	8004fc0 <xTaskGetSchedulerState>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <xQueueSemaphoreTake+0x60>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <xQueueSemaphoreTake+0x64>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <xQueueSemaphoreTake+0x66>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	61bb      	str	r3, [r7, #24]
    }
 800400c:	bf00      	nop
 800400e:	e7fe      	b.n	800400e <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004010:	f001 fea8 	bl	8005d64 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	d024      	beq.n	800406a <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	1e5a      	subs	r2, r3, #1
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d104      	bne.n	800403a <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004030:	f001 f962 	bl	80052f8 <pvTaskIncrementMutexHeldCount>
 8004034:	4602      	mov	r2, r0
 8004036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004038:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00f      	beq.n	8004062 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004044:	3310      	adds	r3, #16
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fe1e 	bl	8004c88 <xTaskRemoveFromEventList>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004052:	4b54      	ldr	r3, [pc, #336]	; (80041a4 <xQueueSemaphoreTake+0x214>)
 8004054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004062:	f001 feaf 	bl	8005dc4 <vPortExitCritical>
                return pdPASS;
 8004066:	2301      	movs	r3, #1
 8004068:	e097      	b.n	800419a <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d111      	bne.n	8004094 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	617b      	str	r3, [r7, #20]
    }
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800408c:	f001 fe9a 	bl	8005dc4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004090:	2300      	movs	r3, #0
 8004092:	e082      	b.n	800419a <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800409a:	f107 030c 	add.w	r3, r7, #12
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fe54 	bl	8004d4c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80040a4:	2301      	movs	r3, #1
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80040a8:	f001 fe8c 	bl	8005dc4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80040ac:	f000 fbce 	bl	800484c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80040b0:	f001 fe58 	bl	8005d64 <vPortEnterCritical>
 80040b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040ba:	b25b      	sxtb	r3, r3
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040c0:	d103      	bne.n	80040ca <xQueueSemaphoreTake+0x13a>
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040d0:	b25b      	sxtb	r3, r3
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040d6:	d103      	bne.n	80040e0 <xQueueSemaphoreTake+0x150>
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040e0:	f001 fe70 	bl	8005dc4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040e4:	463a      	mov	r2, r7
 80040e6:	f107 030c 	add.w	r3, r7, #12
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fe43 	bl	8004d78 <xTaskCheckForTimeOut>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d132      	bne.n	800415e <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040fa:	f000 f94f 	bl	800439c <prvIsQueueEmpty>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d026      	beq.n	8004152 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 800410c:	f001 fe2a 	bl	8005d64 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	4618      	mov	r0, r3
 8004116:	f000 ff71 	bl	8004ffc <xTaskPriorityInherit>
 800411a:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 800411c:	f001 fe52 	bl	8005dc4 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	3324      	adds	r3, #36	; 0x24
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fd5d 	bl	8004be8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800412e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004130:	f000 f8e2 	bl	80042f8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004134:	f000 fb98 	bl	8004868 <xTaskResumeAll>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	f47f af68 	bne.w	8004010 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8004140:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <xQueueSemaphoreTake+0x214>)
 8004142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	e75e      	b.n	8004010 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8004152:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004154:	f000 f8d0 	bl	80042f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004158:	f000 fb86 	bl	8004868 <xTaskResumeAll>
 800415c:	e758      	b.n	8004010 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800415e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004160:	f000 f8ca 	bl	80042f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004164:	f000 fb80 	bl	8004868 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800416a:	f000 f917 	bl	800439c <prvIsQueueEmpty>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	f43f af4d 	beq.w	8004010 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00d      	beq.n	8004198 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 800417c:	f001 fdf2 	bl	8005d64 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004182:	f000 f811 	bl	80041a8 <prvGetDisinheritPriorityAfterTimeout>
 8004186:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800418e:	4618      	mov	r0, r3
 8004190:	f001 f824 	bl	80051dc <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8004194:	f001 fe16 	bl	8005dc4 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004198:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800419a:	4618      	mov	r0, r3
 800419c:	3738      	adds	r7, #56	; 0x38
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	e000ed04 	.word	0xe000ed04

080041a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d006      	beq.n	80041c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f1c3 0305 	rsb	r3, r3, #5
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e001      	b.n	80041ca <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80041ca:	68fb      	ldr	r3, [r7, #12]
    }
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10d      	bne.n	8004212 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d14d      	bne.n	800429a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 ff70 	bl	80050e8 <xTaskPriorityDisinherit>
 8004208:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	e043      	b.n	800429a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d119      	bne.n	800424c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6858      	ldr	r0, [r3, #4]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	461a      	mov	r2, r3
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	f002 f8ea 	bl	80063fc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	441a      	add	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	d32b      	bcc.n	800429a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	e026      	b.n	800429a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	68d8      	ldr	r0, [r3, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	461a      	mov	r2, r3
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	f002 f8d0 	bl	80063fc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	425b      	negs	r3, r3
 8004266:	441a      	add	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d207      	bcs.n	8004288 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	425b      	negs	r3, r3
 8004282:	441a      	add	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d105      	bne.n	800429a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	3b01      	subs	r3, #1
 8004298:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80042a2:	697b      	ldr	r3, [r7, #20]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d018      	beq.n	80042f0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	441a      	add	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d303      	bcc.n	80042e0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68d9      	ldr	r1, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	461a      	mov	r2, r3
 80042ea:	6838      	ldr	r0, [r7, #0]
 80042ec:	f002 f886 	bl	80063fc <memcpy>
    }
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004300:	f001 fd30 	bl	8005d64 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800430a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800430c:	e011      	b.n	8004332 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	2b00      	cmp	r3, #0
 8004314:	d012      	beq.n	800433c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3324      	adds	r3, #36	; 0x24
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fcb4 	bl	8004c88 <xTaskRemoveFromEventList>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004326:	f000 fd8d 	bl	8004e44 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	3b01      	subs	r3, #1
 800432e:	b2db      	uxtb	r3, r3
 8004330:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004336:	2b00      	cmp	r3, #0
 8004338:	dce9      	bgt.n	800430e <prvUnlockQueue+0x16>
 800433a:	e000      	b.n	800433e <prvUnlockQueue+0x46>
                        break;
 800433c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	22ff      	movs	r2, #255	; 0xff
 8004342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004346:	f001 fd3d 	bl	8005dc4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800434a:	f001 fd0b 	bl	8005d64 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004354:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004356:	e011      	b.n	800437c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d012      	beq.n	8004386 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3310      	adds	r3, #16
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fc8f 	bl	8004c88 <xTaskRemoveFromEventList>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004370:	f000 fd68 	bl	8004e44 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004374:	7bbb      	ldrb	r3, [r7, #14]
 8004376:	3b01      	subs	r3, #1
 8004378:	b2db      	uxtb	r3, r3
 800437a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800437c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004380:	2b00      	cmp	r3, #0
 8004382:	dce9      	bgt.n	8004358 <prvUnlockQueue+0x60>
 8004384:	e000      	b.n	8004388 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004386:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	22ff      	movs	r2, #255	; 0xff
 800438c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004390:	f001 fd18 	bl	8005dc4 <vPortExitCritical>
}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80043a4:	f001 fcde 	bl	8005d64 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d102      	bne.n	80043b6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80043b0:	2301      	movs	r3, #1
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	e001      	b.n	80043ba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80043ba:	f001 fd03 	bl	8005dc4 <vPortExitCritical>

    return xReturn;
 80043be:	68fb      	ldr	r3, [r7, #12]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80043d0:	f001 fcc8 	bl	8005d64 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043dc:	429a      	cmp	r2, r3
 80043de:	d102      	bne.n	80043e6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e001      	b.n	80043ea <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80043ea:	f001 fceb 	bl	8005dc4 <vPortExitCritical>

    return xReturn;
 80043ee:	68fb      	ldr	r3, [r7, #12]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e014      	b.n	8004432 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004408:	4a0f      	ldr	r2, [pc, #60]	; (8004448 <vQueueAddToRegistry+0x50>)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10b      	bne.n	800442c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004414:	490c      	ldr	r1, [pc, #48]	; (8004448 <vQueueAddToRegistry+0x50>)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800441e:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <vQueueAddToRegistry+0x50>)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4413      	add	r3, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800442a:	e006      	b.n	800443a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3301      	adds	r3, #1
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b07      	cmp	r3, #7
 8004436:	d9e7      	bls.n	8004408 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20000274 	.word	0x20000274

0800444c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800445c:	f001 fc82 	bl	8005d64 <vPortEnterCritical>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004466:	b25b      	sxtb	r3, r3
 8004468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800446c:	d103      	bne.n	8004476 <vQueueWaitForMessageRestricted+0x2a>
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800447c:	b25b      	sxtb	r3, r3
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004482:	d103      	bne.n	800448c <vQueueWaitForMessageRestricted+0x40>
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800448c:	f001 fc9a 	bl	8005dc4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	3324      	adds	r3, #36	; 0x24
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fbc5 	bl	8004c30 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80044a6:	6978      	ldr	r0, [r7, #20]
 80044a8:	f7ff ff26 	bl	80042f8 <prvUnlockQueue>
    }
 80044ac:	bf00      	nop
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08c      	sub	sp, #48	; 0x30
 80044b8:	af04      	add	r7, sp, #16
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 fd6f 	bl	8005fac <pvPortMalloc>
 80044ce:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00e      	beq.n	80044f4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044d6:	2058      	movs	r0, #88	; 0x58
 80044d8:	f001 fd68 	bl	8005fac <pvPortMalloc>
 80044dc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	631a      	str	r2, [r3, #48]	; 0x30
 80044ea:	e005      	b.n	80044f8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80044ec:	6978      	ldr	r0, [r7, #20]
 80044ee:	f001 fe3d 	bl	800616c <vPortFree>
 80044f2:	e001      	b.n	80044f8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d013      	beq.n	8004526 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	2300      	movs	r3, #0
 8004502:	9303      	str	r3, [sp, #12]
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	9302      	str	r3, [sp, #8]
 8004508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f80e 	bl	8004536 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800451a:	69f8      	ldr	r0, [r7, #28]
 800451c:	f000 f8a2 	bl	8004664 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004520:	2301      	movs	r3, #1
 8004522:	61bb      	str	r3, [r7, #24]
 8004524:	e002      	b.n	800452c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800452a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800452c:	69bb      	ldr	r3, [r7, #24]
    }
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b088      	sub	sp, #32
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	461a      	mov	r2, r3
 800454e:	21a5      	movs	r1, #165	; 0xa5
 8004550:	f001 ff62 	bl	8006418 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800455e:	3b01      	subs	r3, #1
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f023 0307 	bic.w	r3, r3, #7
 800456c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <prvInitialiseNewTask+0x58>
        __asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	617b      	str	r3, [r7, #20]
    }
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01f      	beq.n	80045d4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004594:	2300      	movs	r3, #0
 8004596:	61fb      	str	r3, [r7, #28]
 8004598:	e012      	b.n	80045c0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	4413      	add	r3, r2
 80045a0:	7819      	ldrb	r1, [r3, #0]
 80045a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	4413      	add	r3, r2
 80045a8:	3334      	adds	r3, #52	; 0x34
 80045aa:	460a      	mov	r2, r1
 80045ac:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	4413      	add	r3, r2
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d006      	beq.n	80045c8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3301      	adds	r3, #1
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b09      	cmp	r3, #9
 80045c4:	d9e9      	bls.n	800459a <prvInitialiseNewTask+0x64>
 80045c6:	e000      	b.n	80045ca <prvInitialiseNewTask+0x94>
            {
                break;
 80045c8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045d2:	e003      	b.n	80045dc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d901      	bls.n	80045e6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045e2:	2304      	movs	r3, #4
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ea:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045f0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	2200      	movs	r2, #0
 80045f6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	3304      	adds	r3, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff f88f 	bl	8003720 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	3318      	adds	r3, #24
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff f88a 	bl	8003720 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004610:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004614:	f1c3 0205 	rsb	r2, r3, #5
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004620:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	3350      	adds	r3, #80	; 0x50
 8004626:	2204      	movs	r2, #4
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f001 fef4 	bl	8006418 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	3354      	adds	r3, #84	; 0x54
 8004634:	2201      	movs	r2, #1
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f001 feed 	bl	8006418 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	68f9      	ldr	r1, [r7, #12]
 8004642:	69b8      	ldr	r0, [r7, #24]
 8004644:	f001 f9e4 	bl	8005a10 <pxPortInitialiseStack>
 8004648:	4602      	mov	r2, r0
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004658:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800465a:	bf00      	nop
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800466c:	f001 fb7a 	bl	8005d64 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004670:	4b2c      	ldr	r3, [pc, #176]	; (8004724 <prvAddNewTaskToReadyList+0xc0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	4a2b      	ldr	r2, [pc, #172]	; (8004724 <prvAddNewTaskToReadyList+0xc0>)
 8004678:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800467a:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <prvAddNewTaskToReadyList+0xc4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004682:	4a29      	ldr	r2, [pc, #164]	; (8004728 <prvAddNewTaskToReadyList+0xc4>)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004688:	4b26      	ldr	r3, [pc, #152]	; (8004724 <prvAddNewTaskToReadyList+0xc0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d110      	bne.n	80046b2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004690:	f000 fbfc 	bl	8004e8c <prvInitialiseTaskLists>
 8004694:	e00d      	b.n	80046b2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004696:	4b25      	ldr	r3, [pc, #148]	; (800472c <prvAddNewTaskToReadyList+0xc8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800469e:	4b22      	ldr	r3, [pc, #136]	; (8004728 <prvAddNewTaskToReadyList+0xc4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d802      	bhi.n	80046b2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80046ac:	4a1e      	ldr	r2, [pc, #120]	; (8004728 <prvAddNewTaskToReadyList+0xc4>)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80046b2:	4b1f      	ldr	r3, [pc, #124]	; (8004730 <prvAddNewTaskToReadyList+0xcc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3301      	adds	r3, #1
 80046b8:	4a1d      	ldr	r2, [pc, #116]	; (8004730 <prvAddNewTaskToReadyList+0xcc>)
 80046ba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80046bc:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <prvAddNewTaskToReadyList+0xcc>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	2201      	movs	r2, #1
 80046ca:	409a      	lsls	r2, r3
 80046cc:	4b19      	ldr	r3, [pc, #100]	; (8004734 <prvAddNewTaskToReadyList+0xd0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	4a18      	ldr	r2, [pc, #96]	; (8004734 <prvAddNewTaskToReadyList+0xd0>)
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4a15      	ldr	r2, [pc, #84]	; (8004738 <prvAddNewTaskToReadyList+0xd4>)
 80046e4:	441a      	add	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f7ff f824 	bl	800373a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80046f2:	f001 fb67 	bl	8005dc4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80046f6:	4b0d      	ldr	r3, [pc, #52]	; (800472c <prvAddNewTaskToReadyList+0xc8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00e      	beq.n	800471c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <prvAddNewTaskToReadyList+0xc4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	429a      	cmp	r2, r3
 800470a:	d207      	bcs.n	800471c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <prvAddNewTaskToReadyList+0xd8>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	2000038c 	.word	0x2000038c
 8004728:	200002b4 	.word	0x200002b4
 800472c:	20000398 	.word	0x20000398
 8004730:	200003a8 	.word	0x200003a8
 8004734:	20000394 	.word	0x20000394
 8004738:	200002b8 	.word	0x200002b8
 800473c:	e000ed04 	.word	0xe000ed04

08004740 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d017      	beq.n	8004782 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004752:	4b13      	ldr	r3, [pc, #76]	; (80047a0 <vTaskDelay+0x60>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <vTaskDelay+0x30>
        __asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	60bb      	str	r3, [r7, #8]
    }
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004770:	f000 f86c 	bl	800484c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004774:	2100      	movs	r1, #0
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fdd2 	bl	8005320 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800477c:	f000 f874 	bl	8004868 <xTaskResumeAll>
 8004780:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d107      	bne.n	8004798 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <vTaskDelay+0x64>)
 800478a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	200003b4 	.word	0x200003b4
 80047a4:	e000ed04 	.word	0xe000ed04

080047a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80047ae:	4b20      	ldr	r3, [pc, #128]	; (8004830 <vTaskStartScheduler+0x88>)
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	2300      	movs	r3, #0
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	2300      	movs	r3, #0
 80047b8:	2282      	movs	r2, #130	; 0x82
 80047ba:	491e      	ldr	r1, [pc, #120]	; (8004834 <vTaskStartScheduler+0x8c>)
 80047bc:	481e      	ldr	r0, [pc, #120]	; (8004838 <vTaskStartScheduler+0x90>)
 80047be:	f7ff fe79 	bl	80044b4 <xTaskCreate>
 80047c2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d102      	bne.n	80047d0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80047ca:	f000 fe0f 	bl	80053ec <xTimerCreateTimerTask>
 80047ce:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d116      	bne.n	8004804 <vTaskStartScheduler+0x5c>
        __asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	60bb      	str	r3, [r7, #8]
    }
 80047e8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80047ea:	4b14      	ldr	r3, [pc, #80]	; (800483c <vTaskStartScheduler+0x94>)
 80047ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047f0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80047f2:	4b13      	ldr	r3, [pc, #76]	; (8004840 <vTaskStartScheduler+0x98>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047f8:	4b12      	ldr	r3, [pc, #72]	; (8004844 <vTaskStartScheduler+0x9c>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80047fe:	f001 f991 	bl	8005b24 <xPortStartScheduler>
 8004802:	e00e      	b.n	8004822 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800480a:	d10a      	bne.n	8004822 <vTaskStartScheduler+0x7a>
        __asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	607b      	str	r3, [r7, #4]
    }
 800481e:	bf00      	nop
 8004820:	e7fe      	b.n	8004820 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004822:	4b09      	ldr	r3, [pc, #36]	; (8004848 <vTaskStartScheduler+0xa0>)
 8004824:	681b      	ldr	r3, [r3, #0]
}
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	200003b0 	.word	0x200003b0
 8004834:	08007990 	.word	0x08007990
 8004838:	08004e5d 	.word	0x08004e5d
 800483c:	200003ac 	.word	0x200003ac
 8004840:	20000398 	.word	0x20000398
 8004844:	20000390 	.word	0x20000390
 8004848:	20000008 	.word	0x20000008

0800484c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <vTaskSuspendAll+0x18>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	4a03      	ldr	r2, [pc, #12]	; (8004864 <vTaskSuspendAll+0x18>)
 8004858:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800485a:	bf00      	nop
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	200003b4 	.word	0x200003b4

08004868 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004876:	4b41      	ldr	r3, [pc, #260]	; (800497c <xTaskResumeAll+0x114>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <xTaskResumeAll+0x2c>
        __asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	603b      	str	r3, [r7, #0]
    }
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004894:	f001 fa66 	bl	8005d64 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004898:	4b38      	ldr	r3, [pc, #224]	; (800497c <xTaskResumeAll+0x114>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3b01      	subs	r3, #1
 800489e:	4a37      	ldr	r2, [pc, #220]	; (800497c <xTaskResumeAll+0x114>)
 80048a0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a2:	4b36      	ldr	r3, [pc, #216]	; (800497c <xTaskResumeAll+0x114>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d161      	bne.n	800496e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048aa:	4b35      	ldr	r3, [pc, #212]	; (8004980 <xTaskResumeAll+0x118>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d05d      	beq.n	800496e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048b2:	e02e      	b.n	8004912 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b4:	4b33      	ldr	r3, [pc, #204]	; (8004984 <xTaskResumeAll+0x11c>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3318      	adds	r3, #24
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe ff97 	bl	80037f4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe ff92 	bl	80037f4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	2201      	movs	r2, #1
 80048d6:	409a      	lsls	r2, r3
 80048d8:	4b2b      	ldr	r3, [pc, #172]	; (8004988 <xTaskResumeAll+0x120>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4313      	orrs	r3, r2
 80048de:	4a2a      	ldr	r2, [pc, #168]	; (8004988 <xTaskResumeAll+0x120>)
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4a27      	ldr	r2, [pc, #156]	; (800498c <xTaskResumeAll+0x124>)
 80048f0:	441a      	add	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3304      	adds	r3, #4
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f7fe ff1e 	bl	800373a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004902:	4b23      	ldr	r3, [pc, #140]	; (8004990 <xTaskResumeAll+0x128>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	429a      	cmp	r2, r3
 800490a:	d302      	bcc.n	8004912 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 800490c:	4b21      	ldr	r3, [pc, #132]	; (8004994 <xTaskResumeAll+0x12c>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004912:	4b1c      	ldr	r3, [pc, #112]	; (8004984 <xTaskResumeAll+0x11c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1cc      	bne.n	80048b4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004920:	f000 fb32 	bl	8004f88 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004924:	4b1c      	ldr	r3, [pc, #112]	; (8004998 <xTaskResumeAll+0x130>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d010      	beq.n	8004952 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004930:	f000 f846 	bl	80049c0 <xTaskIncrementTick>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800493a:	4b16      	ldr	r3, [pc, #88]	; (8004994 <xTaskResumeAll+0x12c>)
 800493c:	2201      	movs	r2, #1
 800493e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3b01      	subs	r3, #1
 8004944:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1f1      	bne.n	8004930 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 800494c:	4b12      	ldr	r3, [pc, #72]	; (8004998 <xTaskResumeAll+0x130>)
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004952:	4b10      	ldr	r3, [pc, #64]	; (8004994 <xTaskResumeAll+0x12c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800495a:	2301      	movs	r3, #1
 800495c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800495e:	4b0f      	ldr	r3, [pc, #60]	; (800499c <xTaskResumeAll+0x134>)
 8004960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800496e:	f001 fa29 	bl	8005dc4 <vPortExitCritical>

    return xAlreadyYielded;
 8004972:	68bb      	ldr	r3, [r7, #8]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	200003b4 	.word	0x200003b4
 8004980:	2000038c 	.word	0x2000038c
 8004984:	2000034c 	.word	0x2000034c
 8004988:	20000394 	.word	0x20000394
 800498c:	200002b8 	.word	0x200002b8
 8004990:	200002b4 	.word	0x200002b4
 8004994:	200003a0 	.word	0x200003a0
 8004998:	2000039c 	.word	0x2000039c
 800499c:	e000ed04 	.word	0xe000ed04

080049a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <xTaskGetTickCount+0x1c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80049ac:	687b      	ldr	r3, [r7, #4]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20000390 	.word	0x20000390

080049c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ca:	4b4e      	ldr	r3, [pc, #312]	; (8004b04 <xTaskIncrementTick+0x144>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f040 808e 	bne.w	8004af0 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049d4:	4b4c      	ldr	r3, [pc, #304]	; (8004b08 <xTaskIncrementTick+0x148>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3301      	adds	r3, #1
 80049da:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80049dc:	4a4a      	ldr	r2, [pc, #296]	; (8004b08 <xTaskIncrementTick+0x148>)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d120      	bne.n	8004a2a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80049e8:	4b48      	ldr	r3, [pc, #288]	; (8004b0c <xTaskIncrementTick+0x14c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <xTaskIncrementTick+0x48>
        __asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	603b      	str	r3, [r7, #0]
    }
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <xTaskIncrementTick+0x46>
 8004a08:	4b40      	ldr	r3, [pc, #256]	; (8004b0c <xTaskIncrementTick+0x14c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	4b40      	ldr	r3, [pc, #256]	; (8004b10 <xTaskIncrementTick+0x150>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a3e      	ldr	r2, [pc, #248]	; (8004b0c <xTaskIncrementTick+0x14c>)
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	4a3e      	ldr	r2, [pc, #248]	; (8004b10 <xTaskIncrementTick+0x150>)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	4b3d      	ldr	r3, [pc, #244]	; (8004b14 <xTaskIncrementTick+0x154>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	4a3c      	ldr	r2, [pc, #240]	; (8004b14 <xTaskIncrementTick+0x154>)
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	f000 faaf 	bl	8004f88 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004a2a:	4b3b      	ldr	r3, [pc, #236]	; (8004b18 <xTaskIncrementTick+0x158>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d348      	bcc.n	8004ac6 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a34:	4b35      	ldr	r3, [pc, #212]	; (8004b0c <xTaskIncrementTick+0x14c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d104      	bne.n	8004a48 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a3e:	4b36      	ldr	r3, [pc, #216]	; (8004b18 <xTaskIncrementTick+0x158>)
 8004a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a44:	601a      	str	r2, [r3, #0]
                    break;
 8004a46:	e03e      	b.n	8004ac6 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a48:	4b30      	ldr	r3, [pc, #192]	; (8004b0c <xTaskIncrementTick+0x14c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d203      	bcs.n	8004a68 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004a60:	4a2d      	ldr	r2, [pc, #180]	; (8004b18 <xTaskIncrementTick+0x158>)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a66:	e02e      	b.n	8004ac6 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fe fec1 	bl	80037f4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d004      	beq.n	8004a84 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	3318      	adds	r3, #24
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe feb8 	bl	80037f4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	2201      	movs	r2, #1
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	4b23      	ldr	r3, [pc, #140]	; (8004b1c <xTaskIncrementTick+0x15c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	4a22      	ldr	r2, [pc, #136]	; (8004b1c <xTaskIncrementTick+0x15c>)
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4a1f      	ldr	r2, [pc, #124]	; (8004b20 <xTaskIncrementTick+0x160>)
 8004aa4:	441a      	add	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f7fe fe44 	bl	800373a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <xTaskIncrementTick+0x164>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d3b9      	bcc.n	8004a34 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ac4:	e7b6      	b.n	8004a34 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ac6:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <xTaskIncrementTick+0x164>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004acc:	4914      	ldr	r1, [pc, #80]	; (8004b20 <xTaskIncrementTick+0x160>)
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d901      	bls.n	8004ae2 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <xTaskIncrementTick+0x168>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8004aea:	2301      	movs	r3, #1
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e004      	b.n	8004afa <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004af0:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <xTaskIncrementTick+0x16c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3301      	adds	r3, #1
 8004af6:	4a0d      	ldr	r2, [pc, #52]	; (8004b2c <xTaskIncrementTick+0x16c>)
 8004af8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004afa:	697b      	ldr	r3, [r7, #20]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	200003b4 	.word	0x200003b4
 8004b08:	20000390 	.word	0x20000390
 8004b0c:	20000344 	.word	0x20000344
 8004b10:	20000348 	.word	0x20000348
 8004b14:	200003a4 	.word	0x200003a4
 8004b18:	200003ac 	.word	0x200003ac
 8004b1c:	20000394 	.word	0x20000394
 8004b20:	200002b8 	.word	0x200002b8
 8004b24:	200002b4 	.word	0x200002b4
 8004b28:	200003a0 	.word	0x200003a0
 8004b2c:	2000039c 	.word	0x2000039c

08004b30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b36:	4b27      	ldr	r3, [pc, #156]	; (8004bd4 <vTaskSwitchContext+0xa4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004b3e:	4b26      	ldr	r3, [pc, #152]	; (8004bd8 <vTaskSwitchContext+0xa8>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004b44:	e03f      	b.n	8004bc6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004b46:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <vTaskSwitchContext+0xa8>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b4c:	4b23      	ldr	r3, [pc, #140]	; (8004bdc <vTaskSwitchContext+0xac>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	fab3 f383 	clz	r3, r3
 8004b58:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004b5a:	7afb      	ldrb	r3, [r7, #11]
 8004b5c:	f1c3 031f 	rsb	r3, r3, #31
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	491f      	ldr	r1, [pc, #124]	; (8004be0 <vTaskSwitchContext+0xb0>)
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <vTaskSwitchContext+0x5c>
        __asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	607b      	str	r3, [r7, #4]
    }
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <vTaskSwitchContext+0x5a>
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4a12      	ldr	r2, [pc, #72]	; (8004be0 <vTaskSwitchContext+0xb0>)
 8004b98:	4413      	add	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3308      	adds	r3, #8
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d104      	bne.n	8004bbc <vTaskSwitchContext+0x8c>
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	605a      	str	r2, [r3, #4]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <vTaskSwitchContext+0xb4>)
 8004bc4:	6013      	str	r3, [r2, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	200003b4 	.word	0x200003b4
 8004bd8:	200003a0 	.word	0x200003a0
 8004bdc:	20000394 	.word	0x20000394
 8004be0:	200002b8 	.word	0x200002b8
 8004be4:	200002b4 	.word	0x200002b4

08004be8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	60fb      	str	r3, [r7, #12]
    }
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <vTaskPlaceOnEventList+0x44>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3318      	adds	r3, #24
 8004c14:	4619      	mov	r1, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fe fdb3 	bl	8003782 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	6838      	ldr	r0, [r7, #0]
 8004c20:	f000 fb7e 	bl	8005320 <prvAddCurrentTaskToDelayedList>
}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	200002b4 	.word	0x200002b4

08004c30 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	617b      	str	r3, [r7, #20]
    }
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3318      	adds	r3, #24
 8004c5e:	4619      	mov	r1, r3
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f7fe fd6a 	bl	800373a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c70:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	68b8      	ldr	r0, [r7, #8]
 8004c76:	f000 fb53 	bl	8005320 <prvAddCurrentTaskToDelayedList>
    }
 8004c7a:	bf00      	nop
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200002b4 	.word	0x200002b4

08004c88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	60fb      	str	r3, [r7, #12]
    }
 8004cb0:	bf00      	nop
 8004cb2:	e7fe      	b.n	8004cb2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	3318      	adds	r3, #24
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe fd9b 	bl	80037f4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cbe:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <xTaskRemoveFromEventList+0xac>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d11c      	bne.n	8004d00 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fe fd92 	bl	80037f4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	4b17      	ldr	r3, [pc, #92]	; (8004d38 <xTaskRemoveFromEventList+0xb0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	4a16      	ldr	r2, [pc, #88]	; (8004d38 <xTaskRemoveFromEventList+0xb0>)
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4a13      	ldr	r2, [pc, #76]	; (8004d3c <xTaskRemoveFromEventList+0xb4>)
 8004cf0:	441a      	add	r2, r3
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f7fe fd1e 	bl	800373a <vListInsertEnd>
 8004cfe:	e005      	b.n	8004d0c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	3318      	adds	r3, #24
 8004d04:	4619      	mov	r1, r3
 8004d06:	480e      	ldr	r0, [pc, #56]	; (8004d40 <xTaskRemoveFromEventList+0xb8>)
 8004d08:	f7fe fd17 	bl	800373a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <xTaskRemoveFromEventList+0xbc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d905      	bls.n	8004d26 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <xTaskRemoveFromEventList+0xc0>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e001      	b.n	8004d2a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004d2a:	697b      	ldr	r3, [r7, #20]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	200003b4 	.word	0x200003b4
 8004d38:	20000394 	.word	0x20000394
 8004d3c:	200002b8 	.word	0x200002b8
 8004d40:	2000034c 	.word	0x2000034c
 8004d44:	200002b4 	.word	0x200002b4
 8004d48:	200003a0 	.word	0x200003a0

08004d4c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <vTaskInternalSetTimeOutState+0x24>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <vTaskInternalSetTimeOutState+0x28>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	605a      	str	r2, [r3, #4]
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	200003a4 	.word	0x200003a4
 8004d74:	20000390 	.word	0x20000390

08004d78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	613b      	str	r3, [r7, #16]
    }
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	60fb      	str	r3, [r7, #12]
    }
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004dba:	f000 ffd3 	bl	8005d64 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004dbe:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <xTaskCheckForTimeOut+0xc4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dd6:	d102      	bne.n	8004dde <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	e026      	b.n	8004e2c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <xTaskCheckForTimeOut+0xc8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d00a      	beq.n	8004e00 <xTaskCheckForTimeOut+0x88>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d305      	bcc.n	8004e00 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004df4:	2301      	movs	r3, #1
 8004df6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	e015      	b.n	8004e2c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d20b      	bcs.n	8004e22 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	1ad2      	subs	r2, r2, r3
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ff98 	bl	8004d4c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	e004      	b.n	8004e2c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004e2c:	f000 ffca 	bl	8005dc4 <vPortExitCritical>

    return xReturn;
 8004e30:	69fb      	ldr	r3, [r7, #28]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000390 	.word	0x20000390
 8004e40:	200003a4 	.word	0x200003a4

08004e44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004e48:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <vTaskMissedYield+0x14>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	200003a0 	.word	0x200003a0

08004e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004e64:	f000 f852 	bl	8004f0c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <prvIdleTask+0x28>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d9f9      	bls.n	8004e64 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <prvIdleTask+0x2c>)
 8004e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004e80:	e7f0      	b.n	8004e64 <prvIdleTask+0x8>
 8004e82:	bf00      	nop
 8004e84:	200002b8 	.word	0x200002b8
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e92:	2300      	movs	r3, #0
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	e00c      	b.n	8004eb2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4a12      	ldr	r2, [pc, #72]	; (8004eec <prvInitialiseTaskLists+0x60>)
 8004ea4:	4413      	add	r3, r2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fe fc1a 	bl	80036e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d9ef      	bls.n	8004e98 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004eb8:	480d      	ldr	r0, [pc, #52]	; (8004ef0 <prvInitialiseTaskLists+0x64>)
 8004eba:	f7fe fc11 	bl	80036e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004ebe:	480d      	ldr	r0, [pc, #52]	; (8004ef4 <prvInitialiseTaskLists+0x68>)
 8004ec0:	f7fe fc0e 	bl	80036e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004ec4:	480c      	ldr	r0, [pc, #48]	; (8004ef8 <prvInitialiseTaskLists+0x6c>)
 8004ec6:	f7fe fc0b 	bl	80036e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004eca:	480c      	ldr	r0, [pc, #48]	; (8004efc <prvInitialiseTaskLists+0x70>)
 8004ecc:	f7fe fc08 	bl	80036e0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004ed0:	480b      	ldr	r0, [pc, #44]	; (8004f00 <prvInitialiseTaskLists+0x74>)
 8004ed2:	f7fe fc05 	bl	80036e0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004ed6:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <prvInitialiseTaskLists+0x78>)
 8004ed8:	4a05      	ldr	r2, [pc, #20]	; (8004ef0 <prvInitialiseTaskLists+0x64>)
 8004eda:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004edc:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <prvInitialiseTaskLists+0x7c>)
 8004ede:	4a05      	ldr	r2, [pc, #20]	; (8004ef4 <prvInitialiseTaskLists+0x68>)
 8004ee0:	601a      	str	r2, [r3, #0]
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	200002b8 	.word	0x200002b8
 8004ef0:	2000031c 	.word	0x2000031c
 8004ef4:	20000330 	.word	0x20000330
 8004ef8:	2000034c 	.word	0x2000034c
 8004efc:	20000360 	.word	0x20000360
 8004f00:	20000378 	.word	0x20000378
 8004f04:	20000344 	.word	0x20000344
 8004f08:	20000348 	.word	0x20000348

08004f0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f12:	e019      	b.n	8004f48 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004f14:	f000 ff26 	bl	8005d64 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f18:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <prvCheckTasksWaitingTermination+0x50>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fe fc65 	bl	80037f4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <prvCheckTasksWaitingTermination+0x54>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	4a0b      	ldr	r2, [pc, #44]	; (8004f60 <prvCheckTasksWaitingTermination+0x54>)
 8004f32:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004f34:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <prvCheckTasksWaitingTermination+0x58>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <prvCheckTasksWaitingTermination+0x58>)
 8004f3c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004f3e:	f000 ff41 	bl	8005dc4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f810 	bl	8004f68 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <prvCheckTasksWaitingTermination+0x58>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e1      	bne.n	8004f14 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004f50:	bf00      	nop
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20000360 	.word	0x20000360
 8004f60:	2000038c 	.word	0x2000038c
 8004f64:	20000374 	.word	0x20000374

08004f68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 f8f9 	bl	800616c <vPortFree>
                vPortFree( pxTCB );
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f001 f8f6 	bl	800616c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004f80:	bf00      	nop
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <prvResetNextTaskUnblockTime+0x30>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d104      	bne.n	8004fa0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004f96:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <prvResetNextTaskUnblockTime+0x34>)
 8004f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f9c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004f9e:	e005      	b.n	8004fac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <prvResetNextTaskUnblockTime+0x30>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a04      	ldr	r2, [pc, #16]	; (8004fbc <prvResetNextTaskUnblockTime+0x34>)
 8004faa:	6013      	str	r3, [r2, #0]
}
 8004fac:	bf00      	nop
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	20000344 	.word	0x20000344
 8004fbc:	200003ac 	.word	0x200003ac

08004fc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <xTaskGetSchedulerState+0x34>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d102      	bne.n	8004fd4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	607b      	str	r3, [r7, #4]
 8004fd2:	e008      	b.n	8004fe6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fd4:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <xTaskGetSchedulerState+0x38>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	607b      	str	r3, [r7, #4]
 8004fe0:	e001      	b.n	8004fe6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004fe6:	687b      	ldr	r3, [r7, #4]
    }
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	20000398 	.word	0x20000398
 8004ff8:	200003b4 	.word	0x200003b4

08004ffc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d05e      	beq.n	80050d0 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005016:	4b31      	ldr	r3, [pc, #196]	; (80050dc <xTaskPriorityInherit+0xe0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	429a      	cmp	r2, r3
 800501e:	d24e      	bcs.n	80050be <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	db06      	blt.n	8005036 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005028:	4b2c      	ldr	r3, [pc, #176]	; (80050dc <xTaskPriorityInherit+0xe0>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	f1c3 0205 	rsb	r2, r3, #5
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	6959      	ldr	r1, [r3, #20]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4a26      	ldr	r2, [pc, #152]	; (80050e0 <xTaskPriorityInherit+0xe4>)
 8005048:	4413      	add	r3, r2
 800504a:	4299      	cmp	r1, r3
 800504c:	d12f      	bne.n	80050ae <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	3304      	adds	r3, #4
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe fbce 	bl	80037f4 <uxListRemove>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	2201      	movs	r2, #1
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	43da      	mvns	r2, r3
 800506a:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <xTaskPriorityInherit+0xe8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4013      	ands	r3, r2
 8005070:	4a1c      	ldr	r2, [pc, #112]	; (80050e4 <xTaskPriorityInherit+0xe8>)
 8005072:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005074:	4b19      	ldr	r3, [pc, #100]	; (80050dc <xTaskPriorityInherit+0xe0>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	2201      	movs	r2, #1
 8005084:	409a      	lsls	r2, r3
 8005086:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <xTaskPriorityInherit+0xe8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4313      	orrs	r3, r2
 800508c:	4a15      	ldr	r2, [pc, #84]	; (80050e4 <xTaskPriorityInherit+0xe8>)
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4a10      	ldr	r2, [pc, #64]	; (80050e0 <xTaskPriorityInherit+0xe4>)
 800509e:	441a      	add	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4619      	mov	r1, r3
 80050a6:	4610      	mov	r0, r2
 80050a8:	f7fe fb47 	bl	800373a <vListInsertEnd>
 80050ac:	e004      	b.n	80050b8 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80050ae:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <xTaskPriorityInherit+0xe0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80050b8:	2301      	movs	r3, #1
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	e008      	b.n	80050d0 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050c2:	4b06      	ldr	r3, [pc, #24]	; (80050dc <xTaskPriorityInherit+0xe0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d201      	bcs.n	80050d0 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80050cc:	2301      	movs	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80050d0:	68fb      	ldr	r3, [r7, #12]
    }
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	200002b4 	.word	0x200002b4
 80050e0:	200002b8 	.word	0x200002b8
 80050e4:	20000394 	.word	0x20000394

080050e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d063      	beq.n	80051c6 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80050fe:	4b34      	ldr	r3, [pc, #208]	; (80051d0 <xTaskPriorityDisinherit+0xe8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	429a      	cmp	r2, r3
 8005106:	d00a      	beq.n	800511e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	60fb      	str	r3, [r7, #12]
    }
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60bb      	str	r3, [r7, #8]
    }
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005140:	1e5a      	subs	r2, r3, #1
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514e:	429a      	cmp	r2, r3
 8005150:	d039      	beq.n	80051c6 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d135      	bne.n	80051c6 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	3304      	adds	r3, #4
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe fb48 	bl	80037f4 <uxListRemove>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	2201      	movs	r2, #1
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43da      	mvns	r2, r3
 8005176:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <xTaskPriorityDisinherit+0xec>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4013      	ands	r3, r2
 800517c:	4a15      	ldr	r2, [pc, #84]	; (80051d4 <xTaskPriorityDisinherit+0xec>)
 800517e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	f1c3 0205 	rsb	r2, r3, #5
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	2201      	movs	r2, #1
 800519a:	409a      	lsls	r2, r3
 800519c:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <xTaskPriorityDisinherit+0xec>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	4a0c      	ldr	r2, [pc, #48]	; (80051d4 <xTaskPriorityDisinherit+0xec>)
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4a09      	ldr	r2, [pc, #36]	; (80051d8 <xTaskPriorityDisinherit+0xf0>)
 80051b4:	441a      	add	r2, r3
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4619      	mov	r1, r3
 80051bc:	4610      	mov	r0, r2
 80051be:	f7fe fabc 	bl	800373a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80051c2:	2301      	movs	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80051c6:	697b      	ldr	r3, [r7, #20]
    }
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	200002b4 	.word	0x200002b4
 80051d4:	20000394 	.word	0x20000394
 80051d8:	200002b8 	.word	0x200002b8

080051dc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80051ea:	2301      	movs	r3, #1
 80051ec:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d077      	beq.n	80052e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	60fb      	str	r3, [r7, #12]
    }
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d902      	bls.n	8005222 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	61fb      	str	r3, [r7, #28]
 8005220:	e002      	b.n	8005228 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005226:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	429a      	cmp	r2, r3
 8005230:	d058      	beq.n	80052e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	429a      	cmp	r2, r3
 800523a:	d153      	bne.n	80052e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800523c:	4b2b      	ldr	r3, [pc, #172]	; (80052ec <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	429a      	cmp	r2, r3
 8005244:	d10a      	bne.n	800525c <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	60bb      	str	r3, [r7, #8]
    }
 8005258:	bf00      	nop
 800525a:	e7fe      	b.n	800525a <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	db04      	blt.n	800527a <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f1c3 0205 	rsb	r2, r3, #5
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	6959      	ldr	r1, [r3, #20]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4a19      	ldr	r2, [pc, #100]	; (80052f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800528a:	4413      	add	r3, r2
 800528c:	4299      	cmp	r1, r3
 800528e:	d129      	bne.n	80052e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	3304      	adds	r3, #4
 8005294:	4618      	mov	r0, r3
 8005296:	f7fe faad 	bl	80037f4 <uxListRemove>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	2201      	movs	r2, #1
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	43da      	mvns	r2, r3
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4013      	ands	r3, r2
 80052b2:	4a10      	ldr	r2, [pc, #64]	; (80052f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80052b4:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ba:	2201      	movs	r2, #1
 80052bc:	409a      	lsls	r2, r3
 80052be:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	4a0b      	ldr	r2, [pc, #44]	; (80052f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4a06      	ldr	r2, [pc, #24]	; (80052f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80052d6:	441a      	add	r2, r3
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f7fe fa2b 	bl	800373a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80052e4:	bf00      	nop
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	200002b4 	.word	0x200002b4
 80052f0:	200002b8 	.word	0x200002b8
 80052f4:	20000394 	.word	0x20000394

080052f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80052fc:	4b07      	ldr	r3, [pc, #28]	; (800531c <pvTaskIncrementMutexHeldCount+0x24>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d004      	beq.n	800530e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <pvTaskIncrementMutexHeldCount+0x24>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800530a:	3201      	adds	r2, #1
 800530c:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800530e:	4b03      	ldr	r3, [pc, #12]	; (800531c <pvTaskIncrementMutexHeldCount+0x24>)
 8005310:	681b      	ldr	r3, [r3, #0]
    }
 8005312:	4618      	mov	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	200002b4 	.word	0x200002b4

08005320 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800532a:	4b29      	ldr	r3, [pc, #164]	; (80053d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005330:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3304      	adds	r3, #4
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fa5c 	bl	80037f4 <uxListRemove>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10b      	bne.n	800535a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005342:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	2201      	movs	r2, #1
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	43da      	mvns	r2, r3
 8005350:	4b21      	ldr	r3, [pc, #132]	; (80053d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4013      	ands	r3, r2
 8005356:	4a20      	ldr	r2, [pc, #128]	; (80053d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005358:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005360:	d10a      	bne.n	8005378 <prvAddCurrentTaskToDelayedList+0x58>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005368:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3304      	adds	r3, #4
 800536e:	4619      	mov	r1, r3
 8005370:	481a      	ldr	r0, [pc, #104]	; (80053dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005372:	f7fe f9e2 	bl	800373a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005376:	e026      	b.n	80053c6 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005380:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	429a      	cmp	r2, r3
 800538e:	d209      	bcs.n	80053a4 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005390:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3304      	adds	r3, #4
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f7fe f9f0 	bl	8003782 <vListInsert>
}
 80053a2:	e010      	b.n	80053c6 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053a4:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3304      	adds	r3, #4
 80053ae:	4619      	mov	r1, r3
 80053b0:	4610      	mov	r0, r2
 80053b2:	f7fe f9e6 	bl	8003782 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80053b6:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d202      	bcs.n	80053c6 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80053c0:	4a09      	ldr	r2, [pc, #36]	; (80053e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	6013      	str	r3, [r2, #0]
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000390 	.word	0x20000390
 80053d4:	200002b4 	.word	0x200002b4
 80053d8:	20000394 	.word	0x20000394
 80053dc:	20000378 	.word	0x20000378
 80053e0:	20000348 	.word	0x20000348
 80053e4:	20000344 	.word	0x20000344
 80053e8:	200003ac 	.word	0x200003ac

080053ec <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80053f6:	f000 fad5 	bl	80059a4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80053fa:	4b11      	ldr	r3, [pc, #68]	; (8005440 <xTimerCreateTimerTask+0x54>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00b      	beq.n	800541a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005402:	4b10      	ldr	r3, [pc, #64]	; (8005444 <xTimerCreateTimerTask+0x58>)
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	2302      	movs	r3, #2
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	2300      	movs	r3, #0
 800540c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005410:	490d      	ldr	r1, [pc, #52]	; (8005448 <xTimerCreateTimerTask+0x5c>)
 8005412:	480e      	ldr	r0, [pc, #56]	; (800544c <xTimerCreateTimerTask+0x60>)
 8005414:	f7ff f84e 	bl	80044b4 <xTaskCreate>
 8005418:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	603b      	str	r3, [r7, #0]
    }
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005436:	687b      	ldr	r3, [r7, #4]
    }
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	200003e8 	.word	0x200003e8
 8005444:	200003ec 	.word	0x200003ec
 8005448:	08007998 	.word	0x08007998
 800544c:	08005585 	.word	0x08005585

08005450 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005450:	b580      	push	{r7, lr}
 8005452:	b08a      	sub	sp, #40	; 0x28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800545e:	2300      	movs	r3, #0
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <xTimerGenericCommand+0x2e>
        __asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	623b      	str	r3, [r7, #32]
    }
 800547a:	bf00      	nop
 800547c:	e7fe      	b.n	800547c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800547e:	4b1a      	ldr	r3, [pc, #104]	; (80054e8 <xTimerGenericCommand+0x98>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d02a      	beq.n	80054dc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b05      	cmp	r3, #5
 8005496:	dc18      	bgt.n	80054ca <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005498:	f7ff fd92 	bl	8004fc0 <xTaskGetSchedulerState>
 800549c:	4603      	mov	r3, r0
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d109      	bne.n	80054b6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054a2:	4b11      	ldr	r3, [pc, #68]	; (80054e8 <xTimerGenericCommand+0x98>)
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	f107 0114 	add.w	r1, r7, #20
 80054aa:	2300      	movs	r3, #0
 80054ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ae:	f7fe fae7 	bl	8003a80 <xQueueGenericSend>
 80054b2:	6278      	str	r0, [r7, #36]	; 0x24
 80054b4:	e012      	b.n	80054dc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054b6:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <xTimerGenericCommand+0x98>)
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	f107 0114 	add.w	r1, r7, #20
 80054be:	2300      	movs	r3, #0
 80054c0:	2200      	movs	r2, #0
 80054c2:	f7fe fadd 	bl	8003a80 <xQueueGenericSend>
 80054c6:	6278      	str	r0, [r7, #36]	; 0x24
 80054c8:	e008      	b.n	80054dc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054ca:	4b07      	ldr	r3, [pc, #28]	; (80054e8 <xTimerGenericCommand+0x98>)
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	f107 0114 	add.w	r1, r7, #20
 80054d2:	2300      	movs	r3, #0
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	f7fe fbd1 	bl	8003c7c <xQueueGenericSendFromISR>
 80054da:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80054de:	4618      	mov	r0, r3
 80054e0:	3728      	adds	r7, #40	; 0x28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	200003e8 	.word	0x200003e8

080054ec <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f6:	4b22      	ldr	r3, [pc, #136]	; (8005580 <prvProcessExpiredTimer+0x94>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	3304      	adds	r3, #4
 8005504:	4618      	mov	r0, r3
 8005506:	f7fe f975 	bl	80037f4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d022      	beq.n	800555e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	699a      	ldr	r2, [r3, #24]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	18d1      	adds	r1, r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	6978      	ldr	r0, [r7, #20]
 8005526:	f000 f8d1 	bl	80056cc <prvInsertTimerInActiveList>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01f      	beq.n	8005570 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005530:	2300      	movs	r3, #0
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	2100      	movs	r1, #0
 800553a:	6978      	ldr	r0, [r7, #20]
 800553c:	f7ff ff88 	bl	8005450 <xTimerGenericCommand>
 8005540:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d113      	bne.n	8005570 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	60fb      	str	r3, [r7, #12]
    }
 800555a:	bf00      	nop
 800555c:	e7fe      	b.n	800555c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	b2da      	uxtb	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	6978      	ldr	r0, [r7, #20]
 8005576:	4798      	blx	r3
    }
 8005578:	bf00      	nop
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	200003e0 	.word	0x200003e0

08005584 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800558c:	f107 0308 	add.w	r3, r7, #8
 8005590:	4618      	mov	r0, r3
 8005592:	f000 f857 	bl	8005644 <prvGetNextExpireTime>
 8005596:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4619      	mov	r1, r3
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f803 	bl	80055a8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80055a2:	f000 f8d5 	bl	8005750 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055a6:	e7f1      	b.n	800558c <prvTimerTask+0x8>

080055a8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80055b2:	f7ff f94b 	bl	800484c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055b6:	f107 0308 	add.w	r3, r7, #8
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 f866 	bl	800568c <prvSampleTimeNow>
 80055c0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d130      	bne.n	800562a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10a      	bne.n	80055e4 <prvProcessTimerOrBlockTask+0x3c>
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d806      	bhi.n	80055e4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80055d6:	f7ff f947 	bl	8004868 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055da:	68f9      	ldr	r1, [r7, #12]
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff ff85 	bl	80054ec <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80055e2:	e024      	b.n	800562e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d008      	beq.n	80055fc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055ea:	4b13      	ldr	r3, [pc, #76]	; (8005638 <prvProcessTimerOrBlockTask+0x90>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <prvProcessTimerOrBlockTask+0x50>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <prvProcessTimerOrBlockTask+0x52>
 80055f8:	2300      	movs	r3, #0
 80055fa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055fc:	4b0f      	ldr	r3, [pc, #60]	; (800563c <prvProcessTimerOrBlockTask+0x94>)
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	4619      	mov	r1, r3
 800560a:	f7fe ff1f 	bl	800444c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800560e:	f7ff f92b 	bl	8004868 <xTaskResumeAll>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005618:	4b09      	ldr	r3, [pc, #36]	; (8005640 <prvProcessTimerOrBlockTask+0x98>)
 800561a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	f3bf 8f6f 	isb	sy
    }
 8005628:	e001      	b.n	800562e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800562a:	f7ff f91d 	bl	8004868 <xTaskResumeAll>
    }
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	200003e4 	.word	0x200003e4
 800563c:	200003e8 	.word	0x200003e8
 8005640:	e000ed04 	.word	0xe000ed04

08005644 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800564c:	4b0e      	ldr	r3, [pc, #56]	; (8005688 <prvGetNextExpireTime+0x44>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <prvGetNextExpireTime+0x16>
 8005656:	2201      	movs	r2, #1
 8005658:	e000      	b.n	800565c <prvGetNextExpireTime+0x18>
 800565a:	2200      	movs	r2, #0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d105      	bne.n	8005674 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005668:	4b07      	ldr	r3, [pc, #28]	; (8005688 <prvGetNextExpireTime+0x44>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	e001      	b.n	8005678 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005678:	68fb      	ldr	r3, [r7, #12]
    }
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	200003e0 	.word	0x200003e0

0800568c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005694:	f7ff f984 	bl	80049a0 <xTaskGetTickCount>
 8005698:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800569a:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <prvSampleTimeNow+0x3c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d205      	bcs.n	80056b0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80056a4:	f000 f91a 	bl	80058dc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	e002      	b.n	80056b6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80056b6:	4a04      	ldr	r2, [pc, #16]	; (80056c8 <prvSampleTimeNow+0x3c>)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80056bc:	68fb      	ldr	r3, [r7, #12]
    }
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	200003f0 	.word	0x200003f0

080056cc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d812      	bhi.n	8005718 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	1ad2      	subs	r2, r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d302      	bcc.n	8005706 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005700:	2301      	movs	r3, #1
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	e01b      	b.n	800573e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005706:	4b10      	ldr	r3, [pc, #64]	; (8005748 <prvInsertTimerInActiveList+0x7c>)
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3304      	adds	r3, #4
 800570e:	4619      	mov	r1, r3
 8005710:	4610      	mov	r0, r2
 8005712:	f7fe f836 	bl	8003782 <vListInsert>
 8005716:	e012      	b.n	800573e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d206      	bcs.n	800572e <prvInsertTimerInActiveList+0x62>
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d302      	bcc.n	800572e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005728:	2301      	movs	r3, #1
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e007      	b.n	800573e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800572e:	4b07      	ldr	r3, [pc, #28]	; (800574c <prvInsertTimerInActiveList+0x80>)
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3304      	adds	r3, #4
 8005736:	4619      	mov	r1, r3
 8005738:	4610      	mov	r0, r2
 800573a:	f7fe f822 	bl	8003782 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800573e:	697b      	ldr	r3, [r7, #20]
    }
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	200003e4 	.word	0x200003e4
 800574c:	200003e0 	.word	0x200003e0

08005750 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005750:	b580      	push	{r7, lr}
 8005752:	b08c      	sub	sp, #48	; 0x30
 8005754:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005756:	e0ae      	b.n	80058b6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f2c0 80aa 	blt.w	80058b4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	3304      	adds	r3, #4
 8005770:	4618      	mov	r0, r3
 8005772:	f7fe f83f 	bl	80037f4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005776:	1d3b      	adds	r3, r7, #4
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff ff87 	bl	800568c <prvSampleTimeNow>
 800577e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b09      	cmp	r3, #9
 8005784:	f200 8097 	bhi.w	80058b6 <prvProcessReceivedCommands+0x166>
 8005788:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <prvProcessReceivedCommands+0x40>)
 800578a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578e:	bf00      	nop
 8005790:	080057b9 	.word	0x080057b9
 8005794:	080057b9 	.word	0x080057b9
 8005798:	080057b9 	.word	0x080057b9
 800579c:	0800582d 	.word	0x0800582d
 80057a0:	08005841 	.word	0x08005841
 80057a4:	0800588b 	.word	0x0800588b
 80057a8:	080057b9 	.word	0x080057b9
 80057ac:	080057b9 	.word	0x080057b9
 80057b0:	0800582d 	.word	0x0800582d
 80057b4:	08005841 	.word	0x08005841
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	18d1      	adds	r1, r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a3a      	ldr	r2, [r7, #32]
 80057d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057d8:	f7ff ff78 	bl	80056cc <prvInsertTimerInActiveList>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d069      	beq.n	80058b6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057e8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d05e      	beq.n	80058b6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	441a      	add	r2, r3
 8005800:	2300      	movs	r3, #0
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	2300      	movs	r3, #0
 8005806:	2100      	movs	r1, #0
 8005808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800580a:	f7ff fe21 	bl	8005450 <xTimerGenericCommand>
 800580e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d14f      	bne.n	80058b6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	61bb      	str	r3, [r7, #24]
    }
 8005828:	bf00      	nop
 800582a:	e7fe      	b.n	800582a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	b2da      	uxtb	r2, r3
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800583e:	e03a      	b.n	80058b6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	b2da      	uxtb	r2, r3
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	617b      	str	r3, [r7, #20]
    }
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	18d1      	adds	r1, r2, r3
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	6a3a      	ldr	r2, [r7, #32]
 8005882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005884:	f7ff ff22 	bl	80056cc <prvInsertTimerInActiveList>
                        break;
 8005888:	e015      	b.n	80058b6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d103      	bne.n	80058a0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800589a:	f000 fc67 	bl	800616c <vPortFree>
 800589e:	e00a      	b.n	80058b6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058a6:	f023 0301 	bic.w	r3, r3, #1
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80058b2:	e000      	b.n	80058b6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80058b4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058b6:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <prvProcessReceivedCommands+0x188>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f107 0108 	add.w	r1, r7, #8
 80058be:	2200      	movs	r2, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fe fa85 	bl	8003dd0 <xQueueReceive>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f47f af45 	bne.w	8005758 <prvProcessReceivedCommands+0x8>
        }
    }
 80058ce:	bf00      	nop
 80058d0:	bf00      	nop
 80058d2:	3728      	adds	r7, #40	; 0x28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	200003e8 	.word	0x200003e8

080058dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058e2:	e048      	b.n	8005976 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058e4:	4b2d      	ldr	r3, [pc, #180]	; (800599c <prvSwitchTimerLists+0xc0>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ee:	4b2b      	ldr	r3, [pc, #172]	; (800599c <prvSwitchTimerLists+0xc0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fd ff79 	bl	80037f4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d02e      	beq.n	8005976 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	429a      	cmp	r2, r3
 8005928:	d90e      	bls.n	8005948 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005936:	4b19      	ldr	r3, [pc, #100]	; (800599c <prvSwitchTimerLists+0xc0>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3304      	adds	r3, #4
 800593e:	4619      	mov	r1, r3
 8005940:	4610      	mov	r0, r2
 8005942:	f7fd ff1e 	bl	8003782 <vListInsert>
 8005946:	e016      	b.n	8005976 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005948:	2300      	movs	r3, #0
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	2300      	movs	r3, #0
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	2100      	movs	r1, #0
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff fd7c 	bl	8005450 <xTimerGenericCommand>
 8005958:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	603b      	str	r3, [r7, #0]
    }
 8005972:	bf00      	nop
 8005974:	e7fe      	b.n	8005974 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005976:	4b09      	ldr	r3, [pc, #36]	; (800599c <prvSwitchTimerLists+0xc0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1b1      	bne.n	80058e4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <prvSwitchTimerLists+0xc0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005986:	4b06      	ldr	r3, [pc, #24]	; (80059a0 <prvSwitchTimerLists+0xc4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a04      	ldr	r2, [pc, #16]	; (800599c <prvSwitchTimerLists+0xc0>)
 800598c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800598e:	4a04      	ldr	r2, [pc, #16]	; (80059a0 <prvSwitchTimerLists+0xc4>)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	6013      	str	r3, [r2, #0]
    }
 8005994:	bf00      	nop
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	200003e0 	.word	0x200003e0
 80059a0:	200003e4 	.word	0x200003e4

080059a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80059a8:	f000 f9dc 	bl	8005d64 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80059ac:	4b12      	ldr	r3, [pc, #72]	; (80059f8 <prvCheckForValidListAndQueue+0x54>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d11d      	bne.n	80059f0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80059b4:	4811      	ldr	r0, [pc, #68]	; (80059fc <prvCheckForValidListAndQueue+0x58>)
 80059b6:	f7fd fe93 	bl	80036e0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80059ba:	4811      	ldr	r0, [pc, #68]	; (8005a00 <prvCheckForValidListAndQueue+0x5c>)
 80059bc:	f7fd fe90 	bl	80036e0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80059c0:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <prvCheckForValidListAndQueue+0x60>)
 80059c2:	4a0e      	ldr	r2, [pc, #56]	; (80059fc <prvCheckForValidListAndQueue+0x58>)
 80059c4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <prvCheckForValidListAndQueue+0x64>)
 80059c8:	4a0d      	ldr	r2, [pc, #52]	; (8005a00 <prvCheckForValidListAndQueue+0x5c>)
 80059ca:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80059cc:	2200      	movs	r2, #0
 80059ce:	210c      	movs	r1, #12
 80059d0:	200a      	movs	r0, #10
 80059d2:	f7fd ffa1 	bl	8003918 <xQueueGenericCreate>
 80059d6:	4603      	mov	r3, r0
 80059d8:	4a07      	ldr	r2, [pc, #28]	; (80059f8 <prvCheckForValidListAndQueue+0x54>)
 80059da:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <prvCheckForValidListAndQueue+0x54>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059e4:	4b04      	ldr	r3, [pc, #16]	; (80059f8 <prvCheckForValidListAndQueue+0x54>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4908      	ldr	r1, [pc, #32]	; (8005a0c <prvCheckForValidListAndQueue+0x68>)
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe fd04 	bl	80043f8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80059f0:	f000 f9e8 	bl	8005dc4 <vPortExitCritical>
    }
 80059f4:	bf00      	nop
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	200003e8 	.word	0x200003e8
 80059fc:	200003b8 	.word	0x200003b8
 8005a00:	200003cc 	.word	0x200003cc
 8005a04:	200003e0 	.word	0x200003e0
 8005a08:	200003e4 	.word	0x200003e4
 8005a0c:	080079a0 	.word	0x080079a0

08005a10 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3b04      	subs	r3, #4
 8005a20:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3b04      	subs	r3, #4
 8005a2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f023 0201 	bic.w	r2, r3, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3b04      	subs	r3, #4
 8005a3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005a40:	4a0c      	ldr	r2, [pc, #48]	; (8005a74 <pxPortInitialiseStack+0x64>)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3b14      	subs	r3, #20
 8005a4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3b04      	subs	r3, #4
 8005a56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f06f 0202 	mvn.w	r2, #2
 8005a5e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3b20      	subs	r3, #32
 8005a64:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005a66:	68fb      	ldr	r3, [r7, #12]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	08005a79 	.word	0x08005a79

08005a78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005a82:	4b12      	ldr	r3, [pc, #72]	; (8005acc <prvTaskExitError+0x54>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a8a:	d00a      	beq.n	8005aa2 <prvTaskExitError+0x2a>
        __asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	60fb      	str	r3, [r7, #12]
    }
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <prvTaskExitError+0x28>
        __asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	60bb      	str	r3, [r7, #8]
    }
 8005ab4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005ab6:	bf00      	nop
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0fc      	beq.n	8005ab8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005abe:	bf00      	nop
 8005ac0:	bf00      	nop
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	2000000c 	.word	0x2000000c

08005ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <pxCurrentTCBConst2>)
 8005ad2:	6819      	ldr	r1, [r3, #0]
 8005ad4:	6808      	ldr	r0, [r1, #0]
 8005ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	f380 8809 	msr	PSP, r0
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f04f 0000 	mov.w	r0, #0
 8005ae6:	f380 8811 	msr	BASEPRI, r0
 8005aea:	4770      	bx	lr
 8005aec:	f3af 8000 	nop.w

08005af0 <pxCurrentTCBConst2>:
 8005af0:	200002b4 	.word	0x200002b4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop

08005af8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005af8:	4808      	ldr	r0, [pc, #32]	; (8005b1c <prvPortStartFirstTask+0x24>)
 8005afa:	6800      	ldr	r0, [r0, #0]
 8005afc:	6800      	ldr	r0, [r0, #0]
 8005afe:	f380 8808 	msr	MSP, r0
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8814 	msr	CONTROL, r0
 8005b0a:	b662      	cpsie	i
 8005b0c:	b661      	cpsie	f
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	df00      	svc	0
 8005b18:	bf00      	nop
 8005b1a:	0000      	.short	0x0000
 8005b1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005b20:	bf00      	nop
 8005b22:	bf00      	nop

08005b24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b2a:	4b46      	ldr	r3, [pc, #280]	; (8005c44 <xPortStartScheduler+0x120>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a46      	ldr	r2, [pc, #280]	; (8005c48 <xPortStartScheduler+0x124>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d10a      	bne.n	8005b4a <xPortStartScheduler+0x26>
        __asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	613b      	str	r3, [r7, #16]
    }
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b4a:	4b3e      	ldr	r3, [pc, #248]	; (8005c44 <xPortStartScheduler+0x120>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a3f      	ldr	r2, [pc, #252]	; (8005c4c <xPortStartScheduler+0x128>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d10a      	bne.n	8005b6a <xPortStartScheduler+0x46>
        __asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	60fb      	str	r3, [r7, #12]
    }
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b6a:	4b39      	ldr	r3, [pc, #228]	; (8005c50 <xPortStartScheduler+0x12c>)
 8005b6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	22ff      	movs	r2, #255	; 0xff
 8005b7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	4b31      	ldr	r3, [pc, #196]	; (8005c54 <xPortStartScheduler+0x130>)
 8005b90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b92:	4b31      	ldr	r3, [pc, #196]	; (8005c58 <xPortStartScheduler+0x134>)
 8005b94:	2207      	movs	r2, #7
 8005b96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b98:	e009      	b.n	8005bae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005b9a:	4b2f      	ldr	r3, [pc, #188]	; (8005c58 <xPortStartScheduler+0x134>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	4a2d      	ldr	r2, [pc, #180]	; (8005c58 <xPortStartScheduler+0x134>)
 8005ba2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	2b80      	cmp	r3, #128	; 0x80
 8005bb8:	d0ef      	beq.n	8005b9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bba:	4b27      	ldr	r3, [pc, #156]	; (8005c58 <xPortStartScheduler+0x134>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f1c3 0307 	rsb	r3, r3, #7
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d00a      	beq.n	8005bdc <xPortStartScheduler+0xb8>
        __asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	60bb      	str	r3, [r7, #8]
    }
 8005bd8:	bf00      	nop
 8005bda:	e7fe      	b.n	8005bda <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bdc:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <xPortStartScheduler+0x134>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	4a1d      	ldr	r2, [pc, #116]	; (8005c58 <xPortStartScheduler+0x134>)
 8005be4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005be6:	4b1c      	ldr	r3, [pc, #112]	; (8005c58 <xPortStartScheduler+0x134>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bee:	4a1a      	ldr	r2, [pc, #104]	; (8005c58 <xPortStartScheduler+0x134>)
 8005bf0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005bfa:	4b18      	ldr	r3, [pc, #96]	; (8005c5c <xPortStartScheduler+0x138>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a17      	ldr	r2, [pc, #92]	; (8005c5c <xPortStartScheduler+0x138>)
 8005c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005c06:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <xPortStartScheduler+0x138>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a14      	ldr	r2, [pc, #80]	; (8005c5c <xPortStartScheduler+0x138>)
 8005c0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005c12:	f000 f95b 	bl	8005ecc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005c16:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <xPortStartScheduler+0x13c>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005c1c:	f000 f97a 	bl	8005f14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c20:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <xPortStartScheduler+0x140>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a0f      	ldr	r2, [pc, #60]	; (8005c64 <xPortStartScheduler+0x140>)
 8005c26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005c2c:	f7ff ff64 	bl	8005af8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005c30:	f7fe ff7e 	bl	8004b30 <vTaskSwitchContext>
    prvTaskExitError();
 8005c34:	f7ff ff20 	bl	8005a78 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	e000ed00 	.word	0xe000ed00
 8005c48:	410fc271 	.word	0x410fc271
 8005c4c:	410fc270 	.word	0x410fc270
 8005c50:	e000e400 	.word	0xe000e400
 8005c54:	200003f4 	.word	0x200003f4
 8005c58:	200003f8 	.word	0x200003f8
 8005c5c:	e000ed20 	.word	0xe000ed20
 8005c60:	2000000c 	.word	0x2000000c
 8005c64:	e000ef34 	.word	0xe000ef34

08005c68 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c6e:	4b37      	ldr	r3, [pc, #220]	; (8005d4c <vInitPrioGroupValue+0xe4>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a37      	ldr	r2, [pc, #220]	; (8005d50 <vInitPrioGroupValue+0xe8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d10a      	bne.n	8005c8e <vInitPrioGroupValue+0x26>
        __asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	613b      	str	r3, [r7, #16]
    }
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c8e:	4b2f      	ldr	r3, [pc, #188]	; (8005d4c <vInitPrioGroupValue+0xe4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a30      	ldr	r2, [pc, #192]	; (8005d54 <vInitPrioGroupValue+0xec>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d10a      	bne.n	8005cae <vInitPrioGroupValue+0x46>
        __asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	60fb      	str	r3, [r7, #12]
    }
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cae:	4b2a      	ldr	r3, [pc, #168]	; (8005d58 <vInitPrioGroupValue+0xf0>)
 8005cb0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	22ff      	movs	r2, #255	; 0xff
 8005cbe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	4b22      	ldr	r3, [pc, #136]	; (8005d5c <vInitPrioGroupValue+0xf4>)
 8005cd4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cd6:	4b22      	ldr	r3, [pc, #136]	; (8005d60 <vInitPrioGroupValue+0xf8>)
 8005cd8:	2207      	movs	r2, #7
 8005cda:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cdc:	e009      	b.n	8005cf2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005cde:	4b20      	ldr	r3, [pc, #128]	; (8005d60 <vInitPrioGroupValue+0xf8>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	4a1e      	ldr	r2, [pc, #120]	; (8005d60 <vInitPrioGroupValue+0xf8>)
 8005ce6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ce8:	78fb      	ldrb	r3, [r7, #3]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfa:	2b80      	cmp	r3, #128	; 0x80
 8005cfc:	d0ef      	beq.n	8005cde <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cfe:	4b18      	ldr	r3, [pc, #96]	; (8005d60 <vInitPrioGroupValue+0xf8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f1c3 0307 	rsb	r3, r3, #7
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d00a      	beq.n	8005d20 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	60bb      	str	r3, [r7, #8]
    }
 8005d1c:	bf00      	nop
 8005d1e:	e7fe      	b.n	8005d1e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d20:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <vInitPrioGroupValue+0xf8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	021b      	lsls	r3, r3, #8
 8005d26:	4a0e      	ldr	r2, [pc, #56]	; (8005d60 <vInitPrioGroupValue+0xf8>)
 8005d28:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d2a:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <vInitPrioGroupValue+0xf8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d32:	4a0b      	ldr	r2, [pc, #44]	; (8005d60 <vInitPrioGroupValue+0xf8>)
 8005d34:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	e000ed00 	.word	0xe000ed00
 8005d50:	410fc271 	.word	0x410fc271
 8005d54:	410fc270 	.word	0x410fc270
 8005d58:	e000e400 	.word	0xe000e400
 8005d5c:	200003f4 	.word	0x200003f4
 8005d60:	200003f8 	.word	0x200003f8

08005d64 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
        __asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	607b      	str	r3, [r7, #4]
    }
 8005d7c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005d7e:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <vPortEnterCritical+0x58>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3301      	adds	r3, #1
 8005d84:	4a0d      	ldr	r2, [pc, #52]	; (8005dbc <vPortEnterCritical+0x58>)
 8005d86:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005d88:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <vPortEnterCritical+0x58>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d10f      	bne.n	8005db0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d90:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <vPortEnterCritical+0x5c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <vPortEnterCritical+0x4c>
        __asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	603b      	str	r3, [r7, #0]
    }
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <vPortEnterCritical+0x4a>
    }
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	2000000c 	.word	0x2000000c
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005dca:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <vPortExitCritical+0x50>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10a      	bne.n	8005de8 <vPortExitCritical+0x24>
        __asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	607b      	str	r3, [r7, #4]
    }
 8005de4:	bf00      	nop
 8005de6:	e7fe      	b.n	8005de6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <vPortExitCritical+0x50>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	4a09      	ldr	r2, [pc, #36]	; (8005e14 <vPortExitCritical+0x50>)
 8005df0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005df2:	4b08      	ldr	r3, [pc, #32]	; (8005e14 <vPortExitCritical+0x50>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d105      	bne.n	8005e06 <vPortExitCritical+0x42>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	f383 8811 	msr	BASEPRI, r3
    }
 8005e04:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	2000000c 	.word	0x2000000c
	...

08005e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005e20:	f3ef 8009 	mrs	r0, PSP
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <pxCurrentTCBConst>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	f01e 0f10 	tst.w	lr, #16
 8005e30:	bf08      	it	eq
 8005e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3a:	6010      	str	r0, [r2, #0]
 8005e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e44:	f380 8811 	msr	BASEPRI, r0
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f7fe fe6e 	bl	8004b30 <vTaskSwitchContext>
 8005e54:	f04f 0000 	mov.w	r0, #0
 8005e58:	f380 8811 	msr	BASEPRI, r0
 8005e5c:	bc09      	pop	{r0, r3}
 8005e5e:	6819      	ldr	r1, [r3, #0]
 8005e60:	6808      	ldr	r0, [r1, #0]
 8005e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e66:	f01e 0f10 	tst.w	lr, #16
 8005e6a:	bf08      	it	eq
 8005e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e70:	f380 8809 	msr	PSP, r0
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	f3af 8000 	nop.w

08005e80 <pxCurrentTCBConst>:
 8005e80:	200002b4 	.word	0x200002b4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop

08005e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
        __asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	607b      	str	r3, [r7, #4]
    }
 8005ea0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005ea2:	f7fe fd8d 	bl	80049c0 <xTaskIncrementTick>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eac:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <SysTick_Handler+0x40>)
 8005eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	f383 8811 	msr	BASEPRI, r3
    }
 8005ebe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	e000ed04 	.word	0xe000ed04

08005ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ed0:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <vPortSetupTimerInterrupt+0x34>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <vPortSetupTimerInterrupt+0x38>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005edc:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <vPortSetupTimerInterrupt+0x3c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <vPortSetupTimerInterrupt+0x40>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	099b      	lsrs	r3, r3, #6
 8005ee8:	4a09      	ldr	r2, [pc, #36]	; (8005f10 <vPortSetupTimerInterrupt+0x44>)
 8005eea:	3b01      	subs	r3, #1
 8005eec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005eee:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <vPortSetupTimerInterrupt+0x34>)
 8005ef0:	2207      	movs	r2, #7
 8005ef2:	601a      	str	r2, [r3, #0]
}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	e000e010 	.word	0xe000e010
 8005f04:	e000e018 	.word	0xe000e018
 8005f08:	20000000 	.word	0x20000000
 8005f0c:	10624dd3 	.word	0x10624dd3
 8005f10:	e000e014 	.word	0xe000e014

08005f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f24 <vPortEnableVFP+0x10>
 8005f18:	6801      	ldr	r1, [r0, #0]
 8005f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f1e:	6001      	str	r1, [r0, #0]
 8005f20:	4770      	bx	lr
 8005f22:	0000      	.short	0x0000
 8005f24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop

08005f2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005f32:	f3ef 8305 	mrs	r3, IPSR
 8005f36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b0f      	cmp	r3, #15
 8005f3c:	d914      	bls.n	8005f68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f3e:	4a17      	ldr	r2, [pc, #92]	; (8005f9c <vPortValidateInterruptPriority+0x70>)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f48:	4b15      	ldr	r3, [pc, #84]	; (8005fa0 <vPortValidateInterruptPriority+0x74>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	7afa      	ldrb	r2, [r7, #11]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d20a      	bcs.n	8005f68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	607b      	str	r3, [r7, #4]
    }
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f68:	4b0e      	ldr	r3, [pc, #56]	; (8005fa4 <vPortValidateInterruptPriority+0x78>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f70:	4b0d      	ldr	r3, [pc, #52]	; (8005fa8 <vPortValidateInterruptPriority+0x7c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d90a      	bls.n	8005f8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	603b      	str	r3, [r7, #0]
    }
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <vPortValidateInterruptPriority+0x60>
    }
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	e000e3f0 	.word	0xe000e3f0
 8005fa0:	200003f4 	.word	0x200003f4
 8005fa4:	e000ed0c 	.word	0xe000ed0c
 8005fa8:	200003f8 	.word	0x200003f8

08005fac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	; 0x28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005fb8:	f7fe fc48 	bl	800484c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005fbc:	4b65      	ldr	r3, [pc, #404]	; (8006154 <pvPortMalloc+0x1a8>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005fc4:	f000 f934 	bl	8006230 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fc8:	4b63      	ldr	r3, [pc, #396]	; (8006158 <pvPortMalloc+0x1ac>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f040 80a7 	bne.w	8006124 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d02d      	beq.n	8006038 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005fdc:	2208      	movs	r2, #8
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d227      	bcs.n	8006038 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005fe8:	2208      	movs	r2, #8
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d021      	beq.n	800603e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f023 0307 	bic.w	r3, r3, #7
 8006000:	3308      	adds	r3, #8
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	429a      	cmp	r2, r3
 8006006:	d214      	bcs.n	8006032 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f023 0307 	bic.w	r3, r3, #7
 800600e:	3308      	adds	r3, #8
 8006010:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	2b00      	cmp	r3, #0
 800601a:	d010      	beq.n	800603e <pvPortMalloc+0x92>
        __asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	617b      	str	r3, [r7, #20]
    }
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006036:	e002      	b.n	800603e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	607b      	str	r3, [r7, #4]
 800603c:	e000      	b.n	8006040 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800603e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d06e      	beq.n	8006124 <pvPortMalloc+0x178>
 8006046:	4b45      	ldr	r3, [pc, #276]	; (800615c <pvPortMalloc+0x1b0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	429a      	cmp	r2, r3
 800604e:	d869      	bhi.n	8006124 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006050:	4b43      	ldr	r3, [pc, #268]	; (8006160 <pvPortMalloc+0x1b4>)
 8006052:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006054:	4b42      	ldr	r3, [pc, #264]	; (8006160 <pvPortMalloc+0x1b4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800605a:	e004      	b.n	8006066 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	d903      	bls.n	8006078 <pvPortMalloc+0xcc>
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f1      	bne.n	800605c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006078:	4b36      	ldr	r3, [pc, #216]	; (8006154 <pvPortMalloc+0x1a8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607e:	429a      	cmp	r2, r3
 8006080:	d050      	beq.n	8006124 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2208      	movs	r2, #8
 8006088:	4413      	add	r3, r2
 800608a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	1ad2      	subs	r2, r2, r3
 800609c:	2308      	movs	r3, #8
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d91f      	bls.n	80060e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4413      	add	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <pvPortMalloc+0x120>
        __asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	613b      	str	r3, [r7, #16]
    }
 80060c8:	bf00      	nop
 80060ca:	e7fe      	b.n	80060ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	1ad2      	subs	r2, r2, r3
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060de:	69b8      	ldr	r0, [r7, #24]
 80060e0:	f000 f908 	bl	80062f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060e4:	4b1d      	ldr	r3, [pc, #116]	; (800615c <pvPortMalloc+0x1b0>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	4a1b      	ldr	r2, [pc, #108]	; (800615c <pvPortMalloc+0x1b0>)
 80060f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060f2:	4b1a      	ldr	r3, [pc, #104]	; (800615c <pvPortMalloc+0x1b0>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <pvPortMalloc+0x1b8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d203      	bcs.n	8006106 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060fe:	4b17      	ldr	r3, [pc, #92]	; (800615c <pvPortMalloc+0x1b0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a18      	ldr	r2, [pc, #96]	; (8006164 <pvPortMalloc+0x1b8>)
 8006104:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	4b13      	ldr	r3, [pc, #76]	; (8006158 <pvPortMalloc+0x1ac>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	431a      	orrs	r2, r3
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800611a:	4b13      	ldr	r3, [pc, #76]	; (8006168 <pvPortMalloc+0x1bc>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3301      	adds	r3, #1
 8006120:	4a11      	ldr	r2, [pc, #68]	; (8006168 <pvPortMalloc+0x1bc>)
 8006122:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006124:	f7fe fba0 	bl	8004868 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <pvPortMalloc+0x19c>
        __asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	60fb      	str	r3, [r7, #12]
    }
 8006144:	bf00      	nop
 8006146:	e7fe      	b.n	8006146 <pvPortMalloc+0x19a>
    return pvReturn;
 8006148:	69fb      	ldr	r3, [r7, #28]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3728      	adds	r7, #40	; 0x28
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20019404 	.word	0x20019404
 8006158:	20019418 	.word	0x20019418
 800615c:	20019408 	.word	0x20019408
 8006160:	200193fc 	.word	0x200193fc
 8006164:	2001940c 	.word	0x2001940c
 8006168:	20019410 	.word	0x20019410

0800616c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d04d      	beq.n	800621a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800617e:	2308      	movs	r3, #8
 8006180:	425b      	negs	r3, r3
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4413      	add	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	4b24      	ldr	r3, [pc, #144]	; (8006224 <vPortFree+0xb8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4013      	ands	r3, r2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <vPortFree+0x44>
        __asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	60fb      	str	r3, [r7, #12]
    }
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <vPortFree+0x62>
        __asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	60bb      	str	r3, [r7, #8]
    }
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	4b14      	ldr	r3, [pc, #80]	; (8006224 <vPortFree+0xb8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01e      	beq.n	800621a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d11a      	bne.n	800621a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <vPortFree+0xb8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	43db      	mvns	r3, r3
 80061ee:	401a      	ands	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80061f4:	f7fe fb2a 	bl	800484c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <vPortFree+0xbc>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4413      	add	r3, r2
 8006202:	4a09      	ldr	r2, [pc, #36]	; (8006228 <vPortFree+0xbc>)
 8006204:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006206:	6938      	ldr	r0, [r7, #16]
 8006208:	f000 f874 	bl	80062f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800620c:	4b07      	ldr	r3, [pc, #28]	; (800622c <vPortFree+0xc0>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3301      	adds	r3, #1
 8006212:	4a06      	ldr	r2, [pc, #24]	; (800622c <vPortFree+0xc0>)
 8006214:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006216:	f7fe fb27 	bl	8004868 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800621a:	bf00      	nop
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20019418 	.word	0x20019418
 8006228:	20019408 	.word	0x20019408
 800622c:	20019414 	.word	0x20019414

08006230 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006236:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800623a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800623c:	4b27      	ldr	r3, [pc, #156]	; (80062dc <prvHeapInit+0xac>)
 800623e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00c      	beq.n	8006264 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3307      	adds	r3, #7
 800624e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 0307 	bic.w	r3, r3, #7
 8006256:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	4a1f      	ldr	r2, [pc, #124]	; (80062dc <prvHeapInit+0xac>)
 8006260:	4413      	add	r3, r2
 8006262:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006268:	4a1d      	ldr	r2, [pc, #116]	; (80062e0 <prvHeapInit+0xb0>)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800626e:	4b1c      	ldr	r3, [pc, #112]	; (80062e0 <prvHeapInit+0xb0>)
 8006270:	2200      	movs	r2, #0
 8006272:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	4413      	add	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800627c:	2208      	movs	r2, #8
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1a9b      	subs	r3, r3, r2
 8006282:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0307 	bic.w	r3, r3, #7
 800628a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4a15      	ldr	r2, [pc, #84]	; (80062e4 <prvHeapInit+0xb4>)
 8006290:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006292:	4b14      	ldr	r3, [pc, #80]	; (80062e4 <prvHeapInit+0xb4>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2200      	movs	r2, #0
 8006298:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800629a:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <prvHeapInit+0xb4>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2200      	movs	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	1ad2      	subs	r2, r2, r3
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062b0:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <prvHeapInit+0xb4>)
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	4a0a      	ldr	r2, [pc, #40]	; (80062e8 <prvHeapInit+0xb8>)
 80062be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	4a09      	ldr	r2, [pc, #36]	; (80062ec <prvHeapInit+0xbc>)
 80062c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062c8:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <prvHeapInit+0xc0>)
 80062ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062ce:	601a      	str	r2, [r3, #0]
}
 80062d0:	bf00      	nop
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	200003fc 	.word	0x200003fc
 80062e0:	200193fc 	.word	0x200193fc
 80062e4:	20019404 	.word	0x20019404
 80062e8:	2001940c 	.word	0x2001940c
 80062ec:	20019408 	.word	0x20019408
 80062f0:	20019418 	.word	0x20019418

080062f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062fc:	4b28      	ldr	r3, [pc, #160]	; (80063a0 <prvInsertBlockIntoFreeList+0xac>)
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	e002      	b.n	8006308 <prvInsertBlockIntoFreeList+0x14>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	429a      	cmp	r2, r3
 8006310:	d8f7      	bhi.n	8006302 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	4413      	add	r3, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	429a      	cmp	r2, r3
 8006322:	d108      	bne.n	8006336 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	441a      	add	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	441a      	add	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d118      	bne.n	800637c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	4b15      	ldr	r3, [pc, #84]	; (80063a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d00d      	beq.n	8006372 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	441a      	add	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	e008      	b.n	8006384 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006372:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	e003      	b.n	8006384 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	429a      	cmp	r2, r3
 800638a:	d002      	beq.n	8006392 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006392:	bf00      	nop
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	200193fc 	.word	0x200193fc
 80063a4:	20019404 	.word	0x20019404

080063a8 <__errno>:
 80063a8:	4b01      	ldr	r3, [pc, #4]	; (80063b0 <__errno+0x8>)
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	20000010 	.word	0x20000010

080063b4 <__libc_init_array>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	4d0d      	ldr	r5, [pc, #52]	; (80063ec <__libc_init_array+0x38>)
 80063b8:	4c0d      	ldr	r4, [pc, #52]	; (80063f0 <__libc_init_array+0x3c>)
 80063ba:	1b64      	subs	r4, r4, r5
 80063bc:	10a4      	asrs	r4, r4, #2
 80063be:	2600      	movs	r6, #0
 80063c0:	42a6      	cmp	r6, r4
 80063c2:	d109      	bne.n	80063d8 <__libc_init_array+0x24>
 80063c4:	4d0b      	ldr	r5, [pc, #44]	; (80063f4 <__libc_init_array+0x40>)
 80063c6:	4c0c      	ldr	r4, [pc, #48]	; (80063f8 <__libc_init_array+0x44>)
 80063c8:	f001 fa82 	bl	80078d0 <_init>
 80063cc:	1b64      	subs	r4, r4, r5
 80063ce:	10a4      	asrs	r4, r4, #2
 80063d0:	2600      	movs	r6, #0
 80063d2:	42a6      	cmp	r6, r4
 80063d4:	d105      	bne.n	80063e2 <__libc_init_array+0x2e>
 80063d6:	bd70      	pop	{r4, r5, r6, pc}
 80063d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063dc:	4798      	blx	r3
 80063de:	3601      	adds	r6, #1
 80063e0:	e7ee      	b.n	80063c0 <__libc_init_array+0xc>
 80063e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e6:	4798      	blx	r3
 80063e8:	3601      	adds	r6, #1
 80063ea:	e7f2      	b.n	80063d2 <__libc_init_array+0x1e>
 80063ec:	08007b10 	.word	0x08007b10
 80063f0:	08007b10 	.word	0x08007b10
 80063f4:	08007b10 	.word	0x08007b10
 80063f8:	08007b14 	.word	0x08007b14

080063fc <memcpy>:
 80063fc:	440a      	add	r2, r1
 80063fe:	4291      	cmp	r1, r2
 8006400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006404:	d100      	bne.n	8006408 <memcpy+0xc>
 8006406:	4770      	bx	lr
 8006408:	b510      	push	{r4, lr}
 800640a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800640e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006412:	4291      	cmp	r1, r2
 8006414:	d1f9      	bne.n	800640a <memcpy+0xe>
 8006416:	bd10      	pop	{r4, pc}

08006418 <memset>:
 8006418:	4402      	add	r2, r0
 800641a:	4603      	mov	r3, r0
 800641c:	4293      	cmp	r3, r2
 800641e:	d100      	bne.n	8006422 <memset+0xa>
 8006420:	4770      	bx	lr
 8006422:	f803 1b01 	strb.w	r1, [r3], #1
 8006426:	e7f9      	b.n	800641c <memset+0x4>

08006428 <srand>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	4b10      	ldr	r3, [pc, #64]	; (800646c <srand+0x44>)
 800642c:	681d      	ldr	r5, [r3, #0]
 800642e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006430:	4604      	mov	r4, r0
 8006432:	b9b3      	cbnz	r3, 8006462 <srand+0x3a>
 8006434:	2018      	movs	r0, #24
 8006436:	f000 f8d3 	bl	80065e0 <malloc>
 800643a:	4602      	mov	r2, r0
 800643c:	63a8      	str	r0, [r5, #56]	; 0x38
 800643e:	b920      	cbnz	r0, 800644a <srand+0x22>
 8006440:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <srand+0x48>)
 8006442:	480c      	ldr	r0, [pc, #48]	; (8006474 <srand+0x4c>)
 8006444:	2142      	movs	r1, #66	; 0x42
 8006446:	f000 f89b 	bl	8006580 <__assert_func>
 800644a:	490b      	ldr	r1, [pc, #44]	; (8006478 <srand+0x50>)
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <srand+0x54>)
 800644e:	e9c0 1300 	strd	r1, r3, [r0]
 8006452:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <srand+0x58>)
 8006454:	6083      	str	r3, [r0, #8]
 8006456:	230b      	movs	r3, #11
 8006458:	8183      	strh	r3, [r0, #12]
 800645a:	2100      	movs	r1, #0
 800645c:	2001      	movs	r0, #1
 800645e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006462:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006464:	2200      	movs	r2, #0
 8006466:	611c      	str	r4, [r3, #16]
 8006468:	615a      	str	r2, [r3, #20]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	20000010 	.word	0x20000010
 8006470:	080079c4 	.word	0x080079c4
 8006474:	080079db 	.word	0x080079db
 8006478:	abcd330e 	.word	0xabcd330e
 800647c:	e66d1234 	.word	0xe66d1234
 8006480:	0005deec 	.word	0x0005deec

08006484 <rand>:
 8006484:	4b16      	ldr	r3, [pc, #88]	; (80064e0 <rand+0x5c>)
 8006486:	b510      	push	{r4, lr}
 8006488:	681c      	ldr	r4, [r3, #0]
 800648a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800648c:	b9b3      	cbnz	r3, 80064bc <rand+0x38>
 800648e:	2018      	movs	r0, #24
 8006490:	f000 f8a6 	bl	80065e0 <malloc>
 8006494:	63a0      	str	r0, [r4, #56]	; 0x38
 8006496:	b928      	cbnz	r0, 80064a4 <rand+0x20>
 8006498:	4602      	mov	r2, r0
 800649a:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <rand+0x60>)
 800649c:	4812      	ldr	r0, [pc, #72]	; (80064e8 <rand+0x64>)
 800649e:	214e      	movs	r1, #78	; 0x4e
 80064a0:	f000 f86e 	bl	8006580 <__assert_func>
 80064a4:	4a11      	ldr	r2, [pc, #68]	; (80064ec <rand+0x68>)
 80064a6:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <rand+0x6c>)
 80064a8:	e9c0 2300 	strd	r2, r3, [r0]
 80064ac:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <rand+0x70>)
 80064ae:	6083      	str	r3, [r0, #8]
 80064b0:	230b      	movs	r3, #11
 80064b2:	8183      	strh	r3, [r0, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	2300      	movs	r3, #0
 80064b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80064bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80064be:	4a0e      	ldr	r2, [pc, #56]	; (80064f8 <rand+0x74>)
 80064c0:	6920      	ldr	r0, [r4, #16]
 80064c2:	6963      	ldr	r3, [r4, #20]
 80064c4:	490d      	ldr	r1, [pc, #52]	; (80064fc <rand+0x78>)
 80064c6:	4342      	muls	r2, r0
 80064c8:	fb01 2203 	mla	r2, r1, r3, r2
 80064cc:	fba0 0101 	umull	r0, r1, r0, r1
 80064d0:	1c43      	adds	r3, r0, #1
 80064d2:	eb42 0001 	adc.w	r0, r2, r1
 80064d6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80064da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80064de:	bd10      	pop	{r4, pc}
 80064e0:	20000010 	.word	0x20000010
 80064e4:	080079c4 	.word	0x080079c4
 80064e8:	080079db 	.word	0x080079db
 80064ec:	abcd330e 	.word	0xabcd330e
 80064f0:	e66d1234 	.word	0xe66d1234
 80064f4:	0005deec 	.word	0x0005deec
 80064f8:	5851f42d 	.word	0x5851f42d
 80064fc:	4c957f2d 	.word	0x4c957f2d

08006500 <siprintf>:
 8006500:	b40e      	push	{r1, r2, r3}
 8006502:	b500      	push	{lr}
 8006504:	b09c      	sub	sp, #112	; 0x70
 8006506:	ab1d      	add	r3, sp, #116	; 0x74
 8006508:	9002      	str	r0, [sp, #8]
 800650a:	9006      	str	r0, [sp, #24]
 800650c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006510:	4809      	ldr	r0, [pc, #36]	; (8006538 <siprintf+0x38>)
 8006512:	9107      	str	r1, [sp, #28]
 8006514:	9104      	str	r1, [sp, #16]
 8006516:	4909      	ldr	r1, [pc, #36]	; (800653c <siprintf+0x3c>)
 8006518:	f853 2b04 	ldr.w	r2, [r3], #4
 800651c:	9105      	str	r1, [sp, #20]
 800651e:	6800      	ldr	r0, [r0, #0]
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	a902      	add	r1, sp, #8
 8006524:	f000 f9a0 	bl	8006868 <_svfiprintf_r>
 8006528:	9b02      	ldr	r3, [sp, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	b01c      	add	sp, #112	; 0x70
 8006530:	f85d eb04 	ldr.w	lr, [sp], #4
 8006534:	b003      	add	sp, #12
 8006536:	4770      	bx	lr
 8006538:	20000010 	.word	0x20000010
 800653c:	ffff0208 	.word	0xffff0208

08006540 <_vsiprintf_r>:
 8006540:	b500      	push	{lr}
 8006542:	b09b      	sub	sp, #108	; 0x6c
 8006544:	9100      	str	r1, [sp, #0]
 8006546:	9104      	str	r1, [sp, #16]
 8006548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800654c:	9105      	str	r1, [sp, #20]
 800654e:	9102      	str	r1, [sp, #8]
 8006550:	4905      	ldr	r1, [pc, #20]	; (8006568 <_vsiprintf_r+0x28>)
 8006552:	9103      	str	r1, [sp, #12]
 8006554:	4669      	mov	r1, sp
 8006556:	f000 f987 	bl	8006868 <_svfiprintf_r>
 800655a:	9b00      	ldr	r3, [sp, #0]
 800655c:	2200      	movs	r2, #0
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	b01b      	add	sp, #108	; 0x6c
 8006562:	f85d fb04 	ldr.w	pc, [sp], #4
 8006566:	bf00      	nop
 8006568:	ffff0208 	.word	0xffff0208

0800656c <vsiprintf>:
 800656c:	4613      	mov	r3, r2
 800656e:	460a      	mov	r2, r1
 8006570:	4601      	mov	r1, r0
 8006572:	4802      	ldr	r0, [pc, #8]	; (800657c <vsiprintf+0x10>)
 8006574:	6800      	ldr	r0, [r0, #0]
 8006576:	f7ff bfe3 	b.w	8006540 <_vsiprintf_r>
 800657a:	bf00      	nop
 800657c:	20000010 	.word	0x20000010

08006580 <__assert_func>:
 8006580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006582:	4614      	mov	r4, r2
 8006584:	461a      	mov	r2, r3
 8006586:	4b09      	ldr	r3, [pc, #36]	; (80065ac <__assert_func+0x2c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4605      	mov	r5, r0
 800658c:	68d8      	ldr	r0, [r3, #12]
 800658e:	b14c      	cbz	r4, 80065a4 <__assert_func+0x24>
 8006590:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <__assert_func+0x30>)
 8006592:	9100      	str	r1, [sp, #0]
 8006594:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006598:	4906      	ldr	r1, [pc, #24]	; (80065b4 <__assert_func+0x34>)
 800659a:	462b      	mov	r3, r5
 800659c:	f000 f80e 	bl	80065bc <fiprintf>
 80065a0:	f000 fe20 	bl	80071e4 <abort>
 80065a4:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <__assert_func+0x38>)
 80065a6:	461c      	mov	r4, r3
 80065a8:	e7f3      	b.n	8006592 <__assert_func+0x12>
 80065aa:	bf00      	nop
 80065ac:	20000010 	.word	0x20000010
 80065b0:	08007a36 	.word	0x08007a36
 80065b4:	08007a43 	.word	0x08007a43
 80065b8:	08007a71 	.word	0x08007a71

080065bc <fiprintf>:
 80065bc:	b40e      	push	{r1, r2, r3}
 80065be:	b503      	push	{r0, r1, lr}
 80065c0:	4601      	mov	r1, r0
 80065c2:	ab03      	add	r3, sp, #12
 80065c4:	4805      	ldr	r0, [pc, #20]	; (80065dc <fiprintf+0x20>)
 80065c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ca:	6800      	ldr	r0, [r0, #0]
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	f000 fa75 	bl	8006abc <_vfiprintf_r>
 80065d2:	b002      	add	sp, #8
 80065d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065d8:	b003      	add	sp, #12
 80065da:	4770      	bx	lr
 80065dc:	20000010 	.word	0x20000010

080065e0 <malloc>:
 80065e0:	4b02      	ldr	r3, [pc, #8]	; (80065ec <malloc+0xc>)
 80065e2:	4601      	mov	r1, r0
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	f000 b86f 	b.w	80066c8 <_malloc_r>
 80065ea:	bf00      	nop
 80065ec:	20000010 	.word	0x20000010

080065f0 <_free_r>:
 80065f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065f2:	2900      	cmp	r1, #0
 80065f4:	d044      	beq.n	8006680 <_free_r+0x90>
 80065f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065fa:	9001      	str	r0, [sp, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006602:	bfb8      	it	lt
 8006604:	18e4      	addlt	r4, r4, r3
 8006606:	f001 f82f 	bl	8007668 <__malloc_lock>
 800660a:	4a1e      	ldr	r2, [pc, #120]	; (8006684 <_free_r+0x94>)
 800660c:	9801      	ldr	r0, [sp, #4]
 800660e:	6813      	ldr	r3, [r2, #0]
 8006610:	b933      	cbnz	r3, 8006620 <_free_r+0x30>
 8006612:	6063      	str	r3, [r4, #4]
 8006614:	6014      	str	r4, [r2, #0]
 8006616:	b003      	add	sp, #12
 8006618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800661c:	f001 b82a 	b.w	8007674 <__malloc_unlock>
 8006620:	42a3      	cmp	r3, r4
 8006622:	d908      	bls.n	8006636 <_free_r+0x46>
 8006624:	6825      	ldr	r5, [r4, #0]
 8006626:	1961      	adds	r1, r4, r5
 8006628:	428b      	cmp	r3, r1
 800662a:	bf01      	itttt	eq
 800662c:	6819      	ldreq	r1, [r3, #0]
 800662e:	685b      	ldreq	r3, [r3, #4]
 8006630:	1949      	addeq	r1, r1, r5
 8006632:	6021      	streq	r1, [r4, #0]
 8006634:	e7ed      	b.n	8006612 <_free_r+0x22>
 8006636:	461a      	mov	r2, r3
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	b10b      	cbz	r3, 8006640 <_free_r+0x50>
 800663c:	42a3      	cmp	r3, r4
 800663e:	d9fa      	bls.n	8006636 <_free_r+0x46>
 8006640:	6811      	ldr	r1, [r2, #0]
 8006642:	1855      	adds	r5, r2, r1
 8006644:	42a5      	cmp	r5, r4
 8006646:	d10b      	bne.n	8006660 <_free_r+0x70>
 8006648:	6824      	ldr	r4, [r4, #0]
 800664a:	4421      	add	r1, r4
 800664c:	1854      	adds	r4, r2, r1
 800664e:	42a3      	cmp	r3, r4
 8006650:	6011      	str	r1, [r2, #0]
 8006652:	d1e0      	bne.n	8006616 <_free_r+0x26>
 8006654:	681c      	ldr	r4, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	6053      	str	r3, [r2, #4]
 800665a:	4421      	add	r1, r4
 800665c:	6011      	str	r1, [r2, #0]
 800665e:	e7da      	b.n	8006616 <_free_r+0x26>
 8006660:	d902      	bls.n	8006668 <_free_r+0x78>
 8006662:	230c      	movs	r3, #12
 8006664:	6003      	str	r3, [r0, #0]
 8006666:	e7d6      	b.n	8006616 <_free_r+0x26>
 8006668:	6825      	ldr	r5, [r4, #0]
 800666a:	1961      	adds	r1, r4, r5
 800666c:	428b      	cmp	r3, r1
 800666e:	bf04      	itt	eq
 8006670:	6819      	ldreq	r1, [r3, #0]
 8006672:	685b      	ldreq	r3, [r3, #4]
 8006674:	6063      	str	r3, [r4, #4]
 8006676:	bf04      	itt	eq
 8006678:	1949      	addeq	r1, r1, r5
 800667a:	6021      	streq	r1, [r4, #0]
 800667c:	6054      	str	r4, [r2, #4]
 800667e:	e7ca      	b.n	8006616 <_free_r+0x26>
 8006680:	b003      	add	sp, #12
 8006682:	bd30      	pop	{r4, r5, pc}
 8006684:	2001941c 	.word	0x2001941c

08006688 <sbrk_aligned>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	4e0e      	ldr	r6, [pc, #56]	; (80066c4 <sbrk_aligned+0x3c>)
 800668c:	460c      	mov	r4, r1
 800668e:	6831      	ldr	r1, [r6, #0]
 8006690:	4605      	mov	r5, r0
 8006692:	b911      	cbnz	r1, 800669a <sbrk_aligned+0x12>
 8006694:	f000 fcd6 	bl	8007044 <_sbrk_r>
 8006698:	6030      	str	r0, [r6, #0]
 800669a:	4621      	mov	r1, r4
 800669c:	4628      	mov	r0, r5
 800669e:	f000 fcd1 	bl	8007044 <_sbrk_r>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	d00a      	beq.n	80066bc <sbrk_aligned+0x34>
 80066a6:	1cc4      	adds	r4, r0, #3
 80066a8:	f024 0403 	bic.w	r4, r4, #3
 80066ac:	42a0      	cmp	r0, r4
 80066ae:	d007      	beq.n	80066c0 <sbrk_aligned+0x38>
 80066b0:	1a21      	subs	r1, r4, r0
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 fcc6 	bl	8007044 <_sbrk_r>
 80066b8:	3001      	adds	r0, #1
 80066ba:	d101      	bne.n	80066c0 <sbrk_aligned+0x38>
 80066bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80066c0:	4620      	mov	r0, r4
 80066c2:	bd70      	pop	{r4, r5, r6, pc}
 80066c4:	20019420 	.word	0x20019420

080066c8 <_malloc_r>:
 80066c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066cc:	1ccd      	adds	r5, r1, #3
 80066ce:	f025 0503 	bic.w	r5, r5, #3
 80066d2:	3508      	adds	r5, #8
 80066d4:	2d0c      	cmp	r5, #12
 80066d6:	bf38      	it	cc
 80066d8:	250c      	movcc	r5, #12
 80066da:	2d00      	cmp	r5, #0
 80066dc:	4607      	mov	r7, r0
 80066de:	db01      	blt.n	80066e4 <_malloc_r+0x1c>
 80066e0:	42a9      	cmp	r1, r5
 80066e2:	d905      	bls.n	80066f0 <_malloc_r+0x28>
 80066e4:	230c      	movs	r3, #12
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	2600      	movs	r6, #0
 80066ea:	4630      	mov	r0, r6
 80066ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066f0:	4e2e      	ldr	r6, [pc, #184]	; (80067ac <_malloc_r+0xe4>)
 80066f2:	f000 ffb9 	bl	8007668 <__malloc_lock>
 80066f6:	6833      	ldr	r3, [r6, #0]
 80066f8:	461c      	mov	r4, r3
 80066fa:	bb34      	cbnz	r4, 800674a <_malloc_r+0x82>
 80066fc:	4629      	mov	r1, r5
 80066fe:	4638      	mov	r0, r7
 8006700:	f7ff ffc2 	bl	8006688 <sbrk_aligned>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	4604      	mov	r4, r0
 8006708:	d14d      	bne.n	80067a6 <_malloc_r+0xde>
 800670a:	6834      	ldr	r4, [r6, #0]
 800670c:	4626      	mov	r6, r4
 800670e:	2e00      	cmp	r6, #0
 8006710:	d140      	bne.n	8006794 <_malloc_r+0xcc>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	4631      	mov	r1, r6
 8006716:	4638      	mov	r0, r7
 8006718:	eb04 0803 	add.w	r8, r4, r3
 800671c:	f000 fc92 	bl	8007044 <_sbrk_r>
 8006720:	4580      	cmp	r8, r0
 8006722:	d13a      	bne.n	800679a <_malloc_r+0xd2>
 8006724:	6821      	ldr	r1, [r4, #0]
 8006726:	3503      	adds	r5, #3
 8006728:	1a6d      	subs	r5, r5, r1
 800672a:	f025 0503 	bic.w	r5, r5, #3
 800672e:	3508      	adds	r5, #8
 8006730:	2d0c      	cmp	r5, #12
 8006732:	bf38      	it	cc
 8006734:	250c      	movcc	r5, #12
 8006736:	4629      	mov	r1, r5
 8006738:	4638      	mov	r0, r7
 800673a:	f7ff ffa5 	bl	8006688 <sbrk_aligned>
 800673e:	3001      	adds	r0, #1
 8006740:	d02b      	beq.n	800679a <_malloc_r+0xd2>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	442b      	add	r3, r5
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	e00e      	b.n	8006768 <_malloc_r+0xa0>
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	1b52      	subs	r2, r2, r5
 800674e:	d41e      	bmi.n	800678e <_malloc_r+0xc6>
 8006750:	2a0b      	cmp	r2, #11
 8006752:	d916      	bls.n	8006782 <_malloc_r+0xba>
 8006754:	1961      	adds	r1, r4, r5
 8006756:	42a3      	cmp	r3, r4
 8006758:	6025      	str	r5, [r4, #0]
 800675a:	bf18      	it	ne
 800675c:	6059      	strne	r1, [r3, #4]
 800675e:	6863      	ldr	r3, [r4, #4]
 8006760:	bf08      	it	eq
 8006762:	6031      	streq	r1, [r6, #0]
 8006764:	5162      	str	r2, [r4, r5]
 8006766:	604b      	str	r3, [r1, #4]
 8006768:	4638      	mov	r0, r7
 800676a:	f104 060b 	add.w	r6, r4, #11
 800676e:	f000 ff81 	bl	8007674 <__malloc_unlock>
 8006772:	f026 0607 	bic.w	r6, r6, #7
 8006776:	1d23      	adds	r3, r4, #4
 8006778:	1af2      	subs	r2, r6, r3
 800677a:	d0b6      	beq.n	80066ea <_malloc_r+0x22>
 800677c:	1b9b      	subs	r3, r3, r6
 800677e:	50a3      	str	r3, [r4, r2]
 8006780:	e7b3      	b.n	80066ea <_malloc_r+0x22>
 8006782:	6862      	ldr	r2, [r4, #4]
 8006784:	42a3      	cmp	r3, r4
 8006786:	bf0c      	ite	eq
 8006788:	6032      	streq	r2, [r6, #0]
 800678a:	605a      	strne	r2, [r3, #4]
 800678c:	e7ec      	b.n	8006768 <_malloc_r+0xa0>
 800678e:	4623      	mov	r3, r4
 8006790:	6864      	ldr	r4, [r4, #4]
 8006792:	e7b2      	b.n	80066fa <_malloc_r+0x32>
 8006794:	4634      	mov	r4, r6
 8006796:	6876      	ldr	r6, [r6, #4]
 8006798:	e7b9      	b.n	800670e <_malloc_r+0x46>
 800679a:	230c      	movs	r3, #12
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	4638      	mov	r0, r7
 80067a0:	f000 ff68 	bl	8007674 <__malloc_unlock>
 80067a4:	e7a1      	b.n	80066ea <_malloc_r+0x22>
 80067a6:	6025      	str	r5, [r4, #0]
 80067a8:	e7de      	b.n	8006768 <_malloc_r+0xa0>
 80067aa:	bf00      	nop
 80067ac:	2001941c 	.word	0x2001941c

080067b0 <__ssputs_r>:
 80067b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b4:	688e      	ldr	r6, [r1, #8]
 80067b6:	429e      	cmp	r6, r3
 80067b8:	4682      	mov	sl, r0
 80067ba:	460c      	mov	r4, r1
 80067bc:	4690      	mov	r8, r2
 80067be:	461f      	mov	r7, r3
 80067c0:	d838      	bhi.n	8006834 <__ssputs_r+0x84>
 80067c2:	898a      	ldrh	r2, [r1, #12]
 80067c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067c8:	d032      	beq.n	8006830 <__ssputs_r+0x80>
 80067ca:	6825      	ldr	r5, [r4, #0]
 80067cc:	6909      	ldr	r1, [r1, #16]
 80067ce:	eba5 0901 	sub.w	r9, r5, r1
 80067d2:	6965      	ldr	r5, [r4, #20]
 80067d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067dc:	3301      	adds	r3, #1
 80067de:	444b      	add	r3, r9
 80067e0:	106d      	asrs	r5, r5, #1
 80067e2:	429d      	cmp	r5, r3
 80067e4:	bf38      	it	cc
 80067e6:	461d      	movcc	r5, r3
 80067e8:	0553      	lsls	r3, r2, #21
 80067ea:	d531      	bpl.n	8006850 <__ssputs_r+0xa0>
 80067ec:	4629      	mov	r1, r5
 80067ee:	f7ff ff6b 	bl	80066c8 <_malloc_r>
 80067f2:	4606      	mov	r6, r0
 80067f4:	b950      	cbnz	r0, 800680c <__ssputs_r+0x5c>
 80067f6:	230c      	movs	r3, #12
 80067f8:	f8ca 3000 	str.w	r3, [sl]
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006802:	81a3      	strh	r3, [r4, #12]
 8006804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680c:	6921      	ldr	r1, [r4, #16]
 800680e:	464a      	mov	r2, r9
 8006810:	f7ff fdf4 	bl	80063fc <memcpy>
 8006814:	89a3      	ldrh	r3, [r4, #12]
 8006816:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800681a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681e:	81a3      	strh	r3, [r4, #12]
 8006820:	6126      	str	r6, [r4, #16]
 8006822:	6165      	str	r5, [r4, #20]
 8006824:	444e      	add	r6, r9
 8006826:	eba5 0509 	sub.w	r5, r5, r9
 800682a:	6026      	str	r6, [r4, #0]
 800682c:	60a5      	str	r5, [r4, #8]
 800682e:	463e      	mov	r6, r7
 8006830:	42be      	cmp	r6, r7
 8006832:	d900      	bls.n	8006836 <__ssputs_r+0x86>
 8006834:	463e      	mov	r6, r7
 8006836:	6820      	ldr	r0, [r4, #0]
 8006838:	4632      	mov	r2, r6
 800683a:	4641      	mov	r1, r8
 800683c:	f000 fefa 	bl	8007634 <memmove>
 8006840:	68a3      	ldr	r3, [r4, #8]
 8006842:	1b9b      	subs	r3, r3, r6
 8006844:	60a3      	str	r3, [r4, #8]
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	4433      	add	r3, r6
 800684a:	6023      	str	r3, [r4, #0]
 800684c:	2000      	movs	r0, #0
 800684e:	e7db      	b.n	8006808 <__ssputs_r+0x58>
 8006850:	462a      	mov	r2, r5
 8006852:	f000 ff15 	bl	8007680 <_realloc_r>
 8006856:	4606      	mov	r6, r0
 8006858:	2800      	cmp	r0, #0
 800685a:	d1e1      	bne.n	8006820 <__ssputs_r+0x70>
 800685c:	6921      	ldr	r1, [r4, #16]
 800685e:	4650      	mov	r0, sl
 8006860:	f7ff fec6 	bl	80065f0 <_free_r>
 8006864:	e7c7      	b.n	80067f6 <__ssputs_r+0x46>
	...

08006868 <_svfiprintf_r>:
 8006868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686c:	4698      	mov	r8, r3
 800686e:	898b      	ldrh	r3, [r1, #12]
 8006870:	061b      	lsls	r3, r3, #24
 8006872:	b09d      	sub	sp, #116	; 0x74
 8006874:	4607      	mov	r7, r0
 8006876:	460d      	mov	r5, r1
 8006878:	4614      	mov	r4, r2
 800687a:	d50e      	bpl.n	800689a <_svfiprintf_r+0x32>
 800687c:	690b      	ldr	r3, [r1, #16]
 800687e:	b963      	cbnz	r3, 800689a <_svfiprintf_r+0x32>
 8006880:	2140      	movs	r1, #64	; 0x40
 8006882:	f7ff ff21 	bl	80066c8 <_malloc_r>
 8006886:	6028      	str	r0, [r5, #0]
 8006888:	6128      	str	r0, [r5, #16]
 800688a:	b920      	cbnz	r0, 8006896 <_svfiprintf_r+0x2e>
 800688c:	230c      	movs	r3, #12
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006894:	e0d1      	b.n	8006a3a <_svfiprintf_r+0x1d2>
 8006896:	2340      	movs	r3, #64	; 0x40
 8006898:	616b      	str	r3, [r5, #20]
 800689a:	2300      	movs	r3, #0
 800689c:	9309      	str	r3, [sp, #36]	; 0x24
 800689e:	2320      	movs	r3, #32
 80068a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80068a8:	2330      	movs	r3, #48	; 0x30
 80068aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a54 <_svfiprintf_r+0x1ec>
 80068ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068b2:	f04f 0901 	mov.w	r9, #1
 80068b6:	4623      	mov	r3, r4
 80068b8:	469a      	mov	sl, r3
 80068ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068be:	b10a      	cbz	r2, 80068c4 <_svfiprintf_r+0x5c>
 80068c0:	2a25      	cmp	r2, #37	; 0x25
 80068c2:	d1f9      	bne.n	80068b8 <_svfiprintf_r+0x50>
 80068c4:	ebba 0b04 	subs.w	fp, sl, r4
 80068c8:	d00b      	beq.n	80068e2 <_svfiprintf_r+0x7a>
 80068ca:	465b      	mov	r3, fp
 80068cc:	4622      	mov	r2, r4
 80068ce:	4629      	mov	r1, r5
 80068d0:	4638      	mov	r0, r7
 80068d2:	f7ff ff6d 	bl	80067b0 <__ssputs_r>
 80068d6:	3001      	adds	r0, #1
 80068d8:	f000 80aa 	beq.w	8006a30 <_svfiprintf_r+0x1c8>
 80068dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068de:	445a      	add	r2, fp
 80068e0:	9209      	str	r2, [sp, #36]	; 0x24
 80068e2:	f89a 3000 	ldrb.w	r3, [sl]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 80a2 	beq.w	8006a30 <_svfiprintf_r+0x1c8>
 80068ec:	2300      	movs	r3, #0
 80068ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068f6:	f10a 0a01 	add.w	sl, sl, #1
 80068fa:	9304      	str	r3, [sp, #16]
 80068fc:	9307      	str	r3, [sp, #28]
 80068fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006902:	931a      	str	r3, [sp, #104]	; 0x68
 8006904:	4654      	mov	r4, sl
 8006906:	2205      	movs	r2, #5
 8006908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800690c:	4851      	ldr	r0, [pc, #324]	; (8006a54 <_svfiprintf_r+0x1ec>)
 800690e:	f7f9 fc87 	bl	8000220 <memchr>
 8006912:	9a04      	ldr	r2, [sp, #16]
 8006914:	b9d8      	cbnz	r0, 800694e <_svfiprintf_r+0xe6>
 8006916:	06d0      	lsls	r0, r2, #27
 8006918:	bf44      	itt	mi
 800691a:	2320      	movmi	r3, #32
 800691c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006920:	0711      	lsls	r1, r2, #28
 8006922:	bf44      	itt	mi
 8006924:	232b      	movmi	r3, #43	; 0x2b
 8006926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800692a:	f89a 3000 	ldrb.w	r3, [sl]
 800692e:	2b2a      	cmp	r3, #42	; 0x2a
 8006930:	d015      	beq.n	800695e <_svfiprintf_r+0xf6>
 8006932:	9a07      	ldr	r2, [sp, #28]
 8006934:	4654      	mov	r4, sl
 8006936:	2000      	movs	r0, #0
 8006938:	f04f 0c0a 	mov.w	ip, #10
 800693c:	4621      	mov	r1, r4
 800693e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006942:	3b30      	subs	r3, #48	; 0x30
 8006944:	2b09      	cmp	r3, #9
 8006946:	d94e      	bls.n	80069e6 <_svfiprintf_r+0x17e>
 8006948:	b1b0      	cbz	r0, 8006978 <_svfiprintf_r+0x110>
 800694a:	9207      	str	r2, [sp, #28]
 800694c:	e014      	b.n	8006978 <_svfiprintf_r+0x110>
 800694e:	eba0 0308 	sub.w	r3, r0, r8
 8006952:	fa09 f303 	lsl.w	r3, r9, r3
 8006956:	4313      	orrs	r3, r2
 8006958:	9304      	str	r3, [sp, #16]
 800695a:	46a2      	mov	sl, r4
 800695c:	e7d2      	b.n	8006904 <_svfiprintf_r+0x9c>
 800695e:	9b03      	ldr	r3, [sp, #12]
 8006960:	1d19      	adds	r1, r3, #4
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	9103      	str	r1, [sp, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	bfbb      	ittet	lt
 800696a:	425b      	neglt	r3, r3
 800696c:	f042 0202 	orrlt.w	r2, r2, #2
 8006970:	9307      	strge	r3, [sp, #28]
 8006972:	9307      	strlt	r3, [sp, #28]
 8006974:	bfb8      	it	lt
 8006976:	9204      	strlt	r2, [sp, #16]
 8006978:	7823      	ldrb	r3, [r4, #0]
 800697a:	2b2e      	cmp	r3, #46	; 0x2e
 800697c:	d10c      	bne.n	8006998 <_svfiprintf_r+0x130>
 800697e:	7863      	ldrb	r3, [r4, #1]
 8006980:	2b2a      	cmp	r3, #42	; 0x2a
 8006982:	d135      	bne.n	80069f0 <_svfiprintf_r+0x188>
 8006984:	9b03      	ldr	r3, [sp, #12]
 8006986:	1d1a      	adds	r2, r3, #4
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	9203      	str	r2, [sp, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	bfb8      	it	lt
 8006990:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006994:	3402      	adds	r4, #2
 8006996:	9305      	str	r3, [sp, #20]
 8006998:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a64 <_svfiprintf_r+0x1fc>
 800699c:	7821      	ldrb	r1, [r4, #0]
 800699e:	2203      	movs	r2, #3
 80069a0:	4650      	mov	r0, sl
 80069a2:	f7f9 fc3d 	bl	8000220 <memchr>
 80069a6:	b140      	cbz	r0, 80069ba <_svfiprintf_r+0x152>
 80069a8:	2340      	movs	r3, #64	; 0x40
 80069aa:	eba0 000a 	sub.w	r0, r0, sl
 80069ae:	fa03 f000 	lsl.w	r0, r3, r0
 80069b2:	9b04      	ldr	r3, [sp, #16]
 80069b4:	4303      	orrs	r3, r0
 80069b6:	3401      	adds	r4, #1
 80069b8:	9304      	str	r3, [sp, #16]
 80069ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069be:	4826      	ldr	r0, [pc, #152]	; (8006a58 <_svfiprintf_r+0x1f0>)
 80069c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069c4:	2206      	movs	r2, #6
 80069c6:	f7f9 fc2b 	bl	8000220 <memchr>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	d038      	beq.n	8006a40 <_svfiprintf_r+0x1d8>
 80069ce:	4b23      	ldr	r3, [pc, #140]	; (8006a5c <_svfiprintf_r+0x1f4>)
 80069d0:	bb1b      	cbnz	r3, 8006a1a <_svfiprintf_r+0x1b2>
 80069d2:	9b03      	ldr	r3, [sp, #12]
 80069d4:	3307      	adds	r3, #7
 80069d6:	f023 0307 	bic.w	r3, r3, #7
 80069da:	3308      	adds	r3, #8
 80069dc:	9303      	str	r3, [sp, #12]
 80069de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e0:	4433      	add	r3, r6
 80069e2:	9309      	str	r3, [sp, #36]	; 0x24
 80069e4:	e767      	b.n	80068b6 <_svfiprintf_r+0x4e>
 80069e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80069ea:	460c      	mov	r4, r1
 80069ec:	2001      	movs	r0, #1
 80069ee:	e7a5      	b.n	800693c <_svfiprintf_r+0xd4>
 80069f0:	2300      	movs	r3, #0
 80069f2:	3401      	adds	r4, #1
 80069f4:	9305      	str	r3, [sp, #20]
 80069f6:	4619      	mov	r1, r3
 80069f8:	f04f 0c0a 	mov.w	ip, #10
 80069fc:	4620      	mov	r0, r4
 80069fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a02:	3a30      	subs	r2, #48	; 0x30
 8006a04:	2a09      	cmp	r2, #9
 8006a06:	d903      	bls.n	8006a10 <_svfiprintf_r+0x1a8>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0c5      	beq.n	8006998 <_svfiprintf_r+0x130>
 8006a0c:	9105      	str	r1, [sp, #20]
 8006a0e:	e7c3      	b.n	8006998 <_svfiprintf_r+0x130>
 8006a10:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a14:	4604      	mov	r4, r0
 8006a16:	2301      	movs	r3, #1
 8006a18:	e7f0      	b.n	80069fc <_svfiprintf_r+0x194>
 8006a1a:	ab03      	add	r3, sp, #12
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	462a      	mov	r2, r5
 8006a20:	4b0f      	ldr	r3, [pc, #60]	; (8006a60 <_svfiprintf_r+0x1f8>)
 8006a22:	a904      	add	r1, sp, #16
 8006a24:	4638      	mov	r0, r7
 8006a26:	f3af 8000 	nop.w
 8006a2a:	1c42      	adds	r2, r0, #1
 8006a2c:	4606      	mov	r6, r0
 8006a2e:	d1d6      	bne.n	80069de <_svfiprintf_r+0x176>
 8006a30:	89ab      	ldrh	r3, [r5, #12]
 8006a32:	065b      	lsls	r3, r3, #25
 8006a34:	f53f af2c 	bmi.w	8006890 <_svfiprintf_r+0x28>
 8006a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a3a:	b01d      	add	sp, #116	; 0x74
 8006a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a40:	ab03      	add	r3, sp, #12
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	462a      	mov	r2, r5
 8006a46:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <_svfiprintf_r+0x1f8>)
 8006a48:	a904      	add	r1, sp, #16
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	f000 f9d4 	bl	8006df8 <_printf_i>
 8006a50:	e7eb      	b.n	8006a2a <_svfiprintf_r+0x1c2>
 8006a52:	bf00      	nop
 8006a54:	08007a72 	.word	0x08007a72
 8006a58:	08007a7c 	.word	0x08007a7c
 8006a5c:	00000000 	.word	0x00000000
 8006a60:	080067b1 	.word	0x080067b1
 8006a64:	08007a78 	.word	0x08007a78

08006a68 <__sfputc_r>:
 8006a68:	6893      	ldr	r3, [r2, #8]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	b410      	push	{r4}
 8006a70:	6093      	str	r3, [r2, #8]
 8006a72:	da08      	bge.n	8006a86 <__sfputc_r+0x1e>
 8006a74:	6994      	ldr	r4, [r2, #24]
 8006a76:	42a3      	cmp	r3, r4
 8006a78:	db01      	blt.n	8006a7e <__sfputc_r+0x16>
 8006a7a:	290a      	cmp	r1, #10
 8006a7c:	d103      	bne.n	8006a86 <__sfputc_r+0x1e>
 8006a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a82:	f000 baef 	b.w	8007064 <__swbuf_r>
 8006a86:	6813      	ldr	r3, [r2, #0]
 8006a88:	1c58      	adds	r0, r3, #1
 8006a8a:	6010      	str	r0, [r2, #0]
 8006a8c:	7019      	strb	r1, [r3, #0]
 8006a8e:	4608      	mov	r0, r1
 8006a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <__sfputs_r>:
 8006a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a98:	4606      	mov	r6, r0
 8006a9a:	460f      	mov	r7, r1
 8006a9c:	4614      	mov	r4, r2
 8006a9e:	18d5      	adds	r5, r2, r3
 8006aa0:	42ac      	cmp	r4, r5
 8006aa2:	d101      	bne.n	8006aa8 <__sfputs_r+0x12>
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	e007      	b.n	8006ab8 <__sfputs_r+0x22>
 8006aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aac:	463a      	mov	r2, r7
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f7ff ffda 	bl	8006a68 <__sfputc_r>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d1f3      	bne.n	8006aa0 <__sfputs_r+0xa>
 8006ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006abc <_vfiprintf_r>:
 8006abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac0:	460d      	mov	r5, r1
 8006ac2:	b09d      	sub	sp, #116	; 0x74
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	4698      	mov	r8, r3
 8006ac8:	4606      	mov	r6, r0
 8006aca:	b118      	cbz	r0, 8006ad4 <_vfiprintf_r+0x18>
 8006acc:	6983      	ldr	r3, [r0, #24]
 8006ace:	b90b      	cbnz	r3, 8006ad4 <_vfiprintf_r+0x18>
 8006ad0:	f000 fcaa 	bl	8007428 <__sinit>
 8006ad4:	4b89      	ldr	r3, [pc, #548]	; (8006cfc <_vfiprintf_r+0x240>)
 8006ad6:	429d      	cmp	r5, r3
 8006ad8:	d11b      	bne.n	8006b12 <_vfiprintf_r+0x56>
 8006ada:	6875      	ldr	r5, [r6, #4]
 8006adc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ade:	07d9      	lsls	r1, r3, #31
 8006ae0:	d405      	bmi.n	8006aee <_vfiprintf_r+0x32>
 8006ae2:	89ab      	ldrh	r3, [r5, #12]
 8006ae4:	059a      	lsls	r2, r3, #22
 8006ae6:	d402      	bmi.n	8006aee <_vfiprintf_r+0x32>
 8006ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006aea:	f000 fd3b 	bl	8007564 <__retarget_lock_acquire_recursive>
 8006aee:	89ab      	ldrh	r3, [r5, #12]
 8006af0:	071b      	lsls	r3, r3, #28
 8006af2:	d501      	bpl.n	8006af8 <_vfiprintf_r+0x3c>
 8006af4:	692b      	ldr	r3, [r5, #16]
 8006af6:	b9eb      	cbnz	r3, 8006b34 <_vfiprintf_r+0x78>
 8006af8:	4629      	mov	r1, r5
 8006afa:	4630      	mov	r0, r6
 8006afc:	f000 fb04 	bl	8007108 <__swsetup_r>
 8006b00:	b1c0      	cbz	r0, 8006b34 <_vfiprintf_r+0x78>
 8006b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b04:	07dc      	lsls	r4, r3, #31
 8006b06:	d50e      	bpl.n	8006b26 <_vfiprintf_r+0x6a>
 8006b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b0c:	b01d      	add	sp, #116	; 0x74
 8006b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b12:	4b7b      	ldr	r3, [pc, #492]	; (8006d00 <_vfiprintf_r+0x244>)
 8006b14:	429d      	cmp	r5, r3
 8006b16:	d101      	bne.n	8006b1c <_vfiprintf_r+0x60>
 8006b18:	68b5      	ldr	r5, [r6, #8]
 8006b1a:	e7df      	b.n	8006adc <_vfiprintf_r+0x20>
 8006b1c:	4b79      	ldr	r3, [pc, #484]	; (8006d04 <_vfiprintf_r+0x248>)
 8006b1e:	429d      	cmp	r5, r3
 8006b20:	bf08      	it	eq
 8006b22:	68f5      	ldreq	r5, [r6, #12]
 8006b24:	e7da      	b.n	8006adc <_vfiprintf_r+0x20>
 8006b26:	89ab      	ldrh	r3, [r5, #12]
 8006b28:	0598      	lsls	r0, r3, #22
 8006b2a:	d4ed      	bmi.n	8006b08 <_vfiprintf_r+0x4c>
 8006b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b2e:	f000 fd1a 	bl	8007566 <__retarget_lock_release_recursive>
 8006b32:	e7e9      	b.n	8006b08 <_vfiprintf_r+0x4c>
 8006b34:	2300      	movs	r3, #0
 8006b36:	9309      	str	r3, [sp, #36]	; 0x24
 8006b38:	2320      	movs	r3, #32
 8006b3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b42:	2330      	movs	r3, #48	; 0x30
 8006b44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d08 <_vfiprintf_r+0x24c>
 8006b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b4c:	f04f 0901 	mov.w	r9, #1
 8006b50:	4623      	mov	r3, r4
 8006b52:	469a      	mov	sl, r3
 8006b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b58:	b10a      	cbz	r2, 8006b5e <_vfiprintf_r+0xa2>
 8006b5a:	2a25      	cmp	r2, #37	; 0x25
 8006b5c:	d1f9      	bne.n	8006b52 <_vfiprintf_r+0x96>
 8006b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8006b62:	d00b      	beq.n	8006b7c <_vfiprintf_r+0xc0>
 8006b64:	465b      	mov	r3, fp
 8006b66:	4622      	mov	r2, r4
 8006b68:	4629      	mov	r1, r5
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f7ff ff93 	bl	8006a96 <__sfputs_r>
 8006b70:	3001      	adds	r0, #1
 8006b72:	f000 80aa 	beq.w	8006cca <_vfiprintf_r+0x20e>
 8006b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b78:	445a      	add	r2, fp
 8006b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8006b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 80a2 	beq.w	8006cca <_vfiprintf_r+0x20e>
 8006b86:	2300      	movs	r3, #0
 8006b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b90:	f10a 0a01 	add.w	sl, sl, #1
 8006b94:	9304      	str	r3, [sp, #16]
 8006b96:	9307      	str	r3, [sp, #28]
 8006b98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8006b9e:	4654      	mov	r4, sl
 8006ba0:	2205      	movs	r2, #5
 8006ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ba6:	4858      	ldr	r0, [pc, #352]	; (8006d08 <_vfiprintf_r+0x24c>)
 8006ba8:	f7f9 fb3a 	bl	8000220 <memchr>
 8006bac:	9a04      	ldr	r2, [sp, #16]
 8006bae:	b9d8      	cbnz	r0, 8006be8 <_vfiprintf_r+0x12c>
 8006bb0:	06d1      	lsls	r1, r2, #27
 8006bb2:	bf44      	itt	mi
 8006bb4:	2320      	movmi	r3, #32
 8006bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bba:	0713      	lsls	r3, r2, #28
 8006bbc:	bf44      	itt	mi
 8006bbe:	232b      	movmi	r3, #43	; 0x2b
 8006bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8006bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8006bca:	d015      	beq.n	8006bf8 <_vfiprintf_r+0x13c>
 8006bcc:	9a07      	ldr	r2, [sp, #28]
 8006bce:	4654      	mov	r4, sl
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	f04f 0c0a 	mov.w	ip, #10
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bdc:	3b30      	subs	r3, #48	; 0x30
 8006bde:	2b09      	cmp	r3, #9
 8006be0:	d94e      	bls.n	8006c80 <_vfiprintf_r+0x1c4>
 8006be2:	b1b0      	cbz	r0, 8006c12 <_vfiprintf_r+0x156>
 8006be4:	9207      	str	r2, [sp, #28]
 8006be6:	e014      	b.n	8006c12 <_vfiprintf_r+0x156>
 8006be8:	eba0 0308 	sub.w	r3, r0, r8
 8006bec:	fa09 f303 	lsl.w	r3, r9, r3
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	9304      	str	r3, [sp, #16]
 8006bf4:	46a2      	mov	sl, r4
 8006bf6:	e7d2      	b.n	8006b9e <_vfiprintf_r+0xe2>
 8006bf8:	9b03      	ldr	r3, [sp, #12]
 8006bfa:	1d19      	adds	r1, r3, #4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	9103      	str	r1, [sp, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	bfbb      	ittet	lt
 8006c04:	425b      	neglt	r3, r3
 8006c06:	f042 0202 	orrlt.w	r2, r2, #2
 8006c0a:	9307      	strge	r3, [sp, #28]
 8006c0c:	9307      	strlt	r3, [sp, #28]
 8006c0e:	bfb8      	it	lt
 8006c10:	9204      	strlt	r2, [sp, #16]
 8006c12:	7823      	ldrb	r3, [r4, #0]
 8006c14:	2b2e      	cmp	r3, #46	; 0x2e
 8006c16:	d10c      	bne.n	8006c32 <_vfiprintf_r+0x176>
 8006c18:	7863      	ldrb	r3, [r4, #1]
 8006c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c1c:	d135      	bne.n	8006c8a <_vfiprintf_r+0x1ce>
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	1d1a      	adds	r2, r3, #4
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	9203      	str	r2, [sp, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	bfb8      	it	lt
 8006c2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c2e:	3402      	adds	r4, #2
 8006c30:	9305      	str	r3, [sp, #20]
 8006c32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d18 <_vfiprintf_r+0x25c>
 8006c36:	7821      	ldrb	r1, [r4, #0]
 8006c38:	2203      	movs	r2, #3
 8006c3a:	4650      	mov	r0, sl
 8006c3c:	f7f9 faf0 	bl	8000220 <memchr>
 8006c40:	b140      	cbz	r0, 8006c54 <_vfiprintf_r+0x198>
 8006c42:	2340      	movs	r3, #64	; 0x40
 8006c44:	eba0 000a 	sub.w	r0, r0, sl
 8006c48:	fa03 f000 	lsl.w	r0, r3, r0
 8006c4c:	9b04      	ldr	r3, [sp, #16]
 8006c4e:	4303      	orrs	r3, r0
 8006c50:	3401      	adds	r4, #1
 8006c52:	9304      	str	r3, [sp, #16]
 8006c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c58:	482c      	ldr	r0, [pc, #176]	; (8006d0c <_vfiprintf_r+0x250>)
 8006c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c5e:	2206      	movs	r2, #6
 8006c60:	f7f9 fade 	bl	8000220 <memchr>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d03f      	beq.n	8006ce8 <_vfiprintf_r+0x22c>
 8006c68:	4b29      	ldr	r3, [pc, #164]	; (8006d10 <_vfiprintf_r+0x254>)
 8006c6a:	bb1b      	cbnz	r3, 8006cb4 <_vfiprintf_r+0x1f8>
 8006c6c:	9b03      	ldr	r3, [sp, #12]
 8006c6e:	3307      	adds	r3, #7
 8006c70:	f023 0307 	bic.w	r3, r3, #7
 8006c74:	3308      	adds	r3, #8
 8006c76:	9303      	str	r3, [sp, #12]
 8006c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c7a:	443b      	add	r3, r7
 8006c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c7e:	e767      	b.n	8006b50 <_vfiprintf_r+0x94>
 8006c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c84:	460c      	mov	r4, r1
 8006c86:	2001      	movs	r0, #1
 8006c88:	e7a5      	b.n	8006bd6 <_vfiprintf_r+0x11a>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	3401      	adds	r4, #1
 8006c8e:	9305      	str	r3, [sp, #20]
 8006c90:	4619      	mov	r1, r3
 8006c92:	f04f 0c0a 	mov.w	ip, #10
 8006c96:	4620      	mov	r0, r4
 8006c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c9c:	3a30      	subs	r2, #48	; 0x30
 8006c9e:	2a09      	cmp	r2, #9
 8006ca0:	d903      	bls.n	8006caa <_vfiprintf_r+0x1ee>
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0c5      	beq.n	8006c32 <_vfiprintf_r+0x176>
 8006ca6:	9105      	str	r1, [sp, #20]
 8006ca8:	e7c3      	b.n	8006c32 <_vfiprintf_r+0x176>
 8006caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cae:	4604      	mov	r4, r0
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e7f0      	b.n	8006c96 <_vfiprintf_r+0x1da>
 8006cb4:	ab03      	add	r3, sp, #12
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	462a      	mov	r2, r5
 8006cba:	4b16      	ldr	r3, [pc, #88]	; (8006d14 <_vfiprintf_r+0x258>)
 8006cbc:	a904      	add	r1, sp, #16
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f3af 8000 	nop.w
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	1c78      	adds	r0, r7, #1
 8006cc8:	d1d6      	bne.n	8006c78 <_vfiprintf_r+0x1bc>
 8006cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ccc:	07d9      	lsls	r1, r3, #31
 8006cce:	d405      	bmi.n	8006cdc <_vfiprintf_r+0x220>
 8006cd0:	89ab      	ldrh	r3, [r5, #12]
 8006cd2:	059a      	lsls	r2, r3, #22
 8006cd4:	d402      	bmi.n	8006cdc <_vfiprintf_r+0x220>
 8006cd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cd8:	f000 fc45 	bl	8007566 <__retarget_lock_release_recursive>
 8006cdc:	89ab      	ldrh	r3, [r5, #12]
 8006cde:	065b      	lsls	r3, r3, #25
 8006ce0:	f53f af12 	bmi.w	8006b08 <_vfiprintf_r+0x4c>
 8006ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ce6:	e711      	b.n	8006b0c <_vfiprintf_r+0x50>
 8006ce8:	ab03      	add	r3, sp, #12
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	462a      	mov	r2, r5
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <_vfiprintf_r+0x258>)
 8006cf0:	a904      	add	r1, sp, #16
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f000 f880 	bl	8006df8 <_printf_i>
 8006cf8:	e7e4      	b.n	8006cc4 <_vfiprintf_r+0x208>
 8006cfa:	bf00      	nop
 8006cfc:	08007ac8 	.word	0x08007ac8
 8006d00:	08007ae8 	.word	0x08007ae8
 8006d04:	08007aa8 	.word	0x08007aa8
 8006d08:	08007a72 	.word	0x08007a72
 8006d0c:	08007a7c 	.word	0x08007a7c
 8006d10:	00000000 	.word	0x00000000
 8006d14:	08006a97 	.word	0x08006a97
 8006d18:	08007a78 	.word	0x08007a78

08006d1c <_printf_common>:
 8006d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d20:	4616      	mov	r6, r2
 8006d22:	4699      	mov	r9, r3
 8006d24:	688a      	ldr	r2, [r1, #8]
 8006d26:	690b      	ldr	r3, [r1, #16]
 8006d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	bfb8      	it	lt
 8006d30:	4613      	movlt	r3, r2
 8006d32:	6033      	str	r3, [r6, #0]
 8006d34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d38:	4607      	mov	r7, r0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	b10a      	cbz	r2, 8006d42 <_printf_common+0x26>
 8006d3e:	3301      	adds	r3, #1
 8006d40:	6033      	str	r3, [r6, #0]
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	0699      	lsls	r1, r3, #26
 8006d46:	bf42      	ittt	mi
 8006d48:	6833      	ldrmi	r3, [r6, #0]
 8006d4a:	3302      	addmi	r3, #2
 8006d4c:	6033      	strmi	r3, [r6, #0]
 8006d4e:	6825      	ldr	r5, [r4, #0]
 8006d50:	f015 0506 	ands.w	r5, r5, #6
 8006d54:	d106      	bne.n	8006d64 <_printf_common+0x48>
 8006d56:	f104 0a19 	add.w	sl, r4, #25
 8006d5a:	68e3      	ldr	r3, [r4, #12]
 8006d5c:	6832      	ldr	r2, [r6, #0]
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	42ab      	cmp	r3, r5
 8006d62:	dc26      	bgt.n	8006db2 <_printf_common+0x96>
 8006d64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d68:	1e13      	subs	r3, r2, #0
 8006d6a:	6822      	ldr	r2, [r4, #0]
 8006d6c:	bf18      	it	ne
 8006d6e:	2301      	movne	r3, #1
 8006d70:	0692      	lsls	r2, r2, #26
 8006d72:	d42b      	bmi.n	8006dcc <_printf_common+0xb0>
 8006d74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d78:	4649      	mov	r1, r9
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	47c0      	blx	r8
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d01e      	beq.n	8006dc0 <_printf_common+0xa4>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	68e5      	ldr	r5, [r4, #12]
 8006d86:	6832      	ldr	r2, [r6, #0]
 8006d88:	f003 0306 	and.w	r3, r3, #6
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	bf08      	it	eq
 8006d90:	1aad      	subeq	r5, r5, r2
 8006d92:	68a3      	ldr	r3, [r4, #8]
 8006d94:	6922      	ldr	r2, [r4, #16]
 8006d96:	bf0c      	ite	eq
 8006d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d9c:	2500      	movne	r5, #0
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	bfc4      	itt	gt
 8006da2:	1a9b      	subgt	r3, r3, r2
 8006da4:	18ed      	addgt	r5, r5, r3
 8006da6:	2600      	movs	r6, #0
 8006da8:	341a      	adds	r4, #26
 8006daa:	42b5      	cmp	r5, r6
 8006dac:	d11a      	bne.n	8006de4 <_printf_common+0xc8>
 8006dae:	2000      	movs	r0, #0
 8006db0:	e008      	b.n	8006dc4 <_printf_common+0xa8>
 8006db2:	2301      	movs	r3, #1
 8006db4:	4652      	mov	r2, sl
 8006db6:	4649      	mov	r1, r9
 8006db8:	4638      	mov	r0, r7
 8006dba:	47c0      	blx	r8
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	d103      	bne.n	8006dc8 <_printf_common+0xac>
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc8:	3501      	adds	r5, #1
 8006dca:	e7c6      	b.n	8006d5a <_printf_common+0x3e>
 8006dcc:	18e1      	adds	r1, r4, r3
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	2030      	movs	r0, #48	; 0x30
 8006dd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dd6:	4422      	add	r2, r4
 8006dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006de0:	3302      	adds	r3, #2
 8006de2:	e7c7      	b.n	8006d74 <_printf_common+0x58>
 8006de4:	2301      	movs	r3, #1
 8006de6:	4622      	mov	r2, r4
 8006de8:	4649      	mov	r1, r9
 8006dea:	4638      	mov	r0, r7
 8006dec:	47c0      	blx	r8
 8006dee:	3001      	adds	r0, #1
 8006df0:	d0e6      	beq.n	8006dc0 <_printf_common+0xa4>
 8006df2:	3601      	adds	r6, #1
 8006df4:	e7d9      	b.n	8006daa <_printf_common+0x8e>
	...

08006df8 <_printf_i>:
 8006df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dfc:	7e0f      	ldrb	r7, [r1, #24]
 8006dfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e00:	2f78      	cmp	r7, #120	; 0x78
 8006e02:	4691      	mov	r9, r2
 8006e04:	4680      	mov	r8, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	469a      	mov	sl, r3
 8006e0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e0e:	d807      	bhi.n	8006e20 <_printf_i+0x28>
 8006e10:	2f62      	cmp	r7, #98	; 0x62
 8006e12:	d80a      	bhi.n	8006e2a <_printf_i+0x32>
 8006e14:	2f00      	cmp	r7, #0
 8006e16:	f000 80d8 	beq.w	8006fca <_printf_i+0x1d2>
 8006e1a:	2f58      	cmp	r7, #88	; 0x58
 8006e1c:	f000 80a3 	beq.w	8006f66 <_printf_i+0x16e>
 8006e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e28:	e03a      	b.n	8006ea0 <_printf_i+0xa8>
 8006e2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e2e:	2b15      	cmp	r3, #21
 8006e30:	d8f6      	bhi.n	8006e20 <_printf_i+0x28>
 8006e32:	a101      	add	r1, pc, #4	; (adr r1, 8006e38 <_printf_i+0x40>)
 8006e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e38:	08006e91 	.word	0x08006e91
 8006e3c:	08006ea5 	.word	0x08006ea5
 8006e40:	08006e21 	.word	0x08006e21
 8006e44:	08006e21 	.word	0x08006e21
 8006e48:	08006e21 	.word	0x08006e21
 8006e4c:	08006e21 	.word	0x08006e21
 8006e50:	08006ea5 	.word	0x08006ea5
 8006e54:	08006e21 	.word	0x08006e21
 8006e58:	08006e21 	.word	0x08006e21
 8006e5c:	08006e21 	.word	0x08006e21
 8006e60:	08006e21 	.word	0x08006e21
 8006e64:	08006fb1 	.word	0x08006fb1
 8006e68:	08006ed5 	.word	0x08006ed5
 8006e6c:	08006f93 	.word	0x08006f93
 8006e70:	08006e21 	.word	0x08006e21
 8006e74:	08006e21 	.word	0x08006e21
 8006e78:	08006fd3 	.word	0x08006fd3
 8006e7c:	08006e21 	.word	0x08006e21
 8006e80:	08006ed5 	.word	0x08006ed5
 8006e84:	08006e21 	.word	0x08006e21
 8006e88:	08006e21 	.word	0x08006e21
 8006e8c:	08006f9b 	.word	0x08006f9b
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	1d1a      	adds	r2, r3, #4
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	602a      	str	r2, [r5, #0]
 8006e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e0a3      	b.n	8006fec <_printf_i+0x1f4>
 8006ea4:	6820      	ldr	r0, [r4, #0]
 8006ea6:	6829      	ldr	r1, [r5, #0]
 8006ea8:	0606      	lsls	r6, r0, #24
 8006eaa:	f101 0304 	add.w	r3, r1, #4
 8006eae:	d50a      	bpl.n	8006ec6 <_printf_i+0xce>
 8006eb0:	680e      	ldr	r6, [r1, #0]
 8006eb2:	602b      	str	r3, [r5, #0]
 8006eb4:	2e00      	cmp	r6, #0
 8006eb6:	da03      	bge.n	8006ec0 <_printf_i+0xc8>
 8006eb8:	232d      	movs	r3, #45	; 0x2d
 8006eba:	4276      	negs	r6, r6
 8006ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ec0:	485e      	ldr	r0, [pc, #376]	; (800703c <_printf_i+0x244>)
 8006ec2:	230a      	movs	r3, #10
 8006ec4:	e019      	b.n	8006efa <_printf_i+0x102>
 8006ec6:	680e      	ldr	r6, [r1, #0]
 8006ec8:	602b      	str	r3, [r5, #0]
 8006eca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ece:	bf18      	it	ne
 8006ed0:	b236      	sxthne	r6, r6
 8006ed2:	e7ef      	b.n	8006eb4 <_printf_i+0xbc>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	6820      	ldr	r0, [r4, #0]
 8006ed8:	1d19      	adds	r1, r3, #4
 8006eda:	6029      	str	r1, [r5, #0]
 8006edc:	0601      	lsls	r1, r0, #24
 8006ede:	d501      	bpl.n	8006ee4 <_printf_i+0xec>
 8006ee0:	681e      	ldr	r6, [r3, #0]
 8006ee2:	e002      	b.n	8006eea <_printf_i+0xf2>
 8006ee4:	0646      	lsls	r6, r0, #25
 8006ee6:	d5fb      	bpl.n	8006ee0 <_printf_i+0xe8>
 8006ee8:	881e      	ldrh	r6, [r3, #0]
 8006eea:	4854      	ldr	r0, [pc, #336]	; (800703c <_printf_i+0x244>)
 8006eec:	2f6f      	cmp	r7, #111	; 0x6f
 8006eee:	bf0c      	ite	eq
 8006ef0:	2308      	moveq	r3, #8
 8006ef2:	230a      	movne	r3, #10
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006efa:	6865      	ldr	r5, [r4, #4]
 8006efc:	60a5      	str	r5, [r4, #8]
 8006efe:	2d00      	cmp	r5, #0
 8006f00:	bfa2      	ittt	ge
 8006f02:	6821      	ldrge	r1, [r4, #0]
 8006f04:	f021 0104 	bicge.w	r1, r1, #4
 8006f08:	6021      	strge	r1, [r4, #0]
 8006f0a:	b90e      	cbnz	r6, 8006f10 <_printf_i+0x118>
 8006f0c:	2d00      	cmp	r5, #0
 8006f0e:	d04d      	beq.n	8006fac <_printf_i+0x1b4>
 8006f10:	4615      	mov	r5, r2
 8006f12:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f16:	fb03 6711 	mls	r7, r3, r1, r6
 8006f1a:	5dc7      	ldrb	r7, [r0, r7]
 8006f1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f20:	4637      	mov	r7, r6
 8006f22:	42bb      	cmp	r3, r7
 8006f24:	460e      	mov	r6, r1
 8006f26:	d9f4      	bls.n	8006f12 <_printf_i+0x11a>
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d10b      	bne.n	8006f44 <_printf_i+0x14c>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	07de      	lsls	r6, r3, #31
 8006f30:	d508      	bpl.n	8006f44 <_printf_i+0x14c>
 8006f32:	6923      	ldr	r3, [r4, #16]
 8006f34:	6861      	ldr	r1, [r4, #4]
 8006f36:	4299      	cmp	r1, r3
 8006f38:	bfde      	ittt	le
 8006f3a:	2330      	movle	r3, #48	; 0x30
 8006f3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006f44:	1b52      	subs	r2, r2, r5
 8006f46:	6122      	str	r2, [r4, #16]
 8006f48:	f8cd a000 	str.w	sl, [sp]
 8006f4c:	464b      	mov	r3, r9
 8006f4e:	aa03      	add	r2, sp, #12
 8006f50:	4621      	mov	r1, r4
 8006f52:	4640      	mov	r0, r8
 8006f54:	f7ff fee2 	bl	8006d1c <_printf_common>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d14c      	bne.n	8006ff6 <_printf_i+0x1fe>
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f60:	b004      	add	sp, #16
 8006f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f66:	4835      	ldr	r0, [pc, #212]	; (800703c <_printf_i+0x244>)
 8006f68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f6c:	6829      	ldr	r1, [r5, #0]
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f74:	6029      	str	r1, [r5, #0]
 8006f76:	061d      	lsls	r5, r3, #24
 8006f78:	d514      	bpl.n	8006fa4 <_printf_i+0x1ac>
 8006f7a:	07df      	lsls	r7, r3, #31
 8006f7c:	bf44      	itt	mi
 8006f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8006f82:	6023      	strmi	r3, [r4, #0]
 8006f84:	b91e      	cbnz	r6, 8006f8e <_printf_i+0x196>
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	f023 0320 	bic.w	r3, r3, #32
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	2310      	movs	r3, #16
 8006f90:	e7b0      	b.n	8006ef4 <_printf_i+0xfc>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	f043 0320 	orr.w	r3, r3, #32
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	2378      	movs	r3, #120	; 0x78
 8006f9c:	4828      	ldr	r0, [pc, #160]	; (8007040 <_printf_i+0x248>)
 8006f9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fa2:	e7e3      	b.n	8006f6c <_printf_i+0x174>
 8006fa4:	0659      	lsls	r1, r3, #25
 8006fa6:	bf48      	it	mi
 8006fa8:	b2b6      	uxthmi	r6, r6
 8006faa:	e7e6      	b.n	8006f7a <_printf_i+0x182>
 8006fac:	4615      	mov	r5, r2
 8006fae:	e7bb      	b.n	8006f28 <_printf_i+0x130>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	6826      	ldr	r6, [r4, #0]
 8006fb4:	6961      	ldr	r1, [r4, #20]
 8006fb6:	1d18      	adds	r0, r3, #4
 8006fb8:	6028      	str	r0, [r5, #0]
 8006fba:	0635      	lsls	r5, r6, #24
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	d501      	bpl.n	8006fc4 <_printf_i+0x1cc>
 8006fc0:	6019      	str	r1, [r3, #0]
 8006fc2:	e002      	b.n	8006fca <_printf_i+0x1d2>
 8006fc4:	0670      	lsls	r0, r6, #25
 8006fc6:	d5fb      	bpl.n	8006fc0 <_printf_i+0x1c8>
 8006fc8:	8019      	strh	r1, [r3, #0]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	6123      	str	r3, [r4, #16]
 8006fce:	4615      	mov	r5, r2
 8006fd0:	e7ba      	b.n	8006f48 <_printf_i+0x150>
 8006fd2:	682b      	ldr	r3, [r5, #0]
 8006fd4:	1d1a      	adds	r2, r3, #4
 8006fd6:	602a      	str	r2, [r5, #0]
 8006fd8:	681d      	ldr	r5, [r3, #0]
 8006fda:	6862      	ldr	r2, [r4, #4]
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f7f9 f91e 	bl	8000220 <memchr>
 8006fe4:	b108      	cbz	r0, 8006fea <_printf_i+0x1f2>
 8006fe6:	1b40      	subs	r0, r0, r5
 8006fe8:	6060      	str	r0, [r4, #4]
 8006fea:	6863      	ldr	r3, [r4, #4]
 8006fec:	6123      	str	r3, [r4, #16]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ff4:	e7a8      	b.n	8006f48 <_printf_i+0x150>
 8006ff6:	6923      	ldr	r3, [r4, #16]
 8006ff8:	462a      	mov	r2, r5
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	4640      	mov	r0, r8
 8006ffe:	47d0      	blx	sl
 8007000:	3001      	adds	r0, #1
 8007002:	d0ab      	beq.n	8006f5c <_printf_i+0x164>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	079b      	lsls	r3, r3, #30
 8007008:	d413      	bmi.n	8007032 <_printf_i+0x23a>
 800700a:	68e0      	ldr	r0, [r4, #12]
 800700c:	9b03      	ldr	r3, [sp, #12]
 800700e:	4298      	cmp	r0, r3
 8007010:	bfb8      	it	lt
 8007012:	4618      	movlt	r0, r3
 8007014:	e7a4      	b.n	8006f60 <_printf_i+0x168>
 8007016:	2301      	movs	r3, #1
 8007018:	4632      	mov	r2, r6
 800701a:	4649      	mov	r1, r9
 800701c:	4640      	mov	r0, r8
 800701e:	47d0      	blx	sl
 8007020:	3001      	adds	r0, #1
 8007022:	d09b      	beq.n	8006f5c <_printf_i+0x164>
 8007024:	3501      	adds	r5, #1
 8007026:	68e3      	ldr	r3, [r4, #12]
 8007028:	9903      	ldr	r1, [sp, #12]
 800702a:	1a5b      	subs	r3, r3, r1
 800702c:	42ab      	cmp	r3, r5
 800702e:	dcf2      	bgt.n	8007016 <_printf_i+0x21e>
 8007030:	e7eb      	b.n	800700a <_printf_i+0x212>
 8007032:	2500      	movs	r5, #0
 8007034:	f104 0619 	add.w	r6, r4, #25
 8007038:	e7f5      	b.n	8007026 <_printf_i+0x22e>
 800703a:	bf00      	nop
 800703c:	08007a83 	.word	0x08007a83
 8007040:	08007a94 	.word	0x08007a94

08007044 <_sbrk_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4d06      	ldr	r5, [pc, #24]	; (8007060 <_sbrk_r+0x1c>)
 8007048:	2300      	movs	r3, #0
 800704a:	4604      	mov	r4, r0
 800704c:	4608      	mov	r0, r1
 800704e:	602b      	str	r3, [r5, #0]
 8007050:	f7f9 fe4e 	bl	8000cf0 <_sbrk>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_sbrk_r+0x1a>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_sbrk_r+0x1a>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	20019428 	.word	0x20019428

08007064 <__swbuf_r>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	460e      	mov	r6, r1
 8007068:	4614      	mov	r4, r2
 800706a:	4605      	mov	r5, r0
 800706c:	b118      	cbz	r0, 8007076 <__swbuf_r+0x12>
 800706e:	6983      	ldr	r3, [r0, #24]
 8007070:	b90b      	cbnz	r3, 8007076 <__swbuf_r+0x12>
 8007072:	f000 f9d9 	bl	8007428 <__sinit>
 8007076:	4b21      	ldr	r3, [pc, #132]	; (80070fc <__swbuf_r+0x98>)
 8007078:	429c      	cmp	r4, r3
 800707a:	d12b      	bne.n	80070d4 <__swbuf_r+0x70>
 800707c:	686c      	ldr	r4, [r5, #4]
 800707e:	69a3      	ldr	r3, [r4, #24]
 8007080:	60a3      	str	r3, [r4, #8]
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	071a      	lsls	r2, r3, #28
 8007086:	d52f      	bpl.n	80070e8 <__swbuf_r+0x84>
 8007088:	6923      	ldr	r3, [r4, #16]
 800708a:	b36b      	cbz	r3, 80070e8 <__swbuf_r+0x84>
 800708c:	6923      	ldr	r3, [r4, #16]
 800708e:	6820      	ldr	r0, [r4, #0]
 8007090:	1ac0      	subs	r0, r0, r3
 8007092:	6963      	ldr	r3, [r4, #20]
 8007094:	b2f6      	uxtb	r6, r6
 8007096:	4283      	cmp	r3, r0
 8007098:	4637      	mov	r7, r6
 800709a:	dc04      	bgt.n	80070a6 <__swbuf_r+0x42>
 800709c:	4621      	mov	r1, r4
 800709e:	4628      	mov	r0, r5
 80070a0:	f000 f92e 	bl	8007300 <_fflush_r>
 80070a4:	bb30      	cbnz	r0, 80070f4 <__swbuf_r+0x90>
 80070a6:	68a3      	ldr	r3, [r4, #8]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	60a3      	str	r3, [r4, #8]
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	6022      	str	r2, [r4, #0]
 80070b2:	701e      	strb	r6, [r3, #0]
 80070b4:	6963      	ldr	r3, [r4, #20]
 80070b6:	3001      	adds	r0, #1
 80070b8:	4283      	cmp	r3, r0
 80070ba:	d004      	beq.n	80070c6 <__swbuf_r+0x62>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	07db      	lsls	r3, r3, #31
 80070c0:	d506      	bpl.n	80070d0 <__swbuf_r+0x6c>
 80070c2:	2e0a      	cmp	r6, #10
 80070c4:	d104      	bne.n	80070d0 <__swbuf_r+0x6c>
 80070c6:	4621      	mov	r1, r4
 80070c8:	4628      	mov	r0, r5
 80070ca:	f000 f919 	bl	8007300 <_fflush_r>
 80070ce:	b988      	cbnz	r0, 80070f4 <__swbuf_r+0x90>
 80070d0:	4638      	mov	r0, r7
 80070d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d4:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <__swbuf_r+0x9c>)
 80070d6:	429c      	cmp	r4, r3
 80070d8:	d101      	bne.n	80070de <__swbuf_r+0x7a>
 80070da:	68ac      	ldr	r4, [r5, #8]
 80070dc:	e7cf      	b.n	800707e <__swbuf_r+0x1a>
 80070de:	4b09      	ldr	r3, [pc, #36]	; (8007104 <__swbuf_r+0xa0>)
 80070e0:	429c      	cmp	r4, r3
 80070e2:	bf08      	it	eq
 80070e4:	68ec      	ldreq	r4, [r5, #12]
 80070e6:	e7ca      	b.n	800707e <__swbuf_r+0x1a>
 80070e8:	4621      	mov	r1, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 f80c 	bl	8007108 <__swsetup_r>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d0cb      	beq.n	800708c <__swbuf_r+0x28>
 80070f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80070f8:	e7ea      	b.n	80070d0 <__swbuf_r+0x6c>
 80070fa:	bf00      	nop
 80070fc:	08007ac8 	.word	0x08007ac8
 8007100:	08007ae8 	.word	0x08007ae8
 8007104:	08007aa8 	.word	0x08007aa8

08007108 <__swsetup_r>:
 8007108:	4b32      	ldr	r3, [pc, #200]	; (80071d4 <__swsetup_r+0xcc>)
 800710a:	b570      	push	{r4, r5, r6, lr}
 800710c:	681d      	ldr	r5, [r3, #0]
 800710e:	4606      	mov	r6, r0
 8007110:	460c      	mov	r4, r1
 8007112:	b125      	cbz	r5, 800711e <__swsetup_r+0x16>
 8007114:	69ab      	ldr	r3, [r5, #24]
 8007116:	b913      	cbnz	r3, 800711e <__swsetup_r+0x16>
 8007118:	4628      	mov	r0, r5
 800711a:	f000 f985 	bl	8007428 <__sinit>
 800711e:	4b2e      	ldr	r3, [pc, #184]	; (80071d8 <__swsetup_r+0xd0>)
 8007120:	429c      	cmp	r4, r3
 8007122:	d10f      	bne.n	8007144 <__swsetup_r+0x3c>
 8007124:	686c      	ldr	r4, [r5, #4]
 8007126:	89a3      	ldrh	r3, [r4, #12]
 8007128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800712c:	0719      	lsls	r1, r3, #28
 800712e:	d42c      	bmi.n	800718a <__swsetup_r+0x82>
 8007130:	06dd      	lsls	r5, r3, #27
 8007132:	d411      	bmi.n	8007158 <__swsetup_r+0x50>
 8007134:	2309      	movs	r3, #9
 8007136:	6033      	str	r3, [r6, #0]
 8007138:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800713c:	81a3      	strh	r3, [r4, #12]
 800713e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007142:	e03e      	b.n	80071c2 <__swsetup_r+0xba>
 8007144:	4b25      	ldr	r3, [pc, #148]	; (80071dc <__swsetup_r+0xd4>)
 8007146:	429c      	cmp	r4, r3
 8007148:	d101      	bne.n	800714e <__swsetup_r+0x46>
 800714a:	68ac      	ldr	r4, [r5, #8]
 800714c:	e7eb      	b.n	8007126 <__swsetup_r+0x1e>
 800714e:	4b24      	ldr	r3, [pc, #144]	; (80071e0 <__swsetup_r+0xd8>)
 8007150:	429c      	cmp	r4, r3
 8007152:	bf08      	it	eq
 8007154:	68ec      	ldreq	r4, [r5, #12]
 8007156:	e7e6      	b.n	8007126 <__swsetup_r+0x1e>
 8007158:	0758      	lsls	r0, r3, #29
 800715a:	d512      	bpl.n	8007182 <__swsetup_r+0x7a>
 800715c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800715e:	b141      	cbz	r1, 8007172 <__swsetup_r+0x6a>
 8007160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007164:	4299      	cmp	r1, r3
 8007166:	d002      	beq.n	800716e <__swsetup_r+0x66>
 8007168:	4630      	mov	r0, r6
 800716a:	f7ff fa41 	bl	80065f0 <_free_r>
 800716e:	2300      	movs	r3, #0
 8007170:	6363      	str	r3, [r4, #52]	; 0x34
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007178:	81a3      	strh	r3, [r4, #12]
 800717a:	2300      	movs	r3, #0
 800717c:	6063      	str	r3, [r4, #4]
 800717e:	6923      	ldr	r3, [r4, #16]
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	f043 0308 	orr.w	r3, r3, #8
 8007188:	81a3      	strh	r3, [r4, #12]
 800718a:	6923      	ldr	r3, [r4, #16]
 800718c:	b94b      	cbnz	r3, 80071a2 <__swsetup_r+0x9a>
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007198:	d003      	beq.n	80071a2 <__swsetup_r+0x9a>
 800719a:	4621      	mov	r1, r4
 800719c:	4630      	mov	r0, r6
 800719e:	f000 fa09 	bl	80075b4 <__smakebuf_r>
 80071a2:	89a0      	ldrh	r0, [r4, #12]
 80071a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071a8:	f010 0301 	ands.w	r3, r0, #1
 80071ac:	d00a      	beq.n	80071c4 <__swsetup_r+0xbc>
 80071ae:	2300      	movs	r3, #0
 80071b0:	60a3      	str	r3, [r4, #8]
 80071b2:	6963      	ldr	r3, [r4, #20]
 80071b4:	425b      	negs	r3, r3
 80071b6:	61a3      	str	r3, [r4, #24]
 80071b8:	6923      	ldr	r3, [r4, #16]
 80071ba:	b943      	cbnz	r3, 80071ce <__swsetup_r+0xc6>
 80071bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071c0:	d1ba      	bne.n	8007138 <__swsetup_r+0x30>
 80071c2:	bd70      	pop	{r4, r5, r6, pc}
 80071c4:	0781      	lsls	r1, r0, #30
 80071c6:	bf58      	it	pl
 80071c8:	6963      	ldrpl	r3, [r4, #20]
 80071ca:	60a3      	str	r3, [r4, #8]
 80071cc:	e7f4      	b.n	80071b8 <__swsetup_r+0xb0>
 80071ce:	2000      	movs	r0, #0
 80071d0:	e7f7      	b.n	80071c2 <__swsetup_r+0xba>
 80071d2:	bf00      	nop
 80071d4:	20000010 	.word	0x20000010
 80071d8:	08007ac8 	.word	0x08007ac8
 80071dc:	08007ae8 	.word	0x08007ae8
 80071e0:	08007aa8 	.word	0x08007aa8

080071e4 <abort>:
 80071e4:	b508      	push	{r3, lr}
 80071e6:	2006      	movs	r0, #6
 80071e8:	f000 faa2 	bl	8007730 <raise>
 80071ec:	2001      	movs	r0, #1
 80071ee:	f7f9 fd07 	bl	8000c00 <_exit>
	...

080071f4 <__sflush_r>:
 80071f4:	898a      	ldrh	r2, [r1, #12]
 80071f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071fa:	4605      	mov	r5, r0
 80071fc:	0710      	lsls	r0, r2, #28
 80071fe:	460c      	mov	r4, r1
 8007200:	d458      	bmi.n	80072b4 <__sflush_r+0xc0>
 8007202:	684b      	ldr	r3, [r1, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	dc05      	bgt.n	8007214 <__sflush_r+0x20>
 8007208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	dc02      	bgt.n	8007214 <__sflush_r+0x20>
 800720e:	2000      	movs	r0, #0
 8007210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007216:	2e00      	cmp	r6, #0
 8007218:	d0f9      	beq.n	800720e <__sflush_r+0x1a>
 800721a:	2300      	movs	r3, #0
 800721c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007220:	682f      	ldr	r7, [r5, #0]
 8007222:	602b      	str	r3, [r5, #0]
 8007224:	d032      	beq.n	800728c <__sflush_r+0x98>
 8007226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	075a      	lsls	r2, r3, #29
 800722c:	d505      	bpl.n	800723a <__sflush_r+0x46>
 800722e:	6863      	ldr	r3, [r4, #4]
 8007230:	1ac0      	subs	r0, r0, r3
 8007232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007234:	b10b      	cbz	r3, 800723a <__sflush_r+0x46>
 8007236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007238:	1ac0      	subs	r0, r0, r3
 800723a:	2300      	movs	r3, #0
 800723c:	4602      	mov	r2, r0
 800723e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007240:	6a21      	ldr	r1, [r4, #32]
 8007242:	4628      	mov	r0, r5
 8007244:	47b0      	blx	r6
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	d106      	bne.n	800725a <__sflush_r+0x66>
 800724c:	6829      	ldr	r1, [r5, #0]
 800724e:	291d      	cmp	r1, #29
 8007250:	d82c      	bhi.n	80072ac <__sflush_r+0xb8>
 8007252:	4a2a      	ldr	r2, [pc, #168]	; (80072fc <__sflush_r+0x108>)
 8007254:	40ca      	lsrs	r2, r1
 8007256:	07d6      	lsls	r6, r2, #31
 8007258:	d528      	bpl.n	80072ac <__sflush_r+0xb8>
 800725a:	2200      	movs	r2, #0
 800725c:	6062      	str	r2, [r4, #4]
 800725e:	04d9      	lsls	r1, r3, #19
 8007260:	6922      	ldr	r2, [r4, #16]
 8007262:	6022      	str	r2, [r4, #0]
 8007264:	d504      	bpl.n	8007270 <__sflush_r+0x7c>
 8007266:	1c42      	adds	r2, r0, #1
 8007268:	d101      	bne.n	800726e <__sflush_r+0x7a>
 800726a:	682b      	ldr	r3, [r5, #0]
 800726c:	b903      	cbnz	r3, 8007270 <__sflush_r+0x7c>
 800726e:	6560      	str	r0, [r4, #84]	; 0x54
 8007270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007272:	602f      	str	r7, [r5, #0]
 8007274:	2900      	cmp	r1, #0
 8007276:	d0ca      	beq.n	800720e <__sflush_r+0x1a>
 8007278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800727c:	4299      	cmp	r1, r3
 800727e:	d002      	beq.n	8007286 <__sflush_r+0x92>
 8007280:	4628      	mov	r0, r5
 8007282:	f7ff f9b5 	bl	80065f0 <_free_r>
 8007286:	2000      	movs	r0, #0
 8007288:	6360      	str	r0, [r4, #52]	; 0x34
 800728a:	e7c1      	b.n	8007210 <__sflush_r+0x1c>
 800728c:	6a21      	ldr	r1, [r4, #32]
 800728e:	2301      	movs	r3, #1
 8007290:	4628      	mov	r0, r5
 8007292:	47b0      	blx	r6
 8007294:	1c41      	adds	r1, r0, #1
 8007296:	d1c7      	bne.n	8007228 <__sflush_r+0x34>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0c4      	beq.n	8007228 <__sflush_r+0x34>
 800729e:	2b1d      	cmp	r3, #29
 80072a0:	d001      	beq.n	80072a6 <__sflush_r+0xb2>
 80072a2:	2b16      	cmp	r3, #22
 80072a4:	d101      	bne.n	80072aa <__sflush_r+0xb6>
 80072a6:	602f      	str	r7, [r5, #0]
 80072a8:	e7b1      	b.n	800720e <__sflush_r+0x1a>
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b0:	81a3      	strh	r3, [r4, #12]
 80072b2:	e7ad      	b.n	8007210 <__sflush_r+0x1c>
 80072b4:	690f      	ldr	r7, [r1, #16]
 80072b6:	2f00      	cmp	r7, #0
 80072b8:	d0a9      	beq.n	800720e <__sflush_r+0x1a>
 80072ba:	0793      	lsls	r3, r2, #30
 80072bc:	680e      	ldr	r6, [r1, #0]
 80072be:	bf08      	it	eq
 80072c0:	694b      	ldreq	r3, [r1, #20]
 80072c2:	600f      	str	r7, [r1, #0]
 80072c4:	bf18      	it	ne
 80072c6:	2300      	movne	r3, #0
 80072c8:	eba6 0807 	sub.w	r8, r6, r7
 80072cc:	608b      	str	r3, [r1, #8]
 80072ce:	f1b8 0f00 	cmp.w	r8, #0
 80072d2:	dd9c      	ble.n	800720e <__sflush_r+0x1a>
 80072d4:	6a21      	ldr	r1, [r4, #32]
 80072d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072d8:	4643      	mov	r3, r8
 80072da:	463a      	mov	r2, r7
 80072dc:	4628      	mov	r0, r5
 80072de:	47b0      	blx	r6
 80072e0:	2800      	cmp	r0, #0
 80072e2:	dc06      	bgt.n	80072f2 <__sflush_r+0xfe>
 80072e4:	89a3      	ldrh	r3, [r4, #12]
 80072e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ea:	81a3      	strh	r3, [r4, #12]
 80072ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f0:	e78e      	b.n	8007210 <__sflush_r+0x1c>
 80072f2:	4407      	add	r7, r0
 80072f4:	eba8 0800 	sub.w	r8, r8, r0
 80072f8:	e7e9      	b.n	80072ce <__sflush_r+0xda>
 80072fa:	bf00      	nop
 80072fc:	20400001 	.word	0x20400001

08007300 <_fflush_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	690b      	ldr	r3, [r1, #16]
 8007304:	4605      	mov	r5, r0
 8007306:	460c      	mov	r4, r1
 8007308:	b913      	cbnz	r3, 8007310 <_fflush_r+0x10>
 800730a:	2500      	movs	r5, #0
 800730c:	4628      	mov	r0, r5
 800730e:	bd38      	pop	{r3, r4, r5, pc}
 8007310:	b118      	cbz	r0, 800731a <_fflush_r+0x1a>
 8007312:	6983      	ldr	r3, [r0, #24]
 8007314:	b90b      	cbnz	r3, 800731a <_fflush_r+0x1a>
 8007316:	f000 f887 	bl	8007428 <__sinit>
 800731a:	4b14      	ldr	r3, [pc, #80]	; (800736c <_fflush_r+0x6c>)
 800731c:	429c      	cmp	r4, r3
 800731e:	d11b      	bne.n	8007358 <_fflush_r+0x58>
 8007320:	686c      	ldr	r4, [r5, #4]
 8007322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0ef      	beq.n	800730a <_fflush_r+0xa>
 800732a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800732c:	07d0      	lsls	r0, r2, #31
 800732e:	d404      	bmi.n	800733a <_fflush_r+0x3a>
 8007330:	0599      	lsls	r1, r3, #22
 8007332:	d402      	bmi.n	800733a <_fflush_r+0x3a>
 8007334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007336:	f000 f915 	bl	8007564 <__retarget_lock_acquire_recursive>
 800733a:	4628      	mov	r0, r5
 800733c:	4621      	mov	r1, r4
 800733e:	f7ff ff59 	bl	80071f4 <__sflush_r>
 8007342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007344:	07da      	lsls	r2, r3, #31
 8007346:	4605      	mov	r5, r0
 8007348:	d4e0      	bmi.n	800730c <_fflush_r+0xc>
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	059b      	lsls	r3, r3, #22
 800734e:	d4dd      	bmi.n	800730c <_fflush_r+0xc>
 8007350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007352:	f000 f908 	bl	8007566 <__retarget_lock_release_recursive>
 8007356:	e7d9      	b.n	800730c <_fflush_r+0xc>
 8007358:	4b05      	ldr	r3, [pc, #20]	; (8007370 <_fflush_r+0x70>)
 800735a:	429c      	cmp	r4, r3
 800735c:	d101      	bne.n	8007362 <_fflush_r+0x62>
 800735e:	68ac      	ldr	r4, [r5, #8]
 8007360:	e7df      	b.n	8007322 <_fflush_r+0x22>
 8007362:	4b04      	ldr	r3, [pc, #16]	; (8007374 <_fflush_r+0x74>)
 8007364:	429c      	cmp	r4, r3
 8007366:	bf08      	it	eq
 8007368:	68ec      	ldreq	r4, [r5, #12]
 800736a:	e7da      	b.n	8007322 <_fflush_r+0x22>
 800736c:	08007ac8 	.word	0x08007ac8
 8007370:	08007ae8 	.word	0x08007ae8
 8007374:	08007aa8 	.word	0x08007aa8

08007378 <std>:
 8007378:	2300      	movs	r3, #0
 800737a:	b510      	push	{r4, lr}
 800737c:	4604      	mov	r4, r0
 800737e:	e9c0 3300 	strd	r3, r3, [r0]
 8007382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007386:	6083      	str	r3, [r0, #8]
 8007388:	8181      	strh	r1, [r0, #12]
 800738a:	6643      	str	r3, [r0, #100]	; 0x64
 800738c:	81c2      	strh	r2, [r0, #14]
 800738e:	6183      	str	r3, [r0, #24]
 8007390:	4619      	mov	r1, r3
 8007392:	2208      	movs	r2, #8
 8007394:	305c      	adds	r0, #92	; 0x5c
 8007396:	f7ff f83f 	bl	8006418 <memset>
 800739a:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <std+0x38>)
 800739c:	6263      	str	r3, [r4, #36]	; 0x24
 800739e:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <std+0x3c>)
 80073a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80073a2:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <std+0x40>)
 80073a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073a6:	4b05      	ldr	r3, [pc, #20]	; (80073bc <std+0x44>)
 80073a8:	6224      	str	r4, [r4, #32]
 80073aa:	6323      	str	r3, [r4, #48]	; 0x30
 80073ac:	bd10      	pop	{r4, pc}
 80073ae:	bf00      	nop
 80073b0:	08007769 	.word	0x08007769
 80073b4:	0800778b 	.word	0x0800778b
 80073b8:	080077c3 	.word	0x080077c3
 80073bc:	080077e7 	.word	0x080077e7

080073c0 <_cleanup_r>:
 80073c0:	4901      	ldr	r1, [pc, #4]	; (80073c8 <_cleanup_r+0x8>)
 80073c2:	f000 b8af 	b.w	8007524 <_fwalk_reent>
 80073c6:	bf00      	nop
 80073c8:	08007301 	.word	0x08007301

080073cc <__sfmoreglue>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	2268      	movs	r2, #104	; 0x68
 80073d0:	1e4d      	subs	r5, r1, #1
 80073d2:	4355      	muls	r5, r2
 80073d4:	460e      	mov	r6, r1
 80073d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073da:	f7ff f975 	bl	80066c8 <_malloc_r>
 80073de:	4604      	mov	r4, r0
 80073e0:	b140      	cbz	r0, 80073f4 <__sfmoreglue+0x28>
 80073e2:	2100      	movs	r1, #0
 80073e4:	e9c0 1600 	strd	r1, r6, [r0]
 80073e8:	300c      	adds	r0, #12
 80073ea:	60a0      	str	r0, [r4, #8]
 80073ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073f0:	f7ff f812 	bl	8006418 <memset>
 80073f4:	4620      	mov	r0, r4
 80073f6:	bd70      	pop	{r4, r5, r6, pc}

080073f8 <__sfp_lock_acquire>:
 80073f8:	4801      	ldr	r0, [pc, #4]	; (8007400 <__sfp_lock_acquire+0x8>)
 80073fa:	f000 b8b3 	b.w	8007564 <__retarget_lock_acquire_recursive>
 80073fe:	bf00      	nop
 8007400:	20019425 	.word	0x20019425

08007404 <__sfp_lock_release>:
 8007404:	4801      	ldr	r0, [pc, #4]	; (800740c <__sfp_lock_release+0x8>)
 8007406:	f000 b8ae 	b.w	8007566 <__retarget_lock_release_recursive>
 800740a:	bf00      	nop
 800740c:	20019425 	.word	0x20019425

08007410 <__sinit_lock_acquire>:
 8007410:	4801      	ldr	r0, [pc, #4]	; (8007418 <__sinit_lock_acquire+0x8>)
 8007412:	f000 b8a7 	b.w	8007564 <__retarget_lock_acquire_recursive>
 8007416:	bf00      	nop
 8007418:	20019426 	.word	0x20019426

0800741c <__sinit_lock_release>:
 800741c:	4801      	ldr	r0, [pc, #4]	; (8007424 <__sinit_lock_release+0x8>)
 800741e:	f000 b8a2 	b.w	8007566 <__retarget_lock_release_recursive>
 8007422:	bf00      	nop
 8007424:	20019426 	.word	0x20019426

08007428 <__sinit>:
 8007428:	b510      	push	{r4, lr}
 800742a:	4604      	mov	r4, r0
 800742c:	f7ff fff0 	bl	8007410 <__sinit_lock_acquire>
 8007430:	69a3      	ldr	r3, [r4, #24]
 8007432:	b11b      	cbz	r3, 800743c <__sinit+0x14>
 8007434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007438:	f7ff bff0 	b.w	800741c <__sinit_lock_release>
 800743c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007440:	6523      	str	r3, [r4, #80]	; 0x50
 8007442:	4b13      	ldr	r3, [pc, #76]	; (8007490 <__sinit+0x68>)
 8007444:	4a13      	ldr	r2, [pc, #76]	; (8007494 <__sinit+0x6c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	62a2      	str	r2, [r4, #40]	; 0x28
 800744a:	42a3      	cmp	r3, r4
 800744c:	bf04      	itt	eq
 800744e:	2301      	moveq	r3, #1
 8007450:	61a3      	streq	r3, [r4, #24]
 8007452:	4620      	mov	r0, r4
 8007454:	f000 f820 	bl	8007498 <__sfp>
 8007458:	6060      	str	r0, [r4, #4]
 800745a:	4620      	mov	r0, r4
 800745c:	f000 f81c 	bl	8007498 <__sfp>
 8007460:	60a0      	str	r0, [r4, #8]
 8007462:	4620      	mov	r0, r4
 8007464:	f000 f818 	bl	8007498 <__sfp>
 8007468:	2200      	movs	r2, #0
 800746a:	60e0      	str	r0, [r4, #12]
 800746c:	2104      	movs	r1, #4
 800746e:	6860      	ldr	r0, [r4, #4]
 8007470:	f7ff ff82 	bl	8007378 <std>
 8007474:	68a0      	ldr	r0, [r4, #8]
 8007476:	2201      	movs	r2, #1
 8007478:	2109      	movs	r1, #9
 800747a:	f7ff ff7d 	bl	8007378 <std>
 800747e:	68e0      	ldr	r0, [r4, #12]
 8007480:	2202      	movs	r2, #2
 8007482:	2112      	movs	r1, #18
 8007484:	f7ff ff78 	bl	8007378 <std>
 8007488:	2301      	movs	r3, #1
 800748a:	61a3      	str	r3, [r4, #24]
 800748c:	e7d2      	b.n	8007434 <__sinit+0xc>
 800748e:	bf00      	nop
 8007490:	080079c0 	.word	0x080079c0
 8007494:	080073c1 	.word	0x080073c1

08007498 <__sfp>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	4607      	mov	r7, r0
 800749c:	f7ff ffac 	bl	80073f8 <__sfp_lock_acquire>
 80074a0:	4b1e      	ldr	r3, [pc, #120]	; (800751c <__sfp+0x84>)
 80074a2:	681e      	ldr	r6, [r3, #0]
 80074a4:	69b3      	ldr	r3, [r6, #24]
 80074a6:	b913      	cbnz	r3, 80074ae <__sfp+0x16>
 80074a8:	4630      	mov	r0, r6
 80074aa:	f7ff ffbd 	bl	8007428 <__sinit>
 80074ae:	3648      	adds	r6, #72	; 0x48
 80074b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	d503      	bpl.n	80074c0 <__sfp+0x28>
 80074b8:	6833      	ldr	r3, [r6, #0]
 80074ba:	b30b      	cbz	r3, 8007500 <__sfp+0x68>
 80074bc:	6836      	ldr	r6, [r6, #0]
 80074be:	e7f7      	b.n	80074b0 <__sfp+0x18>
 80074c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074c4:	b9d5      	cbnz	r5, 80074fc <__sfp+0x64>
 80074c6:	4b16      	ldr	r3, [pc, #88]	; (8007520 <__sfp+0x88>)
 80074c8:	60e3      	str	r3, [r4, #12]
 80074ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074ce:	6665      	str	r5, [r4, #100]	; 0x64
 80074d0:	f000 f847 	bl	8007562 <__retarget_lock_init_recursive>
 80074d4:	f7ff ff96 	bl	8007404 <__sfp_lock_release>
 80074d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074e0:	6025      	str	r5, [r4, #0]
 80074e2:	61a5      	str	r5, [r4, #24]
 80074e4:	2208      	movs	r2, #8
 80074e6:	4629      	mov	r1, r5
 80074e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074ec:	f7fe ff94 	bl	8006418 <memset>
 80074f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074f8:	4620      	mov	r0, r4
 80074fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074fc:	3468      	adds	r4, #104	; 0x68
 80074fe:	e7d9      	b.n	80074b4 <__sfp+0x1c>
 8007500:	2104      	movs	r1, #4
 8007502:	4638      	mov	r0, r7
 8007504:	f7ff ff62 	bl	80073cc <__sfmoreglue>
 8007508:	4604      	mov	r4, r0
 800750a:	6030      	str	r0, [r6, #0]
 800750c:	2800      	cmp	r0, #0
 800750e:	d1d5      	bne.n	80074bc <__sfp+0x24>
 8007510:	f7ff ff78 	bl	8007404 <__sfp_lock_release>
 8007514:	230c      	movs	r3, #12
 8007516:	603b      	str	r3, [r7, #0]
 8007518:	e7ee      	b.n	80074f8 <__sfp+0x60>
 800751a:	bf00      	nop
 800751c:	080079c0 	.word	0x080079c0
 8007520:	ffff0001 	.word	0xffff0001

08007524 <_fwalk_reent>:
 8007524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007528:	4606      	mov	r6, r0
 800752a:	4688      	mov	r8, r1
 800752c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007530:	2700      	movs	r7, #0
 8007532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007536:	f1b9 0901 	subs.w	r9, r9, #1
 800753a:	d505      	bpl.n	8007548 <_fwalk_reent+0x24>
 800753c:	6824      	ldr	r4, [r4, #0]
 800753e:	2c00      	cmp	r4, #0
 8007540:	d1f7      	bne.n	8007532 <_fwalk_reent+0xe>
 8007542:	4638      	mov	r0, r7
 8007544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007548:	89ab      	ldrh	r3, [r5, #12]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d907      	bls.n	800755e <_fwalk_reent+0x3a>
 800754e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007552:	3301      	adds	r3, #1
 8007554:	d003      	beq.n	800755e <_fwalk_reent+0x3a>
 8007556:	4629      	mov	r1, r5
 8007558:	4630      	mov	r0, r6
 800755a:	47c0      	blx	r8
 800755c:	4307      	orrs	r7, r0
 800755e:	3568      	adds	r5, #104	; 0x68
 8007560:	e7e9      	b.n	8007536 <_fwalk_reent+0x12>

08007562 <__retarget_lock_init_recursive>:
 8007562:	4770      	bx	lr

08007564 <__retarget_lock_acquire_recursive>:
 8007564:	4770      	bx	lr

08007566 <__retarget_lock_release_recursive>:
 8007566:	4770      	bx	lr

08007568 <__swhatbuf_r>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	460e      	mov	r6, r1
 800756c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007570:	2900      	cmp	r1, #0
 8007572:	b096      	sub	sp, #88	; 0x58
 8007574:	4614      	mov	r4, r2
 8007576:	461d      	mov	r5, r3
 8007578:	da08      	bge.n	800758c <__swhatbuf_r+0x24>
 800757a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	602a      	str	r2, [r5, #0]
 8007582:	061a      	lsls	r2, r3, #24
 8007584:	d410      	bmi.n	80075a8 <__swhatbuf_r+0x40>
 8007586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800758a:	e00e      	b.n	80075aa <__swhatbuf_r+0x42>
 800758c:	466a      	mov	r2, sp
 800758e:	f000 f951 	bl	8007834 <_fstat_r>
 8007592:	2800      	cmp	r0, #0
 8007594:	dbf1      	blt.n	800757a <__swhatbuf_r+0x12>
 8007596:	9a01      	ldr	r2, [sp, #4]
 8007598:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800759c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075a0:	425a      	negs	r2, r3
 80075a2:	415a      	adcs	r2, r3
 80075a4:	602a      	str	r2, [r5, #0]
 80075a6:	e7ee      	b.n	8007586 <__swhatbuf_r+0x1e>
 80075a8:	2340      	movs	r3, #64	; 0x40
 80075aa:	2000      	movs	r0, #0
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	b016      	add	sp, #88	; 0x58
 80075b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080075b4 <__smakebuf_r>:
 80075b4:	898b      	ldrh	r3, [r1, #12]
 80075b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075b8:	079d      	lsls	r5, r3, #30
 80075ba:	4606      	mov	r6, r0
 80075bc:	460c      	mov	r4, r1
 80075be:	d507      	bpl.n	80075d0 <__smakebuf_r+0x1c>
 80075c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	6123      	str	r3, [r4, #16]
 80075c8:	2301      	movs	r3, #1
 80075ca:	6163      	str	r3, [r4, #20]
 80075cc:	b002      	add	sp, #8
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	ab01      	add	r3, sp, #4
 80075d2:	466a      	mov	r2, sp
 80075d4:	f7ff ffc8 	bl	8007568 <__swhatbuf_r>
 80075d8:	9900      	ldr	r1, [sp, #0]
 80075da:	4605      	mov	r5, r0
 80075dc:	4630      	mov	r0, r6
 80075de:	f7ff f873 	bl	80066c8 <_malloc_r>
 80075e2:	b948      	cbnz	r0, 80075f8 <__smakebuf_r+0x44>
 80075e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e8:	059a      	lsls	r2, r3, #22
 80075ea:	d4ef      	bmi.n	80075cc <__smakebuf_r+0x18>
 80075ec:	f023 0303 	bic.w	r3, r3, #3
 80075f0:	f043 0302 	orr.w	r3, r3, #2
 80075f4:	81a3      	strh	r3, [r4, #12]
 80075f6:	e7e3      	b.n	80075c0 <__smakebuf_r+0xc>
 80075f8:	4b0d      	ldr	r3, [pc, #52]	; (8007630 <__smakebuf_r+0x7c>)
 80075fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	6020      	str	r0, [r4, #0]
 8007600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007604:	81a3      	strh	r3, [r4, #12]
 8007606:	9b00      	ldr	r3, [sp, #0]
 8007608:	6163      	str	r3, [r4, #20]
 800760a:	9b01      	ldr	r3, [sp, #4]
 800760c:	6120      	str	r0, [r4, #16]
 800760e:	b15b      	cbz	r3, 8007628 <__smakebuf_r+0x74>
 8007610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007614:	4630      	mov	r0, r6
 8007616:	f000 f91f 	bl	8007858 <_isatty_r>
 800761a:	b128      	cbz	r0, 8007628 <__smakebuf_r+0x74>
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	f023 0303 	bic.w	r3, r3, #3
 8007622:	f043 0301 	orr.w	r3, r3, #1
 8007626:	81a3      	strh	r3, [r4, #12]
 8007628:	89a0      	ldrh	r0, [r4, #12]
 800762a:	4305      	orrs	r5, r0
 800762c:	81a5      	strh	r5, [r4, #12]
 800762e:	e7cd      	b.n	80075cc <__smakebuf_r+0x18>
 8007630:	080073c1 	.word	0x080073c1

08007634 <memmove>:
 8007634:	4288      	cmp	r0, r1
 8007636:	b510      	push	{r4, lr}
 8007638:	eb01 0402 	add.w	r4, r1, r2
 800763c:	d902      	bls.n	8007644 <memmove+0x10>
 800763e:	4284      	cmp	r4, r0
 8007640:	4623      	mov	r3, r4
 8007642:	d807      	bhi.n	8007654 <memmove+0x20>
 8007644:	1e43      	subs	r3, r0, #1
 8007646:	42a1      	cmp	r1, r4
 8007648:	d008      	beq.n	800765c <memmove+0x28>
 800764a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800764e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007652:	e7f8      	b.n	8007646 <memmove+0x12>
 8007654:	4402      	add	r2, r0
 8007656:	4601      	mov	r1, r0
 8007658:	428a      	cmp	r2, r1
 800765a:	d100      	bne.n	800765e <memmove+0x2a>
 800765c:	bd10      	pop	{r4, pc}
 800765e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007666:	e7f7      	b.n	8007658 <memmove+0x24>

08007668 <__malloc_lock>:
 8007668:	4801      	ldr	r0, [pc, #4]	; (8007670 <__malloc_lock+0x8>)
 800766a:	f7ff bf7b 	b.w	8007564 <__retarget_lock_acquire_recursive>
 800766e:	bf00      	nop
 8007670:	20019424 	.word	0x20019424

08007674 <__malloc_unlock>:
 8007674:	4801      	ldr	r0, [pc, #4]	; (800767c <__malloc_unlock+0x8>)
 8007676:	f7ff bf76 	b.w	8007566 <__retarget_lock_release_recursive>
 800767a:	bf00      	nop
 800767c:	20019424 	.word	0x20019424

08007680 <_realloc_r>:
 8007680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007684:	4680      	mov	r8, r0
 8007686:	4614      	mov	r4, r2
 8007688:	460e      	mov	r6, r1
 800768a:	b921      	cbnz	r1, 8007696 <_realloc_r+0x16>
 800768c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007690:	4611      	mov	r1, r2
 8007692:	f7ff b819 	b.w	80066c8 <_malloc_r>
 8007696:	b92a      	cbnz	r2, 80076a4 <_realloc_r+0x24>
 8007698:	f7fe ffaa 	bl	80065f0 <_free_r>
 800769c:	4625      	mov	r5, r4
 800769e:	4628      	mov	r0, r5
 80076a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a4:	f000 f8fa 	bl	800789c <_malloc_usable_size_r>
 80076a8:	4284      	cmp	r4, r0
 80076aa:	4607      	mov	r7, r0
 80076ac:	d802      	bhi.n	80076b4 <_realloc_r+0x34>
 80076ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076b2:	d812      	bhi.n	80076da <_realloc_r+0x5a>
 80076b4:	4621      	mov	r1, r4
 80076b6:	4640      	mov	r0, r8
 80076b8:	f7ff f806 	bl	80066c8 <_malloc_r>
 80076bc:	4605      	mov	r5, r0
 80076be:	2800      	cmp	r0, #0
 80076c0:	d0ed      	beq.n	800769e <_realloc_r+0x1e>
 80076c2:	42bc      	cmp	r4, r7
 80076c4:	4622      	mov	r2, r4
 80076c6:	4631      	mov	r1, r6
 80076c8:	bf28      	it	cs
 80076ca:	463a      	movcs	r2, r7
 80076cc:	f7fe fe96 	bl	80063fc <memcpy>
 80076d0:	4631      	mov	r1, r6
 80076d2:	4640      	mov	r0, r8
 80076d4:	f7fe ff8c 	bl	80065f0 <_free_r>
 80076d8:	e7e1      	b.n	800769e <_realloc_r+0x1e>
 80076da:	4635      	mov	r5, r6
 80076dc:	e7df      	b.n	800769e <_realloc_r+0x1e>

080076de <_raise_r>:
 80076de:	291f      	cmp	r1, #31
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	4604      	mov	r4, r0
 80076e4:	460d      	mov	r5, r1
 80076e6:	d904      	bls.n	80076f2 <_raise_r+0x14>
 80076e8:	2316      	movs	r3, #22
 80076ea:	6003      	str	r3, [r0, #0]
 80076ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076f0:	bd38      	pop	{r3, r4, r5, pc}
 80076f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80076f4:	b112      	cbz	r2, 80076fc <_raise_r+0x1e>
 80076f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076fa:	b94b      	cbnz	r3, 8007710 <_raise_r+0x32>
 80076fc:	4620      	mov	r0, r4
 80076fe:	f000 f831 	bl	8007764 <_getpid_r>
 8007702:	462a      	mov	r2, r5
 8007704:	4601      	mov	r1, r0
 8007706:	4620      	mov	r0, r4
 8007708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800770c:	f000 b818 	b.w	8007740 <_kill_r>
 8007710:	2b01      	cmp	r3, #1
 8007712:	d00a      	beq.n	800772a <_raise_r+0x4c>
 8007714:	1c59      	adds	r1, r3, #1
 8007716:	d103      	bne.n	8007720 <_raise_r+0x42>
 8007718:	2316      	movs	r3, #22
 800771a:	6003      	str	r3, [r0, #0]
 800771c:	2001      	movs	r0, #1
 800771e:	e7e7      	b.n	80076f0 <_raise_r+0x12>
 8007720:	2400      	movs	r4, #0
 8007722:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007726:	4628      	mov	r0, r5
 8007728:	4798      	blx	r3
 800772a:	2000      	movs	r0, #0
 800772c:	e7e0      	b.n	80076f0 <_raise_r+0x12>
	...

08007730 <raise>:
 8007730:	4b02      	ldr	r3, [pc, #8]	; (800773c <raise+0xc>)
 8007732:	4601      	mov	r1, r0
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	f7ff bfd2 	b.w	80076de <_raise_r>
 800773a:	bf00      	nop
 800773c:	20000010 	.word	0x20000010

08007740 <_kill_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	4d07      	ldr	r5, [pc, #28]	; (8007760 <_kill_r+0x20>)
 8007744:	2300      	movs	r3, #0
 8007746:	4604      	mov	r4, r0
 8007748:	4608      	mov	r0, r1
 800774a:	4611      	mov	r1, r2
 800774c:	602b      	str	r3, [r5, #0]
 800774e:	f7f9 fa47 	bl	8000be0 <_kill>
 8007752:	1c43      	adds	r3, r0, #1
 8007754:	d102      	bne.n	800775c <_kill_r+0x1c>
 8007756:	682b      	ldr	r3, [r5, #0]
 8007758:	b103      	cbz	r3, 800775c <_kill_r+0x1c>
 800775a:	6023      	str	r3, [r4, #0]
 800775c:	bd38      	pop	{r3, r4, r5, pc}
 800775e:	bf00      	nop
 8007760:	20019428 	.word	0x20019428

08007764 <_getpid_r>:
 8007764:	f7f9 ba34 	b.w	8000bd0 <_getpid>

08007768 <__sread>:
 8007768:	b510      	push	{r4, lr}
 800776a:	460c      	mov	r4, r1
 800776c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007770:	f000 f89c 	bl	80078ac <_read_r>
 8007774:	2800      	cmp	r0, #0
 8007776:	bfab      	itete	ge
 8007778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800777a:	89a3      	ldrhlt	r3, [r4, #12]
 800777c:	181b      	addge	r3, r3, r0
 800777e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007782:	bfac      	ite	ge
 8007784:	6563      	strge	r3, [r4, #84]	; 0x54
 8007786:	81a3      	strhlt	r3, [r4, #12]
 8007788:	bd10      	pop	{r4, pc}

0800778a <__swrite>:
 800778a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800778e:	461f      	mov	r7, r3
 8007790:	898b      	ldrh	r3, [r1, #12]
 8007792:	05db      	lsls	r3, r3, #23
 8007794:	4605      	mov	r5, r0
 8007796:	460c      	mov	r4, r1
 8007798:	4616      	mov	r6, r2
 800779a:	d505      	bpl.n	80077a8 <__swrite+0x1e>
 800779c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a0:	2302      	movs	r3, #2
 80077a2:	2200      	movs	r2, #0
 80077a4:	f000 f868 	bl	8007878 <_lseek_r>
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077b2:	81a3      	strh	r3, [r4, #12]
 80077b4:	4632      	mov	r2, r6
 80077b6:	463b      	mov	r3, r7
 80077b8:	4628      	mov	r0, r5
 80077ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077be:	f000 b817 	b.w	80077f0 <_write_r>

080077c2 <__sseek>:
 80077c2:	b510      	push	{r4, lr}
 80077c4:	460c      	mov	r4, r1
 80077c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ca:	f000 f855 	bl	8007878 <_lseek_r>
 80077ce:	1c43      	adds	r3, r0, #1
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	bf15      	itete	ne
 80077d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80077d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077de:	81a3      	strheq	r3, [r4, #12]
 80077e0:	bf18      	it	ne
 80077e2:	81a3      	strhne	r3, [r4, #12]
 80077e4:	bd10      	pop	{r4, pc}

080077e6 <__sclose>:
 80077e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ea:	f000 b813 	b.w	8007814 <_close_r>
	...

080077f0 <_write_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	4d07      	ldr	r5, [pc, #28]	; (8007810 <_write_r+0x20>)
 80077f4:	4604      	mov	r4, r0
 80077f6:	4608      	mov	r0, r1
 80077f8:	4611      	mov	r1, r2
 80077fa:	2200      	movs	r2, #0
 80077fc:	602a      	str	r2, [r5, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	f7f9 fa25 	bl	8000c4e <_write>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d102      	bne.n	800780e <_write_r+0x1e>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	b103      	cbz	r3, 800780e <_write_r+0x1e>
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	bd38      	pop	{r3, r4, r5, pc}
 8007810:	20019428 	.word	0x20019428

08007814 <_close_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	4d06      	ldr	r5, [pc, #24]	; (8007830 <_close_r+0x1c>)
 8007818:	2300      	movs	r3, #0
 800781a:	4604      	mov	r4, r0
 800781c:	4608      	mov	r0, r1
 800781e:	602b      	str	r3, [r5, #0]
 8007820:	f7f9 fa31 	bl	8000c86 <_close>
 8007824:	1c43      	adds	r3, r0, #1
 8007826:	d102      	bne.n	800782e <_close_r+0x1a>
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	b103      	cbz	r3, 800782e <_close_r+0x1a>
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	bd38      	pop	{r3, r4, r5, pc}
 8007830:	20019428 	.word	0x20019428

08007834 <_fstat_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4d07      	ldr	r5, [pc, #28]	; (8007854 <_fstat_r+0x20>)
 8007838:	2300      	movs	r3, #0
 800783a:	4604      	mov	r4, r0
 800783c:	4608      	mov	r0, r1
 800783e:	4611      	mov	r1, r2
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	f7f9 fa2c 	bl	8000c9e <_fstat>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	d102      	bne.n	8007850 <_fstat_r+0x1c>
 800784a:	682b      	ldr	r3, [r5, #0]
 800784c:	b103      	cbz	r3, 8007850 <_fstat_r+0x1c>
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	bd38      	pop	{r3, r4, r5, pc}
 8007852:	bf00      	nop
 8007854:	20019428 	.word	0x20019428

08007858 <_isatty_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d06      	ldr	r5, [pc, #24]	; (8007874 <_isatty_r+0x1c>)
 800785c:	2300      	movs	r3, #0
 800785e:	4604      	mov	r4, r0
 8007860:	4608      	mov	r0, r1
 8007862:	602b      	str	r3, [r5, #0]
 8007864:	f7f9 fa2b 	bl	8000cbe <_isatty>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_isatty_r+0x1a>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b103      	cbz	r3, 8007872 <_isatty_r+0x1a>
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	20019428 	.word	0x20019428

08007878 <_lseek_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4d07      	ldr	r5, [pc, #28]	; (8007898 <_lseek_r+0x20>)
 800787c:	4604      	mov	r4, r0
 800787e:	4608      	mov	r0, r1
 8007880:	4611      	mov	r1, r2
 8007882:	2200      	movs	r2, #0
 8007884:	602a      	str	r2, [r5, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	f7f9 fa24 	bl	8000cd4 <_lseek>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d102      	bne.n	8007896 <_lseek_r+0x1e>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	b103      	cbz	r3, 8007896 <_lseek_r+0x1e>
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	20019428 	.word	0x20019428

0800789c <_malloc_usable_size_r>:
 800789c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078a0:	1f18      	subs	r0, r3, #4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	bfbc      	itt	lt
 80078a6:	580b      	ldrlt	r3, [r1, r0]
 80078a8:	18c0      	addlt	r0, r0, r3
 80078aa:	4770      	bx	lr

080078ac <_read_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d07      	ldr	r5, [pc, #28]	; (80078cc <_read_r+0x20>)
 80078b0:	4604      	mov	r4, r0
 80078b2:	4608      	mov	r0, r1
 80078b4:	4611      	mov	r1, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	602a      	str	r2, [r5, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f7f9 f9aa 	bl	8000c14 <_read>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d102      	bne.n	80078ca <_read_r+0x1e>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	b103      	cbz	r3, 80078ca <_read_r+0x1e>
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	20019428 	.word	0x20019428

080078d0 <_init>:
 80078d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d2:	bf00      	nop
 80078d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d6:	bc08      	pop	{r3}
 80078d8:	469e      	mov	lr, r3
 80078da:	4770      	bx	lr

080078dc <_fini>:
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	bf00      	nop
 80078e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e2:	bc08      	pop	{r3}
 80078e4:	469e      	mov	lr, r3
 80078e6:	4770      	bx	lr
