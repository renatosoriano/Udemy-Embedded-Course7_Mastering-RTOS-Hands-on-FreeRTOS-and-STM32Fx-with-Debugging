
009Bin_Semaphore_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000773c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b6c  08007b6c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007b6c  08007b6c  00017b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b74  08007b74  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b74  08007b74  00017b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b78  08007b78  00017b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001936c  20000074  08007bf0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200193e0  08007bf0  000293e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015692  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003231  00000000  00000000  00035736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00038968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00039c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025592  00000000  00000000  0003ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178bc  00000000  00000000  000603d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e14d4  00000000  00000000  00077c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00159162  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ac4  00000000  00000000  001591b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080078f4 	.word	0x080078f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080078f4 	.word	0x080078f4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <printmsg>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void printmsg(char *format,...)
{
 80005c4:	b40f      	push	{r0, r1, r2, r3}
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b096      	sub	sp, #88	; 0x58
 80005ca:	af00      	add	r7, sp, #0

	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80005cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005d0:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 ffd8 	bl	8006590 <vsiprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe13 	bl	8000210 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f107 0108 	add.w	r1, r7, #8
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <printmsg+0x48>)
 80005f8:	f002 f91b 	bl	8002832 <HAL_UART_Transmit>
	va_end(args);

}
 80005fc:	bf00      	nop
 80005fe:	3758      	adds	r7, #88	; 0x58
 8000600:	46bd      	mov	sp, r7
 8000602:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000606:	b004      	add	sp, #16
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000090 	.word	0x20000090

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fc4d 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f869 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f907 	bl	8000830 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000622:	f000 f8db 	bl	80007dc <MX_USART2_UART_Init>

  //SEGGER_UART_init(500000);

  //this is here to collect segger event time stamp
  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000626:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <main+0xb8>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <main+0xb8>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

  //SEGGER_SYSVIEW_Conf();

  //SEGGER_SYSVIEW_Start();

  sprintf(usr_msg,"Demo of Binary semaphore usage between 2 Tasks \r\n");
 8000632:	4926      	ldr	r1, [pc, #152]	; (80006cc <main+0xbc>)
 8000634:	4826      	ldr	r0, [pc, #152]	; (80006d0 <main+0xc0>)
 8000636:	f005 ff75 	bl	8006524 <siprintf>
  printmsg(usr_msg);
 800063a:	4825      	ldr	r0, [pc, #148]	; (80006d0 <main+0xc0>)
 800063c:	f7ff ffc2 	bl	80005c4 <printmsg>

  /* Before a semaphore is used it must be explicitly created.
   * In this example a binary semaphore is created . */
  vSemaphoreCreateBinary( xWork );
 8000640:	2203      	movs	r2, #3
 8000642:	2100      	movs	r1, #0
 8000644:	2001      	movs	r0, #1
 8000646:	f003 f9d7 	bl	80039f8 <xQueueGenericCreate>
 800064a:	4603      	mov	r3, r0
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <main+0xc4>)
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <main+0xc4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d006      	beq.n	8000666 <main+0x56>
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <main+0xc4>)
 800065a:	6818      	ldr	r0, [r3, #0]
 800065c:	2300      	movs	r3, #0
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	f003 fa4b 	bl	8003afc <xQueueGenericSend>

  /* The queue is created to hold a maximum of 1 Element. */
  xWorkQueue = xQueueCreate( 1, sizeof( unsigned int ) );
 8000666:	2200      	movs	r2, #0
 8000668:	2104      	movs	r1, #4
 800066a:	2001      	movs	r0, #1
 800066c:	f003 f9c4 	bl	80039f8 <xQueueGenericCreate>
 8000670:	4603      	mov	r3, r0
 8000672:	4a19      	ldr	r2, [pc, #100]	; (80006d8 <main+0xc8>)
 8000674:	6013      	str	r3, [r2, #0]

  /* Check the semaphore and queue was created successfully. */
  if( (xWork != NULL) && (xWorkQueue != NULL) )
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <main+0xc4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d01b      	beq.n	80006b6 <main+0xa6>
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <main+0xc8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d017      	beq.n	80006b6 <main+0xa6>
  {
	  /* Create the 'Manager' task.  This is the task that will be synchronized with the Employee task.  The Manager task is created with a high priority  */
      xTaskCreate( vManagerTask, "Manager", 500, NULL, 3, NULL );
 8000686:	2300      	movs	r3, #0
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2303      	movs	r3, #3
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2300      	movs	r3, #0
 8000690:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000694:	4911      	ldr	r1, [pc, #68]	; (80006dc <main+0xcc>)
 8000696:	4812      	ldr	r0, [pc, #72]	; (80006e0 <main+0xd0>)
 8000698:	f003 ff4a 	bl	8004530 <xTaskCreate>

      /* Create a employee task with less priority than manager */
      xTaskCreate( vEmployeeTask, "Employee", 500, NULL, 1, NULL );
 800069c:	2300      	movs	r3, #0
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	2301      	movs	r3, #1
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2300      	movs	r3, #0
 80006a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006aa:	490e      	ldr	r1, [pc, #56]	; (80006e4 <main+0xd4>)
 80006ac:	480e      	ldr	r0, [pc, #56]	; (80006e8 <main+0xd8>)
 80006ae:	f003 ff3f 	bl	8004530 <xTaskCreate>

      /* Start the scheduler so the created tasks start executing. */
      vTaskStartScheduler();
 80006b2:	f004 f8b7 	bl	8004824 <vTaskStartScheduler>
  }

  sprintf(usr_msg,"Queue/Sema create failed.. \r\n");
 80006b6:	490d      	ldr	r1, [pc, #52]	; (80006ec <main+0xdc>)
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <main+0xc0>)
 80006ba:	f005 ff33 	bl	8006524 <siprintf>
  printmsg(usr_msg);
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <main+0xc0>)
 80006c0:	f7ff ff80 	bl	80005c4 <printmsg>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0xb4>
 80006c6:	bf00      	nop
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	0800790c 	.word	0x0800790c
 80006d0:	200000d4 	.word	0x200000d4
 80006d4:	200001d0 	.word	0x200001d0
 80006d8:	200001d4 	.word	0x200001d4
 80006dc:	08007940 	.word	0x08007940
 80006e0:	0800090d 	.word	0x0800090d
 80006e4:	08007948 	.word	0x08007948
 80006e8:	080009c1 	.word	0x080009c1
 80006ec:	08007954 	.word	0x08007954

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	; 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2234      	movs	r2, #52	; 0x34
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f005 feca 	bl	8006498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <SystemClock_Config+0xe4>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a2d      	ldr	r2, [pc, #180]	; (80007d4 <SystemClock_Config+0xe4>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <SystemClock_Config+0xe4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <SystemClock_Config+0xe8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a27      	ldr	r2, [pc, #156]	; (80007d8 <SystemClock_Config+0xe8>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <SystemClock_Config+0xe8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800074c:	230a      	movs	r3, #10
 800074e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000750:	2300      	movs	r3, #0
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000764:	2300      	movs	r3, #0
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000768:	2308      	movs	r3, #8
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800076c:	23b4      	movs	r3, #180	; 0xb4
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fab3 	bl	8001cec <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800078c:	f000 f944 	bl	8000a18 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000790:	f000 fee0 	bl	8001554 <HAL_PWREx_EnableOverDrive>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800079a:	f000 f93d 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2105      	movs	r1, #5
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 ff19 	bl	80015f4 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80007c8:	f000 f926 	bl	8000a18 <Error_Handler>
  }}
 80007cc:	bf00      	nop
 80007ce:	3750      	adds	r7, #80	; 0x50
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_USART2_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000814:	f001 ffc0 	bl	8002798 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 f8fb 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000090 	.word	0x20000090
 800082c:	40004400 	.word	0x40004400

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a2c      	ldr	r2, [pc, #176]	; (8000900 <MX_GPIO_Init+0xd0>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a25      	ldr	r2, [pc, #148]	; (8000900 <MX_GPIO_Init+0xd0>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b23      	ldr	r3, [pc, #140]	; (8000900 <MX_GPIO_Init+0xd0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_GPIO_Init+0xd0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <MX_GPIO_Init+0xd0>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_GPIO_Init+0xd0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_GPIO_Init+0xd0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <MX_GPIO_Init+0xd0>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_GPIO_Init+0xd0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	4812      	ldr	r0, [pc, #72]	; (8000904 <MX_GPIO_Init+0xd4>)
 80008bc:	f000 fe30 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_GPIO_Init+0xd8>)
 80008d8:	f000 fc8e 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008dc:	2320      	movs	r3, #32
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_GPIO_Init+0xd4>)
 80008f4:	f000 fc80 	bl	80011f8 <HAL_GPIO_Init>

}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000
 8000908:	40020800 	.word	0x40020800

0800090c <vManagerTask>:

/* USER CODE BEGIN 4 */

void vManagerTask( void *pvParameters )
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xStatus;

   /* The semaphore is created in the 'empty' state, meaning the semaphore must
	first be given using the xSemaphoreGive() API function before it
	can subsequently be taken (obtained) */
   xSemaphoreGive( xWork);
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <vManagerTask+0x6c>)
 8000916:	6818      	ldr	r0, [r3, #0]
 8000918:	2300      	movs	r3, #0
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	f003 f8ed 	bl	8003afc <xQueueGenericSend>

   for( ;; )
   {
	   /* get a work ticket id(some random number) */
       xWorkTicketId = ( rand() & 0x1FF );
 8000922:	f005 fdc1 	bl	80064a8 <rand>
 8000926:	4603      	mov	r3, r0
 8000928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800092c:	60bb      	str	r3, [r7, #8]

       /* Sends work ticket id to the work queue */
       xStatus = xQueueSend( xWorkQueue, &xWorkTicketId , portMAX_DELAY ); //Post an item on back of the queue
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <vManagerTask+0x70>)
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	f107 0108 	add.w	r1, r7, #8
 8000936:	2300      	movs	r3, #0
 8000938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800093c:	f003 f8de 	bl	8003afc <xQueueGenericSend>
 8000940:	60f8      	str	r0, [r7, #12]

       if( xStatus != pdPASS )
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d007      	beq.n	8000958 <vManagerTask+0x4c>
       {
    	   sprintf(usr_msg,"Could not send to the queue.\r\n");
 8000948:	490d      	ldr	r1, [pc, #52]	; (8000980 <vManagerTask+0x74>)
 800094a:	480e      	ldr	r0, [pc, #56]	; (8000984 <vManagerTask+0x78>)
 800094c:	f005 fdea 	bl	8006524 <siprintf>
		   printmsg(usr_msg);
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <vManagerTask+0x78>)
 8000952:	f7ff fe37 	bl	80005c4 <printmsg>
 8000956:	e7e4      	b.n	8000922 <vManagerTask+0x16>

       }else
       {
    	   /* Manager notifying the employee by "Giving" semaphore */
    	   xSemaphoreGive( xWork);
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <vManagerTask+0x6c>)
 800095a:	6818      	ldr	r0, [r3, #0]
 800095c:	2300      	movs	r3, #0
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	f003 f8cb 	bl	8003afc <xQueueGenericSend>
    	   /* after assigning the work , just yield the processor because nothing to do */
    	   taskYIELD();
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <vManagerTask+0x7c>)
 8000968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	f3bf 8f4f 	dsb	sy
 8000972:	f3bf 8f6f 	isb	sy
       xWorkTicketId = ( rand() & 0x1FF );
 8000976:	e7d4      	b.n	8000922 <vManagerTask+0x16>
 8000978:	200001d0 	.word	0x200001d0
 800097c:	200001d4 	.word	0x200001d4
 8000980:	08007974 	.word	0x08007974
 8000984:	200000d4 	.word	0x200000d4
 8000988:	e000ed04 	.word	0xe000ed04

0800098c <EmployeeDoWork>:
		}
   }
}

void EmployeeDoWork(unsigned char TicketId)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	/* implement the work according to TickedID */
	sprintf(usr_msg,"Employee task : Working on Ticked id : %d\r\n",TicketId);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	461a      	mov	r2, r3
 800099a:	4907      	ldr	r1, [pc, #28]	; (80009b8 <EmployeeDoWork+0x2c>)
 800099c:	4807      	ldr	r0, [pc, #28]	; (80009bc <EmployeeDoWork+0x30>)
 800099e:	f005 fdc1 	bl	8006524 <siprintf>
	printmsg(usr_msg);
 80009a2:	4806      	ldr	r0, [pc, #24]	; (80009bc <EmployeeDoWork+0x30>)
 80009a4:	f7ff fe0e 	bl	80005c4 <printmsg>
	vTaskDelay(TicketId);
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 ff06 	bl	80047bc <vTaskDelay>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	08007994 	.word	0x08007994
 80009bc:	200000d4 	.word	0x200000d4

080009c0 <vEmployeeTask>:

static void vEmployeeTask( void *pvParameters )
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xStatus;
    /* As per most tasks, this task is implemented within an infinite loop. */
    for( ;; )
    {
		/* First Employee tries to take the semaphore, if it is available that means there is a task assigned by manager, otherwise employee task will be blocked */
		xSemaphoreTake( xWork, 0 );
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <vEmployeeTask+0x48>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 fb1c 	bl	800400c <xQueueSemaphoreTake>

		/* get the ticket id from the work queue */
		xStatus = xQueueReceive( xWorkQueue, &xWorkTicketId, 0 );
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <vEmployeeTask+0x4c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f107 010b 	add.w	r1, r7, #11
 80009dc:	2200      	movs	r2, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 fa34 	bl	8003e4c <xQueueReceive>
 80009e4:	60f8      	str	r0, [r7, #12]

		if( xStatus == pdPASS )
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d104      	bne.n	80009f6 <vEmployeeTask+0x36>
		{
		  /* employee may decode the xWorkTicketId in this function to do the work*/
			EmployeeDoWork(xWorkTicketId);
 80009ec:	7afb      	ldrb	r3, [r7, #11]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ffcc 	bl	800098c <EmployeeDoWork>
 80009f4:	e7e8      	b.n	80009c8 <vEmployeeTask+0x8>
		}
		else
		{
			/* We did not receive anything from the queue.  This must be an error as this task should only run when the manager assigns at least one work. */
			sprintf(usr_msg,"Employee task : Queue is empty , nothing to do.\r\n");
 80009f6:	4906      	ldr	r1, [pc, #24]	; (8000a10 <vEmployeeTask+0x50>)
 80009f8:	4806      	ldr	r0, [pc, #24]	; (8000a14 <vEmployeeTask+0x54>)
 80009fa:	f005 fd93 	bl	8006524 <siprintf>
		    printmsg(usr_msg);
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <vEmployeeTask+0x54>)
 8000a00:	f7ff fde0 	bl	80005c4 <printmsg>
		xSemaphoreTake( xWork, 0 );
 8000a04:	e7e0      	b.n	80009c8 <vEmployeeTask+0x8>
 8000a06:	bf00      	nop
 8000a08:	200001d0 	.word	0x200001d0
 8000a0c:	200001d4 	.word	0x200001d4
 8000a10:	080079c0 	.word	0x080079c0
 8000a14:	200000d4 	.word	0x200000d4

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000a62:	f005 f941 	bl	8005ce8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <HAL_UART_MspInit+0x94>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d133      	bne.n	8000afe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <HAL_UART_MspInit+0x9c>)
 8000aea:	f000 fb85 	bl	80011f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2106      	movs	r1, #6
 8000af2:	2026      	movs	r0, #38	; 0x26
 8000af4:	f000 fac4 	bl	8001080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000af8:	2026      	movs	r0, #38	; 0x26
 8000afa:	f000 fadd 	bl	80010b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020000 	.word	0x40020000

08000b14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	; 0x38
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <HAL_InitTick+0xe4>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	4a32      	ldr	r2, [pc, #200]	; (8000bf8 <HAL_InitTick+0xe4>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	6413      	str	r3, [r2, #64]	; 0x40
 8000b34:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <HAL_InitTick+0xe4>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	f003 0310 	and.w	r3, r3, #16
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b40:	f107 0210 	add.w	r2, r7, #16
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fe6c 	bl	8001828 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b50:	6a3b      	ldr	r3, [r7, #32]
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b5a:	f000 fe3d 	bl	80017d8 <HAL_RCC_GetPCLK1Freq>
 8000b5e:	6378      	str	r0, [r7, #52]	; 0x34
 8000b60:	e004      	b.n	8000b6c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b62:	f000 fe39 	bl	80017d8 <HAL_RCC_GetPCLK1Freq>
 8000b66:	4603      	mov	r3, r0
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6e:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <HAL_InitTick+0xe8>)
 8000b70:	fba2 2303 	umull	r2, r3, r2, r3
 8000b74:	0c9b      	lsrs	r3, r3, #18
 8000b76:	3b01      	subs	r3, #1
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <HAL_InitTick+0xec>)
 8000b7c:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <HAL_InitTick+0xf0>)
 8000b7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <HAL_InitTick+0xec>)
 8000b82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b86:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b88:	4a1d      	ldr	r2, [pc, #116]	; (8000c00 <HAL_InitTick+0xec>)
 8000b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_InitTick+0xec>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <HAL_InitTick+0xec>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_InitTick+0xec>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ba0:	4817      	ldr	r0, [pc, #92]	; (8000c00 <HAL_InitTick+0xec>)
 8000ba2:	f001 fb41 	bl	8002228 <HAL_TIM_Base_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d11b      	bne.n	8000bec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bb4:	4812      	ldr	r0, [pc, #72]	; (8000c00 <HAL_InitTick+0xec>)
 8000bb6:	f001 fb91 	bl	80022dc <HAL_TIM_Base_Start_IT>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d111      	bne.n	8000bec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bc8:	2036      	movs	r0, #54	; 0x36
 8000bca:	f000 fa75 	bl	80010b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d808      	bhi.n	8000be6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	2036      	movs	r0, #54	; 0x36
 8000bda:	f000 fa51 	bl	8001080 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <HAL_InitTick+0xf4>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	e002      	b.n	8000bec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	431bde83 	.word	0x431bde83
 8000c00:	200001d8 	.word	0x200001d8
 8000c04:	40001000 	.word	0x40001000
 8000c08:	20000004 	.word	0x20000004

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <NMI_Handler+0x4>

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <MemManage_Handler+0x4>

08000c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <USART2_IRQHandler+0x10>)
 8000c3e:	f001 fe8b 	bl	8002958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000090 	.word	0x20000090

08000c4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM6_DAC_IRQHandler+0x10>)
 8000c52:	f001 fbb3 	bl	80023bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200001d8 	.word	0x200001d8

08000c60 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <ITM_SendChar+0x48>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <ITM_SendChar+0x48>)
 8000c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c74:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <ITM_SendChar+0x4c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <ITM_SendChar+0x4c>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000c82:	bf00      	nop
 8000c84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0f8      	beq.n	8000c84 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000c92:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	6013      	str	r3, [r2, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000edfc 	.word	0xe000edfc
 8000cac:	e0000e00 	.word	0xe0000e00

08000cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
	return 1;
 8000cb4:	2301      	movs	r3, #1
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_kill>:

int _kill(int pid, int sig)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cca:	f005 fbad 	bl	8006428 <__errno>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2216      	movs	r2, #22
 8000cd2:	601a      	str	r2, [r3, #0]
	return -1;
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_exit>:

void _exit (int status)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ffe7 	bl	8000cc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cf2:	e7fe      	b.n	8000cf2 <_exit+0x12>

08000cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e00a      	b.n	8000d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d06:	f3af 8000 	nop.w
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	60ba      	str	r2, [r7, #8]
 8000d12:	b2ca      	uxtb	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	dbf0      	blt.n	8000d06 <_read+0x12>
	}

return len;
 8000d24:	687b      	ldr	r3, [r7, #4]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	e009      	b.n	8000d54 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	60ba      	str	r2, [r7, #8]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff89 	bl	8000c60 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbf1      	blt.n	8000d40 <_write+0x12>
	}
	return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_close>:

int _close(int file)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d8e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <_isatty>:

int _isatty(int file)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
	return 1;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f005 fb12 	bl	8006428 <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20020000 	.word	0x20020000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	20000220 	.word	0x20000220
 8000e38:	200193e0 	.word	0x200193e0

08000e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e66:	490e      	ldr	r1, [pc, #56]	; (8000ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e7c:	4c0b      	ldr	r4, [pc, #44]	; (8000eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e8a:	f7ff ffd7 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f005 fad1 	bl	8006434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fbbd 	bl	8000610 <main>
  bx  lr    
 8000e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ea4:	08007b7c 	.word	0x08007b7c
  ldr r2, =_sbss
 8000ea8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000eac:	200193e0 	.word	0x200193e0

08000eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <HAL_Init+0x40>)
 8000ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_Init+0x40>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_Init+0x40>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f8c4 	bl	800106a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff fe16 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff fd9c 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023c00 	.word	0x40023c00

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000224 	.word	0x20000224

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4907      	ldr	r1, [pc, #28]	; (8000fac <__NVIC_EnableIRQ+0x38>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100

08000fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	db0a      	blt.n	8000fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	490c      	ldr	r1, [pc, #48]	; (8000ffc <__NVIC_SetPriority+0x4c>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd8:	e00a      	b.n	8000ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4908      	ldr	r1, [pc, #32]	; (8001000 <__NVIC_SetPriority+0x50>)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	3b04      	subs	r3, #4
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	440b      	add	r3, r1
 8000fee:	761a      	strb	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f1c3 0307 	rsb	r3, r3, #7
 800101e:	2b04      	cmp	r3, #4
 8001020:	bf28      	it	cs
 8001022:	2304      	movcs	r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3304      	adds	r3, #4
 800102a:	2b06      	cmp	r3, #6
 800102c:	d902      	bls.n	8001034 <NVIC_EncodePriority+0x30>
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3b03      	subs	r3, #3
 8001032:	e000      	b.n	8001036 <NVIC_EncodePriority+0x32>
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	43d9      	mvns	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	4313      	orrs	r3, r2
         );
}
 800105e:	4618      	mov	r0, r3
 8001060:	3724      	adds	r7, #36	; 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ff4c 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001092:	f7ff ff61 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 8001096:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	68b9      	ldr	r1, [r7, #8]
 800109c:	6978      	ldr	r0, [r7, #20]
 800109e:	f7ff ffb1 	bl	8001004 <NVIC_EncodePriority>
 80010a2:	4602      	mov	r2, r0
 80010a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff80 	bl	8000fb0 <__NVIC_SetPriority>
}
 80010b0:	bf00      	nop
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff54 	bl	8000f74 <__NVIC_EnableIRQ>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010e2:	f7ff ff09 	bl	8000ef8 <HAL_GetTick>
 80010e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d008      	beq.n	8001106 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e052      	b.n	80011ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0216 	bic.w	r2, r2, #22
 8001114:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	695a      	ldr	r2, [r3, #20]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001124:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	2b00      	cmp	r3, #0
 800112c:	d103      	bne.n	8001136 <HAL_DMA_Abort+0x62>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001132:	2b00      	cmp	r3, #0
 8001134:	d007      	beq.n	8001146 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0208 	bic.w	r2, r2, #8
 8001144:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0201 	bic.w	r2, r2, #1
 8001154:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001156:	e013      	b.n	8001180 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001158:	f7ff fece 	bl	8000ef8 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b05      	cmp	r3, #5
 8001164:	d90c      	bls.n	8001180 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2220      	movs	r2, #32
 800116a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2203      	movs	r2, #3
 8001170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e015      	b.n	80011ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1e4      	bne.n	8001158 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001192:	223f      	movs	r2, #63	; 0x3f
 8001194:	409a      	lsls	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d004      	beq.n	80011d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00c      	b.n	80011ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2205      	movs	r2, #5
 80011d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0201 	bic.w	r2, r2, #1
 80011e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e165      	b.n	80014e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8154 	bne.w	80014da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d005      	beq.n	800124a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	2b02      	cmp	r3, #2
 8001248:	d130      	bne.n	80012ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 0201 	and.w	r2, r3, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d017      	beq.n	80012e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d123      	bne.n	800133c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	69b9      	ldr	r1, [r7, #24]
 8001338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80ae 	beq.w	80014da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a5c      	ldr	r2, [pc, #368]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b5a      	ldr	r3, [pc, #360]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139a:	4a58      	ldr	r2, [pc, #352]	; (80014fc <HAL_GPIO_Init+0x304>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4f      	ldr	r2, [pc, #316]	; (8001500 <HAL_GPIO_Init+0x308>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d025      	beq.n	8001412 <HAL_GPIO_Init+0x21a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4e      	ldr	r2, [pc, #312]	; (8001504 <HAL_GPIO_Init+0x30c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d01f      	beq.n	800140e <HAL_GPIO_Init+0x216>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4d      	ldr	r2, [pc, #308]	; (8001508 <HAL_GPIO_Init+0x310>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d019      	beq.n	800140a <HAL_GPIO_Init+0x212>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4c      	ldr	r2, [pc, #304]	; (800150c <HAL_GPIO_Init+0x314>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0x20e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4b      	ldr	r2, [pc, #300]	; (8001510 <HAL_GPIO_Init+0x318>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00d      	beq.n	8001402 <HAL_GPIO_Init+0x20a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4a      	ldr	r2, [pc, #296]	; (8001514 <HAL_GPIO_Init+0x31c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d007      	beq.n	80013fe <HAL_GPIO_Init+0x206>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a49      	ldr	r2, [pc, #292]	; (8001518 <HAL_GPIO_Init+0x320>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_GPIO_Init+0x202>
 80013f6:	2306      	movs	r3, #6
 80013f8:	e00c      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 80013fa:	2307      	movs	r3, #7
 80013fc:	e00a      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 80013fe:	2305      	movs	r3, #5
 8001400:	e008      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 8001402:	2304      	movs	r3, #4
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 8001406:	2303      	movs	r3, #3
 8001408:	e004      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 800140a:	2302      	movs	r3, #2
 800140c:	e002      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 8001412:	2300      	movs	r3, #0
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	f002 0203 	and.w	r2, r2, #3
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	4093      	lsls	r3, r2
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001424:	4935      	ldr	r1, [pc, #212]	; (80014fc <HAL_GPIO_Init+0x304>)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001432:	4b3a      	ldr	r3, [pc, #232]	; (800151c <HAL_GPIO_Init+0x324>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001456:	4a31      	ldr	r2, [pc, #196]	; (800151c <HAL_GPIO_Init+0x324>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800145c:	4b2f      	ldr	r3, [pc, #188]	; (800151c <HAL_GPIO_Init+0x324>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001480:	4a26      	ldr	r2, [pc, #152]	; (800151c <HAL_GPIO_Init+0x324>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001486:	4b25      	ldr	r3, [pc, #148]	; (800151c <HAL_GPIO_Init+0x324>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014aa:	4a1c      	ldr	r2, [pc, #112]	; (800151c <HAL_GPIO_Init+0x324>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HAL_GPIO_Init+0x324>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d4:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_GPIO_Init+0x324>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	f67f ae96 	bls.w	8001214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40013800 	.word	0x40013800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020400 	.word	0x40020400
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00
 8001510:	40021000 	.word	0x40021000
 8001514:	40021400 	.word	0x40021400
 8001518:	40021800 	.word	0x40021800
 800151c:	40013c00 	.word	0x40013c00

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800153c:	e003      	b.n	8001546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	041a      	lsls	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a1f      	ldr	r2, [pc, #124]	; (80015e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001580:	f7ff fcba 	bl	8000ef8 <HAL_GetTick>
 8001584:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001586:	e009      	b.n	800159c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001588:	f7ff fcb6 	bl	8000ef8 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001596:	d901      	bls.n	800159c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e01f      	b.n	80015dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <HAL_PWREx_EnableOverDrive+0x98>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a8:	d1ee      	bne.n	8001588 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b0:	f7ff fca2 	bl	8000ef8 <HAL_GetTick>
 80015b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015b6:	e009      	b.n	80015cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015b8:	f7ff fc9e 	bl	8000ef8 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015c6:	d901      	bls.n	80015cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e007      	b.n	80015dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <HAL_PWREx_EnableOverDrive+0x98>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d8:	d1ee      	bne.n	80015b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800
 80015e8:	420e0040 	.word	0x420e0040
 80015ec:	40007000 	.word	0x40007000
 80015f0:	420e0044 	.word	0x420e0044

080015f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0cc      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001608:	4b68      	ldr	r3, [pc, #416]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d90c      	bls.n	8001630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b65      	ldr	r3, [pc, #404]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b63      	ldr	r3, [pc, #396]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0b8      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001648:	4b59      	ldr	r3, [pc, #356]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	4a58      	ldr	r2, [pc, #352]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001660:	4b53      	ldr	r3, [pc, #332]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	4a52      	ldr	r2, [pc, #328]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800166a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800166c:	4b50      	ldr	r3, [pc, #320]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	494d      	ldr	r1, [pc, #308]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d044      	beq.n	8001714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d119      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e07f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d003      	beq.n	80016b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b2:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e06f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e067      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f023 0203 	bic.w	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4934      	ldr	r1, [pc, #208]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e4:	f7ff fc08 	bl	8000ef8 <HAL_GetTick>
 80016e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ec:	f7ff fc04 	bl	8000ef8 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e04f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001702:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 020c 	and.w	r2, r3, #12
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	429a      	cmp	r2, r3
 8001712:	d1eb      	bne.n	80016ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d20c      	bcs.n	800173c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b22      	ldr	r3, [pc, #136]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e032      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4916      	ldr	r1, [pc, #88]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d009      	beq.n	800177a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	490e      	ldr	r1, [pc, #56]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800177a:	f000 f887 	bl	800188c <HAL_RCC_GetSysClockFreq>
 800177e:	4602      	mov	r2, r0
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	490a      	ldr	r1, [pc, #40]	; (80017b4 <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	5ccb      	ldrb	r3, [r1, r3]
 800178e:	fa22 f303 	lsr.w	r3, r2, r3
 8001792:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_RCC_ClockConfig+0x1c8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff f9ba 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023c00 	.word	0x40023c00
 80017b0:	40023800 	.word	0x40023800
 80017b4:	08007a0c 	.word	0x08007a0c
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000000 	.word	0x20000000

080017d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017dc:	f7ff fff0 	bl	80017c0 <HAL_RCC_GetHCLKFreq>
 80017e0:	4602      	mov	r2, r0
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	0a9b      	lsrs	r3, r3, #10
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	4903      	ldr	r1, [pc, #12]	; (80017fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ee:	5ccb      	ldrb	r3, [r1, r3]
 80017f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800
 80017fc:	08007a1c 	.word	0x08007a1c

08001800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001804:	f7ff ffdc 	bl	80017c0 <HAL_RCC_GetHCLKFreq>
 8001808:	4602      	mov	r2, r0
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	0b5b      	lsrs	r3, r3, #13
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	4903      	ldr	r1, [pc, #12]	; (8001824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001816:	5ccb      	ldrb	r3, [r1, r3]
 8001818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800181c:	4618      	mov	r0, r3
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	08007a1c 	.word	0x08007a1c

08001828 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	220f      	movs	r2, #15
 8001836:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_RCC_GetClockConfig+0x5c>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0203 	and.w	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <HAL_RCC_GetClockConfig+0x5c>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_RCC_GetClockConfig+0x5c>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_GetClockConfig+0x5c>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	08db      	lsrs	r3, r3, #3
 8001862:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <HAL_RCC_GetClockConfig+0x60>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 020f 	and.w	r2, r3, #15
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	601a      	str	r2, [r3, #0]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	40023c00 	.word	0x40023c00

0800188c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001890:	b0ae      	sub	sp, #184	; 0xb8
 8001892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b2:	4bcb      	ldr	r3, [pc, #812]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x354>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b0c      	cmp	r3, #12
 80018bc:	f200 8206 	bhi.w	8001ccc <HAL_RCC_GetSysClockFreq+0x440>
 80018c0:	a201      	add	r2, pc, #4	; (adr r2, 80018c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80018c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c6:	bf00      	nop
 80018c8:	080018fd 	.word	0x080018fd
 80018cc:	08001ccd 	.word	0x08001ccd
 80018d0:	08001ccd 	.word	0x08001ccd
 80018d4:	08001ccd 	.word	0x08001ccd
 80018d8:	08001905 	.word	0x08001905
 80018dc:	08001ccd 	.word	0x08001ccd
 80018e0:	08001ccd 	.word	0x08001ccd
 80018e4:	08001ccd 	.word	0x08001ccd
 80018e8:	0800190d 	.word	0x0800190d
 80018ec:	08001ccd 	.word	0x08001ccd
 80018f0:	08001ccd 	.word	0x08001ccd
 80018f4:	08001ccd 	.word	0x08001ccd
 80018f8:	08001afd 	.word	0x08001afd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018fc:	4bb9      	ldr	r3, [pc, #740]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x358>)
 80018fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001902:	e1e7      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001904:	4bb8      	ldr	r3, [pc, #736]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001906:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800190a:	e1e3      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800190c:	4bb4      	ldr	r3, [pc, #720]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x354>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001918:	4bb1      	ldr	r3, [pc, #708]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x354>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d071      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001924:	4bae      	ldr	r3, [pc, #696]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	099b      	lsrs	r3, r3, #6
 800192a:	2200      	movs	r2, #0
 800192c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001930:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800193c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800194a:	4622      	mov	r2, r4
 800194c:	462b      	mov	r3, r5
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	0159      	lsls	r1, r3, #5
 8001958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195c:	0150      	lsls	r0, r2, #5
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4621      	mov	r1, r4
 8001964:	1a51      	subs	r1, r2, r1
 8001966:	6439      	str	r1, [r7, #64]	; 0x40
 8001968:	4629      	mov	r1, r5
 800196a:	eb63 0301 	sbc.w	r3, r3, r1
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800197c:	4649      	mov	r1, r9
 800197e:	018b      	lsls	r3, r1, #6
 8001980:	4641      	mov	r1, r8
 8001982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001986:	4641      	mov	r1, r8
 8001988:	018a      	lsls	r2, r1, #6
 800198a:	4641      	mov	r1, r8
 800198c:	1a51      	subs	r1, r2, r1
 800198e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001990:	4649      	mov	r1, r9
 8001992:	eb63 0301 	sbc.w	r3, r3, r1
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80019a4:	4649      	mov	r1, r9
 80019a6:	00cb      	lsls	r3, r1, #3
 80019a8:	4641      	mov	r1, r8
 80019aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019ae:	4641      	mov	r1, r8
 80019b0:	00ca      	lsls	r2, r1, #3
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	4603      	mov	r3, r0
 80019b8:	4622      	mov	r2, r4
 80019ba:	189b      	adds	r3, r3, r2
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
 80019be:	462b      	mov	r3, r5
 80019c0:	460a      	mov	r2, r1
 80019c2:	eb42 0303 	adc.w	r3, r2, r3
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019d4:	4629      	mov	r1, r5
 80019d6:	024b      	lsls	r3, r1, #9
 80019d8:	4621      	mov	r1, r4
 80019da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019de:	4621      	mov	r1, r4
 80019e0:	024a      	lsls	r2, r1, #9
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019ea:	2200      	movs	r2, #0
 80019ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80019f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80019f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80019f8:	f7fe fc62 	bl	80002c0 <__aeabi_uldivmod>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4613      	mov	r3, r2
 8001a02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a06:	e067      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a08:	4b75      	ldr	r3, [pc, #468]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a14:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a22:	2300      	movs	r3, #0
 8001a24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	f04f 0000 	mov.w	r0, #0
 8001a32:	f04f 0100 	mov.w	r1, #0
 8001a36:	0159      	lsls	r1, r3, #5
 8001a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a3c:	0150      	lsls	r0, r2, #5
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4621      	mov	r1, r4
 8001a44:	1a51      	subs	r1, r2, r1
 8001a46:	62b9      	str	r1, [r7, #40]	; 0x28
 8001a48:	4629      	mov	r1, r5
 8001a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001a5c:	4649      	mov	r1, r9
 8001a5e:	018b      	lsls	r3, r1, #6
 8001a60:	4641      	mov	r1, r8
 8001a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a66:	4641      	mov	r1, r8
 8001a68:	018a      	lsls	r2, r1, #6
 8001a6a:	4641      	mov	r1, r8
 8001a6c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a70:	4649      	mov	r1, r9
 8001a72:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a8a:	4692      	mov	sl, r2
 8001a8c:	469b      	mov	fp, r3
 8001a8e:	4623      	mov	r3, r4
 8001a90:	eb1a 0303 	adds.w	r3, sl, r3
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	462b      	mov	r3, r5
 8001a98:	eb4b 0303 	adc.w	r3, fp, r3
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001aaa:	4629      	mov	r1, r5
 8001aac:	028b      	lsls	r3, r1, #10
 8001aae:	4621      	mov	r1, r4
 8001ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	028a      	lsls	r2, r1, #10
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	673b      	str	r3, [r7, #112]	; 0x70
 8001ac4:	677a      	str	r2, [r7, #116]	; 0x74
 8001ac6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001aca:	f7fe fbf9 	bl	80002c0 <__aeabi_uldivmod>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ad8:	4b41      	ldr	r3, [pc, #260]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001aee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001afa:	e0eb      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001afc:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d06b      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b14:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	099b      	lsrs	r3, r3, #6
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b26:	663b      	str	r3, [r7, #96]	; 0x60
 8001b28:	2300      	movs	r3, #0
 8001b2a:	667b      	str	r3, [r7, #100]	; 0x64
 8001b2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b30:	4622      	mov	r2, r4
 8001b32:	462b      	mov	r3, r5
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	0159      	lsls	r1, r3, #5
 8001b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b42:	0150      	lsls	r0, r2, #5
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4621      	mov	r1, r4
 8001b4a:	1a51      	subs	r1, r2, r1
 8001b4c:	61b9      	str	r1, [r7, #24]
 8001b4e:	4629      	mov	r1, r5
 8001b50:	eb63 0301 	sbc.w	r3, r3, r1
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001b62:	4659      	mov	r1, fp
 8001b64:	018b      	lsls	r3, r1, #6
 8001b66:	4651      	mov	r1, sl
 8001b68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b6c:	4651      	mov	r1, sl
 8001b6e:	018a      	lsls	r2, r1, #6
 8001b70:	4651      	mov	r1, sl
 8001b72:	ebb2 0801 	subs.w	r8, r2, r1
 8001b76:	4659      	mov	r1, fp
 8001b78:	eb63 0901 	sbc.w	r9, r3, r1
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b90:	4690      	mov	r8, r2
 8001b92:	4699      	mov	r9, r3
 8001b94:	4623      	mov	r3, r4
 8001b96:	eb18 0303 	adds.w	r3, r8, r3
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	462b      	mov	r3, r5
 8001b9e:	eb49 0303 	adc.w	r3, r9, r3
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	024b      	lsls	r3, r1, #9
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bba:	4621      	mov	r1, r4
 8001bbc:	024a      	lsls	r2, r1, #9
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001bcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001bd0:	f7fe fb76 	bl	80002c0 <__aeabi_uldivmod>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4613      	mov	r3, r2
 8001bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001bde:	e065      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x420>
 8001be0:	40023800 	.word	0x40023800
 8001be4:	00f42400 	.word	0x00f42400
 8001be8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bec:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	099b      	lsrs	r3, r3, #6
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bfc:	653b      	str	r3, [r7, #80]	; 0x50
 8001bfe:	2300      	movs	r3, #0
 8001c00:	657b      	str	r3, [r7, #84]	; 0x54
 8001c02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001c06:	4642      	mov	r2, r8
 8001c08:	464b      	mov	r3, r9
 8001c0a:	f04f 0000 	mov.w	r0, #0
 8001c0e:	f04f 0100 	mov.w	r1, #0
 8001c12:	0159      	lsls	r1, r3, #5
 8001c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c18:	0150      	lsls	r0, r2, #5
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4641      	mov	r1, r8
 8001c20:	1a51      	subs	r1, r2, r1
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	4649      	mov	r1, r9
 8001c26:	eb63 0301 	sbc.w	r3, r3, r1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c38:	4659      	mov	r1, fp
 8001c3a:	018b      	lsls	r3, r1, #6
 8001c3c:	4651      	mov	r1, sl
 8001c3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c42:	4651      	mov	r1, sl
 8001c44:	018a      	lsls	r2, r1, #6
 8001c46:	4651      	mov	r1, sl
 8001c48:	1a54      	subs	r4, r2, r1
 8001c4a:	4659      	mov	r1, fp
 8001c4c:	eb63 0501 	sbc.w	r5, r3, r1
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	00eb      	lsls	r3, r5, #3
 8001c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c5e:	00e2      	lsls	r2, r4, #3
 8001c60:	4614      	mov	r4, r2
 8001c62:	461d      	mov	r5, r3
 8001c64:	4643      	mov	r3, r8
 8001c66:	18e3      	adds	r3, r4, r3
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	eb45 0303 	adc.w	r3, r5, r3
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c7e:	4629      	mov	r1, r5
 8001c80:	028b      	lsls	r3, r1, #10
 8001c82:	4621      	mov	r1, r4
 8001c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c88:	4621      	mov	r1, r4
 8001c8a:	028a      	lsls	r2, r1, #10
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c94:	2200      	movs	r2, #0
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c98:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001c9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c9e:	f7fe fb0f 	bl	80002c0 <__aeabi_uldivmod>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001cac:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	0f1b      	lsrs	r3, r3, #28
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001cbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cca:	e003      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	37b8      	adds	r7, #184	; 0xb8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	00f42400 	.word	0x00f42400

08001cec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e28d      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 8083 	beq.w	8001e12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d0c:	4b94      	ldr	r3, [pc, #592]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d019      	beq.n	8001d4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d18:	4b91      	ldr	r3, [pc, #580]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d106      	bne.n	8001d32 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d24:	4b8e      	ldr	r3, [pc, #568]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d30:	d00c      	beq.n	8001d4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d32:	4b8b      	ldr	r3, [pc, #556]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d112      	bne.n	8001d64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3e:	4b88      	ldr	r3, [pc, #544]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d4a:	d10b      	bne.n	8001d64 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	4b84      	ldr	r3, [pc, #528]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d05b      	beq.n	8001e10 <HAL_RCC_OscConfig+0x124>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d157      	bne.n	8001e10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e25a      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6c:	d106      	bne.n	8001d7c <HAL_RCC_OscConfig+0x90>
 8001d6e:	4b7c      	ldr	r3, [pc, #496]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a7b      	ldr	r2, [pc, #492]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e01d      	b.n	8001db8 <HAL_RCC_OscConfig+0xcc>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0xb4>
 8001d86:	4b76      	ldr	r3, [pc, #472]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a75      	ldr	r2, [pc, #468]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b73      	ldr	r3, [pc, #460]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a72      	ldr	r2, [pc, #456]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0xcc>
 8001da0:	4b6f      	ldr	r3, [pc, #444]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a6e      	ldr	r2, [pc, #440]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b6c      	ldr	r3, [pc, #432]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a6b      	ldr	r2, [pc, #428]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d013      	beq.n	8001de8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f89a 	bl	8000ef8 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f896 	bl	8000ef8 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e21f      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b61      	ldr	r3, [pc, #388]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xdc>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff f886 	bl	8000ef8 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff f882 	bl	8000ef8 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e20b      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	4b57      	ldr	r3, [pc, #348]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x104>
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d06f      	beq.n	8001efe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e1e:	4b50      	ldr	r3, [pc, #320]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d017      	beq.n	8001e5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e2a:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e36:	4b4a      	ldr	r3, [pc, #296]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e42:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d11c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4e:	4b44      	ldr	r3, [pc, #272]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d116      	bne.n	8001e88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	4b41      	ldr	r3, [pc, #260]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_RCC_OscConfig+0x186>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e1d3      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e72:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4937      	ldr	r1, [pc, #220]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e86:	e03a      	b.n	8001efe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d020      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e90:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_RCC_OscConfig+0x278>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff f82f 	bl	8000ef8 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7ff f82b 	bl	8000ef8 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e1b4      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4925      	ldr	r1, [pc, #148]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
 8001ed0:	e015      	b.n	8001efe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed2:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <HAL_RCC_OscConfig+0x278>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f80e 	bl	8000ef8 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee0:	f7ff f80a 	bl	8000ef8 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e193      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d036      	beq.n	8001f78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d016      	beq.n	8001f40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7fe ffee 	bl	8000ef8 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f20:	f7fe ffea 	bl	8000ef8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e173      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x234>
 8001f3e:	e01b      	b.n	8001f78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f46:	f7fe ffd7 	bl	8000ef8 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	e00e      	b.n	8001f6c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4e:	f7fe ffd3 	bl	8000ef8 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d907      	bls.n	8001f6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e15c      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
 8001f60:	40023800 	.word	0x40023800
 8001f64:	42470000 	.word	0x42470000
 8001f68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6c:	4b8a      	ldr	r3, [pc, #552]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8001f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1ea      	bne.n	8001f4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8097 	beq.w	80020b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8a:	4b83      	ldr	r3, [pc, #524]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10f      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b7f      	ldr	r3, [pc, #508]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a7e      	ldr	r2, [pc, #504]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b7c      	ldr	r3, [pc, #496]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	4b79      	ldr	r3, [pc, #484]	; (800219c <HAL_RCC_OscConfig+0x4b0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d118      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc2:	4b76      	ldr	r3, [pc, #472]	; (800219c <HAL_RCC_OscConfig+0x4b0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a75      	ldr	r2, [pc, #468]	; (800219c <HAL_RCC_OscConfig+0x4b0>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fce:	f7fe ff93 	bl	8000ef8 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7fe ff8f 	bl	8000ef8 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e118      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	4b6c      	ldr	r3, [pc, #432]	; (800219c <HAL_RCC_OscConfig+0x4b0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x31e>
 8001ffc:	4b66      	ldr	r3, [pc, #408]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	4a65      	ldr	r2, [pc, #404]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6713      	str	r3, [r2, #112]	; 0x70
 8002008:	e01c      	b.n	8002044 <HAL_RCC_OscConfig+0x358>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b05      	cmp	r3, #5
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x340>
 8002012:	4b61      	ldr	r3, [pc, #388]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	4a60      	ldr	r2, [pc, #384]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8002018:	f043 0304 	orr.w	r3, r3, #4
 800201c:	6713      	str	r3, [r2, #112]	; 0x70
 800201e:	4b5e      	ldr	r3, [pc, #376]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002022:	4a5d      	ldr	r2, [pc, #372]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6713      	str	r3, [r2, #112]	; 0x70
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0x358>
 800202c:	4b5a      	ldr	r3, [pc, #360]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	4a59      	ldr	r2, [pc, #356]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	6713      	str	r3, [r2, #112]	; 0x70
 8002038:	4b57      	ldr	r3, [pc, #348]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203c:	4a56      	ldr	r2, [pc, #344]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 800203e:	f023 0304 	bic.w	r3, r3, #4
 8002042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d015      	beq.n	8002078 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7fe ff54 	bl	8000ef8 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	e00a      	b.n	800206a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7fe ff50 	bl	8000ef8 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e0d7      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206a:	4b4b      	ldr	r3, [pc, #300]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0ee      	beq.n	8002054 <HAL_RCC_OscConfig+0x368>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7fe ff3e 	bl	8000ef8 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f7fe ff3a 	bl	8000ef8 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0c1      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002096:	4b40      	ldr	r3, [pc, #256]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1ee      	bne.n	8002080 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020a2:	7dfb      	ldrb	r3, [r7, #23]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a8:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	4a3a      	ldr	r2, [pc, #232]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 80020ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80ad 	beq.w	8002218 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020be:	4b36      	ldr	r3, [pc, #216]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d060      	beq.n	800218c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d145      	bne.n	800215e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <HAL_RCC_OscConfig+0x4b4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe ff0e 	bl	8000ef8 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e0:	f7fe ff0a 	bl	8000ef8 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e093      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	4b29      	ldr	r3, [pc, #164]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	019b      	lsls	r3, r3, #6
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	085b      	lsrs	r3, r3, #1
 8002116:	3b01      	subs	r3, #1
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	061b      	lsls	r3, r3, #24
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	071b      	lsls	r3, r3, #28
 800212a:	491b      	ldr	r1, [pc, #108]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_RCC_OscConfig+0x4b4>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7fe fedf 	bl	8000ef8 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213e:	f7fe fedb 	bl	8000ef8 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e064      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x452>
 800215c:	e05c      	b.n	8002218 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_RCC_OscConfig+0x4b4>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe fec8 	bl	8000ef8 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe fec4 	bl	8000ef8 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e04d      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_RCC_OscConfig+0x4ac>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x480>
 800218a:	e045      	b.n	8002218 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d107      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e040      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
 8002198:	40023800 	.word	0x40023800
 800219c:	40007000 	.word	0x40007000
 80021a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021a4:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <HAL_RCC_OscConfig+0x538>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d030      	beq.n	8002214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d129      	bne.n	8002214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d122      	bne.n	8002214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021d4:	4013      	ands	r3, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021dc:	4293      	cmp	r3, r2
 80021de:	d119      	bne.n	8002214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	3b01      	subs	r3, #1
 80021ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d10f      	bne.n	8002214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d107      	bne.n	8002214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800

08002228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e041      	b.n	80022be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f839 	bl	80022c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3304      	adds	r3, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4610      	mov	r0, r2
 8002268:	f000 f9e2 	bl	8002630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d001      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e04e      	b.n	8002392 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a23      	ldr	r2, [pc, #140]	; (80023a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d022      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x80>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231e:	d01d      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x80>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1f      	ldr	r2, [pc, #124]	; (80023a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d018      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x80>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1e      	ldr	r2, [pc, #120]	; (80023a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x80>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1c      	ldr	r2, [pc, #112]	; (80023ac <HAL_TIM_Base_Start_IT+0xd0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00e      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x80>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d009      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x80>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d004      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x80>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d111      	bne.n	8002380 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b06      	cmp	r3, #6
 800236c:	d010      	beq.n	8002390 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0201 	orr.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237e:	e007      	b.n	8002390 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40010000 	.word	0x40010000
 80023a4:	40000400 	.word	0x40000400
 80023a8:	40000800 	.word	0x40000800
 80023ac:	40000c00 	.word	0x40000c00
 80023b0:	40010400 	.word	0x40010400
 80023b4:	40014000 	.word	0x40014000
 80023b8:	40001800 	.word	0x40001800

080023bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d122      	bne.n	8002418 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d11b      	bne.n	8002418 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0202 	mvn.w	r2, #2
 80023e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f8f8 	bl	80025f4 <HAL_TIM_IC_CaptureCallback>
 8002404:	e005      	b.n	8002412 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f8ea 	bl	80025e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f8fb 	bl	8002608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b04      	cmp	r3, #4
 8002424:	d122      	bne.n	800246c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b04      	cmp	r3, #4
 8002432:	d11b      	bne.n	800246c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0204 	mvn.w	r2, #4
 800243c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f8ce 	bl	80025f4 <HAL_TIM_IC_CaptureCallback>
 8002458:	e005      	b.n	8002466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f8c0 	bl	80025e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f8d1 	bl	8002608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b08      	cmp	r3, #8
 8002478:	d122      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b08      	cmp	r3, #8
 8002486:	d11b      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0208 	mvn.w	r2, #8
 8002490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2204      	movs	r2, #4
 8002496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f8a4 	bl	80025f4 <HAL_TIM_IC_CaptureCallback>
 80024ac:	e005      	b.n	80024ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f896 	bl	80025e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f8a7 	bl	8002608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d122      	bne.n	8002514 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d11b      	bne.n	8002514 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0210 	mvn.w	r2, #16
 80024e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2208      	movs	r2, #8
 80024ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f87a 	bl	80025f4 <HAL_TIM_IC_CaptureCallback>
 8002500:	e005      	b.n	800250e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f86c 	bl	80025e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f87d 	bl	8002608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d10e      	bne.n	8002540 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d107      	bne.n	8002540 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0201 	mvn.w	r2, #1
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f846 	bl	80025cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254a:	2b80      	cmp	r3, #128	; 0x80
 800254c:	d10e      	bne.n	800256c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002558:	2b80      	cmp	r3, #128	; 0x80
 800255a:	d107      	bne.n	800256c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f90c 	bl	8002784 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002584:	2b40      	cmp	r3, #64	; 0x40
 8002586:	d107      	bne.n	8002598 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f842 	bl	800261c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0220 	mvn.w	r2, #32
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f8d6 	bl	8002770 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a40      	ldr	r2, [pc, #256]	; (8002744 <TIM_Base_SetConfig+0x114>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d013      	beq.n	8002670 <TIM_Base_SetConfig+0x40>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264e:	d00f      	beq.n	8002670 <TIM_Base_SetConfig+0x40>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a3d      	ldr	r2, [pc, #244]	; (8002748 <TIM_Base_SetConfig+0x118>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00b      	beq.n	8002670 <TIM_Base_SetConfig+0x40>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a3c      	ldr	r2, [pc, #240]	; (800274c <TIM_Base_SetConfig+0x11c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d007      	beq.n	8002670 <TIM_Base_SetConfig+0x40>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a3b      	ldr	r2, [pc, #236]	; (8002750 <TIM_Base_SetConfig+0x120>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d003      	beq.n	8002670 <TIM_Base_SetConfig+0x40>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a3a      	ldr	r2, [pc, #232]	; (8002754 <TIM_Base_SetConfig+0x124>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d108      	bne.n	8002682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a2f      	ldr	r2, [pc, #188]	; (8002744 <TIM_Base_SetConfig+0x114>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d02b      	beq.n	80026e2 <TIM_Base_SetConfig+0xb2>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002690:	d027      	beq.n	80026e2 <TIM_Base_SetConfig+0xb2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a2c      	ldr	r2, [pc, #176]	; (8002748 <TIM_Base_SetConfig+0x118>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d023      	beq.n	80026e2 <TIM_Base_SetConfig+0xb2>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a2b      	ldr	r2, [pc, #172]	; (800274c <TIM_Base_SetConfig+0x11c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01f      	beq.n	80026e2 <TIM_Base_SetConfig+0xb2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a2a      	ldr	r2, [pc, #168]	; (8002750 <TIM_Base_SetConfig+0x120>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d01b      	beq.n	80026e2 <TIM_Base_SetConfig+0xb2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a29      	ldr	r2, [pc, #164]	; (8002754 <TIM_Base_SetConfig+0x124>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d017      	beq.n	80026e2 <TIM_Base_SetConfig+0xb2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a28      	ldr	r2, [pc, #160]	; (8002758 <TIM_Base_SetConfig+0x128>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <TIM_Base_SetConfig+0xb2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a27      	ldr	r2, [pc, #156]	; (800275c <TIM_Base_SetConfig+0x12c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00f      	beq.n	80026e2 <TIM_Base_SetConfig+0xb2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a26      	ldr	r2, [pc, #152]	; (8002760 <TIM_Base_SetConfig+0x130>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00b      	beq.n	80026e2 <TIM_Base_SetConfig+0xb2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a25      	ldr	r2, [pc, #148]	; (8002764 <TIM_Base_SetConfig+0x134>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a24      	ldr	r2, [pc, #144]	; (8002768 <TIM_Base_SetConfig+0x138>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d003      	beq.n	80026e2 <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a23      	ldr	r2, [pc, #140]	; (800276c <TIM_Base_SetConfig+0x13c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d108      	bne.n	80026f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <TIM_Base_SetConfig+0x114>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d003      	beq.n	8002728 <TIM_Base_SetConfig+0xf8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a0c      	ldr	r2, [pc, #48]	; (8002754 <TIM_Base_SetConfig+0x124>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d103      	bne.n	8002730 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	615a      	str	r2, [r3, #20]
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40010000 	.word	0x40010000
 8002748:	40000400 	.word	0x40000400
 800274c:	40000800 	.word	0x40000800
 8002750:	40000c00 	.word	0x40000c00
 8002754:	40010400 	.word	0x40010400
 8002758:	40014000 	.word	0x40014000
 800275c:	40014400 	.word	0x40014400
 8002760:	40014800 	.word	0x40014800
 8002764:	40001800 	.word	0x40001800
 8002768:	40001c00 	.word	0x40001c00
 800276c:	40002000 	.word	0x40002000

08002770 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e03f      	b.n	800282a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe f958 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2224      	movs	r2, #36	; 0x24
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fd7b 	bl	80032d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b08a      	sub	sp, #40	; 0x28
 8002836:	af02      	add	r7, sp, #8
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4613      	mov	r3, r2
 8002840:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b20      	cmp	r3, #32
 8002850:	d17c      	bne.n	800294c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_UART_Transmit+0x2c>
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e075      	b.n	800294e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_UART_Transmit+0x3e>
 800286c:	2302      	movs	r3, #2
 800286e:	e06e      	b.n	800294e <HAL_UART_Transmit+0x11c>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2221      	movs	r2, #33	; 0x21
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002886:	f7fe fb37 	bl	8000ef8 <HAL_GetTick>
 800288a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a0:	d108      	bne.n	80028b4 <HAL_UART_Transmit+0x82>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e003      	b.n	80028bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028c4:	e02a      	b.n	800291c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2180      	movs	r1, #128	; 0x80
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 faf9 	bl	8002ec8 <UART_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e036      	b.n	800294e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10b      	bne.n	80028fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	3302      	adds	r3, #2
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	e007      	b.n	800290e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	3301      	adds	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1cf      	bne.n	80028c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	2140      	movs	r1, #64	; 0x40
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fac9 	bl	8002ec8 <UART_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e006      	b.n	800294e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	e000      	b.n	800294e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800294c:	2302      	movs	r3, #2
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b0ba      	sub	sp, #232	; 0xe8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002984:	2300      	movs	r3, #0
 8002986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800298a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800299e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_UART_IRQHandler+0x66>
 80029aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fbd3 	bl	8003162 <UART_Receive_IT>
      return;
 80029bc:	e256      	b.n	8002e6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80de 	beq.w	8002b84 <HAL_UART_IRQHandler+0x22c>
 80029c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d106      	bne.n	80029e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80d1 	beq.w	8002b84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_UART_IRQHandler+0xae>
 80029ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <HAL_UART_IRQHandler+0xd2>
 8002a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f043 0202 	orr.w	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_UART_IRQHandler+0xf6>
 8002a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f043 0204 	orr.w	r2, r3, #4
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d011      	beq.n	8002a7e <HAL_UART_IRQHandler+0x126>
 8002a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d105      	bne.n	8002a72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f043 0208 	orr.w	r2, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 81ed 	beq.w	8002e62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x14e>
 8002a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fb5e 	bl	8003162 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x17a>
 8002aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d04f      	beq.n	8002b72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fa66 	bl	8002fa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d141      	bne.n	8002b6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3314      	adds	r3, #20
 8002aec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002af4:	e853 3f00 	ldrex	r3, [r3]
 8002af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3314      	adds	r3, #20
 8002b0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b22:	e841 2300 	strex	r3, r2, [r1]
 8002b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1d9      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d013      	beq.n	8002b62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	4a7d      	ldr	r2, [pc, #500]	; (8002d34 <HAL_UART_IRQHandler+0x3dc>)
 8002b40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fb34 	bl	80011b4 <HAL_DMA_Abort_IT>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d016      	beq.n	8002b80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b60:	e00e      	b.n	8002b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f99a 	bl	8002e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b68:	e00a      	b.n	8002b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f996 	bl	8002e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	e006      	b.n	8002b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f992 	bl	8002e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b7e:	e170      	b.n	8002e62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	bf00      	nop
    return;
 8002b82:	e16e      	b.n	8002e62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	f040 814a 	bne.w	8002e22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8143 	beq.w	8002e22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 813c 	beq.w	8002e22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	f040 80b4 	bne.w	8002d38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8140 	beq.w	8002e66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	f080 8139 	bcs.w	8002e66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bfa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c06:	f000 8088 	beq.w	8002d1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	330c      	adds	r3, #12
 8002c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c18:	e853 3f00 	ldrex	r3, [r3]
 8002c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	330c      	adds	r3, #12
 8002c32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c46:	e841 2300 	strex	r3, r2, [r1]
 8002c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1d9      	bne.n	8002c0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3314      	adds	r3, #20
 8002c76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c86:	e841 2300 	strex	r3, r2, [r1]
 8002c8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1e1      	bne.n	8002c56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3314      	adds	r3, #20
 8002c98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3314      	adds	r3, #20
 8002cb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cbe:	e841 2300 	strex	r3, r2, [r1]
 8002cc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1e3      	bne.n	8002c92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce2:	e853 3f00 	ldrex	r3, [r3]
 8002ce6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cea:	f023 0310 	bic.w	r3, r3, #16
 8002cee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	330c      	adds	r3, #12
 8002cf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d04:	e841 2300 	strex	r3, r2, [r1]
 8002d08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e3      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe f9dd 	bl	80010d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	4619      	mov	r1, r3
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8c0 	bl	8002eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d30:	e099      	b.n	8002e66 <HAL_UART_IRQHandler+0x50e>
 8002d32:	bf00      	nop
 8002d34:	0800306b 	.word	0x0800306b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 808b 	beq.w	8002e6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8086 	beq.w	8002e6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	330c      	adds	r3, #12
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	e853 3f00 	ldrex	r3, [r3]
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d82:	647a      	str	r2, [r7, #68]	; 0x44
 8002d84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e3      	bne.n	8002d5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3314      	adds	r3, #20
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	e853 3f00 	ldrex	r3, [r3]
 8002da4:	623b      	str	r3, [r7, #32]
   return(result);
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3314      	adds	r3, #20
 8002db6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dba:	633a      	str	r2, [r7, #48]	; 0x30
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e3      	bne.n	8002d96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	e853 3f00 	ldrex	r3, [r3]
 8002dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0310 	bic.w	r3, r3, #16
 8002df2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e00:	61fa      	str	r2, [r7, #28]
 8002e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e04:	69b9      	ldr	r1, [r7, #24]
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	e841 2300 	strex	r3, r2, [r1]
 8002e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e3      	bne.n	8002ddc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f848 	bl	8002eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e20:	e023      	b.n	8002e6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_UART_IRQHandler+0x4ea>
 8002e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f929 	bl	8003092 <UART_Transmit_IT>
    return;
 8002e40:	e014      	b.n	8002e6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00e      	beq.n	8002e6c <HAL_UART_IRQHandler+0x514>
 8002e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f969 	bl	8003132 <UART_EndTransmit_IT>
    return;
 8002e60:	e004      	b.n	8002e6c <HAL_UART_IRQHandler+0x514>
    return;
 8002e62:	bf00      	nop
 8002e64:	e002      	b.n	8002e6c <HAL_UART_IRQHandler+0x514>
      return;
 8002e66:	bf00      	nop
 8002e68:	e000      	b.n	8002e6c <HAL_UART_IRQHandler+0x514>
      return;
 8002e6a:	bf00      	nop
  }
}
 8002e6c:	37e8      	adds	r7, #232	; 0xe8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop

08002e74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b090      	sub	sp, #64	; 0x40
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed8:	e050      	b.n	8002f7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee0:	d04c      	beq.n	8002f7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ee8:	f7fe f806 	bl	8000ef8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d241      	bcs.n	8002f7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	330c      	adds	r3, #12
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	e853 3f00 	ldrex	r3, [r3]
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	330c      	adds	r3, #12
 8002f16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f18:	637a      	str	r2, [r7, #52]	; 0x34
 8002f1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f20:	e841 2300 	strex	r3, r2, [r1]
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e5      	bne.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3314      	adds	r3, #20
 8002f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	e853 3f00 	ldrex	r3, [r3]
 8002f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3314      	adds	r3, #20
 8002f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f4c:	623a      	str	r2, [r7, #32]
 8002f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	69f9      	ldr	r1, [r7, #28]
 8002f52:	6a3a      	ldr	r2, [r7, #32]
 8002f54:	e841 2300 	strex	r3, r2, [r1]
 8002f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e5      	bne.n	8002f2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e00f      	b.n	8002f9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d09f      	beq.n	8002eda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3740      	adds	r7, #64	; 0x40
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b095      	sub	sp, #84	; 0x54
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb6:	e853 3f00 	ldrex	r3, [r3]
 8002fba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fcc:	643a      	str	r2, [r7, #64]	; 0x40
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fd4:	e841 2300 	strex	r3, r2, [r1]
 8002fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e5      	bne.n	8002fac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3314      	adds	r3, #20
 8002fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	e853 3f00 	ldrex	r3, [r3]
 8002fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3314      	adds	r3, #20
 8002ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003000:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003008:	e841 2300 	strex	r3, r2, [r1]
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e5      	bne.n	8002fe0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	2b01      	cmp	r3, #1
 800301a:	d119      	bne.n	8003050 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	e853 3f00 	ldrex	r3, [r3]
 800302a:	60bb      	str	r3, [r7, #8]
   return(result);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f023 0310 	bic.w	r3, r3, #16
 8003032:	647b      	str	r3, [r7, #68]	; 0x44
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800303c:	61ba      	str	r2, [r7, #24]
 800303e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003040:	6979      	ldr	r1, [r7, #20]
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	e841 2300 	strex	r3, r2, [r1]
 8003048:	613b      	str	r3, [r7, #16]
   return(result);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e5      	bne.n	800301c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800305e:	bf00      	nop
 8003060:	3754      	adds	r7, #84	; 0x54
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f7ff ff09 	bl	8002e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b21      	cmp	r3, #33	; 0x21
 80030a4:	d13e      	bne.n	8003124 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ae:	d114      	bne.n	80030da <UART_Transmit_IT+0x48>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d110      	bne.n	80030da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	1c9a      	adds	r2, r3, #2
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	621a      	str	r2, [r3, #32]
 80030d8:	e008      	b.n	80030ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	1c59      	adds	r1, r3, #1
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6211      	str	r1, [r2, #32]
 80030e4:	781a      	ldrb	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4619      	mov	r1, r3
 80030fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10f      	bne.n	8003120 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800310e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800311e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003148:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff fe8e 	bl	8002e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b08c      	sub	sp, #48	; 0x30
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b22      	cmp	r3, #34	; 0x22
 8003174:	f040 80ab 	bne.w	80032ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003180:	d117      	bne.n	80031b2 <UART_Receive_IT+0x50>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d113      	bne.n	80031b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800318a:	2300      	movs	r3, #0
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	b29b      	uxth	r3, r3
 800319c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	1c9a      	adds	r2, r3, #2
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28
 80031b0:	e026      	b.n	8003200 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c4:	d007      	beq.n	80031d6 <UART_Receive_IT+0x74>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <UART_Receive_IT+0x82>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e008      	b.n	80031f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29b      	uxth	r3, r3
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4619      	mov	r1, r3
 800320e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003210:	2b00      	cmp	r3, #0
 8003212:	d15a      	bne.n	80032ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0220 	bic.w	r2, r2, #32
 8003222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003232:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	2b01      	cmp	r3, #1
 8003252:	d135      	bne.n	80032c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	330c      	adds	r3, #12
 8003260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	e853 3f00 	ldrex	r3, [r3]
 8003268:	613b      	str	r3, [r7, #16]
   return(result);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f023 0310 	bic.w	r3, r3, #16
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	330c      	adds	r3, #12
 8003278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327a:	623a      	str	r2, [r7, #32]
 800327c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327e:	69f9      	ldr	r1, [r7, #28]
 8003280:	6a3a      	ldr	r2, [r7, #32]
 8003282:	e841 2300 	strex	r3, r2, [r1]
 8003286:	61bb      	str	r3, [r7, #24]
   return(result);
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1e5      	bne.n	800325a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b10      	cmp	r3, #16
 800329a:	d10a      	bne.n	80032b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032b6:	4619      	mov	r1, r3
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff fdf9 	bl	8002eb0 <HAL_UARTEx_RxEventCallback>
 80032be:	e002      	b.n	80032c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff fde1 	bl	8002e88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e002      	b.n	80032d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
  }
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3730      	adds	r7, #48	; 0x30
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032dc:	b0c0      	sub	sp, #256	; 0x100
 80032de:	af00      	add	r7, sp, #0
 80032e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	68d9      	ldr	r1, [r3, #12]
 80032f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	ea40 0301 	orr.w	r3, r0, r1
 8003300:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	431a      	orrs	r2, r3
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	431a      	orrs	r2, r3
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003330:	f021 010c 	bic.w	r1, r1, #12
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800333e:	430b      	orrs	r3, r1
 8003340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800334e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003352:	6999      	ldr	r1, [r3, #24]
 8003354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	ea40 0301 	orr.w	r3, r0, r1
 800335e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b8f      	ldr	r3, [pc, #572]	; (80035a4 <UART_SetConfig+0x2cc>)
 8003368:	429a      	cmp	r2, r3
 800336a:	d005      	beq.n	8003378 <UART_SetConfig+0xa0>
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4b8d      	ldr	r3, [pc, #564]	; (80035a8 <UART_SetConfig+0x2d0>)
 8003374:	429a      	cmp	r2, r3
 8003376:	d104      	bne.n	8003382 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003378:	f7fe fa42 	bl	8001800 <HAL_RCC_GetPCLK2Freq>
 800337c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003380:	e003      	b.n	800338a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003382:	f7fe fa29 	bl	80017d8 <HAL_RCC_GetPCLK1Freq>
 8003386:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800338a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003394:	f040 810c 	bne.w	80035b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800339c:	2200      	movs	r2, #0
 800339e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033aa:	4622      	mov	r2, r4
 80033ac:	462b      	mov	r3, r5
 80033ae:	1891      	adds	r1, r2, r2
 80033b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80033b2:	415b      	adcs	r3, r3
 80033b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033ba:	4621      	mov	r1, r4
 80033bc:	eb12 0801 	adds.w	r8, r2, r1
 80033c0:	4629      	mov	r1, r5
 80033c2:	eb43 0901 	adc.w	r9, r3, r1
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033da:	4690      	mov	r8, r2
 80033dc:	4699      	mov	r9, r3
 80033de:	4623      	mov	r3, r4
 80033e0:	eb18 0303 	adds.w	r3, r8, r3
 80033e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033e8:	462b      	mov	r3, r5
 80033ea:	eb49 0303 	adc.w	r3, r9, r3
 80033ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003402:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003406:	460b      	mov	r3, r1
 8003408:	18db      	adds	r3, r3, r3
 800340a:	653b      	str	r3, [r7, #80]	; 0x50
 800340c:	4613      	mov	r3, r2
 800340e:	eb42 0303 	adc.w	r3, r2, r3
 8003412:	657b      	str	r3, [r7, #84]	; 0x54
 8003414:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003418:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800341c:	f7fc ff50 	bl	80002c0 <__aeabi_uldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4b61      	ldr	r3, [pc, #388]	; (80035ac <UART_SetConfig+0x2d4>)
 8003426:	fba3 2302 	umull	r2, r3, r3, r2
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	011c      	lsls	r4, r3, #4
 800342e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003432:	2200      	movs	r2, #0
 8003434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003438:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800343c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003440:	4642      	mov	r2, r8
 8003442:	464b      	mov	r3, r9
 8003444:	1891      	adds	r1, r2, r2
 8003446:	64b9      	str	r1, [r7, #72]	; 0x48
 8003448:	415b      	adcs	r3, r3
 800344a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800344c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003450:	4641      	mov	r1, r8
 8003452:	eb12 0a01 	adds.w	sl, r2, r1
 8003456:	4649      	mov	r1, r9
 8003458:	eb43 0b01 	adc.w	fp, r3, r1
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003468:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800346c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003470:	4692      	mov	sl, r2
 8003472:	469b      	mov	fp, r3
 8003474:	4643      	mov	r3, r8
 8003476:	eb1a 0303 	adds.w	r3, sl, r3
 800347a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800347e:	464b      	mov	r3, r9
 8003480:	eb4b 0303 	adc.w	r3, fp, r3
 8003484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003494:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003498:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800349c:	460b      	mov	r3, r1
 800349e:	18db      	adds	r3, r3, r3
 80034a0:	643b      	str	r3, [r7, #64]	; 0x40
 80034a2:	4613      	mov	r3, r2
 80034a4:	eb42 0303 	adc.w	r3, r2, r3
 80034a8:	647b      	str	r3, [r7, #68]	; 0x44
 80034aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034b2:	f7fc ff05 	bl	80002c0 <__aeabi_uldivmod>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4611      	mov	r1, r2
 80034bc:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <UART_SetConfig+0x2d4>)
 80034be:	fba3 2301 	umull	r2, r3, r3, r1
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	2264      	movs	r2, #100	; 0x64
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	1acb      	subs	r3, r1, r3
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034d2:	4b36      	ldr	r3, [pc, #216]	; (80035ac <UART_SetConfig+0x2d4>)
 80034d4:	fba3 2302 	umull	r2, r3, r3, r2
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034e0:	441c      	add	r4, r3
 80034e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034f4:	4642      	mov	r2, r8
 80034f6:	464b      	mov	r3, r9
 80034f8:	1891      	adds	r1, r2, r2
 80034fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80034fc:	415b      	adcs	r3, r3
 80034fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003500:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003504:	4641      	mov	r1, r8
 8003506:	1851      	adds	r1, r2, r1
 8003508:	6339      	str	r1, [r7, #48]	; 0x30
 800350a:	4649      	mov	r1, r9
 800350c:	414b      	adcs	r3, r1
 800350e:	637b      	str	r3, [r7, #52]	; 0x34
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800351c:	4659      	mov	r1, fp
 800351e:	00cb      	lsls	r3, r1, #3
 8003520:	4651      	mov	r1, sl
 8003522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003526:	4651      	mov	r1, sl
 8003528:	00ca      	lsls	r2, r1, #3
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	4603      	mov	r3, r0
 8003530:	4642      	mov	r2, r8
 8003532:	189b      	adds	r3, r3, r2
 8003534:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003538:	464b      	mov	r3, r9
 800353a:	460a      	mov	r2, r1
 800353c:	eb42 0303 	adc.w	r3, r2, r3
 8003540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003550:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003554:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003558:	460b      	mov	r3, r1
 800355a:	18db      	adds	r3, r3, r3
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
 800355e:	4613      	mov	r3, r2
 8003560:	eb42 0303 	adc.w	r3, r2, r3
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800356a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800356e:	f7fc fea7 	bl	80002c0 <__aeabi_uldivmod>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <UART_SetConfig+0x2d4>)
 8003578:	fba3 1302 	umull	r1, r3, r3, r2
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	2164      	movs	r1, #100	; 0x64
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	3332      	adds	r3, #50	; 0x32
 800358a:	4a08      	ldr	r2, [pc, #32]	; (80035ac <UART_SetConfig+0x2d4>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	f003 0207 	and.w	r2, r3, #7
 8003596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4422      	add	r2, r4
 800359e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035a0:	e105      	b.n	80037ae <UART_SetConfig+0x4d6>
 80035a2:	bf00      	nop
 80035a4:	40011000 	.word	0x40011000
 80035a8:	40011400 	.word	0x40011400
 80035ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035c2:	4642      	mov	r2, r8
 80035c4:	464b      	mov	r3, r9
 80035c6:	1891      	adds	r1, r2, r2
 80035c8:	6239      	str	r1, [r7, #32]
 80035ca:	415b      	adcs	r3, r3
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
 80035ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035d2:	4641      	mov	r1, r8
 80035d4:	1854      	adds	r4, r2, r1
 80035d6:	4649      	mov	r1, r9
 80035d8:	eb43 0501 	adc.w	r5, r3, r1
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	00eb      	lsls	r3, r5, #3
 80035e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ea:	00e2      	lsls	r2, r4, #3
 80035ec:	4614      	mov	r4, r2
 80035ee:	461d      	mov	r5, r3
 80035f0:	4643      	mov	r3, r8
 80035f2:	18e3      	adds	r3, r4, r3
 80035f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035f8:	464b      	mov	r3, r9
 80035fa:	eb45 0303 	adc.w	r3, r5, r3
 80035fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800360e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800361e:	4629      	mov	r1, r5
 8003620:	008b      	lsls	r3, r1, #2
 8003622:	4621      	mov	r1, r4
 8003624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003628:	4621      	mov	r1, r4
 800362a:	008a      	lsls	r2, r1, #2
 800362c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003630:	f7fc fe46 	bl	80002c0 <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4b60      	ldr	r3, [pc, #384]	; (80037bc <UART_SetConfig+0x4e4>)
 800363a:	fba3 2302 	umull	r2, r3, r3, r2
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	011c      	lsls	r4, r3, #4
 8003642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003646:	2200      	movs	r2, #0
 8003648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800364c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003650:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003654:	4642      	mov	r2, r8
 8003656:	464b      	mov	r3, r9
 8003658:	1891      	adds	r1, r2, r2
 800365a:	61b9      	str	r1, [r7, #24]
 800365c:	415b      	adcs	r3, r3
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003664:	4641      	mov	r1, r8
 8003666:	1851      	adds	r1, r2, r1
 8003668:	6139      	str	r1, [r7, #16]
 800366a:	4649      	mov	r1, r9
 800366c:	414b      	adcs	r3, r1
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800367c:	4659      	mov	r1, fp
 800367e:	00cb      	lsls	r3, r1, #3
 8003680:	4651      	mov	r1, sl
 8003682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003686:	4651      	mov	r1, sl
 8003688:	00ca      	lsls	r2, r1, #3
 800368a:	4610      	mov	r0, r2
 800368c:	4619      	mov	r1, r3
 800368e:	4603      	mov	r3, r0
 8003690:	4642      	mov	r2, r8
 8003692:	189b      	adds	r3, r3, r2
 8003694:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003698:	464b      	mov	r3, r9
 800369a:	460a      	mov	r2, r1
 800369c:	eb42 0303 	adc.w	r3, r2, r3
 80036a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80036ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036bc:	4649      	mov	r1, r9
 80036be:	008b      	lsls	r3, r1, #2
 80036c0:	4641      	mov	r1, r8
 80036c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036c6:	4641      	mov	r1, r8
 80036c8:	008a      	lsls	r2, r1, #2
 80036ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036ce:	f7fc fdf7 	bl	80002c0 <__aeabi_uldivmod>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4b39      	ldr	r3, [pc, #228]	; (80037bc <UART_SetConfig+0x4e4>)
 80036d8:	fba3 1302 	umull	r1, r3, r3, r2
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	2164      	movs	r1, #100	; 0x64
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	3332      	adds	r3, #50	; 0x32
 80036ea:	4a34      	ldr	r2, [pc, #208]	; (80037bc <UART_SetConfig+0x4e4>)
 80036ec:	fba2 2303 	umull	r2, r3, r2, r3
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f6:	441c      	add	r4, r3
 80036f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fc:	2200      	movs	r2, #0
 80036fe:	673b      	str	r3, [r7, #112]	; 0x70
 8003700:	677a      	str	r2, [r7, #116]	; 0x74
 8003702:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003706:	4642      	mov	r2, r8
 8003708:	464b      	mov	r3, r9
 800370a:	1891      	adds	r1, r2, r2
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	415b      	adcs	r3, r3
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003716:	4641      	mov	r1, r8
 8003718:	1851      	adds	r1, r2, r1
 800371a:	6039      	str	r1, [r7, #0]
 800371c:	4649      	mov	r1, r9
 800371e:	414b      	adcs	r3, r1
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800372e:	4659      	mov	r1, fp
 8003730:	00cb      	lsls	r3, r1, #3
 8003732:	4651      	mov	r1, sl
 8003734:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003738:	4651      	mov	r1, sl
 800373a:	00ca      	lsls	r2, r1, #3
 800373c:	4610      	mov	r0, r2
 800373e:	4619      	mov	r1, r3
 8003740:	4603      	mov	r3, r0
 8003742:	4642      	mov	r2, r8
 8003744:	189b      	adds	r3, r3, r2
 8003746:	66bb      	str	r3, [r7, #104]	; 0x68
 8003748:	464b      	mov	r3, r9
 800374a:	460a      	mov	r2, r1
 800374c:	eb42 0303 	adc.w	r3, r2, r3
 8003750:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	663b      	str	r3, [r7, #96]	; 0x60
 800375c:	667a      	str	r2, [r7, #100]	; 0x64
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800376a:	4649      	mov	r1, r9
 800376c:	008b      	lsls	r3, r1, #2
 800376e:	4641      	mov	r1, r8
 8003770:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003774:	4641      	mov	r1, r8
 8003776:	008a      	lsls	r2, r1, #2
 8003778:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800377c:	f7fc fda0 	bl	80002c0 <__aeabi_uldivmod>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <UART_SetConfig+0x4e4>)
 8003786:	fba3 1302 	umull	r1, r3, r3, r2
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	2164      	movs	r1, #100	; 0x64
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	3332      	adds	r3, #50	; 0x32
 8003798:	4a08      	ldr	r2, [pc, #32]	; (80037bc <UART_SetConfig+0x4e4>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	f003 020f 	and.w	r2, r3, #15
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4422      	add	r2, r4
 80037ac:	609a      	str	r2, [r3, #8]
}
 80037ae:	bf00      	nop
 80037b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037b4:	46bd      	mov	sp, r7
 80037b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ba:	bf00      	nop
 80037bc:	51eb851f 	.word	0x51eb851f

080037c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f103 0208 	add.w	r2, r3, #8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f103 0208 	add.w	r2, r3, #8
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f103 0208 	add.w	r2, r3, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800381a:	b480      	push	{r7}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003878:	d103      	bne.n	8003882 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	e00c      	b.n	800389c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3308      	adds	r3, #8
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e002      	b.n	8003890 <vListInsert+0x2e>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	429a      	cmp	r2, r3
 800389a:	d2f6      	bcs.n	800388a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	601a      	str	r2, [r3, #0]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6892      	ldr	r2, [r2, #8]
 80038ea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6852      	ldr	r2, [r2, #4]
 80038f4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d103      	bne.n	8003908 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	1e5a      	subs	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003952:	f002 fa47 	bl	8005de4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	441a      	add	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	3b01      	subs	r3, #1
 8003984:	68f9      	ldr	r1, [r7, #12]
 8003986:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	441a      	add	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	22ff      	movs	r2, #255	; 0xff
 8003996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	22ff      	movs	r2, #255	; 0xff
 800399e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d114      	bne.n	80039d2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d01a      	beq.n	80039e6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3310      	adds	r3, #16
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 f9a5 	bl	8004d04 <xTaskRemoveFromEventList>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d012      	beq.n	80039e6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <xQueueGenericReset+0xcc>)
 80039c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	e009      	b.n	80039e6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3310      	adds	r3, #16
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fef2 	bl	80037c0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3324      	adds	r3, #36	; 0x24
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff feed 	bl	80037c0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80039e6:	f002 fa2d 	bl	8005e44 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80039ea:	2301      	movs	r3, #1
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	e000ed04 	.word	0xe000ed04

080039f8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08c      	sub	sp, #48	; 0x30
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <xQueueGenericCreate+0x2a>
        __asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	61bb      	str	r3, [r7, #24]
    }
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <xQueueGenericCreate+0x48>
 8003a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d101      	bne.n	8003a44 <xQueueGenericCreate+0x4c>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <xQueueGenericCreate+0x4e>
 8003a44:	2300      	movs	r3, #0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <xQueueGenericCreate+0x68>
        __asm volatile
 8003a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	617b      	str	r3, [r7, #20]
    }
 8003a5c:	bf00      	nop
 8003a5e:	e7fe      	b.n	8003a5e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003a66:	d90a      	bls.n	8003a7e <xQueueGenericCreate+0x86>
        __asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	613b      	str	r3, [r7, #16]
    }
 8003a7a:	bf00      	nop
 8003a7c:	e7fe      	b.n	8003a7c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	3350      	adds	r3, #80	; 0x50
 8003a82:	4618      	mov	r0, r3
 8003a84:	f002 fad2 	bl	800602c <pvPortMalloc>
 8003a88:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00d      	beq.n	8003aac <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	3350      	adds	r3, #80	; 0x50
 8003a98:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a9a:	79fa      	ldrb	r2, [r7, #7]
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f805 	bl	8003ab6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003aac:	6a3b      	ldr	r3, [r7, #32]
    }
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3728      	adds	r7, #40	; 0x28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e002      	b.n	8003ad8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	69b8      	ldr	r0, [r7, #24]
 8003ae8:	f7ff ff1e 	bl	8003928 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08e      	sub	sp, #56	; 0x38
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <xQueueGenericSend+0x32>
        __asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003b2a:	bf00      	nop
 8003b2c:	e7fe      	b.n	8003b2c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d103      	bne.n	8003b3c <xQueueGenericSend+0x40>
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <xQueueGenericSend+0x44>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <xQueueGenericSend+0x46>
 8003b40:	2300      	movs	r3, #0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <xQueueGenericSend+0x60>
        __asm volatile
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003b58:	bf00      	nop
 8003b5a:	e7fe      	b.n	8003b5a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d103      	bne.n	8003b6a <xQueueGenericSend+0x6e>
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <xQueueGenericSend+0x72>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <xQueueGenericSend+0x74>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <xQueueGenericSend+0x8e>
        __asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	623b      	str	r3, [r7, #32]
    }
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b8a:	f001 fa57 	bl	800503c <xTaskGetSchedulerState>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <xQueueGenericSend+0x9e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <xQueueGenericSend+0xa2>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <xQueueGenericSend+0xa4>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <xQueueGenericSend+0xbe>
        __asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	61fb      	str	r3, [r7, #28]
    }
 8003bb6:	bf00      	nop
 8003bb8:	e7fe      	b.n	8003bb8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003bba:	f002 f913 	bl	8005de4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d302      	bcc.n	8003bd0 <xQueueGenericSend+0xd4>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d129      	bne.n	8003c24 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bd6:	f000 fb3d 	bl	8004254 <prvCopyDataToQueue>
 8003bda:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d010      	beq.n	8003c06 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	3324      	adds	r3, #36	; 0x24
 8003be8:	4618      	mov	r0, r3
 8003bea:	f001 f88b 	bl	8004d04 <xTaskRemoveFromEventList>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d013      	beq.n	8003c1c <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003bf4:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <xQueueGenericSend+0x1f8>)
 8003bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	e00a      	b.n	8003c1c <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003c0c:	4b39      	ldr	r3, [pc, #228]	; (8003cf4 <xQueueGenericSend+0x1f8>)
 8003c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003c1c:	f002 f912 	bl	8005e44 <vPortExitCritical>
                return pdPASS;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e063      	b.n	8003cec <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d103      	bne.n	8003c32 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003c2a:	f002 f90b 	bl	8005e44 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e05c      	b.n	8003cec <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003c38:	f107 0314 	add.w	r3, r7, #20
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 f8c3 	bl	8004dc8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003c42:	2301      	movs	r3, #1
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003c46:	f002 f8fd 	bl	8005e44 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003c4a:	f000 fe3d 	bl	80048c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003c4e:	f002 f8c9 	bl	8005de4 <vPortEnterCritical>
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c58:	b25b      	sxtb	r3, r3
 8003c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c5e:	d103      	bne.n	8003c68 <xQueueGenericSend+0x16c>
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c6e:	b25b      	sxtb	r3, r3
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c74:	d103      	bne.n	8003c7e <xQueueGenericSend+0x182>
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c7e:	f002 f8e1 	bl	8005e44 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c82:	1d3a      	adds	r2, r7, #4
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4611      	mov	r1, r2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f001 f8b2 	bl	8004df4 <xTaskCheckForTimeOut>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d124      	bne.n	8003ce0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c98:	f000 fbd4 	bl	8004444 <prvIsQueueFull>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d018      	beq.n	8003cd4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	3310      	adds	r3, #16
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 ffda 	bl	8004c64 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cb2:	f000 fb5f 	bl	8004374 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003cb6:	f000 fe15 	bl	80048e4 <xTaskResumeAll>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f47f af7c 	bne.w	8003bba <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <xQueueGenericSend+0x1f8>)
 8003cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	e772      	b.n	8003bba <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cd6:	f000 fb4d 	bl	8004374 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003cda:	f000 fe03 	bl	80048e4 <xTaskResumeAll>
 8003cde:	e76c      	b.n	8003bba <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ce2:	f000 fb47 	bl	8004374 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003ce6:	f000 fdfd 	bl	80048e4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003cea:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3738      	adds	r7, #56	; 0x38
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	e000ed04 	.word	0xe000ed04

08003cf8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b090      	sub	sp, #64	; 0x40
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d103      	bne.n	8003d34 <xQueueGenericSendFromISR+0x3c>
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <xQueueGenericSendFromISR+0x40>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <xQueueGenericSendFromISR+0x42>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003d50:	bf00      	nop
 8003d52:	e7fe      	b.n	8003d52 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d103      	bne.n	8003d62 <xQueueGenericSendFromISR+0x6a>
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <xQueueGenericSendFromISR+0x6e>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <xQueueGenericSendFromISR+0x70>
 8003d66:	2300      	movs	r3, #0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10a      	bne.n	8003d82 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	623b      	str	r3, [r7, #32]
    }
 8003d7e:	bf00      	nop
 8003d80:	e7fe      	b.n	8003d80 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d82:	f002 f913 	bl	8005fac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003d86:	f3ef 8211 	mrs	r2, BASEPRI
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	61fa      	str	r2, [r7, #28]
 8003d9c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003d9e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d302      	bcc.n	8003db4 <xQueueGenericSendFromISR+0xbc>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d13e      	bne.n	8003e32 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003dca:	f000 fa43 	bl	8004254 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003dce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dd6:	d112      	bne.n	8003dfe <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d025      	beq.n	8003e2c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de2:	3324      	adds	r3, #36	; 0x24
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 ff8d 	bl	8004d04 <xTaskRemoveFromEventList>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01d      	beq.n	8003e2c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01a      	beq.n	8003e2c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	e016      	b.n	8003e2c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003dfe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003e02:	2b7f      	cmp	r3, #127	; 0x7f
 8003e04:	d10a      	bne.n	8003e1c <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	617b      	str	r3, [r7, #20]
    }
 8003e18:	bf00      	nop
 8003e1a:	e7fe      	b.n	8003e1a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e20:	3301      	adds	r3, #1
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	b25a      	sxtb	r2, r3
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003e30:	e001      	b.n	8003e36 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e38:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003e40:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3740      	adds	r7, #64	; 0x40
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08c      	sub	sp, #48	; 0x30
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <xQueueReceive+0x30>
        __asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	623b      	str	r3, [r7, #32]
    }
 8003e78:	bf00      	nop
 8003e7a:	e7fe      	b.n	8003e7a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d103      	bne.n	8003e8a <xQueueReceive+0x3e>
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <xQueueReceive+0x42>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <xQueueReceive+0x44>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <xQueueReceive+0x5e>
        __asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	61fb      	str	r3, [r7, #28]
    }
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eaa:	f001 f8c7 	bl	800503c <xTaskGetSchedulerState>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <xQueueReceive+0x6e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <xQueueReceive+0x72>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <xQueueReceive+0x74>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <xQueueReceive+0x8e>
        __asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	61bb      	str	r3, [r7, #24]
    }
 8003ed6:	bf00      	nop
 8003ed8:	e7fe      	b.n	8003ed8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003eda:	f001 ff83 	bl	8005de4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01f      	beq.n	8003f2a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eee:	f000 fa1b 	bl	8004328 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	1e5a      	subs	r2, r3, #1
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00f      	beq.n	8003f22 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	3310      	adds	r3, #16
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fefc 	bl	8004d04 <xTaskRemoveFromEventList>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003f12:	4b3d      	ldr	r3, [pc, #244]	; (8004008 <xQueueReceive+0x1bc>)
 8003f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003f22:	f001 ff8f 	bl	8005e44 <vPortExitCritical>
                return pdPASS;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e069      	b.n	8003ffe <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003f30:	f001 ff88 	bl	8005e44 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e062      	b.n	8003ffe <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003f3e:	f107 0310 	add.w	r3, r7, #16
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 ff40 	bl	8004dc8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003f4c:	f001 ff7a 	bl	8005e44 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003f50:	f000 fcba 	bl	80048c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003f54:	f001 ff46 	bl	8005de4 <vPortEnterCritical>
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f5e:	b25b      	sxtb	r3, r3
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f64:	d103      	bne.n	8003f6e <xQueueReceive+0x122>
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f74:	b25b      	sxtb	r3, r3
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f7a:	d103      	bne.n	8003f84 <xQueueReceive+0x138>
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f84:	f001 ff5e 	bl	8005e44 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f88:	1d3a      	adds	r2, r7, #4
 8003f8a:	f107 0310 	add.w	r3, r7, #16
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 ff2f 	bl	8004df4 <xTaskCheckForTimeOut>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d123      	bne.n	8003fe4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f9e:	f000 fa3b 	bl	8004418 <prvIsQueueEmpty>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d017      	beq.n	8003fd8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	3324      	adds	r3, #36	; 0x24
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fe57 	bl	8004c64 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fb8:	f000 f9dc 	bl	8004374 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003fbc:	f000 fc92 	bl	80048e4 <xTaskResumeAll>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d189      	bne.n	8003eda <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <xQueueReceive+0x1bc>)
 8003fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	e780      	b.n	8003eda <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fda:	f000 f9cb 	bl	8004374 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003fde:	f000 fc81 	bl	80048e4 <xTaskResumeAll>
 8003fe2:	e77a      	b.n	8003eda <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fe6:	f000 f9c5 	bl	8004374 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003fea:	f000 fc7b 	bl	80048e4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ff0:	f000 fa12 	bl	8004418 <prvIsQueueEmpty>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f43f af6f 	beq.w	8003eda <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003ffc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3730      	adds	r7, #48	; 0x30
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08e      	sub	sp, #56	; 0x38
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004016:	2300      	movs	r3, #0
 8004018:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800401e:	2300      	movs	r3, #0
 8004020:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	623b      	str	r3, [r7, #32]
    }
 800403a:	bf00      	nop
 800403c:	e7fe      	b.n	800403c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	61fb      	str	r3, [r7, #28]
    }
 8004058:	bf00      	nop
 800405a:	e7fe      	b.n	800405a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800405c:	f000 ffee 	bl	800503c <xTaskGetSchedulerState>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d102      	bne.n	800406c <xQueueSemaphoreTake+0x60>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <xQueueSemaphoreTake+0x64>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <xQueueSemaphoreTake+0x66>
 8004070:	2300      	movs	r3, #0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <xQueueSemaphoreTake+0x80>
        __asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	61bb      	str	r3, [r7, #24]
    }
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800408c:	f001 feaa 	bl	8005de4 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	2b00      	cmp	r3, #0
 800409a:	d024      	beq.n	80040e6 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	1e5a      	subs	r2, r3, #1
 80040a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80040ac:	f001 f962 	bl	8005374 <pvTaskIncrementMutexHeldCount>
 80040b0:	4602      	mov	r2, r0
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00f      	beq.n	80040de <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c0:	3310      	adds	r3, #16
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fe1e 	bl	8004d04 <xTaskRemoveFromEventList>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80040ce:	4b54      	ldr	r3, [pc, #336]	; (8004220 <xQueueSemaphoreTake+0x214>)
 80040d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80040de:	f001 feb1 	bl	8005e44 <vPortExitCritical>
                return pdPASS;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e097      	b.n	8004216 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d111      	bne.n	8004110 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 80040f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	617b      	str	r3, [r7, #20]
    }
 8004104:	bf00      	nop
 8004106:	e7fe      	b.n	8004106 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8004108:	f001 fe9c 	bl	8005e44 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800410c:	2300      	movs	r3, #0
 800410e:	e082      	b.n	8004216 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004116:	f107 030c 	add.w	r3, r7, #12
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fe54 	bl	8004dc8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004120:	2301      	movs	r3, #1
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004124:	f001 fe8e 	bl	8005e44 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004128:	f000 fbce 	bl	80048c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800412c:	f001 fe5a 	bl	8005de4 <vPortEnterCritical>
 8004130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004136:	b25b      	sxtb	r3, r3
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800413c:	d103      	bne.n	8004146 <xQueueSemaphoreTake+0x13a>
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800414c:	b25b      	sxtb	r3, r3
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004152:	d103      	bne.n	800415c <xQueueSemaphoreTake+0x150>
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800415c:	f001 fe72 	bl	8005e44 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004160:	463a      	mov	r2, r7
 8004162:	f107 030c 	add.w	r3, r7, #12
 8004166:	4611      	mov	r1, r2
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fe43 	bl	8004df4 <xTaskCheckForTimeOut>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d132      	bne.n	80041da <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004176:	f000 f94f 	bl	8004418 <prvIsQueueEmpty>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d026      	beq.n	80041ce <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d109      	bne.n	800419c <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8004188:	f001 fe2c 	bl	8005de4 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4618      	mov	r0, r3
 8004192:	f000 ff71 	bl	8005078 <xTaskPriorityInherit>
 8004196:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8004198:	f001 fe54 	bl	8005e44 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419e:	3324      	adds	r3, #36	; 0x24
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fd5d 	bl	8004c64 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80041aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041ac:	f000 f8e2 	bl	8004374 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80041b0:	f000 fb98 	bl	80048e4 <xTaskResumeAll>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f47f af68 	bne.w	800408c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80041bc:	4b18      	ldr	r3, [pc, #96]	; (8004220 <xQueueSemaphoreTake+0x214>)
 80041be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	e75e      	b.n	800408c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80041ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041d0:	f000 f8d0 	bl	8004374 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80041d4:	f000 fb86 	bl	80048e4 <xTaskResumeAll>
 80041d8:	e758      	b.n	800408c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80041da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041dc:	f000 f8ca 	bl	8004374 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80041e0:	f000 fb80 	bl	80048e4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041e6:	f000 f917 	bl	8004418 <prvIsQueueEmpty>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f43f af4d 	beq.w	800408c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 80041f8:	f001 fdf4 	bl	8005de4 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80041fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041fe:	f000 f811 	bl	8004224 <prvGetDisinheritPriorityAfterTimeout>
 8004202:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800420a:	4618      	mov	r0, r3
 800420c:	f001 f824 	bl	8005258 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8004210:	f001 fe18 	bl	8005e44 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004214:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004216:	4618      	mov	r0, r3
 8004218:	3738      	adds	r7, #56	; 0x38
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	2b00      	cmp	r3, #0
 8004232:	d006      	beq.n	8004242 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1c3 0305 	rsb	r3, r3, #5
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	e001      	b.n	8004246 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8004246:	68fb      	ldr	r3, [r7, #12]
    }
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10d      	bne.n	800428e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d14d      	bne.n	8004316 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 ff70 	bl	8005164 <xTaskPriorityDisinherit>
 8004284:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	609a      	str	r2, [r3, #8]
 800428c:	e043      	b.n	8004316 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d119      	bne.n	80042c8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6858      	ldr	r0, [r3, #4]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	461a      	mov	r2, r3
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	f002 f8ec 	bl	800647c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	441a      	add	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d32b      	bcc.n	8004316 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	e026      	b.n	8004316 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68d8      	ldr	r0, [r3, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	461a      	mov	r2, r3
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	f002 f8d2 	bl	800647c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	425b      	negs	r3, r3
 80042e2:	441a      	add	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d207      	bcs.n	8004304 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	425b      	negs	r3, r3
 80042fe:	441a      	add	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d105      	bne.n	8004316 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	3b01      	subs	r3, #1
 8004314:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800431e:	697b      	ldr	r3, [r7, #20]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d018      	beq.n	800436c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	441a      	add	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	429a      	cmp	r2, r3
 8004352:	d303      	bcc.n	800435c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68d9      	ldr	r1, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	461a      	mov	r2, r3
 8004366:	6838      	ldr	r0, [r7, #0]
 8004368:	f002 f888 	bl	800647c <memcpy>
    }
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800437c:	f001 fd32 	bl	8005de4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004386:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004388:	e011      	b.n	80043ae <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b00      	cmp	r3, #0
 8004390:	d012      	beq.n	80043b8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3324      	adds	r3, #36	; 0x24
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fcb4 	bl	8004d04 <xTaskRemoveFromEventList>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80043a2:	f000 fd8d 	bl	8004ec0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80043ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	dce9      	bgt.n	800438a <prvUnlockQueue+0x16>
 80043b6:	e000      	b.n	80043ba <prvUnlockQueue+0x46>
                        break;
 80043b8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	22ff      	movs	r2, #255	; 0xff
 80043be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80043c2:	f001 fd3f 	bl	8005e44 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80043c6:	f001 fd0d 	bl	8005de4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043d0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80043d2:	e011      	b.n	80043f8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d012      	beq.n	8004402 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3310      	adds	r3, #16
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fc8f 	bl	8004d04 <xTaskRemoveFromEventList>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80043ec:	f000 fd68 	bl	8004ec0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80043f0:	7bbb      	ldrb	r3, [r7, #14]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80043f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	dce9      	bgt.n	80043d4 <prvUnlockQueue+0x60>
 8004400:	e000      	b.n	8004404 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004402:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	22ff      	movs	r2, #255	; 0xff
 8004408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800440c:	f001 fd1a 	bl	8005e44 <vPortExitCritical>
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004420:	f001 fce0 	bl	8005de4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800442c:	2301      	movs	r3, #1
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	e001      	b.n	8004436 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004436:	f001 fd05 	bl	8005e44 <vPortExitCritical>

    return xReturn;
 800443a:	68fb      	ldr	r3, [r7, #12]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800444c:	f001 fcca 	bl	8005de4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004458:	429a      	cmp	r2, r3
 800445a:	d102      	bne.n	8004462 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800445c:	2301      	movs	r3, #1
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	e001      	b.n	8004466 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004466:	f001 fced 	bl	8005e44 <vPortExitCritical>

    return xReturn;
 800446a:	68fb      	ldr	r3, [r7, #12]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	e014      	b.n	80044ae <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004484:	4a0f      	ldr	r2, [pc, #60]	; (80044c4 <vQueueAddToRegistry+0x50>)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004490:	490c      	ldr	r1, [pc, #48]	; (80044c4 <vQueueAddToRegistry+0x50>)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800449a:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <vQueueAddToRegistry+0x50>)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4413      	add	r3, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80044a6:	e006      	b.n	80044b6 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3301      	adds	r3, #1
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b07      	cmp	r3, #7
 80044b2:	d9e7      	bls.n	8004484 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000228 	.word	0x20000228

080044c8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80044d8:	f001 fc84 	bl	8005de4 <vPortEnterCritical>
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044e2:	b25b      	sxtb	r3, r3
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e8:	d103      	bne.n	80044f2 <vQueueWaitForMessageRestricted+0x2a>
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044f8:	b25b      	sxtb	r3, r3
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044fe:	d103      	bne.n	8004508 <vQueueWaitForMessageRestricted+0x40>
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004508:	f001 fc9c 	bl	8005e44 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	2b00      	cmp	r3, #0
 8004512:	d106      	bne.n	8004522 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	3324      	adds	r3, #36	; 0x24
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fbc5 	bl	8004cac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004522:	6978      	ldr	r0, [r7, #20]
 8004524:	f7ff ff26 	bl	8004374 <prvUnlockQueue>
    }
 8004528:	bf00      	nop
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004530:	b580      	push	{r7, lr}
 8004532:	b08c      	sub	sp, #48	; 0x30
 8004534:	af04      	add	r7, sp, #16
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	4613      	mov	r3, r2
 800453e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004540:	88fb      	ldrh	r3, [r7, #6]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4618      	mov	r0, r3
 8004546:	f001 fd71 	bl	800602c <pvPortMalloc>
 800454a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00e      	beq.n	8004570 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004552:	2058      	movs	r0, #88	; 0x58
 8004554:	f001 fd6a 	bl	800602c <pvPortMalloc>
 8004558:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
 8004566:	e005      	b.n	8004574 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004568:	6978      	ldr	r0, [r7, #20]
 800456a:	f001 fe3f 	bl	80061ec <vPortFree>
 800456e:	e001      	b.n	8004574 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d013      	beq.n	80045a2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800457a:	88fa      	ldrh	r2, [r7, #6]
 800457c:	2300      	movs	r3, #0
 800457e:	9303      	str	r3, [sp, #12]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	9302      	str	r3, [sp, #8]
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 f80e 	bl	80045b2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004596:	69f8      	ldr	r0, [r7, #28]
 8004598:	f000 f8a2 	bl	80046e0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800459c:	2301      	movs	r3, #1
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	e002      	b.n	80045a8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045a6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80045a8:	69bb      	ldr	r3, [r7, #24]
    }
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b088      	sub	sp, #32
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	461a      	mov	r2, r3
 80045ca:	21a5      	movs	r1, #165	; 0xa5
 80045cc:	f001 ff64 	bl	8006498 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045da:	3b01      	subs	r3, #1
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f023 0307 	bic.w	r3, r3, #7
 80045e8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <prvInitialiseNewTask+0x58>
        __asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	617b      	str	r3, [r7, #20]
    }
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01f      	beq.n	8004650 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004610:	2300      	movs	r3, #0
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	e012      	b.n	800463c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	4413      	add	r3, r2
 800461c:	7819      	ldrb	r1, [r3, #0]
 800461e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	3334      	adds	r3, #52	; 0x34
 8004626:	460a      	mov	r2, r1
 8004628:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	4413      	add	r3, r2
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d006      	beq.n	8004644 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3301      	adds	r3, #1
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b09      	cmp	r3, #9
 8004640:	d9e9      	bls.n	8004616 <prvInitialiseNewTask+0x64>
 8004642:	e000      	b.n	8004646 <prvInitialiseNewTask+0x94>
            {
                break;
 8004644:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800464e:	e003      	b.n	8004658 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	2b04      	cmp	r3, #4
 800465c:	d901      	bls.n	8004662 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800465e:	2304      	movs	r3, #4
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004666:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800466c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	2200      	movs	r2, #0
 8004672:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	3304      	adds	r3, #4
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff f8c1 	bl	8003800 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	3318      	adds	r3, #24
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff f8bc 	bl	8003800 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800468c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	f1c3 0205 	rsb	r2, r3, #5
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800469c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	3350      	adds	r3, #80	; 0x50
 80046a2:	2204      	movs	r2, #4
 80046a4:	2100      	movs	r1, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 fef6 	bl	8006498 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	3354      	adds	r3, #84	; 0x54
 80046b0:	2201      	movs	r2, #1
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 feef 	bl	8006498 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	68f9      	ldr	r1, [r7, #12]
 80046be:	69b8      	ldr	r0, [r7, #24]
 80046c0:	f001 f9e4 	bl	8005a8c <pxPortInitialiseStack>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046d6:	bf00      	nop
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80046e8:	f001 fb7c 	bl	8005de4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80046ec:	4b2c      	ldr	r3, [pc, #176]	; (80047a0 <prvAddNewTaskToReadyList+0xc0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	4a2b      	ldr	r2, [pc, #172]	; (80047a0 <prvAddNewTaskToReadyList+0xc0>)
 80046f4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80046f6:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <prvAddNewTaskToReadyList+0xc4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d109      	bne.n	8004712 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80046fe:	4a29      	ldr	r2, [pc, #164]	; (80047a4 <prvAddNewTaskToReadyList+0xc4>)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004704:	4b26      	ldr	r3, [pc, #152]	; (80047a0 <prvAddNewTaskToReadyList+0xc0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d110      	bne.n	800472e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800470c:	f000 fbfc 	bl	8004f08 <prvInitialiseTaskLists>
 8004710:	e00d      	b.n	800472e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004712:	4b25      	ldr	r3, [pc, #148]	; (80047a8 <prvAddNewTaskToReadyList+0xc8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800471a:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <prvAddNewTaskToReadyList+0xc4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	429a      	cmp	r2, r3
 8004726:	d802      	bhi.n	800472e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004728:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <prvAddNewTaskToReadyList+0xc4>)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800472e:	4b1f      	ldr	r3, [pc, #124]	; (80047ac <prvAddNewTaskToReadyList+0xcc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	4a1d      	ldr	r2, [pc, #116]	; (80047ac <prvAddNewTaskToReadyList+0xcc>)
 8004736:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004738:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <prvAddNewTaskToReadyList+0xcc>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	2201      	movs	r2, #1
 8004746:	409a      	lsls	r2, r3
 8004748:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <prvAddNewTaskToReadyList+0xd0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4313      	orrs	r3, r2
 800474e:	4a18      	ldr	r2, [pc, #96]	; (80047b0 <prvAddNewTaskToReadyList+0xd0>)
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4a15      	ldr	r2, [pc, #84]	; (80047b4 <prvAddNewTaskToReadyList+0xd4>)
 8004760:	441a      	add	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3304      	adds	r3, #4
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f7ff f856 	bl	800381a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800476e:	f001 fb69 	bl	8005e44 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004772:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <prvAddNewTaskToReadyList+0xc8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00e      	beq.n	8004798 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800477a:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <prvAddNewTaskToReadyList+0xc4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	429a      	cmp	r2, r3
 8004786:	d207      	bcs.n	8004798 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <prvAddNewTaskToReadyList+0xd8>)
 800478a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004798:	bf00      	nop
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000340 	.word	0x20000340
 80047a4:	20000268 	.word	0x20000268
 80047a8:	2000034c 	.word	0x2000034c
 80047ac:	2000035c 	.word	0x2000035c
 80047b0:	20000348 	.word	0x20000348
 80047b4:	2000026c 	.word	0x2000026c
 80047b8:	e000ed04 	.word	0xe000ed04

080047bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d017      	beq.n	80047fe <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80047ce:	4b13      	ldr	r3, [pc, #76]	; (800481c <vTaskDelay+0x60>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <vTaskDelay+0x30>
        __asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	60bb      	str	r3, [r7, #8]
    }
 80047e8:	bf00      	nop
 80047ea:	e7fe      	b.n	80047ea <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80047ec:	f000 f86c 	bl	80048c8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047f0:	2100      	movs	r1, #0
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fdd2 	bl	800539c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80047f8:	f000 f874 	bl	80048e4 <xTaskResumeAll>
 80047fc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d107      	bne.n	8004814 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <vTaskDelay+0x64>)
 8004806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	20000368 	.word	0x20000368
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800482a:	4b20      	ldr	r3, [pc, #128]	; (80048ac <vTaskStartScheduler+0x88>)
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	2300      	movs	r3, #0
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	2300      	movs	r3, #0
 8004834:	2282      	movs	r2, #130	; 0x82
 8004836:	491e      	ldr	r1, [pc, #120]	; (80048b0 <vTaskStartScheduler+0x8c>)
 8004838:	481e      	ldr	r0, [pc, #120]	; (80048b4 <vTaskStartScheduler+0x90>)
 800483a:	f7ff fe79 	bl	8004530 <xTaskCreate>
 800483e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d102      	bne.n	800484c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004846:	f000 fe0f 	bl	8005468 <xTimerCreateTimerTask>
 800484a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d116      	bne.n	8004880 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	60bb      	str	r3, [r7, #8]
    }
 8004864:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <vTaskStartScheduler+0x94>)
 8004868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800486c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800486e:	4b13      	ldr	r3, [pc, #76]	; (80048bc <vTaskStartScheduler+0x98>)
 8004870:	2201      	movs	r2, #1
 8004872:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004874:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <vTaskStartScheduler+0x9c>)
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800487a:	f001 f993 	bl	8005ba4 <xPortStartScheduler>
 800487e:	e00e      	b.n	800489e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004886:	d10a      	bne.n	800489e <vTaskStartScheduler+0x7a>
        __asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	607b      	str	r3, [r7, #4]
    }
 800489a:	bf00      	nop
 800489c:	e7fe      	b.n	800489c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <vTaskStartScheduler+0xa0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
}
 80048a2:	bf00      	nop
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000364 	.word	0x20000364
 80048b0:	080079f4 	.word	0x080079f4
 80048b4:	08004ed9 	.word	0x08004ed9
 80048b8:	20000360 	.word	0x20000360
 80048bc:	2000034c 	.word	0x2000034c
 80048c0:	20000344 	.word	0x20000344
 80048c4:	20000008 	.word	0x20000008

080048c8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80048cc:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <vTaskSuspendAll+0x18>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3301      	adds	r3, #1
 80048d2:	4a03      	ldr	r2, [pc, #12]	; (80048e0 <vTaskSuspendAll+0x18>)
 80048d4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80048d6:	bf00      	nop
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	20000368 	.word	0x20000368

080048e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80048f2:	4b41      	ldr	r3, [pc, #260]	; (80049f8 <xTaskResumeAll+0x114>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <xTaskResumeAll+0x2c>
        __asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	603b      	str	r3, [r7, #0]
    }
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004910:	f001 fa68 	bl	8005de4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004914:	4b38      	ldr	r3, [pc, #224]	; (80049f8 <xTaskResumeAll+0x114>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3b01      	subs	r3, #1
 800491a:	4a37      	ldr	r2, [pc, #220]	; (80049f8 <xTaskResumeAll+0x114>)
 800491c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800491e:	4b36      	ldr	r3, [pc, #216]	; (80049f8 <xTaskResumeAll+0x114>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d161      	bne.n	80049ea <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004926:	4b35      	ldr	r3, [pc, #212]	; (80049fc <xTaskResumeAll+0x118>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d05d      	beq.n	80049ea <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800492e:	e02e      	b.n	800498e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004930:	4b33      	ldr	r3, [pc, #204]	; (8004a00 <xTaskResumeAll+0x11c>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3318      	adds	r3, #24
 800493c:	4618      	mov	r0, r3
 800493e:	f7fe ffc9 	bl	80038d4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3304      	adds	r3, #4
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe ffc4 	bl	80038d4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	2201      	movs	r2, #1
 8004952:	409a      	lsls	r2, r3
 8004954:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <xTaskResumeAll+0x120>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4313      	orrs	r3, r2
 800495a:	4a2a      	ldr	r2, [pc, #168]	; (8004a04 <xTaskResumeAll+0x120>)
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4a27      	ldr	r2, [pc, #156]	; (8004a08 <xTaskResumeAll+0x124>)
 800496c:	441a      	add	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3304      	adds	r3, #4
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f7fe ff50 	bl	800381a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497e:	4b23      	ldr	r3, [pc, #140]	; (8004a0c <xTaskResumeAll+0x128>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	429a      	cmp	r2, r3
 8004986:	d302      	bcc.n	800498e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8004988:	4b21      	ldr	r3, [pc, #132]	; (8004a10 <xTaskResumeAll+0x12c>)
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800498e:	4b1c      	ldr	r3, [pc, #112]	; (8004a00 <xTaskResumeAll+0x11c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1cc      	bne.n	8004930 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800499c:	f000 fb32 	bl	8005004 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80049a0:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <xTaskResumeAll+0x130>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d010      	beq.n	80049ce <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80049ac:	f000 f846 	bl	8004a3c <xTaskIncrementTick>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80049b6:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <xTaskResumeAll+0x12c>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3b01      	subs	r3, #1
 80049c0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1f1      	bne.n	80049ac <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80049c8:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <xTaskResumeAll+0x130>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80049ce:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <xTaskResumeAll+0x12c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80049d6:	2301      	movs	r3, #1
 80049d8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80049da:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <xTaskResumeAll+0x134>)
 80049dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80049ea:	f001 fa2b 	bl	8005e44 <vPortExitCritical>

    return xAlreadyYielded;
 80049ee:	68bb      	ldr	r3, [r7, #8]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000368 	.word	0x20000368
 80049fc:	20000340 	.word	0x20000340
 8004a00:	20000300 	.word	0x20000300
 8004a04:	20000348 	.word	0x20000348
 8004a08:	2000026c 	.word	0x2000026c
 8004a0c:	20000268 	.word	0x20000268
 8004a10:	20000354 	.word	0x20000354
 8004a14:	20000350 	.word	0x20000350
 8004a18:	e000ed04 	.word	0xe000ed04

08004a1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <xTaskGetTickCount+0x1c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004a28:	687b      	ldr	r3, [r7, #4]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000344 	.word	0x20000344

08004a3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a46:	4b4e      	ldr	r3, [pc, #312]	; (8004b80 <xTaskIncrementTick+0x144>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f040 808e 	bne.w	8004b6c <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a50:	4b4c      	ldr	r3, [pc, #304]	; (8004b84 <xTaskIncrementTick+0x148>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3301      	adds	r3, #1
 8004a56:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004a58:	4a4a      	ldr	r2, [pc, #296]	; (8004b84 <xTaskIncrementTick+0x148>)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d120      	bne.n	8004aa6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004a64:	4b48      	ldr	r3, [pc, #288]	; (8004b88 <xTaskIncrementTick+0x14c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <xTaskIncrementTick+0x48>
        __asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	603b      	str	r3, [r7, #0]
    }
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <xTaskIncrementTick+0x46>
 8004a84:	4b40      	ldr	r3, [pc, #256]	; (8004b88 <xTaskIncrementTick+0x14c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	4b40      	ldr	r3, [pc, #256]	; (8004b8c <xTaskIncrementTick+0x150>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a3e      	ldr	r2, [pc, #248]	; (8004b88 <xTaskIncrementTick+0x14c>)
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	4a3e      	ldr	r2, [pc, #248]	; (8004b8c <xTaskIncrementTick+0x150>)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	4b3d      	ldr	r3, [pc, #244]	; (8004b90 <xTaskIncrementTick+0x154>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	4a3c      	ldr	r2, [pc, #240]	; (8004b90 <xTaskIncrementTick+0x154>)
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	f000 faaf 	bl	8005004 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004aa6:	4b3b      	ldr	r3, [pc, #236]	; (8004b94 <xTaskIncrementTick+0x158>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d348      	bcc.n	8004b42 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ab0:	4b35      	ldr	r3, [pc, #212]	; (8004b88 <xTaskIncrementTick+0x14c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d104      	bne.n	8004ac4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aba:	4b36      	ldr	r3, [pc, #216]	; (8004b94 <xTaskIncrementTick+0x158>)
 8004abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ac0:	601a      	str	r2, [r3, #0]
                    break;
 8004ac2:	e03e      	b.n	8004b42 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac4:	4b30      	ldr	r3, [pc, #192]	; (8004b88 <xTaskIncrementTick+0x14c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d203      	bcs.n	8004ae4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004adc:	4a2d      	ldr	r2, [pc, #180]	; (8004b94 <xTaskIncrementTick+0x158>)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ae2:	e02e      	b.n	8004b42 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fe fef3 	bl	80038d4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d004      	beq.n	8004b00 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	3318      	adds	r3, #24
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fe feea 	bl	80038d4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	2201      	movs	r2, #1
 8004b06:	409a      	lsls	r2, r3
 8004b08:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <xTaskIncrementTick+0x15c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <xTaskIncrementTick+0x15c>)
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4a1f      	ldr	r2, [pc, #124]	; (8004b9c <xTaskIncrementTick+0x160>)
 8004b20:	441a      	add	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	3304      	adds	r3, #4
 8004b26:	4619      	mov	r1, r3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	f7fe fe76 	bl	800381a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b32:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <xTaskIncrementTick+0x164>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d3b9      	bcc.n	8004ab0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b40:	e7b6      	b.n	8004ab0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b42:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <xTaskIncrementTick+0x164>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4914      	ldr	r1, [pc, #80]	; (8004b9c <xTaskIncrementTick+0x160>)
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d901      	bls.n	8004b5e <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004b5e:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <xTaskIncrementTick+0x168>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8004b66:	2301      	movs	r3, #1
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	e004      	b.n	8004b76 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004b6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <xTaskIncrementTick+0x16c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3301      	adds	r3, #1
 8004b72:	4a0d      	ldr	r2, [pc, #52]	; (8004ba8 <xTaskIncrementTick+0x16c>)
 8004b74:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004b76:	697b      	ldr	r3, [r7, #20]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000368 	.word	0x20000368
 8004b84:	20000344 	.word	0x20000344
 8004b88:	200002f8 	.word	0x200002f8
 8004b8c:	200002fc 	.word	0x200002fc
 8004b90:	20000358 	.word	0x20000358
 8004b94:	20000360 	.word	0x20000360
 8004b98:	20000348 	.word	0x20000348
 8004b9c:	2000026c 	.word	0x2000026c
 8004ba0:	20000268 	.word	0x20000268
 8004ba4:	20000354 	.word	0x20000354
 8004ba8:	20000350 	.word	0x20000350

08004bac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bb2:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <vTaskSwitchContext+0xa4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004bba:	4b26      	ldr	r3, [pc, #152]	; (8004c54 <vTaskSwitchContext+0xa8>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004bc0:	e03f      	b.n	8004c42 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004bc2:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <vTaskSwitchContext+0xa8>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc8:	4b23      	ldr	r3, [pc, #140]	; (8004c58 <vTaskSwitchContext+0xac>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	fab3 f383 	clz	r3, r3
 8004bd4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004bd6:	7afb      	ldrb	r3, [r7, #11]
 8004bd8:	f1c3 031f 	rsb	r3, r3, #31
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	491f      	ldr	r1, [pc, #124]	; (8004c5c <vTaskSwitchContext+0xb0>)
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	440b      	add	r3, r1
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	607b      	str	r3, [r7, #4]
    }
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <vTaskSwitchContext+0x5a>
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4a12      	ldr	r2, [pc, #72]	; (8004c5c <vTaskSwitchContext+0xb0>)
 8004c14:	4413      	add	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	605a      	str	r2, [r3, #4]
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d104      	bne.n	8004c38 <vTaskSwitchContext+0x8c>
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	605a      	str	r2, [r3, #4]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	4a08      	ldr	r2, [pc, #32]	; (8004c60 <vTaskSwitchContext+0xb4>)
 8004c40:	6013      	str	r3, [r2, #0]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	20000368 	.word	0x20000368
 8004c54:	20000354 	.word	0x20000354
 8004c58:	20000348 	.word	0x20000348
 8004c5c:	2000026c 	.word	0x2000026c
 8004c60:	20000268 	.word	0x20000268

08004c64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	60fb      	str	r3, [r7, #12]
    }
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c8a:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <vTaskPlaceOnEventList+0x44>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3318      	adds	r3, #24
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fe fde5 	bl	8003862 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c98:	2101      	movs	r1, #1
 8004c9a:	6838      	ldr	r0, [r7, #0]
 8004c9c:	f000 fb7e 	bl	800539c <prvAddCurrentTaskToDelayedList>
}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20000268 	.word	0x20000268

08004cac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	617b      	str	r3, [r7, #20]
    }
 8004cd0:	bf00      	nop
 8004cd2:	e7fe      	b.n	8004cd2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <vTaskPlaceOnEventListRestricted+0x54>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3318      	adds	r3, #24
 8004cda:	4619      	mov	r1, r3
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f7fe fd9c 	bl	800381a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cec:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	68b8      	ldr	r0, [r7, #8]
 8004cf2:	f000 fb53 	bl	800539c <prvAddCurrentTaskToDelayedList>
    }
 8004cf6:	bf00      	nop
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000268 	.word	0x20000268

08004d04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10a      	bne.n	8004d30 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	60fb      	str	r3, [r7, #12]
    }
 8004d2c:	bf00      	nop
 8004d2e:	e7fe      	b.n	8004d2e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	3318      	adds	r3, #24
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fe fdcd 	bl	80038d4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <xTaskRemoveFromEventList+0xac>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d11c      	bne.n	8004d7c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fdc4 	bl	80038d4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	2201      	movs	r2, #1
 8004d52:	409a      	lsls	r2, r3
 8004d54:	4b17      	ldr	r3, [pc, #92]	; (8004db4 <xTaskRemoveFromEventList+0xb0>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	4a16      	ldr	r2, [pc, #88]	; (8004db4 <xTaskRemoveFromEventList+0xb0>)
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4a13      	ldr	r2, [pc, #76]	; (8004db8 <xTaskRemoveFromEventList+0xb4>)
 8004d6c:	441a      	add	r2, r3
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	3304      	adds	r3, #4
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f7fe fd50 	bl	800381a <vListInsertEnd>
 8004d7a:	e005      	b.n	8004d88 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	3318      	adds	r3, #24
 8004d80:	4619      	mov	r1, r3
 8004d82:	480e      	ldr	r0, [pc, #56]	; (8004dbc <xTaskRemoveFromEventList+0xb8>)
 8004d84:	f7fe fd49 	bl	800381a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8c:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <xTaskRemoveFromEventList+0xbc>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d905      	bls.n	8004da2 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004d96:	2301      	movs	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004d9a:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <xTaskRemoveFromEventList+0xc0>)
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e001      	b.n	8004da6 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004da6:	697b      	ldr	r3, [r7, #20]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000368 	.word	0x20000368
 8004db4:	20000348 	.word	0x20000348
 8004db8:	2000026c 	.word	0x2000026c
 8004dbc:	20000300 	.word	0x20000300
 8004dc0:	20000268 	.word	0x20000268
 8004dc4:	20000354 	.word	0x20000354

08004dc8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <vTaskInternalSetTimeOutState+0x24>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <vTaskInternalSetTimeOutState+0x28>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	605a      	str	r2, [r3, #4]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	20000358 	.word	0x20000358
 8004df0:	20000344 	.word	0x20000344

08004df4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	613b      	str	r3, [r7, #16]
    }
 8004e16:	bf00      	nop
 8004e18:	e7fe      	b.n	8004e18 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	60fb      	str	r3, [r7, #12]
    }
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004e36:	f000 ffd5 	bl	8005de4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	; (8004eb8 <xTaskCheckForTimeOut+0xc4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e52:	d102      	bne.n	8004e5a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004e54:	2300      	movs	r3, #0
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	e026      	b.n	8004ea8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <xTaskCheckForTimeOut+0xc8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d00a      	beq.n	8004e7c <xTaskCheckForTimeOut+0x88>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d305      	bcc.n	8004e7c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004e70:	2301      	movs	r3, #1
 8004e72:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e015      	b.n	8004ea8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d20b      	bcs.n	8004e9e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	1ad2      	subs	r2, r2, r3
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff ff98 	bl	8004dc8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61fb      	str	r3, [r7, #28]
 8004e9c:	e004      	b.n	8004ea8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004ea8:	f000 ffcc 	bl	8005e44 <vPortExitCritical>

    return xReturn;
 8004eac:	69fb      	ldr	r3, [r7, #28]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000344 	.word	0x20000344
 8004ebc:	20000358 	.word	0x20000358

08004ec0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004ec4:	4b03      	ldr	r3, [pc, #12]	; (8004ed4 <vTaskMissedYield+0x14>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
}
 8004eca:	bf00      	nop
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	20000354 	.word	0x20000354

08004ed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004ee0:	f000 f852 	bl	8004f88 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <prvIdleTask+0x28>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d9f9      	bls.n	8004ee0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <prvIdleTask+0x2c>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004efc:	e7f0      	b.n	8004ee0 <prvIdleTask+0x8>
 8004efe:	bf00      	nop
 8004f00:	2000026c 	.word	0x2000026c
 8004f04:	e000ed04 	.word	0xe000ed04

08004f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f0e:	2300      	movs	r3, #0
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	e00c      	b.n	8004f2e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4a12      	ldr	r2, [pc, #72]	; (8004f68 <prvInitialiseTaskLists+0x60>)
 8004f20:	4413      	add	r3, r2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fe fc4c 	bl	80037c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	607b      	str	r3, [r7, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d9ef      	bls.n	8004f14 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004f34:	480d      	ldr	r0, [pc, #52]	; (8004f6c <prvInitialiseTaskLists+0x64>)
 8004f36:	f7fe fc43 	bl	80037c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004f3a:	480d      	ldr	r0, [pc, #52]	; (8004f70 <prvInitialiseTaskLists+0x68>)
 8004f3c:	f7fe fc40 	bl	80037c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004f40:	480c      	ldr	r0, [pc, #48]	; (8004f74 <prvInitialiseTaskLists+0x6c>)
 8004f42:	f7fe fc3d 	bl	80037c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004f46:	480c      	ldr	r0, [pc, #48]	; (8004f78 <prvInitialiseTaskLists+0x70>)
 8004f48:	f7fe fc3a 	bl	80037c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004f4c:	480b      	ldr	r0, [pc, #44]	; (8004f7c <prvInitialiseTaskLists+0x74>)
 8004f4e:	f7fe fc37 	bl	80037c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004f52:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <prvInitialiseTaskLists+0x78>)
 8004f54:	4a05      	ldr	r2, [pc, #20]	; (8004f6c <prvInitialiseTaskLists+0x64>)
 8004f56:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <prvInitialiseTaskLists+0x7c>)
 8004f5a:	4a05      	ldr	r2, [pc, #20]	; (8004f70 <prvInitialiseTaskLists+0x68>)
 8004f5c:	601a      	str	r2, [r3, #0]
}
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	2000026c 	.word	0x2000026c
 8004f6c:	200002d0 	.word	0x200002d0
 8004f70:	200002e4 	.word	0x200002e4
 8004f74:	20000300 	.word	0x20000300
 8004f78:	20000314 	.word	0x20000314
 8004f7c:	2000032c 	.word	0x2000032c
 8004f80:	200002f8 	.word	0x200002f8
 8004f84:	200002fc 	.word	0x200002fc

08004f88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f8e:	e019      	b.n	8004fc4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004f90:	f000 ff28 	bl	8005de4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f94:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <prvCheckTasksWaitingTermination+0x50>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fe fc97 	bl	80038d4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	; (8004fdc <prvCheckTasksWaitingTermination+0x54>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	4a0b      	ldr	r2, [pc, #44]	; (8004fdc <prvCheckTasksWaitingTermination+0x54>)
 8004fae:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <prvCheckTasksWaitingTermination+0x58>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	4a0a      	ldr	r2, [pc, #40]	; (8004fe0 <prvCheckTasksWaitingTermination+0x58>)
 8004fb8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004fba:	f000 ff43 	bl	8005e44 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f810 	bl	8004fe4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fc4:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <prvCheckTasksWaitingTermination+0x58>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e1      	bne.n	8004f90 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004fcc:	bf00      	nop
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000314 	.word	0x20000314
 8004fdc:	20000340 	.word	0x20000340
 8004fe0:	20000328 	.word	0x20000328

08004fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f001 f8fb 	bl	80061ec <vPortFree>
                vPortFree( pxTCB );
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f001 f8f8 	bl	80061ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <prvResetNextTaskUnblockTime+0x30>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d104      	bne.n	800501c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005012:	4b09      	ldr	r3, [pc, #36]	; (8005038 <prvResetNextTaskUnblockTime+0x34>)
 8005014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005018:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800501a:	e005      	b.n	8005028 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800501c:	4b05      	ldr	r3, [pc, #20]	; (8005034 <prvResetNextTaskUnblockTime+0x30>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a04      	ldr	r2, [pc, #16]	; (8005038 <prvResetNextTaskUnblockTime+0x34>)
 8005026:	6013      	str	r3, [r2, #0]
}
 8005028:	bf00      	nop
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	200002f8 	.word	0x200002f8
 8005038:	20000360 	.word	0x20000360

0800503c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <xTaskGetSchedulerState+0x34>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d102      	bne.n	8005050 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800504a:	2301      	movs	r3, #1
 800504c:	607b      	str	r3, [r7, #4]
 800504e:	e008      	b.n	8005062 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005050:	4b08      	ldr	r3, [pc, #32]	; (8005074 <xTaskGetSchedulerState+0x38>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d102      	bne.n	800505e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005058:	2302      	movs	r3, #2
 800505a:	607b      	str	r3, [r7, #4]
 800505c:	e001      	b.n	8005062 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800505e:	2300      	movs	r3, #0
 8005060:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005062:	687b      	ldr	r3, [r7, #4]
    }
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	2000034c 	.word	0x2000034c
 8005074:	20000368 	.word	0x20000368

08005078 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d05e      	beq.n	800514c <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005092:	4b31      	ldr	r3, [pc, #196]	; (8005158 <xTaskPriorityInherit+0xe0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	429a      	cmp	r2, r3
 800509a:	d24e      	bcs.n	800513a <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	db06      	blt.n	80050b2 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050a4:	4b2c      	ldr	r3, [pc, #176]	; (8005158 <xTaskPriorityInherit+0xe0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	f1c3 0205 	rsb	r2, r3, #5
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6959      	ldr	r1, [r3, #20]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4a26      	ldr	r2, [pc, #152]	; (800515c <xTaskPriorityInherit+0xe4>)
 80050c4:	4413      	add	r3, r2
 80050c6:	4299      	cmp	r1, r3
 80050c8:	d12f      	bne.n	800512a <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe fc00 	bl	80038d4 <uxListRemove>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10a      	bne.n	80050f0 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	2201      	movs	r2, #1
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	43da      	mvns	r2, r3
 80050e6:	4b1e      	ldr	r3, [pc, #120]	; (8005160 <xTaskPriorityInherit+0xe8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4013      	ands	r3, r2
 80050ec:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <xTaskPriorityInherit+0xe8>)
 80050ee:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <xTaskPriorityInherit+0xe0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	2201      	movs	r2, #1
 8005100:	409a      	lsls	r2, r3
 8005102:	4b17      	ldr	r3, [pc, #92]	; (8005160 <xTaskPriorityInherit+0xe8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4313      	orrs	r3, r2
 8005108:	4a15      	ldr	r2, [pc, #84]	; (8005160 <xTaskPriorityInherit+0xe8>)
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4a10      	ldr	r2, [pc, #64]	; (800515c <xTaskPriorityInherit+0xe4>)
 800511a:	441a      	add	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	3304      	adds	r3, #4
 8005120:	4619      	mov	r1, r3
 8005122:	4610      	mov	r0, r2
 8005124:	f7fe fb79 	bl	800381a <vListInsertEnd>
 8005128:	e004      	b.n	8005134 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800512a:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <xTaskPriorityInherit+0xe0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8005134:	2301      	movs	r3, #1
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	e008      	b.n	800514c <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800513e:	4b06      	ldr	r3, [pc, #24]	; (8005158 <xTaskPriorityInherit+0xe0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	429a      	cmp	r2, r3
 8005146:	d201      	bcs.n	800514c <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8005148:	2301      	movs	r3, #1
 800514a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800514c:	68fb      	ldr	r3, [r7, #12]
    }
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000268 	.word	0x20000268
 800515c:	2000026c 	.word	0x2000026c
 8005160:	20000348 	.word	0x20000348

08005164 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d063      	beq.n	8005242 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800517a:	4b34      	ldr	r3, [pc, #208]	; (800524c <xTaskPriorityDisinherit+0xe8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	429a      	cmp	r2, r3
 8005182:	d00a      	beq.n	800519a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	60fb      	str	r3, [r7, #12]
    }
 8005196:	bf00      	nop
 8005198:	e7fe      	b.n	8005198 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	60bb      	str	r3, [r7, #8]
    }
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051bc:	1e5a      	subs	r2, r3, #1
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d039      	beq.n	8005242 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d135      	bne.n	8005242 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	3304      	adds	r3, #4
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe fb7a 	bl	80038d4 <uxListRemove>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	2201      	movs	r2, #1
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	43da      	mvns	r2, r3
 80051f2:	4b17      	ldr	r3, [pc, #92]	; (8005250 <xTaskPriorityDisinherit+0xec>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4013      	ands	r3, r2
 80051f8:	4a15      	ldr	r2, [pc, #84]	; (8005250 <xTaskPriorityDisinherit+0xec>)
 80051fa:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	f1c3 0205 	rsb	r2, r3, #5
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	2201      	movs	r2, #1
 8005216:	409a      	lsls	r2, r3
 8005218:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <xTaskPriorityDisinherit+0xec>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4313      	orrs	r3, r2
 800521e:	4a0c      	ldr	r2, [pc, #48]	; (8005250 <xTaskPriorityDisinherit+0xec>)
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4a09      	ldr	r2, [pc, #36]	; (8005254 <xTaskPriorityDisinherit+0xf0>)
 8005230:	441a      	add	r2, r3
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7fe faee 	bl	800381a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800523e:	2301      	movs	r3, #1
 8005240:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005242:	697b      	ldr	r3, [r7, #20]
    }
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20000268 	.word	0x20000268
 8005250:	20000348 	.word	0x20000348
 8005254:	2000026c 	.word	0x2000026c

08005258 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005266:	2301      	movs	r3, #1
 8005268:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d077      	beq.n	8005360 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	60fb      	str	r3, [r7, #12]
    }
 800528a:	bf00      	nop
 800528c:	e7fe      	b.n	800528c <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d902      	bls.n	800529e <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	e002      	b.n	80052a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a2:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d058      	beq.n	8005360 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d153      	bne.n	8005360 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80052b8:	4b2b      	ldr	r3, [pc, #172]	; (8005368 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d10a      	bne.n	80052d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	60bb      	str	r3, [r7, #8]
    }
 80052d4:	bf00      	nop
 80052d6:	e7fe      	b.n	80052d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	db04      	blt.n	80052f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f1c3 0205 	rsb	r2, r3, #5
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	6959      	ldr	r1, [r3, #20]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4a19      	ldr	r2, [pc, #100]	; (800536c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005306:	4413      	add	r3, r2
 8005308:	4299      	cmp	r1, r3
 800530a:	d129      	bne.n	8005360 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	3304      	adds	r3, #4
 8005310:	4618      	mov	r0, r3
 8005312:	f7fe fadf 	bl	80038d4 <uxListRemove>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	2201      	movs	r2, #1
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	43da      	mvns	r2, r3
 8005328:	4b11      	ldr	r3, [pc, #68]	; (8005370 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4013      	ands	r3, r2
 800532e:	4a10      	ldr	r2, [pc, #64]	; (8005370 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005330:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	2201      	movs	r2, #1
 8005338:	409a      	lsls	r2, r3
 800533a:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4313      	orrs	r3, r2
 8005340:	4a0b      	ldr	r2, [pc, #44]	; (8005370 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4a06      	ldr	r2, [pc, #24]	; (800536c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005352:	441a      	add	r2, r3
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	3304      	adds	r3, #4
 8005358:	4619      	mov	r1, r3
 800535a:	4610      	mov	r0, r2
 800535c:	f7fe fa5d 	bl	800381a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005360:	bf00      	nop
 8005362:	3720      	adds	r7, #32
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	20000268 	.word	0x20000268
 800536c:	2000026c 	.word	0x2000026c
 8005370:	20000348 	.word	0x20000348

08005374 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8005378:	4b07      	ldr	r3, [pc, #28]	; (8005398 <pvTaskIncrementMutexHeldCount+0x24>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d004      	beq.n	800538a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005380:	4b05      	ldr	r3, [pc, #20]	; (8005398 <pvTaskIncrementMutexHeldCount+0x24>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005386:	3201      	adds	r2, #1
 8005388:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800538a:	4b03      	ldr	r3, [pc, #12]	; (8005398 <pvTaskIncrementMutexHeldCount+0x24>)
 800538c:	681b      	ldr	r3, [r3, #0]
    }
 800538e:	4618      	mov	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	20000268 	.word	0x20000268

0800539c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80053a6:	4b29      	ldr	r3, [pc, #164]	; (800544c <prvAddCurrentTaskToDelayedList+0xb0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ac:	4b28      	ldr	r3, [pc, #160]	; (8005450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3304      	adds	r3, #4
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe fa8e 	bl	80038d4 <uxListRemove>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80053be:	4b24      	ldr	r3, [pc, #144]	; (8005450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	2201      	movs	r2, #1
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	43da      	mvns	r2, r3
 80053cc:	4b21      	ldr	r3, [pc, #132]	; (8005454 <prvAddCurrentTaskToDelayedList+0xb8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4013      	ands	r3, r2
 80053d2:	4a20      	ldr	r2, [pc, #128]	; (8005454 <prvAddCurrentTaskToDelayedList+0xb8>)
 80053d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053dc:	d10a      	bne.n	80053f4 <prvAddCurrentTaskToDelayedList+0x58>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053e4:	4b1a      	ldr	r3, [pc, #104]	; (8005450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4619      	mov	r1, r3
 80053ec:	481a      	ldr	r0, [pc, #104]	; (8005458 <prvAddCurrentTaskToDelayedList+0xbc>)
 80053ee:	f7fe fa14 	bl	800381a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80053f2:	e026      	b.n	8005442 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4413      	add	r3, r2
 80053fa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053fc:	4b14      	ldr	r3, [pc, #80]	; (8005450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	429a      	cmp	r2, r3
 800540a:	d209      	bcs.n	8005420 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800540c:	4b13      	ldr	r3, [pc, #76]	; (800545c <prvAddCurrentTaskToDelayedList+0xc0>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3304      	adds	r3, #4
 8005416:	4619      	mov	r1, r3
 8005418:	4610      	mov	r0, r2
 800541a:	f7fe fa22 	bl	8003862 <vListInsert>
}
 800541e:	e010      	b.n	8005442 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005420:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	4b0a      	ldr	r3, [pc, #40]	; (8005450 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3304      	adds	r3, #4
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f7fe fa18 	bl	8003862 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	429a      	cmp	r2, r3
 800543a:	d202      	bcs.n	8005442 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800543c:	4a09      	ldr	r2, [pc, #36]	; (8005464 <prvAddCurrentTaskToDelayedList+0xc8>)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6013      	str	r3, [r2, #0]
}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000344 	.word	0x20000344
 8005450:	20000268 	.word	0x20000268
 8005454:	20000348 	.word	0x20000348
 8005458:	2000032c 	.word	0x2000032c
 800545c:	200002fc 	.word	0x200002fc
 8005460:	200002f8 	.word	0x200002f8
 8005464:	20000360 	.word	0x20000360

08005468 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800546e:	2300      	movs	r3, #0
 8005470:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005472:	f000 fad5 	bl	8005a20 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005476:	4b11      	ldr	r3, [pc, #68]	; (80054bc <xTimerCreateTimerTask+0x54>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800547e:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <xTimerCreateTimerTask+0x58>)
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	2302      	movs	r3, #2
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2300      	movs	r3, #0
 8005488:	f44f 7282 	mov.w	r2, #260	; 0x104
 800548c:	490d      	ldr	r1, [pc, #52]	; (80054c4 <xTimerCreateTimerTask+0x5c>)
 800548e:	480e      	ldr	r0, [pc, #56]	; (80054c8 <xTimerCreateTimerTask+0x60>)
 8005490:	f7ff f84e 	bl	8004530 <xTaskCreate>
 8005494:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	603b      	str	r3, [r7, #0]
    }
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80054b2:	687b      	ldr	r3, [r7, #4]
    }
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	2000039c 	.word	0x2000039c
 80054c0:	200003a0 	.word	0x200003a0
 80054c4:	080079fc 	.word	0x080079fc
 80054c8:	08005601 	.word	0x08005601

080054cc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08a      	sub	sp, #40	; 0x28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80054da:	2300      	movs	r3, #0
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <xTimerGenericCommand+0x2e>
        __asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	623b      	str	r3, [r7, #32]
    }
 80054f6:	bf00      	nop
 80054f8:	e7fe      	b.n	80054f8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80054fa:	4b1a      	ldr	r3, [pc, #104]	; (8005564 <xTimerGenericCommand+0x98>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d02a      	beq.n	8005558 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b05      	cmp	r3, #5
 8005512:	dc18      	bgt.n	8005546 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005514:	f7ff fd92 	bl	800503c <xTaskGetSchedulerState>
 8005518:	4603      	mov	r3, r0
 800551a:	2b02      	cmp	r3, #2
 800551c:	d109      	bne.n	8005532 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800551e:	4b11      	ldr	r3, [pc, #68]	; (8005564 <xTimerGenericCommand+0x98>)
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	f107 0114 	add.w	r1, r7, #20
 8005526:	2300      	movs	r3, #0
 8005528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552a:	f7fe fae7 	bl	8003afc <xQueueGenericSend>
 800552e:	6278      	str	r0, [r7, #36]	; 0x24
 8005530:	e012      	b.n	8005558 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005532:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <xTimerGenericCommand+0x98>)
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f107 0114 	add.w	r1, r7, #20
 800553a:	2300      	movs	r3, #0
 800553c:	2200      	movs	r2, #0
 800553e:	f7fe fadd 	bl	8003afc <xQueueGenericSend>
 8005542:	6278      	str	r0, [r7, #36]	; 0x24
 8005544:	e008      	b.n	8005558 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005546:	4b07      	ldr	r3, [pc, #28]	; (8005564 <xTimerGenericCommand+0x98>)
 8005548:	6818      	ldr	r0, [r3, #0]
 800554a:	f107 0114 	add.w	r1, r7, #20
 800554e:	2300      	movs	r3, #0
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	f7fe fbd1 	bl	8003cf8 <xQueueGenericSendFromISR>
 8005556:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800555a:	4618      	mov	r0, r3
 800555c:	3728      	adds	r7, #40	; 0x28
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	2000039c 	.word	0x2000039c

08005568 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af02      	add	r7, sp, #8
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005572:	4b22      	ldr	r3, [pc, #136]	; (80055fc <prvProcessExpiredTimer+0x94>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	3304      	adds	r3, #4
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe f9a7 	bl	80038d4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	d022      	beq.n	80055da <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	18d1      	adds	r1, r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	6978      	ldr	r0, [r7, #20]
 80055a2:	f000 f8d1 	bl	8005748 <prvInsertTimerInActiveList>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01f      	beq.n	80055ec <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055ac:	2300      	movs	r3, #0
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	2300      	movs	r3, #0
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	2100      	movs	r1, #0
 80055b6:	6978      	ldr	r0, [r7, #20]
 80055b8:	f7ff ff88 	bl	80054cc <xTimerGenericCommand>
 80055bc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d113      	bne.n	80055ec <prvProcessExpiredTimer+0x84>
        __asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	60fb      	str	r3, [r7, #12]
    }
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055e0:	f023 0301 	bic.w	r3, r3, #1
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	6978      	ldr	r0, [r7, #20]
 80055f2:	4798      	blx	r3
    }
 80055f4:	bf00      	nop
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20000394 	.word	0x20000394

08005600 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005608:	f107 0308 	add.w	r3, r7, #8
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f857 	bl	80056c0 <prvGetNextExpireTime>
 8005612:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4619      	mov	r1, r3
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f803 	bl	8005624 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800561e:	f000 f8d5 	bl	80057cc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005622:	e7f1      	b.n	8005608 <prvTimerTask+0x8>

08005624 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800562e:	f7ff f94b 	bl	80048c8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005632:	f107 0308 	add.w	r3, r7, #8
 8005636:	4618      	mov	r0, r3
 8005638:	f000 f866 	bl	8005708 <prvSampleTimeNow>
 800563c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d130      	bne.n	80056a6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10a      	bne.n	8005660 <prvProcessTimerOrBlockTask+0x3c>
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	429a      	cmp	r2, r3
 8005650:	d806      	bhi.n	8005660 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005652:	f7ff f947 	bl	80048e4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff ff85 	bl	8005568 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800565e:	e024      	b.n	80056aa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d008      	beq.n	8005678 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005666:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <prvProcessTimerOrBlockTask+0x90>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <prvProcessTimerOrBlockTask+0x50>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <prvProcessTimerOrBlockTask+0x52>
 8005674:	2300      	movs	r3, #0
 8005676:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005678:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <prvProcessTimerOrBlockTask+0x94>)
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	4619      	mov	r1, r3
 8005686:	f7fe ff1f 	bl	80044c8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800568a:	f7ff f92b 	bl	80048e4 <xTaskResumeAll>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005694:	4b09      	ldr	r3, [pc, #36]	; (80056bc <prvProcessTimerOrBlockTask+0x98>)
 8005696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	f3bf 8f6f 	isb	sy
    }
 80056a4:	e001      	b.n	80056aa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80056a6:	f7ff f91d 	bl	80048e4 <xTaskResumeAll>
    }
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000398 	.word	0x20000398
 80056b8:	2000039c 	.word	0x2000039c
 80056bc:	e000ed04 	.word	0xe000ed04

080056c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80056c8:	4b0e      	ldr	r3, [pc, #56]	; (8005704 <prvGetNextExpireTime+0x44>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <prvGetNextExpireTime+0x16>
 80056d2:	2201      	movs	r2, #1
 80056d4:	e000      	b.n	80056d8 <prvGetNextExpireTime+0x18>
 80056d6:	2200      	movs	r2, #0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056e4:	4b07      	ldr	r3, [pc, #28]	; (8005704 <prvGetNextExpireTime+0x44>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	e001      	b.n	80056f4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80056f4:	68fb      	ldr	r3, [r7, #12]
    }
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	20000394 	.word	0x20000394

08005708 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005710:	f7ff f984 	bl	8004a1c <xTaskGetTickCount>
 8005714:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005716:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <prvSampleTimeNow+0x3c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	429a      	cmp	r2, r3
 800571e:	d205      	bcs.n	800572c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005720:	f000 f91a 	bl	8005958 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e002      	b.n	8005732 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005732:	4a04      	ldr	r2, [pc, #16]	; (8005744 <prvSampleTimeNow+0x3c>)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005738:	68fb      	ldr	r3, [r7, #12]
    }
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	200003a4 	.word	0x200003a4

08005748 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	429a      	cmp	r2, r3
 800576c:	d812      	bhi.n	8005794 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	1ad2      	subs	r2, r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	429a      	cmp	r2, r3
 800577a:	d302      	bcc.n	8005782 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800577c:	2301      	movs	r3, #1
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	e01b      	b.n	80057ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005782:	4b10      	ldr	r3, [pc, #64]	; (80057c4 <prvInsertTimerInActiveList+0x7c>)
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3304      	adds	r3, #4
 800578a:	4619      	mov	r1, r3
 800578c:	4610      	mov	r0, r2
 800578e:	f7fe f868 	bl	8003862 <vListInsert>
 8005792:	e012      	b.n	80057ba <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d206      	bcs.n	80057aa <prvInsertTimerInActiveList+0x62>
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d302      	bcc.n	80057aa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80057a4:	2301      	movs	r3, #1
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	e007      	b.n	80057ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057aa:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <prvInsertTimerInActiveList+0x80>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3304      	adds	r3, #4
 80057b2:	4619      	mov	r1, r3
 80057b4:	4610      	mov	r0, r2
 80057b6:	f7fe f854 	bl	8003862 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80057ba:	697b      	ldr	r3, [r7, #20]
    }
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20000398 	.word	0x20000398
 80057c8:	20000394 	.word	0x20000394

080057cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08c      	sub	sp, #48	; 0x30
 80057d0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057d2:	e0ae      	b.n	8005932 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f2c0 80aa 	blt.w	8005930 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d004      	beq.n	80057f2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	3304      	adds	r3, #4
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fe f871 	bl	80038d4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057f2:	1d3b      	adds	r3, r7, #4
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff ff87 	bl	8005708 <prvSampleTimeNow>
 80057fa:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b09      	cmp	r3, #9
 8005800:	f200 8097 	bhi.w	8005932 <prvProcessReceivedCommands+0x166>
 8005804:	a201      	add	r2, pc, #4	; (adr r2, 800580c <prvProcessReceivedCommands+0x40>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	08005835 	.word	0x08005835
 8005810:	08005835 	.word	0x08005835
 8005814:	08005835 	.word	0x08005835
 8005818:	080058a9 	.word	0x080058a9
 800581c:	080058bd 	.word	0x080058bd
 8005820:	08005907 	.word	0x08005907
 8005824:	08005835 	.word	0x08005835
 8005828:	08005835 	.word	0x08005835
 800582c:	080058a9 	.word	0x080058a9
 8005830:	080058bd 	.word	0x080058bd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	b2da      	uxtb	r2, r3
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	18d1      	adds	r1, r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a3a      	ldr	r2, [r7, #32]
 8005852:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005854:	f7ff ff78 	bl	8005748 <prvInsertTimerInActiveList>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d069      	beq.n	8005932 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005864:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d05e      	beq.n	8005932 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	441a      	add	r2, r3
 800587c:	2300      	movs	r3, #0
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	2300      	movs	r3, #0
 8005882:	2100      	movs	r1, #0
 8005884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005886:	f7ff fe21 	bl	80054cc <xTimerGenericCommand>
 800588a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d14f      	bne.n	8005932 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	61bb      	str	r3, [r7, #24]
    }
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058ae:	f023 0301 	bic.w	r3, r3, #1
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80058ba:	e03a      	b.n	8005932 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	617b      	str	r3, [r7, #20]
    }
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	18d1      	adds	r1, r2, r3
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	6a3a      	ldr	r2, [r7, #32]
 80058fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005900:	f7ff ff22 	bl	8005748 <prvInsertTimerInActiveList>
                        break;
 8005904:	e015      	b.n	8005932 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d103      	bne.n	800591c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005916:	f000 fc69 	bl	80061ec <vPortFree>
 800591a:	e00a      	b.n	8005932 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005922:	f023 0301 	bic.w	r3, r3, #1
 8005926:	b2da      	uxtb	r2, r3
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800592e:	e000      	b.n	8005932 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005930:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005932:	4b08      	ldr	r3, [pc, #32]	; (8005954 <prvProcessReceivedCommands+0x188>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f107 0108 	add.w	r1, r7, #8
 800593a:	2200      	movs	r2, #0
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe fa85 	bl	8003e4c <xQueueReceive>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	f47f af45 	bne.w	80057d4 <prvProcessReceivedCommands+0x8>
        }
    }
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	3728      	adds	r7, #40	; 0x28
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	2000039c 	.word	0x2000039c

08005958 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800595e:	e048      	b.n	80059f2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005960:	4b2d      	ldr	r3, [pc, #180]	; (8005a18 <prvSwitchTimerLists+0xc0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800596a:	4b2b      	ldr	r3, [pc, #172]	; (8005a18 <prvSwitchTimerLists+0xc0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3304      	adds	r3, #4
 8005978:	4618      	mov	r0, r3
 800597a:	f7fd ffab 	bl	80038d4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d02e      	beq.n	80059f2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4413      	add	r3, r2
 800599c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d90e      	bls.n	80059c4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059b2:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <prvSwitchTimerLists+0xc0>)
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3304      	adds	r3, #4
 80059ba:	4619      	mov	r1, r3
 80059bc:	4610      	mov	r0, r2
 80059be:	f7fd ff50 	bl	8003862 <vListInsert>
 80059c2:	e016      	b.n	80059f2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059c4:	2300      	movs	r3, #0
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	2300      	movs	r3, #0
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	2100      	movs	r1, #0
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f7ff fd7c 	bl	80054cc <xTimerGenericCommand>
 80059d4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	603b      	str	r3, [r7, #0]
    }
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059f2:	4b09      	ldr	r3, [pc, #36]	; (8005a18 <prvSwitchTimerLists+0xc0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1b1      	bne.n	8005960 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <prvSwitchTimerLists+0xc0>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005a02:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <prvSwitchTimerLists+0xc4>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <prvSwitchTimerLists+0xc0>)
 8005a08:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005a0a:	4a04      	ldr	r2, [pc, #16]	; (8005a1c <prvSwitchTimerLists+0xc4>)
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	6013      	str	r3, [r2, #0]
    }
 8005a10:	bf00      	nop
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000394 	.word	0x20000394
 8005a1c:	20000398 	.word	0x20000398

08005a20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005a24:	f000 f9de 	bl	8005de4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005a28:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <prvCheckForValidListAndQueue+0x54>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d11d      	bne.n	8005a6c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005a30:	4811      	ldr	r0, [pc, #68]	; (8005a78 <prvCheckForValidListAndQueue+0x58>)
 8005a32:	f7fd fec5 	bl	80037c0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005a36:	4811      	ldr	r0, [pc, #68]	; (8005a7c <prvCheckForValidListAndQueue+0x5c>)
 8005a38:	f7fd fec2 	bl	80037c0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005a3c:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <prvCheckForValidListAndQueue+0x60>)
 8005a3e:	4a0e      	ldr	r2, [pc, #56]	; (8005a78 <prvCheckForValidListAndQueue+0x58>)
 8005a40:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005a42:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <prvCheckForValidListAndQueue+0x64>)
 8005a44:	4a0d      	ldr	r2, [pc, #52]	; (8005a7c <prvCheckForValidListAndQueue+0x5c>)
 8005a46:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005a48:	2200      	movs	r2, #0
 8005a4a:	210c      	movs	r1, #12
 8005a4c:	200a      	movs	r0, #10
 8005a4e:	f7fd ffd3 	bl	80039f8 <xQueueGenericCreate>
 8005a52:	4603      	mov	r3, r0
 8005a54:	4a07      	ldr	r2, [pc, #28]	; (8005a74 <prvCheckForValidListAndQueue+0x54>)
 8005a56:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005a58:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <prvCheckForValidListAndQueue+0x54>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a60:	4b04      	ldr	r3, [pc, #16]	; (8005a74 <prvCheckForValidListAndQueue+0x54>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4908      	ldr	r1, [pc, #32]	; (8005a88 <prvCheckForValidListAndQueue+0x68>)
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe fd04 	bl	8004474 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005a6c:	f000 f9ea 	bl	8005e44 <vPortExitCritical>
    }
 8005a70:	bf00      	nop
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	2000039c 	.word	0x2000039c
 8005a78:	2000036c 	.word	0x2000036c
 8005a7c:	20000380 	.word	0x20000380
 8005a80:	20000394 	.word	0x20000394
 8005a84:	20000398 	.word	0x20000398
 8005a88:	08007a04 	.word	0x08007a04

08005a8c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3b04      	subs	r3, #4
 8005a9c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005aa4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3b04      	subs	r3, #4
 8005aaa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f023 0201 	bic.w	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3b04      	subs	r3, #4
 8005aba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005abc:	4a0c      	ldr	r2, [pc, #48]	; (8005af0 <pxPortInitialiseStack+0x64>)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3b14      	subs	r3, #20
 8005ac6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3b04      	subs	r3, #4
 8005ad2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f06f 0202 	mvn.w	r2, #2
 8005ada:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3b20      	subs	r3, #32
 8005ae0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	08005af5 	.word	0x08005af5

08005af4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005afe:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <prvTaskExitError+0x54>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b06:	d00a      	beq.n	8005b1e <prvTaskExitError+0x2a>
        __asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	60fb      	str	r3, [r7, #12]
    }
 8005b1a:	bf00      	nop
 8005b1c:	e7fe      	b.n	8005b1c <prvTaskExitError+0x28>
        __asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	60bb      	str	r3, [r7, #8]
    }
 8005b30:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005b32:	bf00      	nop
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0fc      	beq.n	8005b34 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005b3a:	bf00      	nop
 8005b3c:	bf00      	nop
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	2000000c 	.word	0x2000000c
 8005b4c:	00000000 	.word	0x00000000

08005b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005b50:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <pxCurrentTCBConst2>)
 8005b52:	6819      	ldr	r1, [r3, #0]
 8005b54:	6808      	ldr	r0, [r1, #0]
 8005b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5a:	f380 8809 	msr	PSP, r0
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f04f 0000 	mov.w	r0, #0
 8005b66:	f380 8811 	msr	BASEPRI, r0
 8005b6a:	4770      	bx	lr
 8005b6c:	f3af 8000 	nop.w

08005b70 <pxCurrentTCBConst2>:
 8005b70:	20000268 	.word	0x20000268
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop

08005b78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005b78:	4808      	ldr	r0, [pc, #32]	; (8005b9c <prvPortStartFirstTask+0x24>)
 8005b7a:	6800      	ldr	r0, [r0, #0]
 8005b7c:	6800      	ldr	r0, [r0, #0]
 8005b7e:	f380 8808 	msr	MSP, r0
 8005b82:	f04f 0000 	mov.w	r0, #0
 8005b86:	f380 8814 	msr	CONTROL, r0
 8005b8a:	b662      	cpsie	i
 8005b8c:	b661      	cpsie	f
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	df00      	svc	0
 8005b98:	bf00      	nop
 8005b9a:	0000      	.short	0x0000
 8005b9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop

08005ba4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005baa:	4b46      	ldr	r3, [pc, #280]	; (8005cc4 <xPortStartScheduler+0x120>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a46      	ldr	r2, [pc, #280]	; (8005cc8 <xPortStartScheduler+0x124>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d10a      	bne.n	8005bca <xPortStartScheduler+0x26>
        __asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	613b      	str	r3, [r7, #16]
    }
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005bca:	4b3e      	ldr	r3, [pc, #248]	; (8005cc4 <xPortStartScheduler+0x120>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a3f      	ldr	r2, [pc, #252]	; (8005ccc <xPortStartScheduler+0x128>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d10a      	bne.n	8005bea <xPortStartScheduler+0x46>
        __asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	60fb      	str	r3, [r7, #12]
    }
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bea:	4b39      	ldr	r3, [pc, #228]	; (8005cd0 <xPortStartScheduler+0x12c>)
 8005bec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	22ff      	movs	r2, #255	; 0xff
 8005bfa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	4b31      	ldr	r3, [pc, #196]	; (8005cd4 <xPortStartScheduler+0x130>)
 8005c10:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c12:	4b31      	ldr	r3, [pc, #196]	; (8005cd8 <xPortStartScheduler+0x134>)
 8005c14:	2207      	movs	r2, #7
 8005c16:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c18:	e009      	b.n	8005c2e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005c1a:	4b2f      	ldr	r3, [pc, #188]	; (8005cd8 <xPortStartScheduler+0x134>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	4a2d      	ldr	r2, [pc, #180]	; (8005cd8 <xPortStartScheduler+0x134>)
 8005c22:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c36:	2b80      	cmp	r3, #128	; 0x80
 8005c38:	d0ef      	beq.n	8005c1a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c3a:	4b27      	ldr	r3, [pc, #156]	; (8005cd8 <xPortStartScheduler+0x134>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f1c3 0307 	rsb	r3, r3, #7
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d00a      	beq.n	8005c5c <xPortStartScheduler+0xb8>
        __asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	60bb      	str	r3, [r7, #8]
    }
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c5c:	4b1e      	ldr	r3, [pc, #120]	; (8005cd8 <xPortStartScheduler+0x134>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	4a1d      	ldr	r2, [pc, #116]	; (8005cd8 <xPortStartScheduler+0x134>)
 8005c64:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c66:	4b1c      	ldr	r3, [pc, #112]	; (8005cd8 <xPortStartScheduler+0x134>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c6e:	4a1a      	ldr	r2, [pc, #104]	; (8005cd8 <xPortStartScheduler+0x134>)
 8005c70:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005c7a:	4b18      	ldr	r3, [pc, #96]	; (8005cdc <xPortStartScheduler+0x138>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <xPortStartScheduler+0x138>)
 8005c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005c86:	4b15      	ldr	r3, [pc, #84]	; (8005cdc <xPortStartScheduler+0x138>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a14      	ldr	r2, [pc, #80]	; (8005cdc <xPortStartScheduler+0x138>)
 8005c8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005c92:	f000 f95b 	bl	8005f4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005c96:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <xPortStartScheduler+0x13c>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005c9c:	f000 f97a 	bl	8005f94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ca0:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <xPortStartScheduler+0x140>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a0f      	ldr	r2, [pc, #60]	; (8005ce4 <xPortStartScheduler+0x140>)
 8005ca6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005caa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005cac:	f7ff ff64 	bl	8005b78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005cb0:	f7fe ff7c 	bl	8004bac <vTaskSwitchContext>
    prvTaskExitError();
 8005cb4:	f7ff ff1e 	bl	8005af4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	e000ed00 	.word	0xe000ed00
 8005cc8:	410fc271 	.word	0x410fc271
 8005ccc:	410fc270 	.word	0x410fc270
 8005cd0:	e000e400 	.word	0xe000e400
 8005cd4:	200003a8 	.word	0x200003a8
 8005cd8:	200003ac 	.word	0x200003ac
 8005cdc:	e000ed20 	.word	0xe000ed20
 8005ce0:	2000000c 	.word	0x2000000c
 8005ce4:	e000ef34 	.word	0xe000ef34

08005ce8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cee:	4b37      	ldr	r3, [pc, #220]	; (8005dcc <vInitPrioGroupValue+0xe4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a37      	ldr	r2, [pc, #220]	; (8005dd0 <vInitPrioGroupValue+0xe8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d10a      	bne.n	8005d0e <vInitPrioGroupValue+0x26>
        __asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	613b      	str	r3, [r7, #16]
    }
 8005d0a:	bf00      	nop
 8005d0c:	e7fe      	b.n	8005d0c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d0e:	4b2f      	ldr	r3, [pc, #188]	; (8005dcc <vInitPrioGroupValue+0xe4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a30      	ldr	r2, [pc, #192]	; (8005dd4 <vInitPrioGroupValue+0xec>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d10a      	bne.n	8005d2e <vInitPrioGroupValue+0x46>
        __asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	60fb      	str	r3, [r7, #12]
    }
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d2e:	4b2a      	ldr	r3, [pc, #168]	; (8005dd8 <vInitPrioGroupValue+0xf0>)
 8005d30:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	22ff      	movs	r2, #255	; 0xff
 8005d3e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	4b22      	ldr	r3, [pc, #136]	; (8005ddc <vInitPrioGroupValue+0xf4>)
 8005d54:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d56:	4b22      	ldr	r3, [pc, #136]	; (8005de0 <vInitPrioGroupValue+0xf8>)
 8005d58:	2207      	movs	r2, #7
 8005d5a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d5c:	e009      	b.n	8005d72 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005d5e:	4b20      	ldr	r3, [pc, #128]	; (8005de0 <vInitPrioGroupValue+0xf8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	4a1e      	ldr	r2, [pc, #120]	; (8005de0 <vInitPrioGroupValue+0xf8>)
 8005d66:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d0ef      	beq.n	8005d5e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d7e:	4b18      	ldr	r3, [pc, #96]	; (8005de0 <vInitPrioGroupValue+0xf8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f1c3 0307 	rsb	r3, r3, #7
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d00a      	beq.n	8005da0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	60bb      	str	r3, [r7, #8]
    }
 8005d9c:	bf00      	nop
 8005d9e:	e7fe      	b.n	8005d9e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005da0:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <vInitPrioGroupValue+0xf8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <vInitPrioGroupValue+0xf8>)
 8005da8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005daa:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <vInitPrioGroupValue+0xf8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005db2:	4a0b      	ldr	r2, [pc, #44]	; (8005de0 <vInitPrioGroupValue+0xf8>)
 8005db4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8005dbe:	bf00      	nop
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	e000ed00 	.word	0xe000ed00
 8005dd0:	410fc271 	.word	0x410fc271
 8005dd4:	410fc270 	.word	0x410fc270
 8005dd8:	e000e400 	.word	0xe000e400
 8005ddc:	200003a8 	.word	0x200003a8
 8005de0:	200003ac 	.word	0x200003ac

08005de4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
        __asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	607b      	str	r3, [r7, #4]
    }
 8005dfc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005dfe:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <vPortEnterCritical+0x58>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3301      	adds	r3, #1
 8005e04:	4a0d      	ldr	r2, [pc, #52]	; (8005e3c <vPortEnterCritical+0x58>)
 8005e06:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005e08:	4b0c      	ldr	r3, [pc, #48]	; (8005e3c <vPortEnterCritical+0x58>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d10f      	bne.n	8005e30 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e10:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <vPortEnterCritical+0x5c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <vPortEnterCritical+0x4c>
        __asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	603b      	str	r3, [r7, #0]
    }
 8005e2c:	bf00      	nop
 8005e2e:	e7fe      	b.n	8005e2e <vPortEnterCritical+0x4a>
    }
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	2000000c 	.word	0x2000000c
 8005e40:	e000ed04 	.word	0xe000ed04

08005e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005e4a:	4b12      	ldr	r3, [pc, #72]	; (8005e94 <vPortExitCritical+0x50>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <vPortExitCritical+0x24>
        __asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	607b      	str	r3, [r7, #4]
    }
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005e68:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <vPortExitCritical+0x50>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <vPortExitCritical+0x50>)
 8005e70:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005e72:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <vPortExitCritical+0x50>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d105      	bne.n	8005e86 <vPortExitCritical+0x42>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	f383 8811 	msr	BASEPRI, r3
    }
 8005e84:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	2000000c 	.word	0x2000000c
	...

08005ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005ea0:	f3ef 8009 	mrs	r0, PSP
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <pxCurrentTCBConst>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	f01e 0f10 	tst.w	lr, #16
 8005eb0:	bf08      	it	eq
 8005eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eba:	6010      	str	r0, [r2, #0]
 8005ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ec4:	f380 8811 	msr	BASEPRI, r0
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f7fe fe6c 	bl	8004bac <vTaskSwitchContext>
 8005ed4:	f04f 0000 	mov.w	r0, #0
 8005ed8:	f380 8811 	msr	BASEPRI, r0
 8005edc:	bc09      	pop	{r0, r3}
 8005ede:	6819      	ldr	r1, [r3, #0]
 8005ee0:	6808      	ldr	r0, [r1, #0]
 8005ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee6:	f01e 0f10 	tst.w	lr, #16
 8005eea:	bf08      	it	eq
 8005eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ef0:	f380 8809 	msr	PSP, r0
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	f3af 8000 	nop.w

08005f00 <pxCurrentTCBConst>:
 8005f00:	20000268 	.word	0x20000268
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop

08005f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
        __asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
    }
 8005f20:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005f22:	f7fe fd8b 	bl	8004a3c <xTaskIncrementTick>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <SysTick_Handler+0x40>)
 8005f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	2300      	movs	r3, #0
 8005f36:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	f383 8811 	msr	BASEPRI, r3
    }
 8005f3e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <vPortSetupTimerInterrupt+0x34>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f56:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <vPortSetupTimerInterrupt+0x38>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <vPortSetupTimerInterrupt+0x3c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a0a      	ldr	r2, [pc, #40]	; (8005f8c <vPortSetupTimerInterrupt+0x40>)
 8005f62:	fba2 2303 	umull	r2, r3, r2, r3
 8005f66:	099b      	lsrs	r3, r3, #6
 8005f68:	4a09      	ldr	r2, [pc, #36]	; (8005f90 <vPortSetupTimerInterrupt+0x44>)
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f6e:	4b04      	ldr	r3, [pc, #16]	; (8005f80 <vPortSetupTimerInterrupt+0x34>)
 8005f70:	2207      	movs	r2, #7
 8005f72:	601a      	str	r2, [r3, #0]
}
 8005f74:	bf00      	nop
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	e000e010 	.word	0xe000e010
 8005f84:	e000e018 	.word	0xe000e018
 8005f88:	20000000 	.word	0x20000000
 8005f8c:	10624dd3 	.word	0x10624dd3
 8005f90:	e000e014 	.word	0xe000e014

08005f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005fa4 <vPortEnableVFP+0x10>
 8005f98:	6801      	ldr	r1, [r0, #0]
 8005f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f9e:	6001      	str	r1, [r0, #0]
 8005fa0:	4770      	bx	lr
 8005fa2:	0000      	.short	0x0000
 8005fa4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop

08005fac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005fb2:	f3ef 8305 	mrs	r3, IPSR
 8005fb6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b0f      	cmp	r3, #15
 8005fbc:	d914      	bls.n	8005fe8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005fbe:	4a17      	ldr	r2, [pc, #92]	; (800601c <vPortValidateInterruptPriority+0x70>)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fc8:	4b15      	ldr	r3, [pc, #84]	; (8006020 <vPortValidateInterruptPriority+0x74>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	7afa      	ldrb	r2, [r7, #11]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d20a      	bcs.n	8005fe8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	607b      	str	r3, [r7, #4]
    }
 8005fe4:	bf00      	nop
 8005fe6:	e7fe      	b.n	8005fe6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	; (8006024 <vPortValidateInterruptPriority+0x78>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ff0:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <vPortValidateInterruptPriority+0x7c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d90a      	bls.n	800600e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	603b      	str	r3, [r7, #0]
    }
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <vPortValidateInterruptPriority+0x60>
    }
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	e000e3f0 	.word	0xe000e3f0
 8006020:	200003a8 	.word	0x200003a8
 8006024:	e000ed0c 	.word	0xe000ed0c
 8006028:	200003ac 	.word	0x200003ac

0800602c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08a      	sub	sp, #40	; 0x28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006038:	f7fe fc46 	bl	80048c8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800603c:	4b65      	ldr	r3, [pc, #404]	; (80061d4 <pvPortMalloc+0x1a8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006044:	f000 f934 	bl	80062b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006048:	4b63      	ldr	r3, [pc, #396]	; (80061d8 <pvPortMalloc+0x1ac>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4013      	ands	r3, r2
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 80a7 	bne.w	80061a4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d02d      	beq.n	80060b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800605c:	2208      	movs	r2, #8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	d227      	bcs.n	80060b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006068:	2208      	movs	r2, #8
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4413      	add	r3, r2
 800606e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	2b00      	cmp	r3, #0
 8006078:	d021      	beq.n	80060be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f023 0307 	bic.w	r3, r3, #7
 8006080:	3308      	adds	r3, #8
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	429a      	cmp	r2, r3
 8006086:	d214      	bcs.n	80060b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f023 0307 	bic.w	r3, r3, #7
 800608e:	3308      	adds	r3, #8
 8006090:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	2b00      	cmp	r3, #0
 800609a:	d010      	beq.n	80060be <pvPortMalloc+0x92>
        __asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	617b      	str	r3, [r7, #20]
    }
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060b6:	e002      	b.n	80060be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	607b      	str	r3, [r7, #4]
 80060bc:	e000      	b.n	80060c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d06e      	beq.n	80061a4 <pvPortMalloc+0x178>
 80060c6:	4b45      	ldr	r3, [pc, #276]	; (80061dc <pvPortMalloc+0x1b0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d869      	bhi.n	80061a4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80060d0:	4b43      	ldr	r3, [pc, #268]	; (80061e0 <pvPortMalloc+0x1b4>)
 80060d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80060d4:	4b42      	ldr	r3, [pc, #264]	; (80061e0 <pvPortMalloc+0x1b4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060da:	e004      	b.n	80060e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d903      	bls.n	80060f8 <pvPortMalloc+0xcc>
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1f1      	bne.n	80060dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80060f8:	4b36      	ldr	r3, [pc, #216]	; (80061d4 <pvPortMalloc+0x1a8>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060fe:	429a      	cmp	r2, r3
 8006100:	d050      	beq.n	80061a4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2208      	movs	r2, #8
 8006108:	4413      	add	r3, r2
 800610a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	1ad2      	subs	r2, r2, r3
 800611c:	2308      	movs	r3, #8
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	429a      	cmp	r2, r3
 8006122:	d91f      	bls.n	8006164 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4413      	add	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <pvPortMalloc+0x120>
        __asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	613b      	str	r3, [r7, #16]
    }
 8006148:	bf00      	nop
 800614a:	e7fe      	b.n	800614a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	1ad2      	subs	r2, r2, r3
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800615e:	69b8      	ldr	r0, [r7, #24]
 8006160:	f000 f908 	bl	8006374 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006164:	4b1d      	ldr	r3, [pc, #116]	; (80061dc <pvPortMalloc+0x1b0>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	4a1b      	ldr	r2, [pc, #108]	; (80061dc <pvPortMalloc+0x1b0>)
 8006170:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006172:	4b1a      	ldr	r3, [pc, #104]	; (80061dc <pvPortMalloc+0x1b0>)
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4b1b      	ldr	r3, [pc, #108]	; (80061e4 <pvPortMalloc+0x1b8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d203      	bcs.n	8006186 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800617e:	4b17      	ldr	r3, [pc, #92]	; (80061dc <pvPortMalloc+0x1b0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a18      	ldr	r2, [pc, #96]	; (80061e4 <pvPortMalloc+0x1b8>)
 8006184:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	4b13      	ldr	r3, [pc, #76]	; (80061d8 <pvPortMalloc+0x1ac>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	431a      	orrs	r2, r3
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800619a:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <pvPortMalloc+0x1bc>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3301      	adds	r3, #1
 80061a0:	4a11      	ldr	r2, [pc, #68]	; (80061e8 <pvPortMalloc+0x1bc>)
 80061a2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80061a4:	f7fe fb9e 	bl	80048e4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <pvPortMalloc+0x19c>
        __asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	60fb      	str	r3, [r7, #12]
    }
 80061c4:	bf00      	nop
 80061c6:	e7fe      	b.n	80061c6 <pvPortMalloc+0x19a>
    return pvReturn;
 80061c8:	69fb      	ldr	r3, [r7, #28]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3728      	adds	r7, #40	; 0x28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	200193b8 	.word	0x200193b8
 80061d8:	200193cc 	.word	0x200193cc
 80061dc:	200193bc 	.word	0x200193bc
 80061e0:	200193b0 	.word	0x200193b0
 80061e4:	200193c0 	.word	0x200193c0
 80061e8:	200193c4 	.word	0x200193c4

080061ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d04d      	beq.n	800629a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80061fe:	2308      	movs	r3, #8
 8006200:	425b      	negs	r3, r3
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4413      	add	r3, r2
 8006206:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	4b24      	ldr	r3, [pc, #144]	; (80062a4 <vPortFree+0xb8>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4013      	ands	r3, r2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10a      	bne.n	8006230 <vPortFree+0x44>
        __asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	60fb      	str	r3, [r7, #12]
    }
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <vPortFree+0x62>
        __asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	60bb      	str	r3, [r7, #8]
    }
 800624a:	bf00      	nop
 800624c:	e7fe      	b.n	800624c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	4b14      	ldr	r3, [pc, #80]	; (80062a4 <vPortFree+0xb8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4013      	ands	r3, r2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01e      	beq.n	800629a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d11a      	bne.n	800629a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	4b0e      	ldr	r3, [pc, #56]	; (80062a4 <vPortFree+0xb8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	43db      	mvns	r3, r3
 800626e:	401a      	ands	r2, r3
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006274:	f7fe fb28 	bl	80048c8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <vPortFree+0xbc>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4413      	add	r3, r2
 8006282:	4a09      	ldr	r2, [pc, #36]	; (80062a8 <vPortFree+0xbc>)
 8006284:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006286:	6938      	ldr	r0, [r7, #16]
 8006288:	f000 f874 	bl	8006374 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800628c:	4b07      	ldr	r3, [pc, #28]	; (80062ac <vPortFree+0xc0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3301      	adds	r3, #1
 8006292:	4a06      	ldr	r2, [pc, #24]	; (80062ac <vPortFree+0xc0>)
 8006294:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006296:	f7fe fb25 	bl	80048e4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800629a:	bf00      	nop
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	200193cc 	.word	0x200193cc
 80062a8:	200193bc 	.word	0x200193bc
 80062ac:	200193c8 	.word	0x200193c8

080062b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062b6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80062ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80062bc:	4b27      	ldr	r3, [pc, #156]	; (800635c <prvHeapInit+0xac>)
 80062be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00c      	beq.n	80062e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3307      	adds	r3, #7
 80062ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0307 	bic.w	r3, r3, #7
 80062d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	4a1f      	ldr	r2, [pc, #124]	; (800635c <prvHeapInit+0xac>)
 80062e0:	4413      	add	r3, r2
 80062e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062e8:	4a1d      	ldr	r2, [pc, #116]	; (8006360 <prvHeapInit+0xb0>)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80062ee:	4b1c      	ldr	r3, [pc, #112]	; (8006360 <prvHeapInit+0xb0>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	4413      	add	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80062fc:	2208      	movs	r2, #8
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	1a9b      	subs	r3, r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0307 	bic.w	r3, r3, #7
 800630a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4a15      	ldr	r2, [pc, #84]	; (8006364 <prvHeapInit+0xb4>)
 8006310:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006312:	4b14      	ldr	r3, [pc, #80]	; (8006364 <prvHeapInit+0xb4>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2200      	movs	r2, #0
 8006318:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800631a:	4b12      	ldr	r3, [pc, #72]	; (8006364 <prvHeapInit+0xb4>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	1ad2      	subs	r2, r2, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006330:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <prvHeapInit+0xb4>)
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	4a0a      	ldr	r2, [pc, #40]	; (8006368 <prvHeapInit+0xb8>)
 800633e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	4a09      	ldr	r2, [pc, #36]	; (800636c <prvHeapInit+0xbc>)
 8006346:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006348:	4b09      	ldr	r3, [pc, #36]	; (8006370 <prvHeapInit+0xc0>)
 800634a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800634e:	601a      	str	r2, [r3, #0]
}
 8006350:	bf00      	nop
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	200003b0 	.word	0x200003b0
 8006360:	200193b0 	.word	0x200193b0
 8006364:	200193b8 	.word	0x200193b8
 8006368:	200193c0 	.word	0x200193c0
 800636c:	200193bc 	.word	0x200193bc
 8006370:	200193cc 	.word	0x200193cc

08006374 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800637c:	4b28      	ldr	r3, [pc, #160]	; (8006420 <prvInsertBlockIntoFreeList+0xac>)
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	e002      	b.n	8006388 <prvInsertBlockIntoFreeList+0x14>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	429a      	cmp	r2, r3
 8006390:	d8f7      	bhi.n	8006382 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	4413      	add	r3, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d108      	bne.n	80063b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	441a      	add	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	441a      	add	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d118      	bne.n	80063fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4b15      	ldr	r3, [pc, #84]	; (8006424 <prvInsertBlockIntoFreeList+0xb0>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d00d      	beq.n	80063f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	441a      	add	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	e008      	b.n	8006404 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063f2:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <prvInsertBlockIntoFreeList+0xb0>)
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	e003      	b.n	8006404 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	429a      	cmp	r2, r3
 800640a:	d002      	beq.n	8006412 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	200193b0 	.word	0x200193b0
 8006424:	200193b8 	.word	0x200193b8

08006428 <__errno>:
 8006428:	4b01      	ldr	r3, [pc, #4]	; (8006430 <__errno+0x8>)
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	20000010 	.word	0x20000010

08006434 <__libc_init_array>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	4d0d      	ldr	r5, [pc, #52]	; (800646c <__libc_init_array+0x38>)
 8006438:	4c0d      	ldr	r4, [pc, #52]	; (8006470 <__libc_init_array+0x3c>)
 800643a:	1b64      	subs	r4, r4, r5
 800643c:	10a4      	asrs	r4, r4, #2
 800643e:	2600      	movs	r6, #0
 8006440:	42a6      	cmp	r6, r4
 8006442:	d109      	bne.n	8006458 <__libc_init_array+0x24>
 8006444:	4d0b      	ldr	r5, [pc, #44]	; (8006474 <__libc_init_array+0x40>)
 8006446:	4c0c      	ldr	r4, [pc, #48]	; (8006478 <__libc_init_array+0x44>)
 8006448:	f001 fa54 	bl	80078f4 <_init>
 800644c:	1b64      	subs	r4, r4, r5
 800644e:	10a4      	asrs	r4, r4, #2
 8006450:	2600      	movs	r6, #0
 8006452:	42a6      	cmp	r6, r4
 8006454:	d105      	bne.n	8006462 <__libc_init_array+0x2e>
 8006456:	bd70      	pop	{r4, r5, r6, pc}
 8006458:	f855 3b04 	ldr.w	r3, [r5], #4
 800645c:	4798      	blx	r3
 800645e:	3601      	adds	r6, #1
 8006460:	e7ee      	b.n	8006440 <__libc_init_array+0xc>
 8006462:	f855 3b04 	ldr.w	r3, [r5], #4
 8006466:	4798      	blx	r3
 8006468:	3601      	adds	r6, #1
 800646a:	e7f2      	b.n	8006452 <__libc_init_array+0x1e>
 800646c:	08007b74 	.word	0x08007b74
 8006470:	08007b74 	.word	0x08007b74
 8006474:	08007b74 	.word	0x08007b74
 8006478:	08007b78 	.word	0x08007b78

0800647c <memcpy>:
 800647c:	440a      	add	r2, r1
 800647e:	4291      	cmp	r1, r2
 8006480:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006484:	d100      	bne.n	8006488 <memcpy+0xc>
 8006486:	4770      	bx	lr
 8006488:	b510      	push	{r4, lr}
 800648a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800648e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006492:	4291      	cmp	r1, r2
 8006494:	d1f9      	bne.n	800648a <memcpy+0xe>
 8006496:	bd10      	pop	{r4, pc}

08006498 <memset>:
 8006498:	4402      	add	r2, r0
 800649a:	4603      	mov	r3, r0
 800649c:	4293      	cmp	r3, r2
 800649e:	d100      	bne.n	80064a2 <memset+0xa>
 80064a0:	4770      	bx	lr
 80064a2:	f803 1b01 	strb.w	r1, [r3], #1
 80064a6:	e7f9      	b.n	800649c <memset+0x4>

080064a8 <rand>:
 80064a8:	4b16      	ldr	r3, [pc, #88]	; (8006504 <rand+0x5c>)
 80064aa:	b510      	push	{r4, lr}
 80064ac:	681c      	ldr	r4, [r3, #0]
 80064ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064b0:	b9b3      	cbnz	r3, 80064e0 <rand+0x38>
 80064b2:	2018      	movs	r0, #24
 80064b4:	f000 f8a6 	bl	8006604 <malloc>
 80064b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80064ba:	b928      	cbnz	r0, 80064c8 <rand+0x20>
 80064bc:	4602      	mov	r2, r0
 80064be:	4b12      	ldr	r3, [pc, #72]	; (8006508 <rand+0x60>)
 80064c0:	4812      	ldr	r0, [pc, #72]	; (800650c <rand+0x64>)
 80064c2:	214e      	movs	r1, #78	; 0x4e
 80064c4:	f000 f86e 	bl	80065a4 <__assert_func>
 80064c8:	4a11      	ldr	r2, [pc, #68]	; (8006510 <rand+0x68>)
 80064ca:	4b12      	ldr	r3, [pc, #72]	; (8006514 <rand+0x6c>)
 80064cc:	e9c0 2300 	strd	r2, r3, [r0]
 80064d0:	4b11      	ldr	r3, [pc, #68]	; (8006518 <rand+0x70>)
 80064d2:	6083      	str	r3, [r0, #8]
 80064d4:	230b      	movs	r3, #11
 80064d6:	8183      	strh	r3, [r0, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	2300      	movs	r3, #0
 80064dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80064e0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80064e2:	4a0e      	ldr	r2, [pc, #56]	; (800651c <rand+0x74>)
 80064e4:	6920      	ldr	r0, [r4, #16]
 80064e6:	6963      	ldr	r3, [r4, #20]
 80064e8:	490d      	ldr	r1, [pc, #52]	; (8006520 <rand+0x78>)
 80064ea:	4342      	muls	r2, r0
 80064ec:	fb01 2203 	mla	r2, r1, r3, r2
 80064f0:	fba0 0101 	umull	r0, r1, r0, r1
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	eb42 0001 	adc.w	r0, r2, r1
 80064fa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80064fe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006502:	bd10      	pop	{r4, pc}
 8006504:	20000010 	.word	0x20000010
 8006508:	08007a28 	.word	0x08007a28
 800650c:	08007a3f 	.word	0x08007a3f
 8006510:	abcd330e 	.word	0xabcd330e
 8006514:	e66d1234 	.word	0xe66d1234
 8006518:	0005deec 	.word	0x0005deec
 800651c:	5851f42d 	.word	0x5851f42d
 8006520:	4c957f2d 	.word	0x4c957f2d

08006524 <siprintf>:
 8006524:	b40e      	push	{r1, r2, r3}
 8006526:	b500      	push	{lr}
 8006528:	b09c      	sub	sp, #112	; 0x70
 800652a:	ab1d      	add	r3, sp, #116	; 0x74
 800652c:	9002      	str	r0, [sp, #8]
 800652e:	9006      	str	r0, [sp, #24]
 8006530:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006534:	4809      	ldr	r0, [pc, #36]	; (800655c <siprintf+0x38>)
 8006536:	9107      	str	r1, [sp, #28]
 8006538:	9104      	str	r1, [sp, #16]
 800653a:	4909      	ldr	r1, [pc, #36]	; (8006560 <siprintf+0x3c>)
 800653c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006540:	9105      	str	r1, [sp, #20]
 8006542:	6800      	ldr	r0, [r0, #0]
 8006544:	9301      	str	r3, [sp, #4]
 8006546:	a902      	add	r1, sp, #8
 8006548:	f000 f9a0 	bl	800688c <_svfiprintf_r>
 800654c:	9b02      	ldr	r3, [sp, #8]
 800654e:	2200      	movs	r2, #0
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	b01c      	add	sp, #112	; 0x70
 8006554:	f85d eb04 	ldr.w	lr, [sp], #4
 8006558:	b003      	add	sp, #12
 800655a:	4770      	bx	lr
 800655c:	20000010 	.word	0x20000010
 8006560:	ffff0208 	.word	0xffff0208

08006564 <_vsiprintf_r>:
 8006564:	b500      	push	{lr}
 8006566:	b09b      	sub	sp, #108	; 0x6c
 8006568:	9100      	str	r1, [sp, #0]
 800656a:	9104      	str	r1, [sp, #16]
 800656c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006570:	9105      	str	r1, [sp, #20]
 8006572:	9102      	str	r1, [sp, #8]
 8006574:	4905      	ldr	r1, [pc, #20]	; (800658c <_vsiprintf_r+0x28>)
 8006576:	9103      	str	r1, [sp, #12]
 8006578:	4669      	mov	r1, sp
 800657a:	f000 f987 	bl	800688c <_svfiprintf_r>
 800657e:	9b00      	ldr	r3, [sp, #0]
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
 8006584:	b01b      	add	sp, #108	; 0x6c
 8006586:	f85d fb04 	ldr.w	pc, [sp], #4
 800658a:	bf00      	nop
 800658c:	ffff0208 	.word	0xffff0208

08006590 <vsiprintf>:
 8006590:	4613      	mov	r3, r2
 8006592:	460a      	mov	r2, r1
 8006594:	4601      	mov	r1, r0
 8006596:	4802      	ldr	r0, [pc, #8]	; (80065a0 <vsiprintf+0x10>)
 8006598:	6800      	ldr	r0, [r0, #0]
 800659a:	f7ff bfe3 	b.w	8006564 <_vsiprintf_r>
 800659e:	bf00      	nop
 80065a0:	20000010 	.word	0x20000010

080065a4 <__assert_func>:
 80065a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065a6:	4614      	mov	r4, r2
 80065a8:	461a      	mov	r2, r3
 80065aa:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <__assert_func+0x2c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4605      	mov	r5, r0
 80065b0:	68d8      	ldr	r0, [r3, #12]
 80065b2:	b14c      	cbz	r4, 80065c8 <__assert_func+0x24>
 80065b4:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <__assert_func+0x30>)
 80065b6:	9100      	str	r1, [sp, #0]
 80065b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065bc:	4906      	ldr	r1, [pc, #24]	; (80065d8 <__assert_func+0x34>)
 80065be:	462b      	mov	r3, r5
 80065c0:	f000 f80e 	bl	80065e0 <fiprintf>
 80065c4:	f000 fe20 	bl	8007208 <abort>
 80065c8:	4b04      	ldr	r3, [pc, #16]	; (80065dc <__assert_func+0x38>)
 80065ca:	461c      	mov	r4, r3
 80065cc:	e7f3      	b.n	80065b6 <__assert_func+0x12>
 80065ce:	bf00      	nop
 80065d0:	20000010 	.word	0x20000010
 80065d4:	08007a9a 	.word	0x08007a9a
 80065d8:	08007aa7 	.word	0x08007aa7
 80065dc:	08007ad5 	.word	0x08007ad5

080065e0 <fiprintf>:
 80065e0:	b40e      	push	{r1, r2, r3}
 80065e2:	b503      	push	{r0, r1, lr}
 80065e4:	4601      	mov	r1, r0
 80065e6:	ab03      	add	r3, sp, #12
 80065e8:	4805      	ldr	r0, [pc, #20]	; (8006600 <fiprintf+0x20>)
 80065ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ee:	6800      	ldr	r0, [r0, #0]
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	f000 fa75 	bl	8006ae0 <_vfiprintf_r>
 80065f6:	b002      	add	sp, #8
 80065f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065fc:	b003      	add	sp, #12
 80065fe:	4770      	bx	lr
 8006600:	20000010 	.word	0x20000010

08006604 <malloc>:
 8006604:	4b02      	ldr	r3, [pc, #8]	; (8006610 <malloc+0xc>)
 8006606:	4601      	mov	r1, r0
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	f000 b86f 	b.w	80066ec <_malloc_r>
 800660e:	bf00      	nop
 8006610:	20000010 	.word	0x20000010

08006614 <_free_r>:
 8006614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006616:	2900      	cmp	r1, #0
 8006618:	d044      	beq.n	80066a4 <_free_r+0x90>
 800661a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800661e:	9001      	str	r0, [sp, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f1a1 0404 	sub.w	r4, r1, #4
 8006626:	bfb8      	it	lt
 8006628:	18e4      	addlt	r4, r4, r3
 800662a:	f001 f82f 	bl	800768c <__malloc_lock>
 800662e:	4a1e      	ldr	r2, [pc, #120]	; (80066a8 <_free_r+0x94>)
 8006630:	9801      	ldr	r0, [sp, #4]
 8006632:	6813      	ldr	r3, [r2, #0]
 8006634:	b933      	cbnz	r3, 8006644 <_free_r+0x30>
 8006636:	6063      	str	r3, [r4, #4]
 8006638:	6014      	str	r4, [r2, #0]
 800663a:	b003      	add	sp, #12
 800663c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006640:	f001 b82a 	b.w	8007698 <__malloc_unlock>
 8006644:	42a3      	cmp	r3, r4
 8006646:	d908      	bls.n	800665a <_free_r+0x46>
 8006648:	6825      	ldr	r5, [r4, #0]
 800664a:	1961      	adds	r1, r4, r5
 800664c:	428b      	cmp	r3, r1
 800664e:	bf01      	itttt	eq
 8006650:	6819      	ldreq	r1, [r3, #0]
 8006652:	685b      	ldreq	r3, [r3, #4]
 8006654:	1949      	addeq	r1, r1, r5
 8006656:	6021      	streq	r1, [r4, #0]
 8006658:	e7ed      	b.n	8006636 <_free_r+0x22>
 800665a:	461a      	mov	r2, r3
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	b10b      	cbz	r3, 8006664 <_free_r+0x50>
 8006660:	42a3      	cmp	r3, r4
 8006662:	d9fa      	bls.n	800665a <_free_r+0x46>
 8006664:	6811      	ldr	r1, [r2, #0]
 8006666:	1855      	adds	r5, r2, r1
 8006668:	42a5      	cmp	r5, r4
 800666a:	d10b      	bne.n	8006684 <_free_r+0x70>
 800666c:	6824      	ldr	r4, [r4, #0]
 800666e:	4421      	add	r1, r4
 8006670:	1854      	adds	r4, r2, r1
 8006672:	42a3      	cmp	r3, r4
 8006674:	6011      	str	r1, [r2, #0]
 8006676:	d1e0      	bne.n	800663a <_free_r+0x26>
 8006678:	681c      	ldr	r4, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	6053      	str	r3, [r2, #4]
 800667e:	4421      	add	r1, r4
 8006680:	6011      	str	r1, [r2, #0]
 8006682:	e7da      	b.n	800663a <_free_r+0x26>
 8006684:	d902      	bls.n	800668c <_free_r+0x78>
 8006686:	230c      	movs	r3, #12
 8006688:	6003      	str	r3, [r0, #0]
 800668a:	e7d6      	b.n	800663a <_free_r+0x26>
 800668c:	6825      	ldr	r5, [r4, #0]
 800668e:	1961      	adds	r1, r4, r5
 8006690:	428b      	cmp	r3, r1
 8006692:	bf04      	itt	eq
 8006694:	6819      	ldreq	r1, [r3, #0]
 8006696:	685b      	ldreq	r3, [r3, #4]
 8006698:	6063      	str	r3, [r4, #4]
 800669a:	bf04      	itt	eq
 800669c:	1949      	addeq	r1, r1, r5
 800669e:	6021      	streq	r1, [r4, #0]
 80066a0:	6054      	str	r4, [r2, #4]
 80066a2:	e7ca      	b.n	800663a <_free_r+0x26>
 80066a4:	b003      	add	sp, #12
 80066a6:	bd30      	pop	{r4, r5, pc}
 80066a8:	200193d0 	.word	0x200193d0

080066ac <sbrk_aligned>:
 80066ac:	b570      	push	{r4, r5, r6, lr}
 80066ae:	4e0e      	ldr	r6, [pc, #56]	; (80066e8 <sbrk_aligned+0x3c>)
 80066b0:	460c      	mov	r4, r1
 80066b2:	6831      	ldr	r1, [r6, #0]
 80066b4:	4605      	mov	r5, r0
 80066b6:	b911      	cbnz	r1, 80066be <sbrk_aligned+0x12>
 80066b8:	f000 fcd6 	bl	8007068 <_sbrk_r>
 80066bc:	6030      	str	r0, [r6, #0]
 80066be:	4621      	mov	r1, r4
 80066c0:	4628      	mov	r0, r5
 80066c2:	f000 fcd1 	bl	8007068 <_sbrk_r>
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	d00a      	beq.n	80066e0 <sbrk_aligned+0x34>
 80066ca:	1cc4      	adds	r4, r0, #3
 80066cc:	f024 0403 	bic.w	r4, r4, #3
 80066d0:	42a0      	cmp	r0, r4
 80066d2:	d007      	beq.n	80066e4 <sbrk_aligned+0x38>
 80066d4:	1a21      	subs	r1, r4, r0
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 fcc6 	bl	8007068 <_sbrk_r>
 80066dc:	3001      	adds	r0, #1
 80066de:	d101      	bne.n	80066e4 <sbrk_aligned+0x38>
 80066e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80066e4:	4620      	mov	r0, r4
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	200193d4 	.word	0x200193d4

080066ec <_malloc_r>:
 80066ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f0:	1ccd      	adds	r5, r1, #3
 80066f2:	f025 0503 	bic.w	r5, r5, #3
 80066f6:	3508      	adds	r5, #8
 80066f8:	2d0c      	cmp	r5, #12
 80066fa:	bf38      	it	cc
 80066fc:	250c      	movcc	r5, #12
 80066fe:	2d00      	cmp	r5, #0
 8006700:	4607      	mov	r7, r0
 8006702:	db01      	blt.n	8006708 <_malloc_r+0x1c>
 8006704:	42a9      	cmp	r1, r5
 8006706:	d905      	bls.n	8006714 <_malloc_r+0x28>
 8006708:	230c      	movs	r3, #12
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	2600      	movs	r6, #0
 800670e:	4630      	mov	r0, r6
 8006710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006714:	4e2e      	ldr	r6, [pc, #184]	; (80067d0 <_malloc_r+0xe4>)
 8006716:	f000 ffb9 	bl	800768c <__malloc_lock>
 800671a:	6833      	ldr	r3, [r6, #0]
 800671c:	461c      	mov	r4, r3
 800671e:	bb34      	cbnz	r4, 800676e <_malloc_r+0x82>
 8006720:	4629      	mov	r1, r5
 8006722:	4638      	mov	r0, r7
 8006724:	f7ff ffc2 	bl	80066ac <sbrk_aligned>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	4604      	mov	r4, r0
 800672c:	d14d      	bne.n	80067ca <_malloc_r+0xde>
 800672e:	6834      	ldr	r4, [r6, #0]
 8006730:	4626      	mov	r6, r4
 8006732:	2e00      	cmp	r6, #0
 8006734:	d140      	bne.n	80067b8 <_malloc_r+0xcc>
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	4631      	mov	r1, r6
 800673a:	4638      	mov	r0, r7
 800673c:	eb04 0803 	add.w	r8, r4, r3
 8006740:	f000 fc92 	bl	8007068 <_sbrk_r>
 8006744:	4580      	cmp	r8, r0
 8006746:	d13a      	bne.n	80067be <_malloc_r+0xd2>
 8006748:	6821      	ldr	r1, [r4, #0]
 800674a:	3503      	adds	r5, #3
 800674c:	1a6d      	subs	r5, r5, r1
 800674e:	f025 0503 	bic.w	r5, r5, #3
 8006752:	3508      	adds	r5, #8
 8006754:	2d0c      	cmp	r5, #12
 8006756:	bf38      	it	cc
 8006758:	250c      	movcc	r5, #12
 800675a:	4629      	mov	r1, r5
 800675c:	4638      	mov	r0, r7
 800675e:	f7ff ffa5 	bl	80066ac <sbrk_aligned>
 8006762:	3001      	adds	r0, #1
 8006764:	d02b      	beq.n	80067be <_malloc_r+0xd2>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	442b      	add	r3, r5
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	e00e      	b.n	800678c <_malloc_r+0xa0>
 800676e:	6822      	ldr	r2, [r4, #0]
 8006770:	1b52      	subs	r2, r2, r5
 8006772:	d41e      	bmi.n	80067b2 <_malloc_r+0xc6>
 8006774:	2a0b      	cmp	r2, #11
 8006776:	d916      	bls.n	80067a6 <_malloc_r+0xba>
 8006778:	1961      	adds	r1, r4, r5
 800677a:	42a3      	cmp	r3, r4
 800677c:	6025      	str	r5, [r4, #0]
 800677e:	bf18      	it	ne
 8006780:	6059      	strne	r1, [r3, #4]
 8006782:	6863      	ldr	r3, [r4, #4]
 8006784:	bf08      	it	eq
 8006786:	6031      	streq	r1, [r6, #0]
 8006788:	5162      	str	r2, [r4, r5]
 800678a:	604b      	str	r3, [r1, #4]
 800678c:	4638      	mov	r0, r7
 800678e:	f104 060b 	add.w	r6, r4, #11
 8006792:	f000 ff81 	bl	8007698 <__malloc_unlock>
 8006796:	f026 0607 	bic.w	r6, r6, #7
 800679a:	1d23      	adds	r3, r4, #4
 800679c:	1af2      	subs	r2, r6, r3
 800679e:	d0b6      	beq.n	800670e <_malloc_r+0x22>
 80067a0:	1b9b      	subs	r3, r3, r6
 80067a2:	50a3      	str	r3, [r4, r2]
 80067a4:	e7b3      	b.n	800670e <_malloc_r+0x22>
 80067a6:	6862      	ldr	r2, [r4, #4]
 80067a8:	42a3      	cmp	r3, r4
 80067aa:	bf0c      	ite	eq
 80067ac:	6032      	streq	r2, [r6, #0]
 80067ae:	605a      	strne	r2, [r3, #4]
 80067b0:	e7ec      	b.n	800678c <_malloc_r+0xa0>
 80067b2:	4623      	mov	r3, r4
 80067b4:	6864      	ldr	r4, [r4, #4]
 80067b6:	e7b2      	b.n	800671e <_malloc_r+0x32>
 80067b8:	4634      	mov	r4, r6
 80067ba:	6876      	ldr	r6, [r6, #4]
 80067bc:	e7b9      	b.n	8006732 <_malloc_r+0x46>
 80067be:	230c      	movs	r3, #12
 80067c0:	603b      	str	r3, [r7, #0]
 80067c2:	4638      	mov	r0, r7
 80067c4:	f000 ff68 	bl	8007698 <__malloc_unlock>
 80067c8:	e7a1      	b.n	800670e <_malloc_r+0x22>
 80067ca:	6025      	str	r5, [r4, #0]
 80067cc:	e7de      	b.n	800678c <_malloc_r+0xa0>
 80067ce:	bf00      	nop
 80067d0:	200193d0 	.word	0x200193d0

080067d4 <__ssputs_r>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	688e      	ldr	r6, [r1, #8]
 80067da:	429e      	cmp	r6, r3
 80067dc:	4682      	mov	sl, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	4690      	mov	r8, r2
 80067e2:	461f      	mov	r7, r3
 80067e4:	d838      	bhi.n	8006858 <__ssputs_r+0x84>
 80067e6:	898a      	ldrh	r2, [r1, #12]
 80067e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067ec:	d032      	beq.n	8006854 <__ssputs_r+0x80>
 80067ee:	6825      	ldr	r5, [r4, #0]
 80067f0:	6909      	ldr	r1, [r1, #16]
 80067f2:	eba5 0901 	sub.w	r9, r5, r1
 80067f6:	6965      	ldr	r5, [r4, #20]
 80067f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006800:	3301      	adds	r3, #1
 8006802:	444b      	add	r3, r9
 8006804:	106d      	asrs	r5, r5, #1
 8006806:	429d      	cmp	r5, r3
 8006808:	bf38      	it	cc
 800680a:	461d      	movcc	r5, r3
 800680c:	0553      	lsls	r3, r2, #21
 800680e:	d531      	bpl.n	8006874 <__ssputs_r+0xa0>
 8006810:	4629      	mov	r1, r5
 8006812:	f7ff ff6b 	bl	80066ec <_malloc_r>
 8006816:	4606      	mov	r6, r0
 8006818:	b950      	cbnz	r0, 8006830 <__ssputs_r+0x5c>
 800681a:	230c      	movs	r3, #12
 800681c:	f8ca 3000 	str.w	r3, [sl]
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800682c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006830:	6921      	ldr	r1, [r4, #16]
 8006832:	464a      	mov	r2, r9
 8006834:	f7ff fe22 	bl	800647c <memcpy>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800683e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006842:	81a3      	strh	r3, [r4, #12]
 8006844:	6126      	str	r6, [r4, #16]
 8006846:	6165      	str	r5, [r4, #20]
 8006848:	444e      	add	r6, r9
 800684a:	eba5 0509 	sub.w	r5, r5, r9
 800684e:	6026      	str	r6, [r4, #0]
 8006850:	60a5      	str	r5, [r4, #8]
 8006852:	463e      	mov	r6, r7
 8006854:	42be      	cmp	r6, r7
 8006856:	d900      	bls.n	800685a <__ssputs_r+0x86>
 8006858:	463e      	mov	r6, r7
 800685a:	6820      	ldr	r0, [r4, #0]
 800685c:	4632      	mov	r2, r6
 800685e:	4641      	mov	r1, r8
 8006860:	f000 fefa 	bl	8007658 <memmove>
 8006864:	68a3      	ldr	r3, [r4, #8]
 8006866:	1b9b      	subs	r3, r3, r6
 8006868:	60a3      	str	r3, [r4, #8]
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	4433      	add	r3, r6
 800686e:	6023      	str	r3, [r4, #0]
 8006870:	2000      	movs	r0, #0
 8006872:	e7db      	b.n	800682c <__ssputs_r+0x58>
 8006874:	462a      	mov	r2, r5
 8006876:	f000 ff15 	bl	80076a4 <_realloc_r>
 800687a:	4606      	mov	r6, r0
 800687c:	2800      	cmp	r0, #0
 800687e:	d1e1      	bne.n	8006844 <__ssputs_r+0x70>
 8006880:	6921      	ldr	r1, [r4, #16]
 8006882:	4650      	mov	r0, sl
 8006884:	f7ff fec6 	bl	8006614 <_free_r>
 8006888:	e7c7      	b.n	800681a <__ssputs_r+0x46>
	...

0800688c <_svfiprintf_r>:
 800688c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006890:	4698      	mov	r8, r3
 8006892:	898b      	ldrh	r3, [r1, #12]
 8006894:	061b      	lsls	r3, r3, #24
 8006896:	b09d      	sub	sp, #116	; 0x74
 8006898:	4607      	mov	r7, r0
 800689a:	460d      	mov	r5, r1
 800689c:	4614      	mov	r4, r2
 800689e:	d50e      	bpl.n	80068be <_svfiprintf_r+0x32>
 80068a0:	690b      	ldr	r3, [r1, #16]
 80068a2:	b963      	cbnz	r3, 80068be <_svfiprintf_r+0x32>
 80068a4:	2140      	movs	r1, #64	; 0x40
 80068a6:	f7ff ff21 	bl	80066ec <_malloc_r>
 80068aa:	6028      	str	r0, [r5, #0]
 80068ac:	6128      	str	r0, [r5, #16]
 80068ae:	b920      	cbnz	r0, 80068ba <_svfiprintf_r+0x2e>
 80068b0:	230c      	movs	r3, #12
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068b8:	e0d1      	b.n	8006a5e <_svfiprintf_r+0x1d2>
 80068ba:	2340      	movs	r3, #64	; 0x40
 80068bc:	616b      	str	r3, [r5, #20]
 80068be:	2300      	movs	r3, #0
 80068c0:	9309      	str	r3, [sp, #36]	; 0x24
 80068c2:	2320      	movs	r3, #32
 80068c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80068cc:	2330      	movs	r3, #48	; 0x30
 80068ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a78 <_svfiprintf_r+0x1ec>
 80068d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068d6:	f04f 0901 	mov.w	r9, #1
 80068da:	4623      	mov	r3, r4
 80068dc:	469a      	mov	sl, r3
 80068de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068e2:	b10a      	cbz	r2, 80068e8 <_svfiprintf_r+0x5c>
 80068e4:	2a25      	cmp	r2, #37	; 0x25
 80068e6:	d1f9      	bne.n	80068dc <_svfiprintf_r+0x50>
 80068e8:	ebba 0b04 	subs.w	fp, sl, r4
 80068ec:	d00b      	beq.n	8006906 <_svfiprintf_r+0x7a>
 80068ee:	465b      	mov	r3, fp
 80068f0:	4622      	mov	r2, r4
 80068f2:	4629      	mov	r1, r5
 80068f4:	4638      	mov	r0, r7
 80068f6:	f7ff ff6d 	bl	80067d4 <__ssputs_r>
 80068fa:	3001      	adds	r0, #1
 80068fc:	f000 80aa 	beq.w	8006a54 <_svfiprintf_r+0x1c8>
 8006900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006902:	445a      	add	r2, fp
 8006904:	9209      	str	r2, [sp, #36]	; 0x24
 8006906:	f89a 3000 	ldrb.w	r3, [sl]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80a2 	beq.w	8006a54 <_svfiprintf_r+0x1c8>
 8006910:	2300      	movs	r3, #0
 8006912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800691a:	f10a 0a01 	add.w	sl, sl, #1
 800691e:	9304      	str	r3, [sp, #16]
 8006920:	9307      	str	r3, [sp, #28]
 8006922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006926:	931a      	str	r3, [sp, #104]	; 0x68
 8006928:	4654      	mov	r4, sl
 800692a:	2205      	movs	r2, #5
 800692c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006930:	4851      	ldr	r0, [pc, #324]	; (8006a78 <_svfiprintf_r+0x1ec>)
 8006932:	f7f9 fc75 	bl	8000220 <memchr>
 8006936:	9a04      	ldr	r2, [sp, #16]
 8006938:	b9d8      	cbnz	r0, 8006972 <_svfiprintf_r+0xe6>
 800693a:	06d0      	lsls	r0, r2, #27
 800693c:	bf44      	itt	mi
 800693e:	2320      	movmi	r3, #32
 8006940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006944:	0711      	lsls	r1, r2, #28
 8006946:	bf44      	itt	mi
 8006948:	232b      	movmi	r3, #43	; 0x2b
 800694a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800694e:	f89a 3000 	ldrb.w	r3, [sl]
 8006952:	2b2a      	cmp	r3, #42	; 0x2a
 8006954:	d015      	beq.n	8006982 <_svfiprintf_r+0xf6>
 8006956:	9a07      	ldr	r2, [sp, #28]
 8006958:	4654      	mov	r4, sl
 800695a:	2000      	movs	r0, #0
 800695c:	f04f 0c0a 	mov.w	ip, #10
 8006960:	4621      	mov	r1, r4
 8006962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006966:	3b30      	subs	r3, #48	; 0x30
 8006968:	2b09      	cmp	r3, #9
 800696a:	d94e      	bls.n	8006a0a <_svfiprintf_r+0x17e>
 800696c:	b1b0      	cbz	r0, 800699c <_svfiprintf_r+0x110>
 800696e:	9207      	str	r2, [sp, #28]
 8006970:	e014      	b.n	800699c <_svfiprintf_r+0x110>
 8006972:	eba0 0308 	sub.w	r3, r0, r8
 8006976:	fa09 f303 	lsl.w	r3, r9, r3
 800697a:	4313      	orrs	r3, r2
 800697c:	9304      	str	r3, [sp, #16]
 800697e:	46a2      	mov	sl, r4
 8006980:	e7d2      	b.n	8006928 <_svfiprintf_r+0x9c>
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	1d19      	adds	r1, r3, #4
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	9103      	str	r1, [sp, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	bfbb      	ittet	lt
 800698e:	425b      	neglt	r3, r3
 8006990:	f042 0202 	orrlt.w	r2, r2, #2
 8006994:	9307      	strge	r3, [sp, #28]
 8006996:	9307      	strlt	r3, [sp, #28]
 8006998:	bfb8      	it	lt
 800699a:	9204      	strlt	r2, [sp, #16]
 800699c:	7823      	ldrb	r3, [r4, #0]
 800699e:	2b2e      	cmp	r3, #46	; 0x2e
 80069a0:	d10c      	bne.n	80069bc <_svfiprintf_r+0x130>
 80069a2:	7863      	ldrb	r3, [r4, #1]
 80069a4:	2b2a      	cmp	r3, #42	; 0x2a
 80069a6:	d135      	bne.n	8006a14 <_svfiprintf_r+0x188>
 80069a8:	9b03      	ldr	r3, [sp, #12]
 80069aa:	1d1a      	adds	r2, r3, #4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	9203      	str	r2, [sp, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bfb8      	it	lt
 80069b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80069b8:	3402      	adds	r4, #2
 80069ba:	9305      	str	r3, [sp, #20]
 80069bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a88 <_svfiprintf_r+0x1fc>
 80069c0:	7821      	ldrb	r1, [r4, #0]
 80069c2:	2203      	movs	r2, #3
 80069c4:	4650      	mov	r0, sl
 80069c6:	f7f9 fc2b 	bl	8000220 <memchr>
 80069ca:	b140      	cbz	r0, 80069de <_svfiprintf_r+0x152>
 80069cc:	2340      	movs	r3, #64	; 0x40
 80069ce:	eba0 000a 	sub.w	r0, r0, sl
 80069d2:	fa03 f000 	lsl.w	r0, r3, r0
 80069d6:	9b04      	ldr	r3, [sp, #16]
 80069d8:	4303      	orrs	r3, r0
 80069da:	3401      	adds	r4, #1
 80069dc:	9304      	str	r3, [sp, #16]
 80069de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e2:	4826      	ldr	r0, [pc, #152]	; (8006a7c <_svfiprintf_r+0x1f0>)
 80069e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069e8:	2206      	movs	r2, #6
 80069ea:	f7f9 fc19 	bl	8000220 <memchr>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d038      	beq.n	8006a64 <_svfiprintf_r+0x1d8>
 80069f2:	4b23      	ldr	r3, [pc, #140]	; (8006a80 <_svfiprintf_r+0x1f4>)
 80069f4:	bb1b      	cbnz	r3, 8006a3e <_svfiprintf_r+0x1b2>
 80069f6:	9b03      	ldr	r3, [sp, #12]
 80069f8:	3307      	adds	r3, #7
 80069fa:	f023 0307 	bic.w	r3, r3, #7
 80069fe:	3308      	adds	r3, #8
 8006a00:	9303      	str	r3, [sp, #12]
 8006a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a04:	4433      	add	r3, r6
 8006a06:	9309      	str	r3, [sp, #36]	; 0x24
 8006a08:	e767      	b.n	80068da <_svfiprintf_r+0x4e>
 8006a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a0e:	460c      	mov	r4, r1
 8006a10:	2001      	movs	r0, #1
 8006a12:	e7a5      	b.n	8006960 <_svfiprintf_r+0xd4>
 8006a14:	2300      	movs	r3, #0
 8006a16:	3401      	adds	r4, #1
 8006a18:	9305      	str	r3, [sp, #20]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	f04f 0c0a 	mov.w	ip, #10
 8006a20:	4620      	mov	r0, r4
 8006a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a26:	3a30      	subs	r2, #48	; 0x30
 8006a28:	2a09      	cmp	r2, #9
 8006a2a:	d903      	bls.n	8006a34 <_svfiprintf_r+0x1a8>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0c5      	beq.n	80069bc <_svfiprintf_r+0x130>
 8006a30:	9105      	str	r1, [sp, #20]
 8006a32:	e7c3      	b.n	80069bc <_svfiprintf_r+0x130>
 8006a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a38:	4604      	mov	r4, r0
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e7f0      	b.n	8006a20 <_svfiprintf_r+0x194>
 8006a3e:	ab03      	add	r3, sp, #12
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	462a      	mov	r2, r5
 8006a44:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <_svfiprintf_r+0x1f8>)
 8006a46:	a904      	add	r1, sp, #16
 8006a48:	4638      	mov	r0, r7
 8006a4a:	f3af 8000 	nop.w
 8006a4e:	1c42      	adds	r2, r0, #1
 8006a50:	4606      	mov	r6, r0
 8006a52:	d1d6      	bne.n	8006a02 <_svfiprintf_r+0x176>
 8006a54:	89ab      	ldrh	r3, [r5, #12]
 8006a56:	065b      	lsls	r3, r3, #25
 8006a58:	f53f af2c 	bmi.w	80068b4 <_svfiprintf_r+0x28>
 8006a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a5e:	b01d      	add	sp, #116	; 0x74
 8006a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a64:	ab03      	add	r3, sp, #12
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	462a      	mov	r2, r5
 8006a6a:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <_svfiprintf_r+0x1f8>)
 8006a6c:	a904      	add	r1, sp, #16
 8006a6e:	4638      	mov	r0, r7
 8006a70:	f000 f9d4 	bl	8006e1c <_printf_i>
 8006a74:	e7eb      	b.n	8006a4e <_svfiprintf_r+0x1c2>
 8006a76:	bf00      	nop
 8006a78:	08007ad6 	.word	0x08007ad6
 8006a7c:	08007ae0 	.word	0x08007ae0
 8006a80:	00000000 	.word	0x00000000
 8006a84:	080067d5 	.word	0x080067d5
 8006a88:	08007adc 	.word	0x08007adc

08006a8c <__sfputc_r>:
 8006a8c:	6893      	ldr	r3, [r2, #8]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	b410      	push	{r4}
 8006a94:	6093      	str	r3, [r2, #8]
 8006a96:	da08      	bge.n	8006aaa <__sfputc_r+0x1e>
 8006a98:	6994      	ldr	r4, [r2, #24]
 8006a9a:	42a3      	cmp	r3, r4
 8006a9c:	db01      	blt.n	8006aa2 <__sfputc_r+0x16>
 8006a9e:	290a      	cmp	r1, #10
 8006aa0:	d103      	bne.n	8006aaa <__sfputc_r+0x1e>
 8006aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aa6:	f000 baef 	b.w	8007088 <__swbuf_r>
 8006aaa:	6813      	ldr	r3, [r2, #0]
 8006aac:	1c58      	adds	r0, r3, #1
 8006aae:	6010      	str	r0, [r2, #0]
 8006ab0:	7019      	strb	r1, [r3, #0]
 8006ab2:	4608      	mov	r0, r1
 8006ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <__sfputs_r>:
 8006aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abc:	4606      	mov	r6, r0
 8006abe:	460f      	mov	r7, r1
 8006ac0:	4614      	mov	r4, r2
 8006ac2:	18d5      	adds	r5, r2, r3
 8006ac4:	42ac      	cmp	r4, r5
 8006ac6:	d101      	bne.n	8006acc <__sfputs_r+0x12>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e007      	b.n	8006adc <__sfputs_r+0x22>
 8006acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad0:	463a      	mov	r2, r7
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f7ff ffda 	bl	8006a8c <__sfputc_r>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d1f3      	bne.n	8006ac4 <__sfputs_r+0xa>
 8006adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ae0 <_vfiprintf_r>:
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	460d      	mov	r5, r1
 8006ae6:	b09d      	sub	sp, #116	; 0x74
 8006ae8:	4614      	mov	r4, r2
 8006aea:	4698      	mov	r8, r3
 8006aec:	4606      	mov	r6, r0
 8006aee:	b118      	cbz	r0, 8006af8 <_vfiprintf_r+0x18>
 8006af0:	6983      	ldr	r3, [r0, #24]
 8006af2:	b90b      	cbnz	r3, 8006af8 <_vfiprintf_r+0x18>
 8006af4:	f000 fcaa 	bl	800744c <__sinit>
 8006af8:	4b89      	ldr	r3, [pc, #548]	; (8006d20 <_vfiprintf_r+0x240>)
 8006afa:	429d      	cmp	r5, r3
 8006afc:	d11b      	bne.n	8006b36 <_vfiprintf_r+0x56>
 8006afe:	6875      	ldr	r5, [r6, #4]
 8006b00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b02:	07d9      	lsls	r1, r3, #31
 8006b04:	d405      	bmi.n	8006b12 <_vfiprintf_r+0x32>
 8006b06:	89ab      	ldrh	r3, [r5, #12]
 8006b08:	059a      	lsls	r2, r3, #22
 8006b0a:	d402      	bmi.n	8006b12 <_vfiprintf_r+0x32>
 8006b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b0e:	f000 fd3b 	bl	8007588 <__retarget_lock_acquire_recursive>
 8006b12:	89ab      	ldrh	r3, [r5, #12]
 8006b14:	071b      	lsls	r3, r3, #28
 8006b16:	d501      	bpl.n	8006b1c <_vfiprintf_r+0x3c>
 8006b18:	692b      	ldr	r3, [r5, #16]
 8006b1a:	b9eb      	cbnz	r3, 8006b58 <_vfiprintf_r+0x78>
 8006b1c:	4629      	mov	r1, r5
 8006b1e:	4630      	mov	r0, r6
 8006b20:	f000 fb04 	bl	800712c <__swsetup_r>
 8006b24:	b1c0      	cbz	r0, 8006b58 <_vfiprintf_r+0x78>
 8006b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b28:	07dc      	lsls	r4, r3, #31
 8006b2a:	d50e      	bpl.n	8006b4a <_vfiprintf_r+0x6a>
 8006b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b30:	b01d      	add	sp, #116	; 0x74
 8006b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b36:	4b7b      	ldr	r3, [pc, #492]	; (8006d24 <_vfiprintf_r+0x244>)
 8006b38:	429d      	cmp	r5, r3
 8006b3a:	d101      	bne.n	8006b40 <_vfiprintf_r+0x60>
 8006b3c:	68b5      	ldr	r5, [r6, #8]
 8006b3e:	e7df      	b.n	8006b00 <_vfiprintf_r+0x20>
 8006b40:	4b79      	ldr	r3, [pc, #484]	; (8006d28 <_vfiprintf_r+0x248>)
 8006b42:	429d      	cmp	r5, r3
 8006b44:	bf08      	it	eq
 8006b46:	68f5      	ldreq	r5, [r6, #12]
 8006b48:	e7da      	b.n	8006b00 <_vfiprintf_r+0x20>
 8006b4a:	89ab      	ldrh	r3, [r5, #12]
 8006b4c:	0598      	lsls	r0, r3, #22
 8006b4e:	d4ed      	bmi.n	8006b2c <_vfiprintf_r+0x4c>
 8006b50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b52:	f000 fd1a 	bl	800758a <__retarget_lock_release_recursive>
 8006b56:	e7e9      	b.n	8006b2c <_vfiprintf_r+0x4c>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b5c:	2320      	movs	r3, #32
 8006b5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b62:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b66:	2330      	movs	r3, #48	; 0x30
 8006b68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d2c <_vfiprintf_r+0x24c>
 8006b6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b70:	f04f 0901 	mov.w	r9, #1
 8006b74:	4623      	mov	r3, r4
 8006b76:	469a      	mov	sl, r3
 8006b78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b7c:	b10a      	cbz	r2, 8006b82 <_vfiprintf_r+0xa2>
 8006b7e:	2a25      	cmp	r2, #37	; 0x25
 8006b80:	d1f9      	bne.n	8006b76 <_vfiprintf_r+0x96>
 8006b82:	ebba 0b04 	subs.w	fp, sl, r4
 8006b86:	d00b      	beq.n	8006ba0 <_vfiprintf_r+0xc0>
 8006b88:	465b      	mov	r3, fp
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	4630      	mov	r0, r6
 8006b90:	f7ff ff93 	bl	8006aba <__sfputs_r>
 8006b94:	3001      	adds	r0, #1
 8006b96:	f000 80aa 	beq.w	8006cee <_vfiprintf_r+0x20e>
 8006b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b9c:	445a      	add	r2, fp
 8006b9e:	9209      	str	r2, [sp, #36]	; 0x24
 8006ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 80a2 	beq.w	8006cee <_vfiprintf_r+0x20e>
 8006baa:	2300      	movs	r3, #0
 8006bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bb4:	f10a 0a01 	add.w	sl, sl, #1
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	9307      	str	r3, [sp, #28]
 8006bbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bc0:	931a      	str	r3, [sp, #104]	; 0x68
 8006bc2:	4654      	mov	r4, sl
 8006bc4:	2205      	movs	r2, #5
 8006bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bca:	4858      	ldr	r0, [pc, #352]	; (8006d2c <_vfiprintf_r+0x24c>)
 8006bcc:	f7f9 fb28 	bl	8000220 <memchr>
 8006bd0:	9a04      	ldr	r2, [sp, #16]
 8006bd2:	b9d8      	cbnz	r0, 8006c0c <_vfiprintf_r+0x12c>
 8006bd4:	06d1      	lsls	r1, r2, #27
 8006bd6:	bf44      	itt	mi
 8006bd8:	2320      	movmi	r3, #32
 8006bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bde:	0713      	lsls	r3, r2, #28
 8006be0:	bf44      	itt	mi
 8006be2:	232b      	movmi	r3, #43	; 0x2b
 8006be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006be8:	f89a 3000 	ldrb.w	r3, [sl]
 8006bec:	2b2a      	cmp	r3, #42	; 0x2a
 8006bee:	d015      	beq.n	8006c1c <_vfiprintf_r+0x13c>
 8006bf0:	9a07      	ldr	r2, [sp, #28]
 8006bf2:	4654      	mov	r4, sl
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	f04f 0c0a 	mov.w	ip, #10
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c00:	3b30      	subs	r3, #48	; 0x30
 8006c02:	2b09      	cmp	r3, #9
 8006c04:	d94e      	bls.n	8006ca4 <_vfiprintf_r+0x1c4>
 8006c06:	b1b0      	cbz	r0, 8006c36 <_vfiprintf_r+0x156>
 8006c08:	9207      	str	r2, [sp, #28]
 8006c0a:	e014      	b.n	8006c36 <_vfiprintf_r+0x156>
 8006c0c:	eba0 0308 	sub.w	r3, r0, r8
 8006c10:	fa09 f303 	lsl.w	r3, r9, r3
 8006c14:	4313      	orrs	r3, r2
 8006c16:	9304      	str	r3, [sp, #16]
 8006c18:	46a2      	mov	sl, r4
 8006c1a:	e7d2      	b.n	8006bc2 <_vfiprintf_r+0xe2>
 8006c1c:	9b03      	ldr	r3, [sp, #12]
 8006c1e:	1d19      	adds	r1, r3, #4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	9103      	str	r1, [sp, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bfbb      	ittet	lt
 8006c28:	425b      	neglt	r3, r3
 8006c2a:	f042 0202 	orrlt.w	r2, r2, #2
 8006c2e:	9307      	strge	r3, [sp, #28]
 8006c30:	9307      	strlt	r3, [sp, #28]
 8006c32:	bfb8      	it	lt
 8006c34:	9204      	strlt	r2, [sp, #16]
 8006c36:	7823      	ldrb	r3, [r4, #0]
 8006c38:	2b2e      	cmp	r3, #46	; 0x2e
 8006c3a:	d10c      	bne.n	8006c56 <_vfiprintf_r+0x176>
 8006c3c:	7863      	ldrb	r3, [r4, #1]
 8006c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8006c40:	d135      	bne.n	8006cae <_vfiprintf_r+0x1ce>
 8006c42:	9b03      	ldr	r3, [sp, #12]
 8006c44:	1d1a      	adds	r2, r3, #4
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	9203      	str	r2, [sp, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	bfb8      	it	lt
 8006c4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c52:	3402      	adds	r4, #2
 8006c54:	9305      	str	r3, [sp, #20]
 8006c56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d3c <_vfiprintf_r+0x25c>
 8006c5a:	7821      	ldrb	r1, [r4, #0]
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	4650      	mov	r0, sl
 8006c60:	f7f9 fade 	bl	8000220 <memchr>
 8006c64:	b140      	cbz	r0, 8006c78 <_vfiprintf_r+0x198>
 8006c66:	2340      	movs	r3, #64	; 0x40
 8006c68:	eba0 000a 	sub.w	r0, r0, sl
 8006c6c:	fa03 f000 	lsl.w	r0, r3, r0
 8006c70:	9b04      	ldr	r3, [sp, #16]
 8006c72:	4303      	orrs	r3, r0
 8006c74:	3401      	adds	r4, #1
 8006c76:	9304      	str	r3, [sp, #16]
 8006c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c7c:	482c      	ldr	r0, [pc, #176]	; (8006d30 <_vfiprintf_r+0x250>)
 8006c7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c82:	2206      	movs	r2, #6
 8006c84:	f7f9 facc 	bl	8000220 <memchr>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d03f      	beq.n	8006d0c <_vfiprintf_r+0x22c>
 8006c8c:	4b29      	ldr	r3, [pc, #164]	; (8006d34 <_vfiprintf_r+0x254>)
 8006c8e:	bb1b      	cbnz	r3, 8006cd8 <_vfiprintf_r+0x1f8>
 8006c90:	9b03      	ldr	r3, [sp, #12]
 8006c92:	3307      	adds	r3, #7
 8006c94:	f023 0307 	bic.w	r3, r3, #7
 8006c98:	3308      	adds	r3, #8
 8006c9a:	9303      	str	r3, [sp, #12]
 8006c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c9e:	443b      	add	r3, r7
 8006ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca2:	e767      	b.n	8006b74 <_vfiprintf_r+0x94>
 8006ca4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ca8:	460c      	mov	r4, r1
 8006caa:	2001      	movs	r0, #1
 8006cac:	e7a5      	b.n	8006bfa <_vfiprintf_r+0x11a>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	3401      	adds	r4, #1
 8006cb2:	9305      	str	r3, [sp, #20]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	f04f 0c0a 	mov.w	ip, #10
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cc0:	3a30      	subs	r2, #48	; 0x30
 8006cc2:	2a09      	cmp	r2, #9
 8006cc4:	d903      	bls.n	8006cce <_vfiprintf_r+0x1ee>
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0c5      	beq.n	8006c56 <_vfiprintf_r+0x176>
 8006cca:	9105      	str	r1, [sp, #20]
 8006ccc:	e7c3      	b.n	8006c56 <_vfiprintf_r+0x176>
 8006cce:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e7f0      	b.n	8006cba <_vfiprintf_r+0x1da>
 8006cd8:	ab03      	add	r3, sp, #12
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	462a      	mov	r2, r5
 8006cde:	4b16      	ldr	r3, [pc, #88]	; (8006d38 <_vfiprintf_r+0x258>)
 8006ce0:	a904      	add	r1, sp, #16
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f3af 8000 	nop.w
 8006ce8:	4607      	mov	r7, r0
 8006cea:	1c78      	adds	r0, r7, #1
 8006cec:	d1d6      	bne.n	8006c9c <_vfiprintf_r+0x1bc>
 8006cee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cf0:	07d9      	lsls	r1, r3, #31
 8006cf2:	d405      	bmi.n	8006d00 <_vfiprintf_r+0x220>
 8006cf4:	89ab      	ldrh	r3, [r5, #12]
 8006cf6:	059a      	lsls	r2, r3, #22
 8006cf8:	d402      	bmi.n	8006d00 <_vfiprintf_r+0x220>
 8006cfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cfc:	f000 fc45 	bl	800758a <__retarget_lock_release_recursive>
 8006d00:	89ab      	ldrh	r3, [r5, #12]
 8006d02:	065b      	lsls	r3, r3, #25
 8006d04:	f53f af12 	bmi.w	8006b2c <_vfiprintf_r+0x4c>
 8006d08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d0a:	e711      	b.n	8006b30 <_vfiprintf_r+0x50>
 8006d0c:	ab03      	add	r3, sp, #12
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	462a      	mov	r2, r5
 8006d12:	4b09      	ldr	r3, [pc, #36]	; (8006d38 <_vfiprintf_r+0x258>)
 8006d14:	a904      	add	r1, sp, #16
 8006d16:	4630      	mov	r0, r6
 8006d18:	f000 f880 	bl	8006e1c <_printf_i>
 8006d1c:	e7e4      	b.n	8006ce8 <_vfiprintf_r+0x208>
 8006d1e:	bf00      	nop
 8006d20:	08007b2c 	.word	0x08007b2c
 8006d24:	08007b4c 	.word	0x08007b4c
 8006d28:	08007b0c 	.word	0x08007b0c
 8006d2c:	08007ad6 	.word	0x08007ad6
 8006d30:	08007ae0 	.word	0x08007ae0
 8006d34:	00000000 	.word	0x00000000
 8006d38:	08006abb 	.word	0x08006abb
 8006d3c:	08007adc 	.word	0x08007adc

08006d40 <_printf_common>:
 8006d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d44:	4616      	mov	r6, r2
 8006d46:	4699      	mov	r9, r3
 8006d48:	688a      	ldr	r2, [r1, #8]
 8006d4a:	690b      	ldr	r3, [r1, #16]
 8006d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d50:	4293      	cmp	r3, r2
 8006d52:	bfb8      	it	lt
 8006d54:	4613      	movlt	r3, r2
 8006d56:	6033      	str	r3, [r6, #0]
 8006d58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	460c      	mov	r4, r1
 8006d60:	b10a      	cbz	r2, 8006d66 <_printf_common+0x26>
 8006d62:	3301      	adds	r3, #1
 8006d64:	6033      	str	r3, [r6, #0]
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	0699      	lsls	r1, r3, #26
 8006d6a:	bf42      	ittt	mi
 8006d6c:	6833      	ldrmi	r3, [r6, #0]
 8006d6e:	3302      	addmi	r3, #2
 8006d70:	6033      	strmi	r3, [r6, #0]
 8006d72:	6825      	ldr	r5, [r4, #0]
 8006d74:	f015 0506 	ands.w	r5, r5, #6
 8006d78:	d106      	bne.n	8006d88 <_printf_common+0x48>
 8006d7a:	f104 0a19 	add.w	sl, r4, #25
 8006d7e:	68e3      	ldr	r3, [r4, #12]
 8006d80:	6832      	ldr	r2, [r6, #0]
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	42ab      	cmp	r3, r5
 8006d86:	dc26      	bgt.n	8006dd6 <_printf_common+0x96>
 8006d88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d8c:	1e13      	subs	r3, r2, #0
 8006d8e:	6822      	ldr	r2, [r4, #0]
 8006d90:	bf18      	it	ne
 8006d92:	2301      	movne	r3, #1
 8006d94:	0692      	lsls	r2, r2, #26
 8006d96:	d42b      	bmi.n	8006df0 <_printf_common+0xb0>
 8006d98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	4638      	mov	r0, r7
 8006da0:	47c0      	blx	r8
 8006da2:	3001      	adds	r0, #1
 8006da4:	d01e      	beq.n	8006de4 <_printf_common+0xa4>
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	68e5      	ldr	r5, [r4, #12]
 8006daa:	6832      	ldr	r2, [r6, #0]
 8006dac:	f003 0306 	and.w	r3, r3, #6
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	bf08      	it	eq
 8006db4:	1aad      	subeq	r5, r5, r2
 8006db6:	68a3      	ldr	r3, [r4, #8]
 8006db8:	6922      	ldr	r2, [r4, #16]
 8006dba:	bf0c      	ite	eq
 8006dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dc0:	2500      	movne	r5, #0
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	bfc4      	itt	gt
 8006dc6:	1a9b      	subgt	r3, r3, r2
 8006dc8:	18ed      	addgt	r5, r5, r3
 8006dca:	2600      	movs	r6, #0
 8006dcc:	341a      	adds	r4, #26
 8006dce:	42b5      	cmp	r5, r6
 8006dd0:	d11a      	bne.n	8006e08 <_printf_common+0xc8>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e008      	b.n	8006de8 <_printf_common+0xa8>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	4652      	mov	r2, sl
 8006dda:	4649      	mov	r1, r9
 8006ddc:	4638      	mov	r0, r7
 8006dde:	47c0      	blx	r8
 8006de0:	3001      	adds	r0, #1
 8006de2:	d103      	bne.n	8006dec <_printf_common+0xac>
 8006de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dec:	3501      	adds	r5, #1
 8006dee:	e7c6      	b.n	8006d7e <_printf_common+0x3e>
 8006df0:	18e1      	adds	r1, r4, r3
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	2030      	movs	r0, #48	; 0x30
 8006df6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dfa:	4422      	add	r2, r4
 8006dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e04:	3302      	adds	r3, #2
 8006e06:	e7c7      	b.n	8006d98 <_printf_common+0x58>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	4638      	mov	r0, r7
 8006e10:	47c0      	blx	r8
 8006e12:	3001      	adds	r0, #1
 8006e14:	d0e6      	beq.n	8006de4 <_printf_common+0xa4>
 8006e16:	3601      	adds	r6, #1
 8006e18:	e7d9      	b.n	8006dce <_printf_common+0x8e>
	...

08006e1c <_printf_i>:
 8006e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e20:	7e0f      	ldrb	r7, [r1, #24]
 8006e22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e24:	2f78      	cmp	r7, #120	; 0x78
 8006e26:	4691      	mov	r9, r2
 8006e28:	4680      	mov	r8, r0
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	469a      	mov	sl, r3
 8006e2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e32:	d807      	bhi.n	8006e44 <_printf_i+0x28>
 8006e34:	2f62      	cmp	r7, #98	; 0x62
 8006e36:	d80a      	bhi.n	8006e4e <_printf_i+0x32>
 8006e38:	2f00      	cmp	r7, #0
 8006e3a:	f000 80d8 	beq.w	8006fee <_printf_i+0x1d2>
 8006e3e:	2f58      	cmp	r7, #88	; 0x58
 8006e40:	f000 80a3 	beq.w	8006f8a <_printf_i+0x16e>
 8006e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e4c:	e03a      	b.n	8006ec4 <_printf_i+0xa8>
 8006e4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e52:	2b15      	cmp	r3, #21
 8006e54:	d8f6      	bhi.n	8006e44 <_printf_i+0x28>
 8006e56:	a101      	add	r1, pc, #4	; (adr r1, 8006e5c <_printf_i+0x40>)
 8006e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e5c:	08006eb5 	.word	0x08006eb5
 8006e60:	08006ec9 	.word	0x08006ec9
 8006e64:	08006e45 	.word	0x08006e45
 8006e68:	08006e45 	.word	0x08006e45
 8006e6c:	08006e45 	.word	0x08006e45
 8006e70:	08006e45 	.word	0x08006e45
 8006e74:	08006ec9 	.word	0x08006ec9
 8006e78:	08006e45 	.word	0x08006e45
 8006e7c:	08006e45 	.word	0x08006e45
 8006e80:	08006e45 	.word	0x08006e45
 8006e84:	08006e45 	.word	0x08006e45
 8006e88:	08006fd5 	.word	0x08006fd5
 8006e8c:	08006ef9 	.word	0x08006ef9
 8006e90:	08006fb7 	.word	0x08006fb7
 8006e94:	08006e45 	.word	0x08006e45
 8006e98:	08006e45 	.word	0x08006e45
 8006e9c:	08006ff7 	.word	0x08006ff7
 8006ea0:	08006e45 	.word	0x08006e45
 8006ea4:	08006ef9 	.word	0x08006ef9
 8006ea8:	08006e45 	.word	0x08006e45
 8006eac:	08006e45 	.word	0x08006e45
 8006eb0:	08006fbf 	.word	0x08006fbf
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	1d1a      	adds	r2, r3, #4
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	602a      	str	r2, [r5, #0]
 8006ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e0a3      	b.n	8007010 <_printf_i+0x1f4>
 8006ec8:	6820      	ldr	r0, [r4, #0]
 8006eca:	6829      	ldr	r1, [r5, #0]
 8006ecc:	0606      	lsls	r6, r0, #24
 8006ece:	f101 0304 	add.w	r3, r1, #4
 8006ed2:	d50a      	bpl.n	8006eea <_printf_i+0xce>
 8006ed4:	680e      	ldr	r6, [r1, #0]
 8006ed6:	602b      	str	r3, [r5, #0]
 8006ed8:	2e00      	cmp	r6, #0
 8006eda:	da03      	bge.n	8006ee4 <_printf_i+0xc8>
 8006edc:	232d      	movs	r3, #45	; 0x2d
 8006ede:	4276      	negs	r6, r6
 8006ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ee4:	485e      	ldr	r0, [pc, #376]	; (8007060 <_printf_i+0x244>)
 8006ee6:	230a      	movs	r3, #10
 8006ee8:	e019      	b.n	8006f1e <_printf_i+0x102>
 8006eea:	680e      	ldr	r6, [r1, #0]
 8006eec:	602b      	str	r3, [r5, #0]
 8006eee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ef2:	bf18      	it	ne
 8006ef4:	b236      	sxthne	r6, r6
 8006ef6:	e7ef      	b.n	8006ed8 <_printf_i+0xbc>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	6820      	ldr	r0, [r4, #0]
 8006efc:	1d19      	adds	r1, r3, #4
 8006efe:	6029      	str	r1, [r5, #0]
 8006f00:	0601      	lsls	r1, r0, #24
 8006f02:	d501      	bpl.n	8006f08 <_printf_i+0xec>
 8006f04:	681e      	ldr	r6, [r3, #0]
 8006f06:	e002      	b.n	8006f0e <_printf_i+0xf2>
 8006f08:	0646      	lsls	r6, r0, #25
 8006f0a:	d5fb      	bpl.n	8006f04 <_printf_i+0xe8>
 8006f0c:	881e      	ldrh	r6, [r3, #0]
 8006f0e:	4854      	ldr	r0, [pc, #336]	; (8007060 <_printf_i+0x244>)
 8006f10:	2f6f      	cmp	r7, #111	; 0x6f
 8006f12:	bf0c      	ite	eq
 8006f14:	2308      	moveq	r3, #8
 8006f16:	230a      	movne	r3, #10
 8006f18:	2100      	movs	r1, #0
 8006f1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f1e:	6865      	ldr	r5, [r4, #4]
 8006f20:	60a5      	str	r5, [r4, #8]
 8006f22:	2d00      	cmp	r5, #0
 8006f24:	bfa2      	ittt	ge
 8006f26:	6821      	ldrge	r1, [r4, #0]
 8006f28:	f021 0104 	bicge.w	r1, r1, #4
 8006f2c:	6021      	strge	r1, [r4, #0]
 8006f2e:	b90e      	cbnz	r6, 8006f34 <_printf_i+0x118>
 8006f30:	2d00      	cmp	r5, #0
 8006f32:	d04d      	beq.n	8006fd0 <_printf_i+0x1b4>
 8006f34:	4615      	mov	r5, r2
 8006f36:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f3a:	fb03 6711 	mls	r7, r3, r1, r6
 8006f3e:	5dc7      	ldrb	r7, [r0, r7]
 8006f40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f44:	4637      	mov	r7, r6
 8006f46:	42bb      	cmp	r3, r7
 8006f48:	460e      	mov	r6, r1
 8006f4a:	d9f4      	bls.n	8006f36 <_printf_i+0x11a>
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d10b      	bne.n	8006f68 <_printf_i+0x14c>
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	07de      	lsls	r6, r3, #31
 8006f54:	d508      	bpl.n	8006f68 <_printf_i+0x14c>
 8006f56:	6923      	ldr	r3, [r4, #16]
 8006f58:	6861      	ldr	r1, [r4, #4]
 8006f5a:	4299      	cmp	r1, r3
 8006f5c:	bfde      	ittt	le
 8006f5e:	2330      	movle	r3, #48	; 0x30
 8006f60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006f68:	1b52      	subs	r2, r2, r5
 8006f6a:	6122      	str	r2, [r4, #16]
 8006f6c:	f8cd a000 	str.w	sl, [sp]
 8006f70:	464b      	mov	r3, r9
 8006f72:	aa03      	add	r2, sp, #12
 8006f74:	4621      	mov	r1, r4
 8006f76:	4640      	mov	r0, r8
 8006f78:	f7ff fee2 	bl	8006d40 <_printf_common>
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d14c      	bne.n	800701a <_printf_i+0x1fe>
 8006f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f84:	b004      	add	sp, #16
 8006f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f8a:	4835      	ldr	r0, [pc, #212]	; (8007060 <_printf_i+0x244>)
 8006f8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f90:	6829      	ldr	r1, [r5, #0]
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f98:	6029      	str	r1, [r5, #0]
 8006f9a:	061d      	lsls	r5, r3, #24
 8006f9c:	d514      	bpl.n	8006fc8 <_printf_i+0x1ac>
 8006f9e:	07df      	lsls	r7, r3, #31
 8006fa0:	bf44      	itt	mi
 8006fa2:	f043 0320 	orrmi.w	r3, r3, #32
 8006fa6:	6023      	strmi	r3, [r4, #0]
 8006fa8:	b91e      	cbnz	r6, 8006fb2 <_printf_i+0x196>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	f023 0320 	bic.w	r3, r3, #32
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	2310      	movs	r3, #16
 8006fb4:	e7b0      	b.n	8006f18 <_printf_i+0xfc>
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	f043 0320 	orr.w	r3, r3, #32
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	2378      	movs	r3, #120	; 0x78
 8006fc0:	4828      	ldr	r0, [pc, #160]	; (8007064 <_printf_i+0x248>)
 8006fc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fc6:	e7e3      	b.n	8006f90 <_printf_i+0x174>
 8006fc8:	0659      	lsls	r1, r3, #25
 8006fca:	bf48      	it	mi
 8006fcc:	b2b6      	uxthmi	r6, r6
 8006fce:	e7e6      	b.n	8006f9e <_printf_i+0x182>
 8006fd0:	4615      	mov	r5, r2
 8006fd2:	e7bb      	b.n	8006f4c <_printf_i+0x130>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	6826      	ldr	r6, [r4, #0]
 8006fd8:	6961      	ldr	r1, [r4, #20]
 8006fda:	1d18      	adds	r0, r3, #4
 8006fdc:	6028      	str	r0, [r5, #0]
 8006fde:	0635      	lsls	r5, r6, #24
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	d501      	bpl.n	8006fe8 <_printf_i+0x1cc>
 8006fe4:	6019      	str	r1, [r3, #0]
 8006fe6:	e002      	b.n	8006fee <_printf_i+0x1d2>
 8006fe8:	0670      	lsls	r0, r6, #25
 8006fea:	d5fb      	bpl.n	8006fe4 <_printf_i+0x1c8>
 8006fec:	8019      	strh	r1, [r3, #0]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	6123      	str	r3, [r4, #16]
 8006ff2:	4615      	mov	r5, r2
 8006ff4:	e7ba      	b.n	8006f6c <_printf_i+0x150>
 8006ff6:	682b      	ldr	r3, [r5, #0]
 8006ff8:	1d1a      	adds	r2, r3, #4
 8006ffa:	602a      	str	r2, [r5, #0]
 8006ffc:	681d      	ldr	r5, [r3, #0]
 8006ffe:	6862      	ldr	r2, [r4, #4]
 8007000:	2100      	movs	r1, #0
 8007002:	4628      	mov	r0, r5
 8007004:	f7f9 f90c 	bl	8000220 <memchr>
 8007008:	b108      	cbz	r0, 800700e <_printf_i+0x1f2>
 800700a:	1b40      	subs	r0, r0, r5
 800700c:	6060      	str	r0, [r4, #4]
 800700e:	6863      	ldr	r3, [r4, #4]
 8007010:	6123      	str	r3, [r4, #16]
 8007012:	2300      	movs	r3, #0
 8007014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007018:	e7a8      	b.n	8006f6c <_printf_i+0x150>
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	462a      	mov	r2, r5
 800701e:	4649      	mov	r1, r9
 8007020:	4640      	mov	r0, r8
 8007022:	47d0      	blx	sl
 8007024:	3001      	adds	r0, #1
 8007026:	d0ab      	beq.n	8006f80 <_printf_i+0x164>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	079b      	lsls	r3, r3, #30
 800702c:	d413      	bmi.n	8007056 <_printf_i+0x23a>
 800702e:	68e0      	ldr	r0, [r4, #12]
 8007030:	9b03      	ldr	r3, [sp, #12]
 8007032:	4298      	cmp	r0, r3
 8007034:	bfb8      	it	lt
 8007036:	4618      	movlt	r0, r3
 8007038:	e7a4      	b.n	8006f84 <_printf_i+0x168>
 800703a:	2301      	movs	r3, #1
 800703c:	4632      	mov	r2, r6
 800703e:	4649      	mov	r1, r9
 8007040:	4640      	mov	r0, r8
 8007042:	47d0      	blx	sl
 8007044:	3001      	adds	r0, #1
 8007046:	d09b      	beq.n	8006f80 <_printf_i+0x164>
 8007048:	3501      	adds	r5, #1
 800704a:	68e3      	ldr	r3, [r4, #12]
 800704c:	9903      	ldr	r1, [sp, #12]
 800704e:	1a5b      	subs	r3, r3, r1
 8007050:	42ab      	cmp	r3, r5
 8007052:	dcf2      	bgt.n	800703a <_printf_i+0x21e>
 8007054:	e7eb      	b.n	800702e <_printf_i+0x212>
 8007056:	2500      	movs	r5, #0
 8007058:	f104 0619 	add.w	r6, r4, #25
 800705c:	e7f5      	b.n	800704a <_printf_i+0x22e>
 800705e:	bf00      	nop
 8007060:	08007ae7 	.word	0x08007ae7
 8007064:	08007af8 	.word	0x08007af8

08007068 <_sbrk_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d06      	ldr	r5, [pc, #24]	; (8007084 <_sbrk_r+0x1c>)
 800706c:	2300      	movs	r3, #0
 800706e:	4604      	mov	r4, r0
 8007070:	4608      	mov	r0, r1
 8007072:	602b      	str	r3, [r5, #0]
 8007074:	f7f9 feac 	bl	8000dd0 <_sbrk>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_sbrk_r+0x1a>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_sbrk_r+0x1a>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	200193dc 	.word	0x200193dc

08007088 <__swbuf_r>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	460e      	mov	r6, r1
 800708c:	4614      	mov	r4, r2
 800708e:	4605      	mov	r5, r0
 8007090:	b118      	cbz	r0, 800709a <__swbuf_r+0x12>
 8007092:	6983      	ldr	r3, [r0, #24]
 8007094:	b90b      	cbnz	r3, 800709a <__swbuf_r+0x12>
 8007096:	f000 f9d9 	bl	800744c <__sinit>
 800709a:	4b21      	ldr	r3, [pc, #132]	; (8007120 <__swbuf_r+0x98>)
 800709c:	429c      	cmp	r4, r3
 800709e:	d12b      	bne.n	80070f8 <__swbuf_r+0x70>
 80070a0:	686c      	ldr	r4, [r5, #4]
 80070a2:	69a3      	ldr	r3, [r4, #24]
 80070a4:	60a3      	str	r3, [r4, #8]
 80070a6:	89a3      	ldrh	r3, [r4, #12]
 80070a8:	071a      	lsls	r2, r3, #28
 80070aa:	d52f      	bpl.n	800710c <__swbuf_r+0x84>
 80070ac:	6923      	ldr	r3, [r4, #16]
 80070ae:	b36b      	cbz	r3, 800710c <__swbuf_r+0x84>
 80070b0:	6923      	ldr	r3, [r4, #16]
 80070b2:	6820      	ldr	r0, [r4, #0]
 80070b4:	1ac0      	subs	r0, r0, r3
 80070b6:	6963      	ldr	r3, [r4, #20]
 80070b8:	b2f6      	uxtb	r6, r6
 80070ba:	4283      	cmp	r3, r0
 80070bc:	4637      	mov	r7, r6
 80070be:	dc04      	bgt.n	80070ca <__swbuf_r+0x42>
 80070c0:	4621      	mov	r1, r4
 80070c2:	4628      	mov	r0, r5
 80070c4:	f000 f92e 	bl	8007324 <_fflush_r>
 80070c8:	bb30      	cbnz	r0, 8007118 <__swbuf_r+0x90>
 80070ca:	68a3      	ldr	r3, [r4, #8]
 80070cc:	3b01      	subs	r3, #1
 80070ce:	60a3      	str	r3, [r4, #8]
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	6022      	str	r2, [r4, #0]
 80070d6:	701e      	strb	r6, [r3, #0]
 80070d8:	6963      	ldr	r3, [r4, #20]
 80070da:	3001      	adds	r0, #1
 80070dc:	4283      	cmp	r3, r0
 80070de:	d004      	beq.n	80070ea <__swbuf_r+0x62>
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	07db      	lsls	r3, r3, #31
 80070e4:	d506      	bpl.n	80070f4 <__swbuf_r+0x6c>
 80070e6:	2e0a      	cmp	r6, #10
 80070e8:	d104      	bne.n	80070f4 <__swbuf_r+0x6c>
 80070ea:	4621      	mov	r1, r4
 80070ec:	4628      	mov	r0, r5
 80070ee:	f000 f919 	bl	8007324 <_fflush_r>
 80070f2:	b988      	cbnz	r0, 8007118 <__swbuf_r+0x90>
 80070f4:	4638      	mov	r0, r7
 80070f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f8:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <__swbuf_r+0x9c>)
 80070fa:	429c      	cmp	r4, r3
 80070fc:	d101      	bne.n	8007102 <__swbuf_r+0x7a>
 80070fe:	68ac      	ldr	r4, [r5, #8]
 8007100:	e7cf      	b.n	80070a2 <__swbuf_r+0x1a>
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <__swbuf_r+0xa0>)
 8007104:	429c      	cmp	r4, r3
 8007106:	bf08      	it	eq
 8007108:	68ec      	ldreq	r4, [r5, #12]
 800710a:	e7ca      	b.n	80070a2 <__swbuf_r+0x1a>
 800710c:	4621      	mov	r1, r4
 800710e:	4628      	mov	r0, r5
 8007110:	f000 f80c 	bl	800712c <__swsetup_r>
 8007114:	2800      	cmp	r0, #0
 8007116:	d0cb      	beq.n	80070b0 <__swbuf_r+0x28>
 8007118:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800711c:	e7ea      	b.n	80070f4 <__swbuf_r+0x6c>
 800711e:	bf00      	nop
 8007120:	08007b2c 	.word	0x08007b2c
 8007124:	08007b4c 	.word	0x08007b4c
 8007128:	08007b0c 	.word	0x08007b0c

0800712c <__swsetup_r>:
 800712c:	4b32      	ldr	r3, [pc, #200]	; (80071f8 <__swsetup_r+0xcc>)
 800712e:	b570      	push	{r4, r5, r6, lr}
 8007130:	681d      	ldr	r5, [r3, #0]
 8007132:	4606      	mov	r6, r0
 8007134:	460c      	mov	r4, r1
 8007136:	b125      	cbz	r5, 8007142 <__swsetup_r+0x16>
 8007138:	69ab      	ldr	r3, [r5, #24]
 800713a:	b913      	cbnz	r3, 8007142 <__swsetup_r+0x16>
 800713c:	4628      	mov	r0, r5
 800713e:	f000 f985 	bl	800744c <__sinit>
 8007142:	4b2e      	ldr	r3, [pc, #184]	; (80071fc <__swsetup_r+0xd0>)
 8007144:	429c      	cmp	r4, r3
 8007146:	d10f      	bne.n	8007168 <__swsetup_r+0x3c>
 8007148:	686c      	ldr	r4, [r5, #4]
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007150:	0719      	lsls	r1, r3, #28
 8007152:	d42c      	bmi.n	80071ae <__swsetup_r+0x82>
 8007154:	06dd      	lsls	r5, r3, #27
 8007156:	d411      	bmi.n	800717c <__swsetup_r+0x50>
 8007158:	2309      	movs	r3, #9
 800715a:	6033      	str	r3, [r6, #0]
 800715c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007160:	81a3      	strh	r3, [r4, #12]
 8007162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007166:	e03e      	b.n	80071e6 <__swsetup_r+0xba>
 8007168:	4b25      	ldr	r3, [pc, #148]	; (8007200 <__swsetup_r+0xd4>)
 800716a:	429c      	cmp	r4, r3
 800716c:	d101      	bne.n	8007172 <__swsetup_r+0x46>
 800716e:	68ac      	ldr	r4, [r5, #8]
 8007170:	e7eb      	b.n	800714a <__swsetup_r+0x1e>
 8007172:	4b24      	ldr	r3, [pc, #144]	; (8007204 <__swsetup_r+0xd8>)
 8007174:	429c      	cmp	r4, r3
 8007176:	bf08      	it	eq
 8007178:	68ec      	ldreq	r4, [r5, #12]
 800717a:	e7e6      	b.n	800714a <__swsetup_r+0x1e>
 800717c:	0758      	lsls	r0, r3, #29
 800717e:	d512      	bpl.n	80071a6 <__swsetup_r+0x7a>
 8007180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007182:	b141      	cbz	r1, 8007196 <__swsetup_r+0x6a>
 8007184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007188:	4299      	cmp	r1, r3
 800718a:	d002      	beq.n	8007192 <__swsetup_r+0x66>
 800718c:	4630      	mov	r0, r6
 800718e:	f7ff fa41 	bl	8006614 <_free_r>
 8007192:	2300      	movs	r3, #0
 8007194:	6363      	str	r3, [r4, #52]	; 0x34
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800719c:	81a3      	strh	r3, [r4, #12]
 800719e:	2300      	movs	r3, #0
 80071a0:	6063      	str	r3, [r4, #4]
 80071a2:	6923      	ldr	r3, [r4, #16]
 80071a4:	6023      	str	r3, [r4, #0]
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	f043 0308 	orr.w	r3, r3, #8
 80071ac:	81a3      	strh	r3, [r4, #12]
 80071ae:	6923      	ldr	r3, [r4, #16]
 80071b0:	b94b      	cbnz	r3, 80071c6 <__swsetup_r+0x9a>
 80071b2:	89a3      	ldrh	r3, [r4, #12]
 80071b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071bc:	d003      	beq.n	80071c6 <__swsetup_r+0x9a>
 80071be:	4621      	mov	r1, r4
 80071c0:	4630      	mov	r0, r6
 80071c2:	f000 fa09 	bl	80075d8 <__smakebuf_r>
 80071c6:	89a0      	ldrh	r0, [r4, #12]
 80071c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071cc:	f010 0301 	ands.w	r3, r0, #1
 80071d0:	d00a      	beq.n	80071e8 <__swsetup_r+0xbc>
 80071d2:	2300      	movs	r3, #0
 80071d4:	60a3      	str	r3, [r4, #8]
 80071d6:	6963      	ldr	r3, [r4, #20]
 80071d8:	425b      	negs	r3, r3
 80071da:	61a3      	str	r3, [r4, #24]
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	b943      	cbnz	r3, 80071f2 <__swsetup_r+0xc6>
 80071e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071e4:	d1ba      	bne.n	800715c <__swsetup_r+0x30>
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	0781      	lsls	r1, r0, #30
 80071ea:	bf58      	it	pl
 80071ec:	6963      	ldrpl	r3, [r4, #20]
 80071ee:	60a3      	str	r3, [r4, #8]
 80071f0:	e7f4      	b.n	80071dc <__swsetup_r+0xb0>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e7f7      	b.n	80071e6 <__swsetup_r+0xba>
 80071f6:	bf00      	nop
 80071f8:	20000010 	.word	0x20000010
 80071fc:	08007b2c 	.word	0x08007b2c
 8007200:	08007b4c 	.word	0x08007b4c
 8007204:	08007b0c 	.word	0x08007b0c

08007208 <abort>:
 8007208:	b508      	push	{r3, lr}
 800720a:	2006      	movs	r0, #6
 800720c:	f000 faa2 	bl	8007754 <raise>
 8007210:	2001      	movs	r0, #1
 8007212:	f7f9 fd65 	bl	8000ce0 <_exit>
	...

08007218 <__sflush_r>:
 8007218:	898a      	ldrh	r2, [r1, #12]
 800721a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800721e:	4605      	mov	r5, r0
 8007220:	0710      	lsls	r0, r2, #28
 8007222:	460c      	mov	r4, r1
 8007224:	d458      	bmi.n	80072d8 <__sflush_r+0xc0>
 8007226:	684b      	ldr	r3, [r1, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	dc05      	bgt.n	8007238 <__sflush_r+0x20>
 800722c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800722e:	2b00      	cmp	r3, #0
 8007230:	dc02      	bgt.n	8007238 <__sflush_r+0x20>
 8007232:	2000      	movs	r0, #0
 8007234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800723a:	2e00      	cmp	r6, #0
 800723c:	d0f9      	beq.n	8007232 <__sflush_r+0x1a>
 800723e:	2300      	movs	r3, #0
 8007240:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007244:	682f      	ldr	r7, [r5, #0]
 8007246:	602b      	str	r3, [r5, #0]
 8007248:	d032      	beq.n	80072b0 <__sflush_r+0x98>
 800724a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	075a      	lsls	r2, r3, #29
 8007250:	d505      	bpl.n	800725e <__sflush_r+0x46>
 8007252:	6863      	ldr	r3, [r4, #4]
 8007254:	1ac0      	subs	r0, r0, r3
 8007256:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007258:	b10b      	cbz	r3, 800725e <__sflush_r+0x46>
 800725a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800725c:	1ac0      	subs	r0, r0, r3
 800725e:	2300      	movs	r3, #0
 8007260:	4602      	mov	r2, r0
 8007262:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007264:	6a21      	ldr	r1, [r4, #32]
 8007266:	4628      	mov	r0, r5
 8007268:	47b0      	blx	r6
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	d106      	bne.n	800727e <__sflush_r+0x66>
 8007270:	6829      	ldr	r1, [r5, #0]
 8007272:	291d      	cmp	r1, #29
 8007274:	d82c      	bhi.n	80072d0 <__sflush_r+0xb8>
 8007276:	4a2a      	ldr	r2, [pc, #168]	; (8007320 <__sflush_r+0x108>)
 8007278:	40ca      	lsrs	r2, r1
 800727a:	07d6      	lsls	r6, r2, #31
 800727c:	d528      	bpl.n	80072d0 <__sflush_r+0xb8>
 800727e:	2200      	movs	r2, #0
 8007280:	6062      	str	r2, [r4, #4]
 8007282:	04d9      	lsls	r1, r3, #19
 8007284:	6922      	ldr	r2, [r4, #16]
 8007286:	6022      	str	r2, [r4, #0]
 8007288:	d504      	bpl.n	8007294 <__sflush_r+0x7c>
 800728a:	1c42      	adds	r2, r0, #1
 800728c:	d101      	bne.n	8007292 <__sflush_r+0x7a>
 800728e:	682b      	ldr	r3, [r5, #0]
 8007290:	b903      	cbnz	r3, 8007294 <__sflush_r+0x7c>
 8007292:	6560      	str	r0, [r4, #84]	; 0x54
 8007294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007296:	602f      	str	r7, [r5, #0]
 8007298:	2900      	cmp	r1, #0
 800729a:	d0ca      	beq.n	8007232 <__sflush_r+0x1a>
 800729c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072a0:	4299      	cmp	r1, r3
 80072a2:	d002      	beq.n	80072aa <__sflush_r+0x92>
 80072a4:	4628      	mov	r0, r5
 80072a6:	f7ff f9b5 	bl	8006614 <_free_r>
 80072aa:	2000      	movs	r0, #0
 80072ac:	6360      	str	r0, [r4, #52]	; 0x34
 80072ae:	e7c1      	b.n	8007234 <__sflush_r+0x1c>
 80072b0:	6a21      	ldr	r1, [r4, #32]
 80072b2:	2301      	movs	r3, #1
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b0      	blx	r6
 80072b8:	1c41      	adds	r1, r0, #1
 80072ba:	d1c7      	bne.n	800724c <__sflush_r+0x34>
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0c4      	beq.n	800724c <__sflush_r+0x34>
 80072c2:	2b1d      	cmp	r3, #29
 80072c4:	d001      	beq.n	80072ca <__sflush_r+0xb2>
 80072c6:	2b16      	cmp	r3, #22
 80072c8:	d101      	bne.n	80072ce <__sflush_r+0xb6>
 80072ca:	602f      	str	r7, [r5, #0]
 80072cc:	e7b1      	b.n	8007232 <__sflush_r+0x1a>
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072d4:	81a3      	strh	r3, [r4, #12]
 80072d6:	e7ad      	b.n	8007234 <__sflush_r+0x1c>
 80072d8:	690f      	ldr	r7, [r1, #16]
 80072da:	2f00      	cmp	r7, #0
 80072dc:	d0a9      	beq.n	8007232 <__sflush_r+0x1a>
 80072de:	0793      	lsls	r3, r2, #30
 80072e0:	680e      	ldr	r6, [r1, #0]
 80072e2:	bf08      	it	eq
 80072e4:	694b      	ldreq	r3, [r1, #20]
 80072e6:	600f      	str	r7, [r1, #0]
 80072e8:	bf18      	it	ne
 80072ea:	2300      	movne	r3, #0
 80072ec:	eba6 0807 	sub.w	r8, r6, r7
 80072f0:	608b      	str	r3, [r1, #8]
 80072f2:	f1b8 0f00 	cmp.w	r8, #0
 80072f6:	dd9c      	ble.n	8007232 <__sflush_r+0x1a>
 80072f8:	6a21      	ldr	r1, [r4, #32]
 80072fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072fc:	4643      	mov	r3, r8
 80072fe:	463a      	mov	r2, r7
 8007300:	4628      	mov	r0, r5
 8007302:	47b0      	blx	r6
 8007304:	2800      	cmp	r0, #0
 8007306:	dc06      	bgt.n	8007316 <__sflush_r+0xfe>
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800730e:	81a3      	strh	r3, [r4, #12]
 8007310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007314:	e78e      	b.n	8007234 <__sflush_r+0x1c>
 8007316:	4407      	add	r7, r0
 8007318:	eba8 0800 	sub.w	r8, r8, r0
 800731c:	e7e9      	b.n	80072f2 <__sflush_r+0xda>
 800731e:	bf00      	nop
 8007320:	20400001 	.word	0x20400001

08007324 <_fflush_r>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	690b      	ldr	r3, [r1, #16]
 8007328:	4605      	mov	r5, r0
 800732a:	460c      	mov	r4, r1
 800732c:	b913      	cbnz	r3, 8007334 <_fflush_r+0x10>
 800732e:	2500      	movs	r5, #0
 8007330:	4628      	mov	r0, r5
 8007332:	bd38      	pop	{r3, r4, r5, pc}
 8007334:	b118      	cbz	r0, 800733e <_fflush_r+0x1a>
 8007336:	6983      	ldr	r3, [r0, #24]
 8007338:	b90b      	cbnz	r3, 800733e <_fflush_r+0x1a>
 800733a:	f000 f887 	bl	800744c <__sinit>
 800733e:	4b14      	ldr	r3, [pc, #80]	; (8007390 <_fflush_r+0x6c>)
 8007340:	429c      	cmp	r4, r3
 8007342:	d11b      	bne.n	800737c <_fflush_r+0x58>
 8007344:	686c      	ldr	r4, [r5, #4]
 8007346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0ef      	beq.n	800732e <_fflush_r+0xa>
 800734e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007350:	07d0      	lsls	r0, r2, #31
 8007352:	d404      	bmi.n	800735e <_fflush_r+0x3a>
 8007354:	0599      	lsls	r1, r3, #22
 8007356:	d402      	bmi.n	800735e <_fflush_r+0x3a>
 8007358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800735a:	f000 f915 	bl	8007588 <__retarget_lock_acquire_recursive>
 800735e:	4628      	mov	r0, r5
 8007360:	4621      	mov	r1, r4
 8007362:	f7ff ff59 	bl	8007218 <__sflush_r>
 8007366:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007368:	07da      	lsls	r2, r3, #31
 800736a:	4605      	mov	r5, r0
 800736c:	d4e0      	bmi.n	8007330 <_fflush_r+0xc>
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	059b      	lsls	r3, r3, #22
 8007372:	d4dd      	bmi.n	8007330 <_fflush_r+0xc>
 8007374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007376:	f000 f908 	bl	800758a <__retarget_lock_release_recursive>
 800737a:	e7d9      	b.n	8007330 <_fflush_r+0xc>
 800737c:	4b05      	ldr	r3, [pc, #20]	; (8007394 <_fflush_r+0x70>)
 800737e:	429c      	cmp	r4, r3
 8007380:	d101      	bne.n	8007386 <_fflush_r+0x62>
 8007382:	68ac      	ldr	r4, [r5, #8]
 8007384:	e7df      	b.n	8007346 <_fflush_r+0x22>
 8007386:	4b04      	ldr	r3, [pc, #16]	; (8007398 <_fflush_r+0x74>)
 8007388:	429c      	cmp	r4, r3
 800738a:	bf08      	it	eq
 800738c:	68ec      	ldreq	r4, [r5, #12]
 800738e:	e7da      	b.n	8007346 <_fflush_r+0x22>
 8007390:	08007b2c 	.word	0x08007b2c
 8007394:	08007b4c 	.word	0x08007b4c
 8007398:	08007b0c 	.word	0x08007b0c

0800739c <std>:
 800739c:	2300      	movs	r3, #0
 800739e:	b510      	push	{r4, lr}
 80073a0:	4604      	mov	r4, r0
 80073a2:	e9c0 3300 	strd	r3, r3, [r0]
 80073a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073aa:	6083      	str	r3, [r0, #8]
 80073ac:	8181      	strh	r1, [r0, #12]
 80073ae:	6643      	str	r3, [r0, #100]	; 0x64
 80073b0:	81c2      	strh	r2, [r0, #14]
 80073b2:	6183      	str	r3, [r0, #24]
 80073b4:	4619      	mov	r1, r3
 80073b6:	2208      	movs	r2, #8
 80073b8:	305c      	adds	r0, #92	; 0x5c
 80073ba:	f7ff f86d 	bl	8006498 <memset>
 80073be:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <std+0x38>)
 80073c0:	6263      	str	r3, [r4, #36]	; 0x24
 80073c2:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <std+0x3c>)
 80073c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80073c6:	4b05      	ldr	r3, [pc, #20]	; (80073dc <std+0x40>)
 80073c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073ca:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <std+0x44>)
 80073cc:	6224      	str	r4, [r4, #32]
 80073ce:	6323      	str	r3, [r4, #48]	; 0x30
 80073d0:	bd10      	pop	{r4, pc}
 80073d2:	bf00      	nop
 80073d4:	0800778d 	.word	0x0800778d
 80073d8:	080077af 	.word	0x080077af
 80073dc:	080077e7 	.word	0x080077e7
 80073e0:	0800780b 	.word	0x0800780b

080073e4 <_cleanup_r>:
 80073e4:	4901      	ldr	r1, [pc, #4]	; (80073ec <_cleanup_r+0x8>)
 80073e6:	f000 b8af 	b.w	8007548 <_fwalk_reent>
 80073ea:	bf00      	nop
 80073ec:	08007325 	.word	0x08007325

080073f0 <__sfmoreglue>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	2268      	movs	r2, #104	; 0x68
 80073f4:	1e4d      	subs	r5, r1, #1
 80073f6:	4355      	muls	r5, r2
 80073f8:	460e      	mov	r6, r1
 80073fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073fe:	f7ff f975 	bl	80066ec <_malloc_r>
 8007402:	4604      	mov	r4, r0
 8007404:	b140      	cbz	r0, 8007418 <__sfmoreglue+0x28>
 8007406:	2100      	movs	r1, #0
 8007408:	e9c0 1600 	strd	r1, r6, [r0]
 800740c:	300c      	adds	r0, #12
 800740e:	60a0      	str	r0, [r4, #8]
 8007410:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007414:	f7ff f840 	bl	8006498 <memset>
 8007418:	4620      	mov	r0, r4
 800741a:	bd70      	pop	{r4, r5, r6, pc}

0800741c <__sfp_lock_acquire>:
 800741c:	4801      	ldr	r0, [pc, #4]	; (8007424 <__sfp_lock_acquire+0x8>)
 800741e:	f000 b8b3 	b.w	8007588 <__retarget_lock_acquire_recursive>
 8007422:	bf00      	nop
 8007424:	200193d9 	.word	0x200193d9

08007428 <__sfp_lock_release>:
 8007428:	4801      	ldr	r0, [pc, #4]	; (8007430 <__sfp_lock_release+0x8>)
 800742a:	f000 b8ae 	b.w	800758a <__retarget_lock_release_recursive>
 800742e:	bf00      	nop
 8007430:	200193d9 	.word	0x200193d9

08007434 <__sinit_lock_acquire>:
 8007434:	4801      	ldr	r0, [pc, #4]	; (800743c <__sinit_lock_acquire+0x8>)
 8007436:	f000 b8a7 	b.w	8007588 <__retarget_lock_acquire_recursive>
 800743a:	bf00      	nop
 800743c:	200193da 	.word	0x200193da

08007440 <__sinit_lock_release>:
 8007440:	4801      	ldr	r0, [pc, #4]	; (8007448 <__sinit_lock_release+0x8>)
 8007442:	f000 b8a2 	b.w	800758a <__retarget_lock_release_recursive>
 8007446:	bf00      	nop
 8007448:	200193da 	.word	0x200193da

0800744c <__sinit>:
 800744c:	b510      	push	{r4, lr}
 800744e:	4604      	mov	r4, r0
 8007450:	f7ff fff0 	bl	8007434 <__sinit_lock_acquire>
 8007454:	69a3      	ldr	r3, [r4, #24]
 8007456:	b11b      	cbz	r3, 8007460 <__sinit+0x14>
 8007458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800745c:	f7ff bff0 	b.w	8007440 <__sinit_lock_release>
 8007460:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007464:	6523      	str	r3, [r4, #80]	; 0x50
 8007466:	4b13      	ldr	r3, [pc, #76]	; (80074b4 <__sinit+0x68>)
 8007468:	4a13      	ldr	r2, [pc, #76]	; (80074b8 <__sinit+0x6c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	62a2      	str	r2, [r4, #40]	; 0x28
 800746e:	42a3      	cmp	r3, r4
 8007470:	bf04      	itt	eq
 8007472:	2301      	moveq	r3, #1
 8007474:	61a3      	streq	r3, [r4, #24]
 8007476:	4620      	mov	r0, r4
 8007478:	f000 f820 	bl	80074bc <__sfp>
 800747c:	6060      	str	r0, [r4, #4]
 800747e:	4620      	mov	r0, r4
 8007480:	f000 f81c 	bl	80074bc <__sfp>
 8007484:	60a0      	str	r0, [r4, #8]
 8007486:	4620      	mov	r0, r4
 8007488:	f000 f818 	bl	80074bc <__sfp>
 800748c:	2200      	movs	r2, #0
 800748e:	60e0      	str	r0, [r4, #12]
 8007490:	2104      	movs	r1, #4
 8007492:	6860      	ldr	r0, [r4, #4]
 8007494:	f7ff ff82 	bl	800739c <std>
 8007498:	68a0      	ldr	r0, [r4, #8]
 800749a:	2201      	movs	r2, #1
 800749c:	2109      	movs	r1, #9
 800749e:	f7ff ff7d 	bl	800739c <std>
 80074a2:	68e0      	ldr	r0, [r4, #12]
 80074a4:	2202      	movs	r2, #2
 80074a6:	2112      	movs	r1, #18
 80074a8:	f7ff ff78 	bl	800739c <std>
 80074ac:	2301      	movs	r3, #1
 80074ae:	61a3      	str	r3, [r4, #24]
 80074b0:	e7d2      	b.n	8007458 <__sinit+0xc>
 80074b2:	bf00      	nop
 80074b4:	08007a24 	.word	0x08007a24
 80074b8:	080073e5 	.word	0x080073e5

080074bc <__sfp>:
 80074bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074be:	4607      	mov	r7, r0
 80074c0:	f7ff ffac 	bl	800741c <__sfp_lock_acquire>
 80074c4:	4b1e      	ldr	r3, [pc, #120]	; (8007540 <__sfp+0x84>)
 80074c6:	681e      	ldr	r6, [r3, #0]
 80074c8:	69b3      	ldr	r3, [r6, #24]
 80074ca:	b913      	cbnz	r3, 80074d2 <__sfp+0x16>
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7ff ffbd 	bl	800744c <__sinit>
 80074d2:	3648      	adds	r6, #72	; 0x48
 80074d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074d8:	3b01      	subs	r3, #1
 80074da:	d503      	bpl.n	80074e4 <__sfp+0x28>
 80074dc:	6833      	ldr	r3, [r6, #0]
 80074de:	b30b      	cbz	r3, 8007524 <__sfp+0x68>
 80074e0:	6836      	ldr	r6, [r6, #0]
 80074e2:	e7f7      	b.n	80074d4 <__sfp+0x18>
 80074e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074e8:	b9d5      	cbnz	r5, 8007520 <__sfp+0x64>
 80074ea:	4b16      	ldr	r3, [pc, #88]	; (8007544 <__sfp+0x88>)
 80074ec:	60e3      	str	r3, [r4, #12]
 80074ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074f2:	6665      	str	r5, [r4, #100]	; 0x64
 80074f4:	f000 f847 	bl	8007586 <__retarget_lock_init_recursive>
 80074f8:	f7ff ff96 	bl	8007428 <__sfp_lock_release>
 80074fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007500:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007504:	6025      	str	r5, [r4, #0]
 8007506:	61a5      	str	r5, [r4, #24]
 8007508:	2208      	movs	r2, #8
 800750a:	4629      	mov	r1, r5
 800750c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007510:	f7fe ffc2 	bl	8006498 <memset>
 8007514:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007518:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800751c:	4620      	mov	r0, r4
 800751e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007520:	3468      	adds	r4, #104	; 0x68
 8007522:	e7d9      	b.n	80074d8 <__sfp+0x1c>
 8007524:	2104      	movs	r1, #4
 8007526:	4638      	mov	r0, r7
 8007528:	f7ff ff62 	bl	80073f0 <__sfmoreglue>
 800752c:	4604      	mov	r4, r0
 800752e:	6030      	str	r0, [r6, #0]
 8007530:	2800      	cmp	r0, #0
 8007532:	d1d5      	bne.n	80074e0 <__sfp+0x24>
 8007534:	f7ff ff78 	bl	8007428 <__sfp_lock_release>
 8007538:	230c      	movs	r3, #12
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	e7ee      	b.n	800751c <__sfp+0x60>
 800753e:	bf00      	nop
 8007540:	08007a24 	.word	0x08007a24
 8007544:	ffff0001 	.word	0xffff0001

08007548 <_fwalk_reent>:
 8007548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800754c:	4606      	mov	r6, r0
 800754e:	4688      	mov	r8, r1
 8007550:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007554:	2700      	movs	r7, #0
 8007556:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800755a:	f1b9 0901 	subs.w	r9, r9, #1
 800755e:	d505      	bpl.n	800756c <_fwalk_reent+0x24>
 8007560:	6824      	ldr	r4, [r4, #0]
 8007562:	2c00      	cmp	r4, #0
 8007564:	d1f7      	bne.n	8007556 <_fwalk_reent+0xe>
 8007566:	4638      	mov	r0, r7
 8007568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800756c:	89ab      	ldrh	r3, [r5, #12]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d907      	bls.n	8007582 <_fwalk_reent+0x3a>
 8007572:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007576:	3301      	adds	r3, #1
 8007578:	d003      	beq.n	8007582 <_fwalk_reent+0x3a>
 800757a:	4629      	mov	r1, r5
 800757c:	4630      	mov	r0, r6
 800757e:	47c0      	blx	r8
 8007580:	4307      	orrs	r7, r0
 8007582:	3568      	adds	r5, #104	; 0x68
 8007584:	e7e9      	b.n	800755a <_fwalk_reent+0x12>

08007586 <__retarget_lock_init_recursive>:
 8007586:	4770      	bx	lr

08007588 <__retarget_lock_acquire_recursive>:
 8007588:	4770      	bx	lr

0800758a <__retarget_lock_release_recursive>:
 800758a:	4770      	bx	lr

0800758c <__swhatbuf_r>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	460e      	mov	r6, r1
 8007590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007594:	2900      	cmp	r1, #0
 8007596:	b096      	sub	sp, #88	; 0x58
 8007598:	4614      	mov	r4, r2
 800759a:	461d      	mov	r5, r3
 800759c:	da08      	bge.n	80075b0 <__swhatbuf_r+0x24>
 800759e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	602a      	str	r2, [r5, #0]
 80075a6:	061a      	lsls	r2, r3, #24
 80075a8:	d410      	bmi.n	80075cc <__swhatbuf_r+0x40>
 80075aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ae:	e00e      	b.n	80075ce <__swhatbuf_r+0x42>
 80075b0:	466a      	mov	r2, sp
 80075b2:	f000 f951 	bl	8007858 <_fstat_r>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	dbf1      	blt.n	800759e <__swhatbuf_r+0x12>
 80075ba:	9a01      	ldr	r2, [sp, #4]
 80075bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075c4:	425a      	negs	r2, r3
 80075c6:	415a      	adcs	r2, r3
 80075c8:	602a      	str	r2, [r5, #0]
 80075ca:	e7ee      	b.n	80075aa <__swhatbuf_r+0x1e>
 80075cc:	2340      	movs	r3, #64	; 0x40
 80075ce:	2000      	movs	r0, #0
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	b016      	add	sp, #88	; 0x58
 80075d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080075d8 <__smakebuf_r>:
 80075d8:	898b      	ldrh	r3, [r1, #12]
 80075da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075dc:	079d      	lsls	r5, r3, #30
 80075de:	4606      	mov	r6, r0
 80075e0:	460c      	mov	r4, r1
 80075e2:	d507      	bpl.n	80075f4 <__smakebuf_r+0x1c>
 80075e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	6123      	str	r3, [r4, #16]
 80075ec:	2301      	movs	r3, #1
 80075ee:	6163      	str	r3, [r4, #20]
 80075f0:	b002      	add	sp, #8
 80075f2:	bd70      	pop	{r4, r5, r6, pc}
 80075f4:	ab01      	add	r3, sp, #4
 80075f6:	466a      	mov	r2, sp
 80075f8:	f7ff ffc8 	bl	800758c <__swhatbuf_r>
 80075fc:	9900      	ldr	r1, [sp, #0]
 80075fe:	4605      	mov	r5, r0
 8007600:	4630      	mov	r0, r6
 8007602:	f7ff f873 	bl	80066ec <_malloc_r>
 8007606:	b948      	cbnz	r0, 800761c <__smakebuf_r+0x44>
 8007608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800760c:	059a      	lsls	r2, r3, #22
 800760e:	d4ef      	bmi.n	80075f0 <__smakebuf_r+0x18>
 8007610:	f023 0303 	bic.w	r3, r3, #3
 8007614:	f043 0302 	orr.w	r3, r3, #2
 8007618:	81a3      	strh	r3, [r4, #12]
 800761a:	e7e3      	b.n	80075e4 <__smakebuf_r+0xc>
 800761c:	4b0d      	ldr	r3, [pc, #52]	; (8007654 <__smakebuf_r+0x7c>)
 800761e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007620:	89a3      	ldrh	r3, [r4, #12]
 8007622:	6020      	str	r0, [r4, #0]
 8007624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007628:	81a3      	strh	r3, [r4, #12]
 800762a:	9b00      	ldr	r3, [sp, #0]
 800762c:	6163      	str	r3, [r4, #20]
 800762e:	9b01      	ldr	r3, [sp, #4]
 8007630:	6120      	str	r0, [r4, #16]
 8007632:	b15b      	cbz	r3, 800764c <__smakebuf_r+0x74>
 8007634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007638:	4630      	mov	r0, r6
 800763a:	f000 f91f 	bl	800787c <_isatty_r>
 800763e:	b128      	cbz	r0, 800764c <__smakebuf_r+0x74>
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	f023 0303 	bic.w	r3, r3, #3
 8007646:	f043 0301 	orr.w	r3, r3, #1
 800764a:	81a3      	strh	r3, [r4, #12]
 800764c:	89a0      	ldrh	r0, [r4, #12]
 800764e:	4305      	orrs	r5, r0
 8007650:	81a5      	strh	r5, [r4, #12]
 8007652:	e7cd      	b.n	80075f0 <__smakebuf_r+0x18>
 8007654:	080073e5 	.word	0x080073e5

08007658 <memmove>:
 8007658:	4288      	cmp	r0, r1
 800765a:	b510      	push	{r4, lr}
 800765c:	eb01 0402 	add.w	r4, r1, r2
 8007660:	d902      	bls.n	8007668 <memmove+0x10>
 8007662:	4284      	cmp	r4, r0
 8007664:	4623      	mov	r3, r4
 8007666:	d807      	bhi.n	8007678 <memmove+0x20>
 8007668:	1e43      	subs	r3, r0, #1
 800766a:	42a1      	cmp	r1, r4
 800766c:	d008      	beq.n	8007680 <memmove+0x28>
 800766e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007672:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007676:	e7f8      	b.n	800766a <memmove+0x12>
 8007678:	4402      	add	r2, r0
 800767a:	4601      	mov	r1, r0
 800767c:	428a      	cmp	r2, r1
 800767e:	d100      	bne.n	8007682 <memmove+0x2a>
 8007680:	bd10      	pop	{r4, pc}
 8007682:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007686:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800768a:	e7f7      	b.n	800767c <memmove+0x24>

0800768c <__malloc_lock>:
 800768c:	4801      	ldr	r0, [pc, #4]	; (8007694 <__malloc_lock+0x8>)
 800768e:	f7ff bf7b 	b.w	8007588 <__retarget_lock_acquire_recursive>
 8007692:	bf00      	nop
 8007694:	200193d8 	.word	0x200193d8

08007698 <__malloc_unlock>:
 8007698:	4801      	ldr	r0, [pc, #4]	; (80076a0 <__malloc_unlock+0x8>)
 800769a:	f7ff bf76 	b.w	800758a <__retarget_lock_release_recursive>
 800769e:	bf00      	nop
 80076a0:	200193d8 	.word	0x200193d8

080076a4 <_realloc_r>:
 80076a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a8:	4680      	mov	r8, r0
 80076aa:	4614      	mov	r4, r2
 80076ac:	460e      	mov	r6, r1
 80076ae:	b921      	cbnz	r1, 80076ba <_realloc_r+0x16>
 80076b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b4:	4611      	mov	r1, r2
 80076b6:	f7ff b819 	b.w	80066ec <_malloc_r>
 80076ba:	b92a      	cbnz	r2, 80076c8 <_realloc_r+0x24>
 80076bc:	f7fe ffaa 	bl	8006614 <_free_r>
 80076c0:	4625      	mov	r5, r4
 80076c2:	4628      	mov	r0, r5
 80076c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c8:	f000 f8fa 	bl	80078c0 <_malloc_usable_size_r>
 80076cc:	4284      	cmp	r4, r0
 80076ce:	4607      	mov	r7, r0
 80076d0:	d802      	bhi.n	80076d8 <_realloc_r+0x34>
 80076d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076d6:	d812      	bhi.n	80076fe <_realloc_r+0x5a>
 80076d8:	4621      	mov	r1, r4
 80076da:	4640      	mov	r0, r8
 80076dc:	f7ff f806 	bl	80066ec <_malloc_r>
 80076e0:	4605      	mov	r5, r0
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d0ed      	beq.n	80076c2 <_realloc_r+0x1e>
 80076e6:	42bc      	cmp	r4, r7
 80076e8:	4622      	mov	r2, r4
 80076ea:	4631      	mov	r1, r6
 80076ec:	bf28      	it	cs
 80076ee:	463a      	movcs	r2, r7
 80076f0:	f7fe fec4 	bl	800647c <memcpy>
 80076f4:	4631      	mov	r1, r6
 80076f6:	4640      	mov	r0, r8
 80076f8:	f7fe ff8c 	bl	8006614 <_free_r>
 80076fc:	e7e1      	b.n	80076c2 <_realloc_r+0x1e>
 80076fe:	4635      	mov	r5, r6
 8007700:	e7df      	b.n	80076c2 <_realloc_r+0x1e>

08007702 <_raise_r>:
 8007702:	291f      	cmp	r1, #31
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	4604      	mov	r4, r0
 8007708:	460d      	mov	r5, r1
 800770a:	d904      	bls.n	8007716 <_raise_r+0x14>
 800770c:	2316      	movs	r3, #22
 800770e:	6003      	str	r3, [r0, #0]
 8007710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007714:	bd38      	pop	{r3, r4, r5, pc}
 8007716:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007718:	b112      	cbz	r2, 8007720 <_raise_r+0x1e>
 800771a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800771e:	b94b      	cbnz	r3, 8007734 <_raise_r+0x32>
 8007720:	4620      	mov	r0, r4
 8007722:	f000 f831 	bl	8007788 <_getpid_r>
 8007726:	462a      	mov	r2, r5
 8007728:	4601      	mov	r1, r0
 800772a:	4620      	mov	r0, r4
 800772c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007730:	f000 b818 	b.w	8007764 <_kill_r>
 8007734:	2b01      	cmp	r3, #1
 8007736:	d00a      	beq.n	800774e <_raise_r+0x4c>
 8007738:	1c59      	adds	r1, r3, #1
 800773a:	d103      	bne.n	8007744 <_raise_r+0x42>
 800773c:	2316      	movs	r3, #22
 800773e:	6003      	str	r3, [r0, #0]
 8007740:	2001      	movs	r0, #1
 8007742:	e7e7      	b.n	8007714 <_raise_r+0x12>
 8007744:	2400      	movs	r4, #0
 8007746:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800774a:	4628      	mov	r0, r5
 800774c:	4798      	blx	r3
 800774e:	2000      	movs	r0, #0
 8007750:	e7e0      	b.n	8007714 <_raise_r+0x12>
	...

08007754 <raise>:
 8007754:	4b02      	ldr	r3, [pc, #8]	; (8007760 <raise+0xc>)
 8007756:	4601      	mov	r1, r0
 8007758:	6818      	ldr	r0, [r3, #0]
 800775a:	f7ff bfd2 	b.w	8007702 <_raise_r>
 800775e:	bf00      	nop
 8007760:	20000010 	.word	0x20000010

08007764 <_kill_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4d07      	ldr	r5, [pc, #28]	; (8007784 <_kill_r+0x20>)
 8007768:	2300      	movs	r3, #0
 800776a:	4604      	mov	r4, r0
 800776c:	4608      	mov	r0, r1
 800776e:	4611      	mov	r1, r2
 8007770:	602b      	str	r3, [r5, #0]
 8007772:	f7f9 faa5 	bl	8000cc0 <_kill>
 8007776:	1c43      	adds	r3, r0, #1
 8007778:	d102      	bne.n	8007780 <_kill_r+0x1c>
 800777a:	682b      	ldr	r3, [r5, #0]
 800777c:	b103      	cbz	r3, 8007780 <_kill_r+0x1c>
 800777e:	6023      	str	r3, [r4, #0]
 8007780:	bd38      	pop	{r3, r4, r5, pc}
 8007782:	bf00      	nop
 8007784:	200193dc 	.word	0x200193dc

08007788 <_getpid_r>:
 8007788:	f7f9 ba92 	b.w	8000cb0 <_getpid>

0800778c <__sread>:
 800778c:	b510      	push	{r4, lr}
 800778e:	460c      	mov	r4, r1
 8007790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007794:	f000 f89c 	bl	80078d0 <_read_r>
 8007798:	2800      	cmp	r0, #0
 800779a:	bfab      	itete	ge
 800779c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800779e:	89a3      	ldrhlt	r3, [r4, #12]
 80077a0:	181b      	addge	r3, r3, r0
 80077a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077a6:	bfac      	ite	ge
 80077a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80077aa:	81a3      	strhlt	r3, [r4, #12]
 80077ac:	bd10      	pop	{r4, pc}

080077ae <__swrite>:
 80077ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b2:	461f      	mov	r7, r3
 80077b4:	898b      	ldrh	r3, [r1, #12]
 80077b6:	05db      	lsls	r3, r3, #23
 80077b8:	4605      	mov	r5, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	4616      	mov	r6, r2
 80077be:	d505      	bpl.n	80077cc <__swrite+0x1e>
 80077c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c4:	2302      	movs	r3, #2
 80077c6:	2200      	movs	r2, #0
 80077c8:	f000 f868 	bl	800789c <_lseek_r>
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077d6:	81a3      	strh	r3, [r4, #12]
 80077d8:	4632      	mov	r2, r6
 80077da:	463b      	mov	r3, r7
 80077dc:	4628      	mov	r0, r5
 80077de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077e2:	f000 b817 	b.w	8007814 <_write_r>

080077e6 <__sseek>:
 80077e6:	b510      	push	{r4, lr}
 80077e8:	460c      	mov	r4, r1
 80077ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ee:	f000 f855 	bl	800789c <_lseek_r>
 80077f2:	1c43      	adds	r3, r0, #1
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	bf15      	itete	ne
 80077f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80077fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007802:	81a3      	strheq	r3, [r4, #12]
 8007804:	bf18      	it	ne
 8007806:	81a3      	strhne	r3, [r4, #12]
 8007808:	bd10      	pop	{r4, pc}

0800780a <__sclose>:
 800780a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800780e:	f000 b813 	b.w	8007838 <_close_r>
	...

08007814 <_write_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	4d07      	ldr	r5, [pc, #28]	; (8007834 <_write_r+0x20>)
 8007818:	4604      	mov	r4, r0
 800781a:	4608      	mov	r0, r1
 800781c:	4611      	mov	r1, r2
 800781e:	2200      	movs	r2, #0
 8007820:	602a      	str	r2, [r5, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	f7f9 fa83 	bl	8000d2e <_write>
 8007828:	1c43      	adds	r3, r0, #1
 800782a:	d102      	bne.n	8007832 <_write_r+0x1e>
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	b103      	cbz	r3, 8007832 <_write_r+0x1e>
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	bd38      	pop	{r3, r4, r5, pc}
 8007834:	200193dc 	.word	0x200193dc

08007838 <_close_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	4d06      	ldr	r5, [pc, #24]	; (8007854 <_close_r+0x1c>)
 800783c:	2300      	movs	r3, #0
 800783e:	4604      	mov	r4, r0
 8007840:	4608      	mov	r0, r1
 8007842:	602b      	str	r3, [r5, #0]
 8007844:	f7f9 fa8f 	bl	8000d66 <_close>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	d102      	bne.n	8007852 <_close_r+0x1a>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	b103      	cbz	r3, 8007852 <_close_r+0x1a>
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	bd38      	pop	{r3, r4, r5, pc}
 8007854:	200193dc 	.word	0x200193dc

08007858 <_fstat_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d07      	ldr	r5, [pc, #28]	; (8007878 <_fstat_r+0x20>)
 800785c:	2300      	movs	r3, #0
 800785e:	4604      	mov	r4, r0
 8007860:	4608      	mov	r0, r1
 8007862:	4611      	mov	r1, r2
 8007864:	602b      	str	r3, [r5, #0]
 8007866:	f7f9 fa8a 	bl	8000d7e <_fstat>
 800786a:	1c43      	adds	r3, r0, #1
 800786c:	d102      	bne.n	8007874 <_fstat_r+0x1c>
 800786e:	682b      	ldr	r3, [r5, #0]
 8007870:	b103      	cbz	r3, 8007874 <_fstat_r+0x1c>
 8007872:	6023      	str	r3, [r4, #0]
 8007874:	bd38      	pop	{r3, r4, r5, pc}
 8007876:	bf00      	nop
 8007878:	200193dc 	.word	0x200193dc

0800787c <_isatty_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4d06      	ldr	r5, [pc, #24]	; (8007898 <_isatty_r+0x1c>)
 8007880:	2300      	movs	r3, #0
 8007882:	4604      	mov	r4, r0
 8007884:	4608      	mov	r0, r1
 8007886:	602b      	str	r3, [r5, #0]
 8007888:	f7f9 fa89 	bl	8000d9e <_isatty>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d102      	bne.n	8007896 <_isatty_r+0x1a>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	b103      	cbz	r3, 8007896 <_isatty_r+0x1a>
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	200193dc 	.word	0x200193dc

0800789c <_lseek_r>:
 800789c:	b538      	push	{r3, r4, r5, lr}
 800789e:	4d07      	ldr	r5, [pc, #28]	; (80078bc <_lseek_r+0x20>)
 80078a0:	4604      	mov	r4, r0
 80078a2:	4608      	mov	r0, r1
 80078a4:	4611      	mov	r1, r2
 80078a6:	2200      	movs	r2, #0
 80078a8:	602a      	str	r2, [r5, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	f7f9 fa82 	bl	8000db4 <_lseek>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d102      	bne.n	80078ba <_lseek_r+0x1e>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b103      	cbz	r3, 80078ba <_lseek_r+0x1e>
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	bd38      	pop	{r3, r4, r5, pc}
 80078bc:	200193dc 	.word	0x200193dc

080078c0 <_malloc_usable_size_r>:
 80078c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078c4:	1f18      	subs	r0, r3, #4
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	bfbc      	itt	lt
 80078ca:	580b      	ldrlt	r3, [r1, r0]
 80078cc:	18c0      	addlt	r0, r0, r3
 80078ce:	4770      	bx	lr

080078d0 <_read_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4d07      	ldr	r5, [pc, #28]	; (80078f0 <_read_r+0x20>)
 80078d4:	4604      	mov	r4, r0
 80078d6:	4608      	mov	r0, r1
 80078d8:	4611      	mov	r1, r2
 80078da:	2200      	movs	r2, #0
 80078dc:	602a      	str	r2, [r5, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	f7f9 fa08 	bl	8000cf4 <_read>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d102      	bne.n	80078ee <_read_r+0x1e>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	b103      	cbz	r3, 80078ee <_read_r+0x1e>
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	bd38      	pop	{r3, r4, r5, pc}
 80078f0:	200193dc 	.word	0x200193dc

080078f4 <_init>:
 80078f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f6:	bf00      	nop
 80078f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fa:	bc08      	pop	{r3}
 80078fc:	469e      	mov	lr, r3
 80078fe:	4770      	bx	lr

08007900 <_fini>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	bf00      	nop
 8007904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007906:	bc08      	pop	{r3}
 8007908:	469e      	mov	lr, r3
 800790a:	4770      	bx	lr
