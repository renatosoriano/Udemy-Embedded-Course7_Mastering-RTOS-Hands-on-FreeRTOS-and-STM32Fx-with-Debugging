
008Queues_n_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009368  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08009538  08009538  00019538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099cc  080099cc  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080099cc  080099cc  000199cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099d4  080099d4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099d4  080099d4  000199d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099d8  080099d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080099dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019318  2000008c  08009a68  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200193a4  08009a68  000293a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186ba  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003afb  00000000  00000000  00038776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  0003c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  0003d780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026213  00000000  00000000  0003eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0fb  00000000  00000000  00064d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e136d  00000000  00000000  0007fe0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016117b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006024  00000000  00000000  001611cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009520 	.word	0x08009520

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	08009520 	.word	0x08009520

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <led_effect_stop>:


#include "main.h"

void led_effect_stop(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 4 ; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	e00e      	b.n	800060e <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i],portMAX_DELAY);
 80005f0:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <led_effect_stop+0x3c>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	2200      	movs	r2, #0
 8000602:	2103      	movs	r1, #3
 8000604:	f006 fdfa 	bl	80071fc <xTimerGenericCommand>
	for(int i = 0 ; i < 4 ; i++)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3301      	adds	r3, #1
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b03      	cmp	r3, #3
 8000612:	dded      	ble.n	80005f0 <led_effect_stop+0xc>
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000130 	.word	0x20000130

08000624 <led_effect>:

void led_effect(int n )
{
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b085      	sub	sp, #20
 8000628:	af02      	add	r7, sp, #8
 800062a:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 800062c:	f7ff ffda 	bl	80005e4 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3b01      	subs	r3, #1
 8000634:	4a08      	ldr	r2, [pc, #32]	; (8000658 <led_effect+0x34>)
 8000636:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800063a:	f005 fee1 	bl	8006400 <xTaskGetTickCount>
 800063e:	4602      	mov	r2, r0
 8000640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2101      	movs	r1, #1
 800064a:	4620      	mov	r0, r4
 800064c:	f006 fdd6 	bl	80071fc <xTimerGenericCommand>

}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	bd90      	pop	{r4, r7, pc}
 8000658:	20000130 	.word	0x20000130

0800065c <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2120      	movs	r1, #32
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <turn_off_all_leds+0x14>)
 8000666:	f001 fe4f 	bl	8002308 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_RESET);
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40020000 	.word	0x40020000

08000674 <turn_on_all_leds>:


void turn_on_all_leds(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2120      	movs	r1, #32
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <turn_on_all_leds+0x14>)
 800067e:	f001 fe43 	bl	8002308 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_SET);
	//HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
	//HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_SET);
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40020000 	.word	0x40020000

0800068c <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LED1,GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	2120      	movs	r1, #32
 8000694:	4802      	ldr	r0, [pc, #8]	; (80006a0 <turn_on_odd_leds+0x14>)
 8000696:	f001 fe37 	bl	8002308 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_SET);
	//HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_RESET);
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020000 	.word	0x40020000

080006a4 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LED1,GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2120      	movs	r1, #32
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <turn_on_even_leds+0x14>)
 80006ae:	f001 fe2b 	bl	8002308 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_SET);
	//HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_SET);
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40020000 	.word	0x40020000

080006bc <LED_control>:

void LED_control( int value )
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e013      	b.n	80006f2 <LED_control+0x36>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 80006ca:	2220      	movs	r2, #32
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	b299      	uxth	r1, r3
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	fa42 f303 	asr.w	r3, r2, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	461a      	mov	r2, r3
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <LED_control+0x48>)
 80006e8:	f001 fe0e 	bl	8002308 <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3301      	adds	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	dde8      	ble.n	80006ca <LED_control+0xe>
}
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40020000 	.word	0x40020000

08000708 <LED_effect1>:


void LED_effect1(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <LED_effect1+0x28>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f083 0301 	eor.w	r3, r3, #1
 8000714:	4a06      	ldr	r2, [pc, #24]	; (8000730 <LED_effect1+0x28>)
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <LED_effect1+0x28>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <LED_effect1+0x1e>
 8000720:	f7ff ff9c 	bl	800065c <turn_off_all_leds>
}
 8000724:	e001      	b.n	800072a <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000726:	f7ff ffa5 	bl	8000674 <turn_on_all_leds>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000000 	.word	0x20000000

08000734 <LED_effect2>:


void LED_effect2(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <LED_effect2+0x28>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f083 0301 	eor.w	r3, r3, #1
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <LED_effect2+0x28>)
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <LED_effect2+0x28>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d002      	beq.n	8000752 <LED_effect2+0x1e>
 800074c:	f7ff ffaa 	bl	80006a4 <turn_on_even_leds>
}
 8000750:	e001      	b.n	8000756 <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000752:	f7ff ff9b 	bl	800068c <turn_on_odd_leds>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000004 	.word	0x20000004

08000760 <LED_effect3>:

void LED_effect3(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <LED_effect3+0x2c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	4908      	ldr	r1, [pc, #32]	; (800078c <LED_effect3+0x2c>)
 800076c:	600a      	str	r2, [r1, #0]
 800076e:	425a      	negs	r2, r3
 8000770:	f003 0303 	and.w	r3, r3, #3
 8000774:	f002 0203 	and.w	r2, r2, #3
 8000778:	bf58      	it	pl
 800077a:	4253      	negpl	r3, r2
 800077c:	2201      	movs	r2, #1
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff9a 	bl	80006bc <LED_control>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200000a8 	.word	0x200000a8

08000790 <LED_effect4>:


void LED_effect4(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <LED_effect4+0x2c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	4908      	ldr	r1, [pc, #32]	; (80007bc <LED_effect4+0x2c>)
 800079c:	600a      	str	r2, [r1, #0]
 800079e:	425a      	negs	r2, r3
 80007a0:	f003 0303 	and.w	r3, r3, #3
 80007a4:	f002 0203 	and.w	r2, r2, #3
 80007a8:	bf58      	it	pl
 80007aa:	4253      	negpl	r3, r2
 80007ac:	2208      	movs	r2, #8
 80007ae:	fa42 f303 	asr.w	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff82 	bl	80006bc <LED_control>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000ac 	.word	0x200000ac

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f001 fa55 	bl	8001c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f911 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 f9d5 	bl	8000b7c <MX_GPIO_Init>
  MX_RTC_Init();
 80007d2:	f000 f983 	bl	8000adc <MX_RTC_Init>
  MX_USART2_UART_Init();
 80007d6:	f000 f9a7 	bl	8000b28 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 80007da:	4b6c      	ldr	r3, [pc, #432]	; (800098c <main+0x1cc>)
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	2302      	movs	r3, #2
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2300      	movs	r3, #0
 80007e4:	22fa      	movs	r2, #250	; 0xfa
 80007e6:	496a      	ldr	r1, [pc, #424]	; (8000990 <main+0x1d0>)
 80007e8:	486a      	ldr	r0, [pc, #424]	; (8000994 <main+0x1d4>)
 80007ea:	f005 fbc7 	bl	8005f7c <xTaskCreate>
 80007ee:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80007f0:	6a3b      	ldr	r3, [r7, #32]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d00a      	beq.n	800080c <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80007f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007fa:	f383 8811 	msr	BASEPRI, r3
 80007fe:	f3bf 8f6f 	isb	sy
 8000802:	f3bf 8f4f 	dsb	sy
 8000806:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000808:	bf00      	nop
 800080a:	e7fe      	b.n	800080a <main+0x4a>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 800080c:	4b62      	ldr	r3, [pc, #392]	; (8000998 <main+0x1d8>)
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	2302      	movs	r3, #2
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2300      	movs	r3, #0
 8000816:	22fa      	movs	r2, #250	; 0xfa
 8000818:	4960      	ldr	r1, [pc, #384]	; (800099c <main+0x1dc>)
 800081a:	4861      	ldr	r0, [pc, #388]	; (80009a0 <main+0x1e0>)
 800081c:	f005 fbae 	bl	8005f7c <xTaskCreate>
 8000820:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000822:	6a3b      	ldr	r3, [r7, #32]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d00a      	beq.n	800083e <main+0x7e>
        __asm volatile
 8000828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800082c:	f383 8811 	msr	BASEPRI, r3
 8000830:	f3bf 8f6f 	isb	sy
 8000834:	f3bf 8f4f 	dsb	sy
 8000838:	61bb      	str	r3, [r7, #24]
    }
 800083a:	bf00      	nop
 800083c:	e7fe      	b.n	800083c <main+0x7c>

	status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 800083e:	4b59      	ldr	r3, [pc, #356]	; (80009a4 <main+0x1e4>)
 8000840:	9301      	str	r3, [sp, #4]
 8000842:	2302      	movs	r3, #2
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2300      	movs	r3, #0
 8000848:	22fa      	movs	r2, #250	; 0xfa
 800084a:	4957      	ldr	r1, [pc, #348]	; (80009a8 <main+0x1e8>)
 800084c:	4857      	ldr	r0, [pc, #348]	; (80009ac <main+0x1ec>)
 800084e:	f005 fb95 	bl	8005f7c <xTaskCreate>
 8000852:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000854:	6a3b      	ldr	r3, [r7, #32]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d00a      	beq.n	8000870 <main+0xb0>
        __asm volatile
 800085a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800085e:	f383 8811 	msr	BASEPRI, r3
 8000862:	f3bf 8f6f 	isb	sy
 8000866:	f3bf 8f4f 	dsb	sy
 800086a:	617b      	str	r3, [r7, #20]
    }
 800086c:	bf00      	nop
 800086e:	e7fe      	b.n	800086e <main+0xae>

	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 8000870:	4b4f      	ldr	r3, [pc, #316]	; (80009b0 <main+0x1f0>)
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	2302      	movs	r3, #2
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2300      	movs	r3, #0
 800087a:	22fa      	movs	r2, #250	; 0xfa
 800087c:	494d      	ldr	r1, [pc, #308]	; (80009b4 <main+0x1f4>)
 800087e:	484e      	ldr	r0, [pc, #312]	; (80009b8 <main+0x1f8>)
 8000880:	f005 fb7c 	bl	8005f7c <xTaskCreate>
 8000884:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000886:	6a3b      	ldr	r3, [r7, #32]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d00a      	beq.n	80008a2 <main+0xe2>
        __asm volatile
 800088c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000890:	f383 8811 	msr	BASEPRI, r3
 8000894:	f3bf 8f6f 	isb	sy
 8000898:	f3bf 8f4f 	dsb	sy
 800089c:	613b      	str	r3, [r7, #16]
    }
 800089e:	bf00      	nop
 80008a0:	e7fe      	b.n	80008a0 <main+0xe0>

	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80008a2:	4b46      	ldr	r3, [pc, #280]	; (80009bc <main+0x1fc>)
 80008a4:	9301      	str	r3, [sp, #4]
 80008a6:	2302      	movs	r3, #2
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2300      	movs	r3, #0
 80008ac:	22fa      	movs	r2, #250	; 0xfa
 80008ae:	4944      	ldr	r1, [pc, #272]	; (80009c0 <main+0x200>)
 80008b0:	4844      	ldr	r0, [pc, #272]	; (80009c4 <main+0x204>)
 80008b2:	f005 fb63 	bl	8005f7c <xTaskCreate>
 80008b6:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d00a      	beq.n	80008d4 <main+0x114>
        __asm volatile
 80008be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c2:	f383 8811 	msr	BASEPRI, r3
 80008c6:	f3bf 8f6f 	isb	sy
 80008ca:	f3bf 8f4f 	dsb	sy
 80008ce:	60fb      	str	r3, [r7, #12]
    }
 80008d0:	bf00      	nop
 80008d2:	e7fe      	b.n	80008d2 <main+0x112>

	q_data = xQueueCreate (10, sizeof(char));
 80008d4:	2200      	movs	r2, #0
 80008d6:	2101      	movs	r1, #1
 80008d8:	200a      	movs	r0, #10
 80008da:	f004 fe03 	bl	80054e4 <xQueueGenericCreate>
 80008de:	4603      	mov	r3, r0
 80008e0:	4a39      	ldr	r2, [pc, #228]	; (80009c8 <main+0x208>)
 80008e2:	6013      	str	r3, [r2, #0]

	configASSERT(q_data != NULL);
 80008e4:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <main+0x208>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10a      	bne.n	8000902 <main+0x142>
        __asm volatile
 80008ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008f0:	f383 8811 	msr	BASEPRI, r3
 80008f4:	f3bf 8f6f 	isb	sy
 80008f8:	f3bf 8f4f 	dsb	sy
 80008fc:	60bb      	str	r3, [r7, #8]
    }
 80008fe:	bf00      	nop
 8000900:	e7fe      	b.n	8000900 <main+0x140>

	q_print = xQueueCreate (10, sizeof(size_t));
 8000902:	2200      	movs	r2, #0
 8000904:	2104      	movs	r1, #4
 8000906:	200a      	movs	r0, #10
 8000908:	f004 fdec 	bl	80054e4 <xQueueGenericCreate>
 800090c:	4603      	mov	r3, r0
 800090e:	4a2f      	ldr	r2, [pc, #188]	; (80009cc <main+0x20c>)
 8000910:	6013      	str	r3, [r2, #0]

	configASSERT(q_print != NULL);
 8000912:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <main+0x20c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10a      	bne.n	8000930 <main+0x170>
        __asm volatile
 800091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	607b      	str	r3, [r7, #4]
    }
 800092c:	bf00      	nop
 800092e:	e7fe      	b.n	800092e <main+0x16e>


	//Create software timers for LED effects
	for(int i = 0 ; i < 4 ; i++)
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
 8000934:	e013      	b.n	800095e <main+0x19e>
		handle_led_timer[i] = xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE, (void*)(i+1),led_effect_callback);
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	3301      	adds	r3, #1
 800093a:	461a      	mov	r2, r3
 800093c:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <main+0x210>)
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	4613      	mov	r3, r2
 8000942:	2201      	movs	r2, #1
 8000944:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000948:	4822      	ldr	r0, [pc, #136]	; (80009d4 <main+0x214>)
 800094a:	f006 fbfb 	bl	8007144 <xTimerCreate>
 800094e:	4602      	mov	r2, r0
 8000950:	4921      	ldr	r1, [pc, #132]	; (80009d8 <main+0x218>)
 8000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < 4 ; i++)
 8000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095a:	3301      	adds	r3, #1
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	2b03      	cmp	r3, #3
 8000962:	dde8      	ble.n	8000936 <main+0x176>


	rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <main+0x21c>)
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2300      	movs	r3, #0
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000970:	481b      	ldr	r0, [pc, #108]	; (80009e0 <main+0x220>)
 8000972:	f006 fbe7 	bl	8007144 <xTimerCreate>
 8000976:	4603      	mov	r3, r0
 8000978:	4a1a      	ldr	r2, [pc, #104]	; (80009e4 <main+0x224>)
 800097a:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	491a      	ldr	r1, [pc, #104]	; (80009e8 <main+0x228>)
 8000980:	481a      	ldr	r0, [pc, #104]	; (80009ec <main+0x22c>)
 8000982:	f003 fcfa 	bl	800437a <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 8000986:	f005 fc3f 	bl	8006208 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800098a:	e7fe      	b.n	800098a <main+0x1ca>
 800098c:	20000118 	.word	0x20000118
 8000990:	08009538 	.word	0x08009538
 8000994:	080013fd 	.word	0x080013fd
 8000998:	20000114 	.word	0x20000114
 800099c:	08009544 	.word	0x08009544
 80009a0:	08001b05 	.word	0x08001b05
 80009a4:	2000011c 	.word	0x2000011c
 80009a8:	08009550 	.word	0x08009550
 80009ac:	08001ac5 	.word	0x08001ac5
 80009b0:	20000120 	.word	0x20000120
 80009b4:	0800955c 	.word	0x0800955c
 80009b8:	080014e5 	.word	0x080014e5
 80009bc:	20000124 	.word	0x20000124
 80009c0:	08009568 	.word	0x08009568
 80009c4:	08001659 	.word	0x08001659
 80009c8:	20000128 	.word	0x20000128
 80009cc:	2000012c 	.word	0x2000012c
 80009d0:	08000c6d 	.word	0x08000c6d
 80009d4:	08009574 	.word	0x08009574
 80009d8:	20000130 	.word	0x20000130
 80009dc:	08000c59 	.word	0x08000c59
 80009e0:	08009580 	.word	0x08009580
 80009e4:	20000140 	.word	0x20000140
 80009e8:	20000144 	.word	0x20000144
 80009ec:	200000d0 	.word	0x200000d0

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	; 0x50
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2234      	movs	r2, #52	; 0x34
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f007 fc2a 	bl	8008258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <SystemClock_Config+0xe4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a2d      	ldr	r2, [pc, #180]	; (8000ad4 <SystemClock_Config+0xe4>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <SystemClock_Config+0xe4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a30:	2300      	movs	r3, #0
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <SystemClock_Config+0xe8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a27      	ldr	r2, [pc, #156]	; (8000ad8 <SystemClock_Config+0xe8>)
 8000a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <SystemClock_Config+0xe8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a4c:	230a      	movs	r3, #10
 8000a4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a54:	2301      	movs	r3, #1
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a58:	2310      	movs	r3, #16
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a60:	2302      	movs	r3, #2
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a64:	2300      	movs	r3, #0
 8000a66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a6c:	23b4      	movs	r3, #180	; 0xb4
 8000a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4618      	mov	r0, r3
 8000a82:	f002 fb51 	bl	8003128 <HAL_RCC_OscConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000a8c:	f000 f97c 	bl	8000d88 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a90:	f001 fc54 	bl	800233c <HAL_PWREx_EnableOverDrive>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a9a:	f000 f975 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aaa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2105      	movs	r1, #5
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 fc8d 	bl	80023dc <HAL_RCC_ClockConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000ac8:	f000 f95e 	bl	8000d88 <Error_Handler>
  }
}
 8000acc:	bf00      	nop
 8000ace:	3750      	adds	r7, #80	; 0x50
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_RTC_Init+0x44>)
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <MX_RTC_Init+0x48>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_RTC_Init+0x44>)
 8000ae8:	2240      	movs	r2, #64	; 0x40
 8000aea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_RTC_Init+0x44>)
 8000aee:	227f      	movs	r2, #127	; 0x7f
 8000af0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_RTC_Init+0x44>)
 8000af4:	22ff      	movs	r2, #255	; 0xff
 8000af6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_RTC_Init+0x44>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_RTC_Init+0x44>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_RTC_Init+0x44>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_RTC_Init+0x44>)
 8000b0c:	f002 fdaa 	bl	8003664 <HAL_RTC_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b16:	f000 f937 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200000b0 	.word	0x200000b0
 8000b24:	40002800 	.word	0x40002800

08000b28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <MX_USART2_UART_Init+0x50>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b60:	f003 fb2c 	bl	80041bc <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b6a:	f000 f90d 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000d0 	.word	0x200000d0
 8000b78:	40004400 	.word	0x40004400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a2c      	ldr	r2, [pc, #176]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a25      	ldr	r2, [pc, #148]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a1e      	ldr	r2, [pc, #120]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2120      	movs	r1, #32
 8000c06:	4812      	ldr	r0, [pc, #72]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000c08:	f001 fb7e 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	480c      	ldr	r0, [pc, #48]	; (8000c54 <MX_GPIO_Init+0xd8>)
 8000c24:	f001 f9dc 	bl	8001fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c28:	2320      	movs	r3, #32
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000c40:	f001 f9ce 	bl	8001fe0 <HAL_GPIO_Init>

}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	; 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020800 	.word	0x40020800

08000c58 <rtc_report_callback>:

/* USER CODE BEGIN 4 */

void rtc_report_callback( TimerHandle_t xTimer )
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 8000c60:	f000 f898 	bl	8000d94 <show_time_date_itm>

}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	 int id;
	 id = ( uint32_t ) pvTimerGetTimerID( xTimer );
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f006 fdca 	bl	800780e <pvTimerGetTimerID>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	60fb      	str	r3, [r7, #12]

	 switch(id)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d816      	bhi.n	8000cb4 <led_effect_callback+0x48>
 8000c86:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <led_effect_callback+0x20>)
 8000c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8c:	08000c9d 	.word	0x08000c9d
 8000c90:	08000ca3 	.word	0x08000ca3
 8000c94:	08000ca9 	.word	0x08000ca9
 8000c98:	08000caf 	.word	0x08000caf
	 {
	 case 1 :
		 LED_effect1();
 8000c9c:	f7ff fd34 	bl	8000708 <LED_effect1>
		 break;
 8000ca0:	e008      	b.n	8000cb4 <led_effect_callback+0x48>
	 case 2:
		 LED_effect2();
 8000ca2:	f7ff fd47 	bl	8000734 <LED_effect2>
		 break;
 8000ca6:	e005      	b.n	8000cb4 <led_effect_callback+0x48>
	 case 3:
		 LED_effect3();
 8000ca8:	f7ff fd5a 	bl	8000760 <LED_effect3>
		 break;
 8000cac:	e002      	b.n	8000cb4 <led_effect_callback+0x48>
	 case 4:
		 LED_effect4();
 8000cae:	f7ff fd6f 	bl	8000790 <LED_effect4>
	 }

}
 8000cb2:	e7ff      	b.n	8000cb4 <led_effect_callback+0x48>
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_UART_RxCpltCallback>:


/* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	for(uint32_t i = 0 ; i < 4000 ; i++);
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	e002      	b.n	8000cd0 <HAL_UART_RxCpltCallback+0x14>
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000cd6:	d3f8      	bcc.n	8000cca <HAL_UART_RxCpltCallback+0xe>

	if(! xQueueIsQueueFullFromISR(q_data))
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <HAL_UART_RxCpltCallback+0x98>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f005 f8c8 	bl	8005e72 <xQueueIsQueueFullFromISR>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d107      	bne.n	8000cf8 <HAL_UART_RxCpltCallback+0x3c>
	{
		/*Enqueue data byte */
		xQueueSendFromISR(q_data , (void*)&user_data , NULL);
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_UART_RxCpltCallback+0x98>)
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	2300      	movs	r3, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4919      	ldr	r1, [pc, #100]	; (8000d58 <HAL_UART_RxCpltCallback+0x9c>)
 8000cf2:	f004 fd77 	bl	80057e4 <xQueueGenericSendFromISR>
 8000cf6:	e013      	b.n	8000d20 <HAL_UART_RxCpltCallback+0x64>
	}else{
		if(user_data == '\n')
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_UART_RxCpltCallback+0x9c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b0a      	cmp	r3, #10
 8000d00:	d10e      	bne.n	8000d20 <HAL_UART_RxCpltCallback+0x64>
		{
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_UART_RxCpltCallback+0x98>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f107 010b 	add.w	r1, r7, #11
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f004 fef3 	bl	8005af8 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data ,(void*)&user_data , NULL);
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_UART_RxCpltCallback+0x98>)
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	2300      	movs	r3, #0
 8000d18:	2200      	movs	r2, #0
 8000d1a:	490f      	ldr	r1, [pc, #60]	; (8000d58 <HAL_UART_RxCpltCallback+0x9c>)
 8000d1c:	f004 fd62 	bl	80057e4 <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if( user_data == '\n' ){
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_UART_RxCpltCallback+0x9c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b0a      	cmp	r3, #10
 8000d28:	d10a      	bne.n	8000d40 <HAL_UART_RxCpltCallback+0x84>
		/*send notification to command handling task */
		xTaskNotifyFromISR (handle_cmd_task,0,eNoAction,NULL);
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_UART_RxCpltCallback+0xa0>)
 8000d2c:	6818      	ldr	r0, [r3, #0]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	2300      	movs	r3, #0
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2300      	movs	r3, #0
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f006 f868 	bl	8006e10 <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	4905      	ldr	r1, [pc, #20]	; (8000d58 <HAL_UART_RxCpltCallback+0x9c>)
 8000d44:	4806      	ldr	r0, [pc, #24]	; (8000d60 <HAL_UART_RxCpltCallback+0xa4>)
 8000d46:	f003 fb18 	bl	800437a <HAL_UART_Receive_IT>

}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000128 	.word	0x20000128
 8000d58:	20000144 	.word	0x20000144
 8000d5c:	20000114 	.word	0x20000114
 8000d60:	200000d0 	.word	0x200000d0

08000d64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d101      	bne.n	8000d7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d76:	f000 ff9f 	bl	8001cb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40001000 	.word	0x40001000

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <Error_Handler+0x8>
	...

08000d94 <show_time_date_itm>:
 */

#include "main.h"

 void show_time_date_itm(void)
 {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000d9a:	f107 0318 	add.w	r3, r7, #24
 8000d9e:	2204      	movs	r2, #4
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f007 fa58 	bl	8008258 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2214      	movs	r2, #20
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f007 fa52 	bl	8008258 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	4619      	mov	r1, r3
 8000dba:	4815      	ldr	r0, [pc, #84]	; (8000e10 <show_time_date_itm+0x7c>)
 8000dbc:	f002 fd62 	bl	8003884 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4811      	ldr	r0, [pc, #68]	; (8000e10 <show_time_date_itm+0x7c>)
 8000dca:	f002 fe3d 	bl	8003a48 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d101      	bne.n	8000dd8 <show_time_date_itm+0x44>
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <show_time_date_itm+0x80>)
 8000dd6:	e000      	b.n	8000dda <show_time_date_itm+0x46>
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <show_time_date_itm+0x84>)
 8000dda:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000ddc:	793b      	ldrb	r3, [r7, #4]
 8000dde:	4619      	mov	r1, r3
 8000de0:	797b      	ldrb	r3, [r7, #5]
 8000de2:	461a      	mov	r2, r3
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	4618      	mov	r0, r3
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	4603      	mov	r3, r0
 8000dee:	480b      	ldr	r0, [pc, #44]	; (8000e1c <show_time_date_itm+0x88>)
 8000df0:	f007 fa3a 	bl	8008268 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000df4:	7e7b      	ldrb	r3, [r7, #25]
 8000df6:	4619      	mov	r1, r3
 8000df8:	7ebb      	ldrb	r3, [r7, #26]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	7efb      	ldrb	r3, [r7, #27]
 8000dfe:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000e02:	4807      	ldr	r0, [pc, #28]	; (8000e20 <show_time_date_itm+0x8c>)
 8000e04:	f007 fa30 	bl	8008268 <iprintf>

 }
 8000e08:	bf00      	nop
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200000b0 	.word	0x200000b0
 8000e14:	08009594 	.word	0x08009594
 8000e18:	08009598 	.word	0x08009598
 8000e1c:	0800959c 	.word	0x0800959c
 8000e20:	080095b0 	.word	0x080095b0

08000e24 <show_time_date>:

void show_time_date(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	; 0x30
 8000e28:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000e2a:	f107 0318 	add.w	r3, r7, #24
 8000e2e:	2204      	movs	r2, #4
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f007 fa10 	bl	8008258 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2214      	movs	r2, #20
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f007 fa0a 	bl	8008258 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4821      	ldr	r0, [pc, #132]	; (8000ed0 <show_time_date+0xac>)
 8000e4c:	f002 fd1a 	bl	8003884 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	2200      	movs	r2, #0
 8000e56:	4619      	mov	r1, r3
 8000e58:	481d      	ldr	r0, [pc, #116]	; (8000ed0 <show_time_date+0xac>)
 8000e5a:	f002 fdf5 	bl	8003a48 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <show_time_date+0x44>
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <show_time_date+0xb0>)
 8000e66:	e000      	b.n	8000e6a <show_time_date+0x46>
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <show_time_date+0xb4>)
 8000e6a:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000e6c:	793b      	ldrb	r3, [r7, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	797b      	ldrb	r3, [r7, #5]
 8000e72:	461a      	mov	r2, r3
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	4619      	mov	r1, r3
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	9302      	str	r3, [sp, #8]
 8000e7c:	9101      	str	r1, [sp, #4]
 8000e7e:	9200      	str	r2, [sp, #0]
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a16      	ldr	r2, [pc, #88]	; (8000edc <show_time_date+0xb8>)
 8000e84:	4916      	ldr	r1, [pc, #88]	; (8000ee0 <show_time_date+0xbc>)
 8000e86:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <show_time_date+0xc0>)
 8000e88:	f007 fa06 	bl	8008298 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <show_time_date+0xc4>)
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	2300      	movs	r3, #0
 8000e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e96:	4915      	ldr	r1, [pc, #84]	; (8000eec <show_time_date+0xc8>)
 8000e98:	f004 fba6 	bl	80055e8 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000e9c:	7e7b      	ldrb	r3, [r7, #25]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	7ebb      	ldrb	r3, [r7, #26]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	7efb      	ldrb	r3, [r7, #27]
 8000ea6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	460b      	mov	r3, r1
 8000eae:	4910      	ldr	r1, [pc, #64]	; (8000ef0 <show_time_date+0xcc>)
 8000eb0:	4810      	ldr	r0, [pc, #64]	; (8000ef4 <show_time_date+0xd0>)
 8000eb2:	f007 f9f1 	bl	8008298 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <show_time_date+0xc4>)
 8000eb8:	6818      	ldr	r0, [r3, #0]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ec0:	490d      	ldr	r1, [pc, #52]	; (8000ef8 <show_time_date+0xd4>)
 8000ec2:	f004 fb91 	bl	80055e8 <xQueueGenericSend>
}
 8000ec6:	bf00      	nop
 8000ec8:	3720      	adds	r7, #32
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200000b0 	.word	0x200000b0
 8000ed4:	08009594 	.word	0x08009594
 8000ed8:	08009598 	.word	0x08009598
 8000edc:	080095c0 	.word	0x080095c0
 8000ee0:	080095d4 	.word	0x080095d4
 8000ee4:	20000148 	.word	0x20000148
 8000ee8:	2000012c 	.word	0x2000012c
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	080095b0 	.word	0x080095b0
 8000ef4:	20000170 	.word	0x20000170
 8000ef8:	2000000c 	.word	0x2000000c

08000efc <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8000f16:	2200      	movs	r2, #0
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <rtc_configure_time+0x2c>)
 8000f1c:	f002 fc18 	bl	8003750 <HAL_RTC_SetTime>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200000b0 	.word	0x200000b0

08000f2c <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <rtc_configure_date+0x1c>)
 8000f3a:	f002 fd01 	bl	8003940 <HAL_RTC_SetDate>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000b0 	.word	0x200000b0

08000f4c <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
	if(time){
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00d      	beq.n	8000f78 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b0c      	cmp	r3, #12
 8000f62:	d807      	bhi.n	8000f74 <validate_rtc_information+0x28>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	785b      	ldrb	r3, [r3, #1]
 8000f68:	2b3b      	cmp	r3, #59	; 0x3b
 8000f6a:	d803      	bhi.n	8000f74 <validate_rtc_information+0x28>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	789b      	ldrb	r3, [r3, #2]
 8000f70:	2b3b      	cmp	r3, #59	; 0x3b
 8000f72:	d901      	bls.n	8000f78 <validate_rtc_information+0x2c>
			return 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e015      	b.n	8000fa4 <validate_rtc_information+0x58>
	}

	if(date){
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d011      	beq.n	8000fa2 <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	789b      	ldrb	r3, [r3, #2]
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	d80b      	bhi.n	8000f9e <validate_rtc_information+0x52>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b07      	cmp	r3, #7
 8000f8c:	d807      	bhi.n	8000f9e <validate_rtc_information+0x52>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	78db      	ldrb	r3, [r3, #3]
 8000f92:	2b63      	cmp	r3, #99	; 0x63
 8000f94:	d803      	bhi.n	8000f9e <validate_rtc_information+0x52>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	785b      	ldrb	r3, [r3, #1]
 8000f9a:	2b0c      	cmp	r3, #12
 8000f9c:	d901      	bls.n	8000fa2 <validate_rtc_information+0x56>
			return 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <validate_rtc_information+0x58>
	}

	return 0;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a0f      	ldr	r2, [pc, #60]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000fee:	f006 fd5b 	bl	8007aa8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800

08001000 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b09a      	sub	sp, #104	; 0x68
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	225c      	movs	r2, #92	; 0x5c
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f007 f921 	bl	8008258 <memset>
  if(hrtc->Instance==RTC)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a0c      	ldr	r2, [pc, #48]	; (800104c <HAL_RTC_MspInit+0x4c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d111      	bne.n	8001044 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001020:	2320      	movs	r3, #32
 8001022:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001028:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fb20 	bl	8002674 <HAL_RCCEx_PeriphCLKConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800103a:	f7ff fea5 	bl	8000d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <HAL_RTC_MspInit+0x50>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3768      	adds	r7, #104	; 0x68
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40002800 	.word	0x40002800
 8001050:	42470e3c 	.word	0x42470e3c

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a1d      	ldr	r2, [pc, #116]	; (80010e8 <HAL_UART_MspInit+0x94>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d133      	bne.n	80010de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <HAL_UART_MspInit+0x98>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a1b      	ldr	r2, [pc, #108]	; (80010ec <HAL_UART_MspInit+0x98>)
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_UART_MspInit+0x98>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_UART_MspInit+0x98>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a14      	ldr	r2, [pc, #80]	; (80010ec <HAL_UART_MspInit+0x98>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_UART_MspInit+0x98>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010ae:	230c      	movs	r3, #12
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010be:	2307      	movs	r3, #7
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <HAL_UART_MspInit+0x9c>)
 80010ca:	f000 ff89 	bl	8001fe0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2106      	movs	r1, #6
 80010d2:	2026      	movs	r0, #38	; 0x26
 80010d4:	f000 fec8 	bl	8001e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010d8:	2026      	movs	r0, #38	; 0x26
 80010da:	f000 fee1 	bl	8001ea0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010de:	bf00      	nop
 80010e0:	3728      	adds	r7, #40	; 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40004400 	.word	0x40004400
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000

080010f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08e      	sub	sp, #56	; 0x38
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <HAL_InitTick+0xe4>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <HAL_InitTick+0xe4>)
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	6413      	str	r3, [r2, #64]	; 0x40
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_InitTick+0xe4>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001120:	f107 0210 	add.w	r2, r7, #16
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fa70 	bl	8002610 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001136:	2b00      	cmp	r3, #0
 8001138:	d103      	bne.n	8001142 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800113a:	f001 fa41 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 800113e:	6378      	str	r0, [r7, #52]	; 0x34
 8001140:	e004      	b.n	800114c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001142:	f001 fa3d 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8001146:	4603      	mov	r3, r0
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800114c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800114e:	4a23      	ldr	r2, [pc, #140]	; (80011dc <HAL_InitTick+0xe8>)
 8001150:	fba2 2303 	umull	r2, r3, r2, r3
 8001154:	0c9b      	lsrs	r3, r3, #18
 8001156:	3b01      	subs	r3, #1
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800115a:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <HAL_InitTick+0xec>)
 800115c:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <HAL_InitTick+0xf0>)
 800115e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <HAL_InitTick+0xec>)
 8001162:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001166:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001168:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <HAL_InitTick+0xec>)
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_InitTick+0xec>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_InitTick+0xec>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_InitTick+0xec>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001180:	4817      	ldr	r0, [pc, #92]	; (80011e0 <HAL_InitTick+0xec>)
 8001182:	f002 fd6d 	bl	8003c60 <HAL_TIM_Base_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800118c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001190:	2b00      	cmp	r3, #0
 8001192:	d11b      	bne.n	80011cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001194:	4812      	ldr	r0, [pc, #72]	; (80011e0 <HAL_InitTick+0xec>)
 8001196:	f002 fdbd 	bl	8003d14 <HAL_TIM_Base_Start_IT>
 800119a:	4603      	mov	r3, r0
 800119c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d111      	bne.n	80011cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011a8:	2036      	movs	r0, #54	; 0x36
 80011aa:	f000 fe79 	bl	8001ea0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d808      	bhi.n	80011c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	2036      	movs	r0, #54	; 0x36
 80011ba:	f000 fe55 	bl	8001e68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_InitTick+0xf4>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	e002      	b.n	80011cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3738      	adds	r7, #56	; 0x38
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	431bde83 	.word	0x431bde83
 80011e0:	20000198 	.word	0x20000198
 80011e4:	40001000 	.word	0x40001000
 80011e8:	20000018 	.word	0x20000018

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <NMI_Handler+0x4>

080011f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <MemManage_Handler+0x4>

080011fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <UsageFault_Handler+0x4>

0800120a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <USART2_IRQHandler+0x10>)
 800121e:	f003 f8dd 	bl	80043dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200000d0 	.word	0x200000d0

0800122c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <TIM6_DAC_IRQHandler+0x10>)
 8001232:	f002 fddf 	bl	8003df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000198 	.word	0x20000198

08001240 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <ITM_SendChar+0x48>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <ITM_SendChar+0x48>)
 8001250:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001254:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <ITM_SendChar+0x4c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a0c      	ldr	r2, [pc, #48]	; (800128c <ITM_SendChar+0x4c>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001262:	bf00      	nop
 8001264:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f8      	beq.n	8001264 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001272:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	6013      	str	r3, [r2, #0]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000edfc 	.word	0xe000edfc
 800128c:	e0000e00 	.word	0xe0000e00

08001290 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	e00a      	b.n	80012b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012a2:	f3af 8000 	nop.w
 80012a6:	4601      	mov	r1, r0
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	60ba      	str	r2, [r7, #8]
 80012ae:	b2ca      	uxtb	r2, r1
 80012b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	429a      	cmp	r2, r3
 80012be:	dbf0      	blt.n	80012a2 <_read+0x12>
	}

return len;
 80012c0:	687b      	ldr	r3, [r7, #4]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	e009      	b.n	80012f0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	60ba      	str	r2, [r7, #8]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ffab 	bl	8001240 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbf1      	blt.n	80012dc <_write+0x12>
	}
	return len;
 80012f8:	687b      	ldr	r3, [r7, #4]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <_close>:

int _close(int file)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
	return -1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132a:	605a      	str	r2, [r3, #4]
	return 0;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <_isatty>:

int _isatty(int file)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
	return 1;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
	return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f006 ff24 	bl	80081e8 <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20020000 	.word	0x20020000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	200001e0 	.word	0x200001e0
 80013d4:	200193a8 	.word	0x200193a8

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <menu_task>:

const char *msg_inv = "////Invalid option////\n";


void menu_task(void *param)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af02      	add	r7, sp, #8
 8001402:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "\n========================\n"
 8001404:	4b31      	ldr	r3, [pc, #196]	; (80014cc <menu_task+0xd0>)
 8001406:	60bb      	str	r3, [r7, #8]
								"Date and time ----> 1\n"
								"Exit          ----> 2\n"
								"Enter your choice here : ";

	while(1){
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8001408:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <menu_task+0xd4>)
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	f107 0108 	add.w	r1, r7, #8
 8001410:	2300      	movs	r3, #0
 8001412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001416:	f004 f8e7 	bl	80055e8 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001422:	9200      	str	r2, [sp, #0]
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2000      	movs	r0, #0
 800142a:	f005 fb91 	bl	8006b50 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d133      	bne.n	80014a2 <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	3b30      	subs	r3, #48	; 0x30
 8001440:	613b      	str	r3, [r7, #16]
			switch(option)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d035      	beq.n	80014b4 <menu_task+0xb8>
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	2b02      	cmp	r3, #2
 800144c:	dc20      	bgt.n	8001490 <menu_task+0x94>
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <menu_task+0x60>
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d00d      	beq.n	8001476 <menu_task+0x7a>
 800145a:	e019      	b.n	8001490 <menu_task+0x94>
			{
				case 0:
					curr_state = sLedEffect;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <menu_task+0xd8>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task,0,eNoAction);
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <menu_task+0xdc>)
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	2300      	movs	r3, #0
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2300      	movs	r3, #0
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	f005 fbee 	bl	8006c50 <xTaskGenericNotify>
					break;
 8001474:	e01f      	b.n	80014b6 <menu_task+0xba>
				case 1:
					curr_state = sRtcMenu;
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <menu_task+0xd8>)
 8001478:	2202      	movs	r2, #2
 800147a:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task,0,eNoAction);
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <menu_task+0xe0>)
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	2300      	movs	r3, #0
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2300      	movs	r3, #0
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	f005 fbe1 	bl	8006c50 <xTaskGenericNotify>
					break;
 800148e:	e012      	b.n	80014b6 <menu_task+0xba>
				case 2: /*implement exit */
					break;
				default:
					xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <menu_task+0xd4>)
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	2300      	movs	r3, #0
 8001496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800149a:	4911      	ldr	r1, [pc, #68]	; (80014e0 <menu_task+0xe4>)
 800149c:	f004 f8a4 	bl	80055e8 <xQueueGenericSend>
					continue;
 80014a0:	e012      	b.n	80014c8 <menu_task+0xcc>
			}

		}else{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <menu_task+0xd4>)
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	2300      	movs	r3, #0
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <menu_task+0xe4>)
 80014ae:	f004 f89b 	bl	80055e8 <xQueueGenericSend>
			continue;
 80014b2:	e009      	b.n	80014c8 <menu_task+0xcc>
					break;
 80014b4:	bf00      	nop
		}


		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2300      	movs	r3, #0
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	2000      	movs	r0, #0
 80014c4:	f005 fb44 	bl	8006b50 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80014c8:	e79e      	b.n	8001408 <menu_task+0xc>
 80014ca:	bf00      	nop
 80014cc:	08009604 	.word	0x08009604
 80014d0:	2000012c 	.word	0x2000012c
 80014d4:	20000145 	.word	0x20000145
 80014d8:	20000120 	.word	0x20000120
 80014dc:	20000124 	.word	0x20000124
 80014e0:	20000014 	.word	0x20000014

080014e4 <led_task>:

	}//while super loop
}

void led_task(void *param)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 80014ec:	4b3e      	ldr	r3, [pc, #248]	; (80015e8 <led_task+0x104>)
 80014ee:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2300      	movs	r3, #0
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	f005 fb27 	bl	8006b50 <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 8001502:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <led_task+0x108>)
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	f107 010c 	add.w	r1, r7, #12
 800150a:	2300      	movs	r3, #0
 800150c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001510:	f004 f86a 	bl	80055e8 <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800151c:	9200      	str	r2, [sp, #0]
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2000      	movs	r0, #0
 8001524:	f005 fb14 	bl	8006b50 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b04      	cmp	r3, #4
 8001532:	d843      	bhi.n	80015bc <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	492e      	ldr	r1, [pc, #184]	; (80015f0 <led_task+0x10c>)
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fe69 	bl	8000210 <strcmp>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <led_task+0x66>
				led_effect_stop();
 8001544:	f7ff f84e 	bl	80005e4 <led_effect_stop>
 8001548:	e040      	b.n	80015cc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	4929      	ldr	r1, [pc, #164]	; (80015f4 <led_task+0x110>)
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe fe5e 	bl	8000210 <strcmp>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d103      	bne.n	8001562 <led_task+0x7e>
				led_effect(1);
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff f862 	bl	8000624 <led_effect>
 8001560:	e034      	b.n	80015cc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	4924      	ldr	r1, [pc, #144]	; (80015f8 <led_task+0x114>)
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe fe52 	bl	8000210 <strcmp>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d103      	bne.n	800157a <led_task+0x96>
				led_effect(2);
 8001572:	2002      	movs	r0, #2
 8001574:	f7ff f856 	bl	8000624 <led_effect>
 8001578:	e028      	b.n	80015cc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	491f      	ldr	r1, [pc, #124]	; (80015fc <led_task+0x118>)
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe fe46 	bl	8000210 <strcmp>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d103      	bne.n	8001592 <led_task+0xae>
				led_effect(3);
 800158a:	2003      	movs	r0, #3
 800158c:	f7ff f84a 	bl	8000624 <led_effect>
 8001590:	e01c      	b.n	80015cc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	491a      	ldr	r1, [pc, #104]	; (8001600 <led_task+0x11c>)
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe fe3a 	bl	8000210 <strcmp>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <led_task+0xc6>
				led_effect(4);
 80015a2:	2004      	movs	r0, #4
 80015a4:	f7ff f83e 	bl	8000624 <led_effect>
 80015a8:	e010      	b.n	80015cc <led_task+0xe8>
			else
				xQueueSend(q_print,&msg_inv,portMAX_DELAY); /*print invalid message */
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <led_task+0x108>)
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	2300      	movs	r3, #0
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015b4:	4913      	ldr	r1, [pc, #76]	; (8001604 <led_task+0x120>)
 80015b6:	f004 f817 	bl	80055e8 <xQueueGenericSend>
 80015ba:	e007      	b.n	80015cc <led_task+0xe8>
		}else
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <led_task+0x108>)
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015c6:	490f      	ldr	r1, [pc, #60]	; (8001604 <led_task+0x120>)
 80015c8:	f004 f80e 	bl	80055e8 <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <led_task+0x124>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <led_task+0x128>)
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	2300      	movs	r3, #0
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2300      	movs	r3, #0
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	f005 fb36 	bl	8006c50 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80015e4:	e784      	b.n	80014f0 <led_task+0xc>
 80015e6:	bf00      	nop
 80015e8:	080096ac 	.word	0x080096ac
 80015ec:	2000012c 	.word	0x2000012c
 80015f0:	08009724 	.word	0x08009724
 80015f4:	0800972c 	.word	0x0800972c
 80015f8:	08009730 	.word	0x08009730
 80015fc:	08009734 	.word	0x08009734
 8001600:	08009738 	.word	0x08009738
 8001604:	20000014 	.word	0x20000014
 8001608:	20000145 	.word	0x20000145
 800160c:	20000118 	.word	0x20000118

08001610 <getnumber>:

	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	dd0f      	ble.n	8001640 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	461a      	mov	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3301      	adds	r3, #1
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	3b30      	subs	r3, #48	; 0x30
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e003      	b.n	8001648 <getnumber+0x38>
	else
		value = p[0] - 48;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	3b30      	subs	r3, #48	; 0x30
 8001646:	60fb      	str	r3, [r7, #12]

	return value;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	b2db      	uxtb	r3, r3

}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <rtc_task>:

void rtc_task(void *param)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b09b      	sub	sp, #108	; 0x6c
 800165c:	af02      	add	r7, sp, #8
 800165e:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8001660:	4bb2      	ldr	r3, [pc, #712]	; (800192c <rtc_task+0x2d4>)
 8001662:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 8001664:	4bb2      	ldr	r3, [pc, #712]	; (8001930 <rtc_task+0x2d8>)
 8001666:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001668:	4bb2      	ldr	r3, [pc, #712]	; (8001934 <rtc_task+0x2dc>)
 800166a:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 800166c:	4bb2      	ldr	r3, [pc, #712]	; (8001938 <rtc_task+0x2e0>)
 800166e:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001670:	4bb2      	ldr	r3, [pc, #712]	; (800193c <rtc_task+0x2e4>)
 8001672:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8001674:	4bb2      	ldr	r3, [pc, #712]	; (8001940 <rtc_task+0x2e8>)
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8001678:	4bb2      	ldr	r3, [pc, #712]	; (8001944 <rtc_task+0x2ec>)
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 800167c:	4bb2      	ldr	r3, [pc, #712]	; (8001948 <rtc_task+0x2f0>)
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001680:	4bb2      	ldr	r3, [pc, #712]	; (800194c <rtc_task+0x2f4>)
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 8001684:	4bb2      	ldr	r3, [pc, #712]	; (8001950 <rtc_task+0x2f8>)
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001688:	4bb2      	ldr	r3, [pc, #712]	; (8001954 <rtc_task+0x2fc>)
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
#define DAY_CONFIG 		3


	while(1){
		/*Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800168c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2300      	movs	r3, #0
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	2000      	movs	r0, #0
 800169a:	f005 fa59 	bl	8006b50 <xTaskGenericNotifyWait>

		/*Print the menu and show current date and time information */
		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 800169e:	4bae      	ldr	r3, [pc, #696]	; (8001958 <rtc_task+0x300>)
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80016a6:	2300      	movs	r3, #0
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016ac:	f003 ff9c 	bl	80055e8 <xQueueGenericSend>
		show_time_date();
 80016b0:	f7ff fbb8 	bl	8000e24 <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 80016b4:	4ba8      	ldr	r3, [pc, #672]	; (8001958 <rtc_task+0x300>)
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80016bc:	2300      	movs	r3, #0
 80016be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c2:	f003 ff91 	bl	80055e8 <xQueueGenericSend>


		while(curr_state != sMainMenu){
 80016c6:	bf00      	nop
 80016c8:	e1e1      	b.n	8001a8e <rtc_task+0x436>

			/*Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016d2:	9200      	str	r2, [sp, #0]
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	2000      	movs	r0, #0
 80016da:	f005 fa39 	bl	8006b50 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 80016de:	6a3b      	ldr	r3, [r7, #32]
 80016e0:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state)
 80016e2:	4b9e      	ldr	r3, [pc, #632]	; (800195c <rtc_task+0x304>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	3b02      	subs	r3, #2
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	f200 81d0 	bhi.w	8001a8e <rtc_task+0x436>
 80016ee:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <rtc_task+0x9c>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	08001705 	.word	0x08001705
 80016f8:	080017b7 	.word	0x080017b7
 80016fc:	080018a5 	.word	0x080018a5
 8001700:	08001a0b 	.word	0x08001a0b
			{
				case sRtcMenu:{
					/*process RTC menu commands */
					if(cmd->len == 1)
 8001704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d148      	bne.n	800179e <rtc_task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 800170c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	3b30      	subs	r3, #48	; 0x30
 8001712:	653b      	str	r3, [r7, #80]	; 0x50
 8001714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001716:	2b03      	cmp	r3, #3
 8001718:	d835      	bhi.n	8001786 <rtc_task+0x12e>
 800171a:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <rtc_task+0xc8>)
 800171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001720:	08001731 	.word	0x08001731
 8001724:	0800174b 	.word	0x0800174b
 8001728:	08001765 	.word	0x08001765
 800172c:	0800177f 	.word	0x0800177f
						switch(menu_code)
						{
						case 0:
							curr_state = sRtcTimeConfig;
 8001730:	4b8a      	ldr	r3, [pc, #552]	; (800195c <rtc_task+0x304>)
 8001732:	2203      	movs	r2, #3
 8001734:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 8001736:	4b88      	ldr	r3, [pc, #544]	; (8001958 <rtc_task+0x300>)
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800173e:	2300      	movs	r3, #0
 8001740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001744:	f003 ff50 	bl	80055e8 <xQueueGenericSend>
							break;
 8001748:	e034      	b.n	80017b4 <rtc_task+0x15c>
						case 1:
							curr_state = sRtcDateConfig;
 800174a:	4b84      	ldr	r3, [pc, #528]	; (800195c <rtc_task+0x304>)
 800174c:	2204      	movs	r2, #4
 800174e:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 8001750:	4b81      	ldr	r3, [pc, #516]	; (8001958 <rtc_task+0x300>)
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001758:	2300      	movs	r3, #0
 800175a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800175e:	f003 ff43 	bl	80055e8 <xQueueGenericSend>
							break;
 8001762:	e027      	b.n	80017b4 <rtc_task+0x15c>
						case 2 :
							curr_state = sRtcReport;
 8001764:	4b7d      	ldr	r3, [pc, #500]	; (800195c <rtc_task+0x304>)
 8001766:	2205      	movs	r2, #5
 8001768:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 800176a:	4b7b      	ldr	r3, [pc, #492]	; (8001958 <rtc_task+0x300>)
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001772:	2300      	movs	r3, #0
 8001774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001778:	f003 ff36 	bl	80055e8 <xQueueGenericSend>
							break;
 800177c:	e01a      	b.n	80017b4 <rtc_task+0x15c>
						case 3 :
							curr_state = sMainMenu;
 800177e:	4b77      	ldr	r3, [pc, #476]	; (800195c <rtc_task+0x304>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
							break;
 8001784:	e016      	b.n	80017b4 <rtc_task+0x15c>
						default:
							curr_state = sMainMenu;
 8001786:	4b75      	ldr	r3, [pc, #468]	; (800195c <rtc_task+0x304>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800178c:	4b72      	ldr	r3, [pc, #456]	; (8001958 <rtc_task+0x300>)
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	2300      	movs	r3, #0
 8001792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001796:	4972      	ldr	r1, [pc, #456]	; (8001960 <rtc_task+0x308>)
 8001798:	f003 ff26 	bl	80055e8 <xQueueGenericSend>
 800179c:	e177      	b.n	8001a8e <rtc_task+0x436>
						}

					}else{
						curr_state = sMainMenu;
 800179e:	4b6f      	ldr	r3, [pc, #444]	; (800195c <rtc_task+0x304>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80017a4:	4b6c      	ldr	r3, [pc, #432]	; (8001958 <rtc_task+0x300>)
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	2300      	movs	r3, #0
 80017aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017ae:	496c      	ldr	r1, [pc, #432]	; (8001960 <rtc_task+0x308>)
 80017b0:	f003 ff1a 	bl	80055e8 <xQueueGenericSend>
					}
					break;}
 80017b4:	e16b      	b.n	8001a8e <rtc_task+0x436>

				case sRtcTimeConfig:{
					/*get hh, mm, ss infor and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 80017b6:	4b6b      	ldr	r3, [pc, #428]	; (8001964 <rtc_task+0x30c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d03b      	beq.n	8001836 <rtc_task+0x1de>
 80017be:	2b02      	cmp	r3, #2
 80017c0:	f300 8165 	bgt.w	8001a8e <rtc_task+0x436>
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <rtc_task+0x176>
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d01a      	beq.n	8001802 <rtc_task+0x1aa>
 80017cc:	e15f      	b.n	8001a8e <rtc_task+0x436>
						{
							case HH_CONFIG:{
								uint8_t hour = getnumber(cmd->payload , cmd->len);
 80017ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80017d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4619      	mov	r1, r3
 80017d6:	4610      	mov	r0, r2
 80017d8:	f7ff ff1a 	bl	8001610 <getnumber>
 80017dc:	4603      	mov	r3, r0
 80017de:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								time.Hours = hour;
 80017e2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80017e6:	733b      	strb	r3, [r7, #12]
								rtc_state = MM_CONFIG;
 80017e8:	4b5e      	ldr	r3, [pc, #376]	; (8001964 <rtc_task+0x30c>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 80017ee:	4b5a      	ldr	r3, [pc, #360]	; (8001958 <rtc_task+0x300>)
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80017f6:	2300      	movs	r3, #0
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017fc:	f003 fef4 	bl	80055e8 <xQueueGenericSend>
								break;}
 8001800:	e04f      	b.n	80018a2 <rtc_task+0x24a>
							case MM_CONFIG:{
								uint8_t min = getnumber(cmd->payload , cmd->len);
 8001802:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4619      	mov	r1, r3
 800180a:	4610      	mov	r0, r2
 800180c:	f7ff ff00 	bl	8001610 <getnumber>
 8001810:	4603      	mov	r3, r0
 8001812:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
								time.Minutes = min;
 8001816:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800181a:	737b      	strb	r3, [r7, #13]
								rtc_state = SS_CONFIG;
 800181c:	4b51      	ldr	r3, [pc, #324]	; (8001964 <rtc_task+0x30c>)
 800181e:	2202      	movs	r2, #2
 8001820:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 8001822:	4b4d      	ldr	r3, [pc, #308]	; (8001958 <rtc_task+0x300>)
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800182a:	2300      	movs	r3, #0
 800182c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001830:	f003 feda 	bl	80055e8 <xQueueGenericSend>
								break;}
 8001834:	e035      	b.n	80018a2 <rtc_task+0x24a>
							case SS_CONFIG:{
								uint8_t sec = getnumber(cmd->payload , cmd->len);
 8001836:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4619      	mov	r1, r3
 800183e:	4610      	mov	r0, r2
 8001840:	f7ff fee6 	bl	8001610 <getnumber>
 8001844:	4603      	mov	r3, r0
 8001846:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
								time.Seconds = sec;
 800184a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800184e:	73bb      	strb	r3, [r7, #14]
								if(!validate_rtc_information(&time,NULL))
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fb78 	bl	8000f4c <validate_rtc_information>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d110      	bne.n	8001884 <rtc_task+0x22c>
								{
									rtc_configure_time(&time);
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fb48 	bl	8000efc <rtc_configure_time>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 800186c:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <rtc_task+0x300>)
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001874:	2300      	movs	r3, #0
 8001876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800187a:	f003 feb5 	bl	80055e8 <xQueueGenericSend>
									show_time_date();
 800187e:	f7ff fad1 	bl	8000e24 <show_time_date>
 8001882:	e007      	b.n	8001894 <rtc_task+0x23c>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001884:	4b34      	ldr	r3, [pc, #208]	; (8001958 <rtc_task+0x300>)
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	2300      	movs	r3, #0
 800188a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800188e:	4934      	ldr	r1, [pc, #208]	; (8001960 <rtc_task+0x308>)
 8001890:	f003 feaa 	bl	80055e8 <xQueueGenericSend>

								curr_state = sMainMenu;
 8001894:	4b31      	ldr	r3, [pc, #196]	; (800195c <rtc_task+0x304>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 800189a:	4b32      	ldr	r3, [pc, #200]	; (8001964 <rtc_task+0x30c>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
								break;}
 80018a0:	bf00      	nop
						}

					break;}
 80018a2:	e0f4      	b.n	8001a8e <rtc_task+0x436>
				case sRtcDateConfig:{

					/*get date, month, day , year info and configure RTC */

					/*take care of invalid entries */
					switch(rtc_state)
 80018a4:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <rtc_task+0x30c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	f200 80f0 	bhi.w	8001a8e <rtc_task+0x436>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <rtc_task+0x25c>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	080018c5 	.word	0x080018c5
 80018b8:	080018f9 	.word	0x080018f9
 80018bc:	0800199d 	.word	0x0800199d
 80018c0:	08001969 	.word	0x08001969
						{
							case DATE_CONFIG:{
								uint8_t d = getnumber(cmd->payload , cmd->len);
 80018c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80018c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4610      	mov	r0, r2
 80018ce:	f7ff fe9f 	bl	8001610 <getnumber>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
								date.Date = d;
 80018d8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80018dc:	72bb      	strb	r3, [r7, #10]
								rtc_state = MONTH_CONFIG;
 80018de:	4b21      	ldr	r3, [pc, #132]	; (8001964 <rtc_task+0x30c>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <rtc_task+0x300>)
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80018ec:	2300      	movs	r3, #0
 80018ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f2:	f003 fe79 	bl	80055e8 <xQueueGenericSend>
								break;}
 80018f6:	e087      	b.n	8001a08 <rtc_task+0x3b0>
							case MONTH_CONFIG:{
								uint8_t month = getnumber(cmd->payload , cmd->len);
 80018f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80018fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	4619      	mov	r1, r3
 8001900:	4610      	mov	r0, r2
 8001902:	f7ff fe85 	bl	8001610 <getnumber>
 8001906:	4603      	mov	r3, r0
 8001908:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
								date.Month = month;
 800190c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001910:	727b      	strb	r3, [r7, #9]
								rtc_state = DAY_CONFIG;
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <rtc_task+0x30c>)
 8001914:	2203      	movs	r2, #3
 8001916:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <rtc_task+0x300>)
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001920:	2300      	movs	r3, #0
 8001922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001926:	f003 fe5f 	bl	80055e8 <xQueueGenericSend>
								break;}
 800192a:	e06d      	b.n	8001a08 <rtc_task+0x3b0>
 800192c:	0800973c 	.word	0x0800973c
 8001930:	08009788 	.word	0x08009788
 8001934:	0800982c 	.word	0x0800982c
 8001938:	08009840 	.word	0x08009840
 800193c:	08009858 	.word	0x08009858
 8001940:	08009870 	.word	0x08009870
 8001944:	08009884 	.word	0x08009884
 8001948:	08009898 	.word	0x08009898
 800194c:	080098b0 	.word	0x080098b0
 8001950:	080098c4 	.word	0x080098c4
 8001954:	080098e0 	.word	0x080098e0
 8001958:	2000012c 	.word	0x2000012c
 800195c:	20000145 	.word	0x20000145
 8001960:	20000014 	.word	0x20000014
 8001964:	200001e4 	.word	0x200001e4
							case DAY_CONFIG:{
								uint8_t day = getnumber(cmd->payload , cmd->len);
 8001968:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800196a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4619      	mov	r1, r3
 8001970:	4610      	mov	r0, r2
 8001972:	f7ff fe4d 	bl	8001610 <getnumber>
 8001976:	4603      	mov	r3, r0
 8001978:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
								date.WeekDay = day;
 800197c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001980:	723b      	strb	r3, [r7, #8]
								rtc_state = YEAR_CONFIG;
 8001982:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <rtc_task+0x454>)
 8001984:	2202      	movs	r2, #2
 8001986:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8001988:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <rtc_task+0x458>)
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001990:	2300      	movs	r3, #0
 8001992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001996:	f003 fe27 	bl	80055e8 <xQueueGenericSend>
								break;}
 800199a:	e035      	b.n	8001a08 <rtc_task+0x3b0>
							case YEAR_CONFIG:{
								uint8_t year = getnumber(cmd->payload , cmd->len);
 800199c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800199e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	4619      	mov	r1, r3
 80019a4:	4610      	mov	r0, r2
 80019a6:	f7ff fe33 	bl	8001610 <getnumber>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
								date.Year = year;
 80019b0:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80019b4:	72fb      	strb	r3, [r7, #11]

								if(!validate_rtc_information(NULL,&date))
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	4619      	mov	r1, r3
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff fac5 	bl	8000f4c <validate_rtc_information>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d110      	bne.n	80019ea <rtc_task+0x392>
								{
									rtc_configure_date(&date);
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff faad 	bl	8000f2c <rtc_configure_date>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <rtc_task+0x458>)
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80019da:	2300      	movs	r3, #0
 80019dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019e0:	f003 fe02 	bl	80055e8 <xQueueGenericSend>
									show_time_date();
 80019e4:	f7ff fa1e 	bl	8000e24 <show_time_date>
 80019e8:	e007      	b.n	80019fa <rtc_task+0x3a2>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80019ea:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <rtc_task+0x458>)
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	2300      	movs	r3, #0
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f4:	492f      	ldr	r1, [pc, #188]	; (8001ab4 <rtc_task+0x45c>)
 80019f6:	f003 fdf7 	bl	80055e8 <xQueueGenericSend>

								curr_state = sMainMenu;
 80019fa:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <rtc_task+0x460>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <rtc_task+0x454>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
								break;}
 8001a06:	bf00      	nop
						}


					break;}
 8001a08:	e041      	b.n	8001a8e <rtc_task+0x436>

				case sRtcReport:{
					/*enable or disable RTC current time reporting over ITM printf */
					if(cmd->len == 1)
 8001a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d131      	bne.n	8001a76 <rtc_task+0x41e>
					{
						if(cmd->payload[0] == 'y'){
 8001a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b79      	cmp	r3, #121	; 0x79
 8001a18:	d115      	bne.n	8001a46 <rtc_task+0x3ee>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001a1a:	4b28      	ldr	r3, [pc, #160]	; (8001abc <rtc_task+0x464>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f005 fecc 	bl	80077bc <xTimerIsTimerActive>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d12d      	bne.n	8001a86 <rtc_task+0x42e>
								xTimerStart(rtc_timer,portMAX_DELAY);
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <rtc_task+0x464>)
 8001a2c:	681c      	ldr	r4, [r3, #0]
 8001a2e:	f004 fce7 	bl	8006400 <xTaskGetTickCount>
 8001a32:	4602      	mov	r2, r0
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f005 fbdc 	bl	80071fc <xTimerGenericCommand>
 8001a44:	e01f      	b.n	8001a86 <rtc_task+0x42e>
						}else if (cmd->payload[0] == 'n'){
 8001a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b6e      	cmp	r3, #110	; 0x6e
 8001a4c:	d10a      	bne.n	8001a64 <rtc_task+0x40c>
							xTimerStop(rtc_timer,portMAX_DELAY);
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <rtc_task+0x464>)
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	f005 fbcd 	bl	80071fc <xTimerGenericCommand>
 8001a62:	e010      	b.n	8001a86 <rtc_task+0x42e>
						}else{
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <rtc_task+0x458>)
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a6e:	4911      	ldr	r1, [pc, #68]	; (8001ab4 <rtc_task+0x45c>)
 8001a70:	f003 fdba 	bl	80055e8 <xQueueGenericSend>
 8001a74:	e007      	b.n	8001a86 <rtc_task+0x42e>
						}

					}else
					    xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <rtc_task+0x458>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <rtc_task+0x45c>)
 8001a82:	f003 fdb1 	bl	80055e8 <xQueueGenericSend>

					curr_state = sMainMenu;
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <rtc_task+0x460>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
					break;}
 8001a8c:	bf00      	nop
		while(curr_state != sMainMenu){
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <rtc_task+0x460>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f47f ae19 	bne.w	80016ca <rtc_task+0x72>

		} //while end


		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <rtc_task+0x468>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	f005 f8d3 	bl	8006c50 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001aaa:	e5ef      	b.n	800168c <rtc_task+0x34>
 8001aac:	200001e4 	.word	0x200001e4
 8001ab0:	2000012c 	.word	0x2000012c
 8001ab4:	20000014 	.word	0x20000014
 8001ab8:	20000145 	.word	0x20000145
 8001abc:	20000140 	.word	0x20000140
 8001ac0:	20000118 	.word	0x20000118

08001ac4 <print_task>:
}



void print_task(void *param)
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <print_task+0x38>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f107 010c 	add.w	r1, r7, #12
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 ff2d 	bl	8005938 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8001ade:	68fc      	ldr	r4, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fb9e 	bl	8000224 <strlen>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001af0:	4621      	mov	r1, r4
 8001af2:	4803      	ldr	r0, [pc, #12]	; (8001b00 <print_task+0x3c>)
 8001af4:	f002 fbaf 	bl	8004256 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001af8:	e7e8      	b.n	8001acc <print_task+0x8>
 8001afa:	bf00      	nop
 8001afc:	2000012c 	.word	0x2000012c
 8001b00:	200000d0 	.word	0x200000d0

08001b04 <cmd_handler_task>:
}



void cmd_handler_task(void *param)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	while(1){
		/*Implement notify wait */
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2300      	movs	r3, #0
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f005 f819 	bl	8006b50 <xTaskGenericNotifyWait>
 8001b1e:	61f8      	str	r0, [r7, #28]

		if(ret == pdTRUE){
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d1f2      	bne.n	8001b0c <cmd_handler_task+0x8>
			/*process the user data(command) stored in input data queue */
			process_command(&cmd);
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f802 	bl	8001b34 <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001b30:	e7ec      	b.n	8001b0c <cmd_handler_task+0x8>
	...

08001b34 <process_command>:

}


void process_command(command_t *cmd)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f835 	bl	8001bac <extract_command>

	switch(curr_state)
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <process_command+0x68>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	dc24      	bgt.n	8001b94 <process_command+0x60>
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	da18      	bge.n	8001b80 <process_command+0x4c>
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <process_command+0x24>
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d00a      	beq.n	8001b6c <process_command+0x38>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
		break;

	}

}
 8001b56:	e01d      	b.n	8001b94 <process_command+0x60>
			xTaskNotify(handle_menu_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <process_command+0x6c>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2303      	movs	r3, #3
 8001b64:	2100      	movs	r1, #0
 8001b66:	f005 f873 	bl	8006c50 <xTaskGenericNotify>
		break;
 8001b6a:	e013      	b.n	8001b94 <process_command+0x60>
			xTaskNotify(handle_led_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <process_command+0x70>)
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	2300      	movs	r3, #0
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2303      	movs	r3, #3
 8001b78:	2100      	movs	r1, #0
 8001b7a:	f005 f869 	bl	8006c50 <xTaskGenericNotify>
		break;
 8001b7e:	e009      	b.n	8001b94 <process_command+0x60>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <process_command+0x74>)
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	2300      	movs	r3, #0
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	f005 f85f 	bl	8006c50 <xTaskGenericNotify>
		break;
 8001b92:	bf00      	nop
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000145 	.word	0x20000145
 8001ba0:	20000118 	.word	0x20000118
 8001ba4:	20000120 	.word	0x20000120
 8001ba8:	20000124 	.word	0x20000124

08001bac <extract_command>:


int extract_command(command_t *cmd)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t  status;

	status = uxQueueMessagesWaiting(q_data );
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <extract_command+0x70>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f004 f82c 	bl	8005c16 <uxQueueMessagesWaiting>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <extract_command+0x22>
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bcc:	e022      	b.n	8001c14 <extract_command+0x68>
	uint8_t i =0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_data,&item,0);
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <extract_command+0x70>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f107 010f 	add.w	r1, r7, #15
 8001bda:	2200      	movs	r2, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f003 feab 	bl	8005938 <xQueueReceive>
 8001be2:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d106      	bne.n	8001bf8 <extract_command+0x4c>
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	75fa      	strb	r2, [r7, #23]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	7bf9      	ldrb	r1, [r7, #15]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	2b0a      	cmp	r3, #10
 8001bfc:	d1e9      	bne.n	8001bd2 <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	2100      	movs	r1, #0
 8001c06:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1; /*save  length of the command excluding null char */
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60da      	str	r2, [r3, #12]

	return 0;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000128 	.word	0x20000128

08001c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c26:	490e      	ldr	r1, [pc, #56]	; (8001c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c28:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c2c:	e002      	b.n	8001c34 <LoopCopyDataInit>

08001c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c32:	3304      	adds	r3, #4

08001c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c38:	d3f9      	bcc.n	8001c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c3c:	4c0b      	ldr	r4, [pc, #44]	; (8001c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c40:	e001      	b.n	8001c46 <LoopFillZerobss>

08001c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c44:	3204      	adds	r2, #4

08001c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c48:	d3fb      	bcc.n	8001c42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c4a:	f7ff fbc5 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f006 fad1 	bl	80081f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c52:	f7fe fdb5 	bl	80007c0 <main>
  bx  lr    
 8001c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c60:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001c64:	080099dc 	.word	0x080099dc
  ldr r2, =_sbss
 8001c68:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001c6c:	200193a4 	.word	0x200193a4

08001c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC_IRQHandler>
	...

08001c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <HAL_Init+0x40>)
 8001c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_Init+0x40>)
 8001c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_Init+0x40>)
 8001c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f000 f8d8 	bl	8001e52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff fa26 	bl	80010f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca8:	f7ff f982 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023c00 	.word	0x40023c00

08001cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_IncTick+0x20>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x24>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <HAL_IncTick+0x24>)
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	2000001c 	.word	0x2000001c
 8001cdc:	200001e8 	.word	0x200001e8

08001ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_GetTick+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	200001e8 	.word	0x200001e8

08001cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2a:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	60d3      	str	r3, [r2, #12]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <__NVIC_GetPriorityGrouping+0x18>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	f003 0307 	and.w	r3, r3, #7
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	db0b      	blt.n	8001d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	4907      	ldr	r1, [pc, #28]	; (8001d94 <__NVIC_EnableIRQ+0x38>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100

08001d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	; (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	; (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
         );
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ff4c 	bl	8001cf8 <__NVIC_SetPriorityGrouping>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7a:	f7ff ff61 	bl	8001d40 <__NVIC_GetPriorityGrouping>
 8001e7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	6978      	ldr	r0, [r7, #20]
 8001e86:	f7ff ffb1 	bl	8001dec <NVIC_EncodePriority>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff80 	bl	8001d98 <__NVIC_SetPriority>
}
 8001e98:	bf00      	nop
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff54 	bl	8001d5c <__NVIC_EnableIRQ>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eca:	f7ff ff09 	bl	8001ce0 <HAL_GetTick>
 8001ece:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d008      	beq.n	8001eee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2280      	movs	r2, #128	; 0x80
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e052      	b.n	8001f94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0216 	bic.w	r2, r2, #22
 8001efc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d103      	bne.n	8001f1e <HAL_DMA_Abort+0x62>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0208 	bic.w	r2, r2, #8
 8001f2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f3e:	e013      	b.n	8001f68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f40:	f7ff fece 	bl	8001ce0 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b05      	cmp	r3, #5
 8001f4c:	d90c      	bls.n	8001f68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2220      	movs	r2, #32
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2203      	movs	r2, #3
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e015      	b.n	8001f94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1e4      	bne.n	8001f40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7a:	223f      	movs	r2, #63	; 0x3f
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d004      	beq.n	8001fba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2280      	movs	r2, #128	; 0x80
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00c      	b.n	8001fd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2205      	movs	r2, #5
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0201 	bic.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	e165      	b.n	80022c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	429a      	cmp	r2, r3
 8002016:	f040 8154 	bne.w	80022c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d005      	beq.n	8002032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202e:	2b02      	cmp	r3, #2
 8002030:	d130      	bne.n	8002094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002068:	2201      	movs	r2, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 0201 	and.w	r2, r3, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b03      	cmp	r3, #3
 800209e:	d017      	beq.n	80020d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d123      	bne.n	8002124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	08da      	lsrs	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3208      	adds	r2, #8
 80020e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	220f      	movs	r2, #15
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	08da      	lsrs	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3208      	adds	r2, #8
 800211e:	69b9      	ldr	r1, [r7, #24]
 8002120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0203 	and.w	r2, r3, #3
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80ae 	beq.w	80022c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b5d      	ldr	r3, [pc, #372]	; (80022e0 <HAL_GPIO_Init+0x300>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a5c      	ldr	r2, [pc, #368]	; (80022e0 <HAL_GPIO_Init+0x300>)
 8002170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b5a      	ldr	r3, [pc, #360]	; (80022e0 <HAL_GPIO_Init+0x300>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002182:	4a58      	ldr	r2, [pc, #352]	; (80022e4 <HAL_GPIO_Init+0x304>)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	220f      	movs	r2, #15
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4f      	ldr	r2, [pc, #316]	; (80022e8 <HAL_GPIO_Init+0x308>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d025      	beq.n	80021fa <HAL_GPIO_Init+0x21a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4e      	ldr	r2, [pc, #312]	; (80022ec <HAL_GPIO_Init+0x30c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01f      	beq.n	80021f6 <HAL_GPIO_Init+0x216>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4d      	ldr	r2, [pc, #308]	; (80022f0 <HAL_GPIO_Init+0x310>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d019      	beq.n	80021f2 <HAL_GPIO_Init+0x212>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4c      	ldr	r2, [pc, #304]	; (80022f4 <HAL_GPIO_Init+0x314>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_GPIO_Init+0x20e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4b      	ldr	r2, [pc, #300]	; (80022f8 <HAL_GPIO_Init+0x318>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00d      	beq.n	80021ea <HAL_GPIO_Init+0x20a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4a      	ldr	r2, [pc, #296]	; (80022fc <HAL_GPIO_Init+0x31c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <HAL_GPIO_Init+0x206>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a49      	ldr	r2, [pc, #292]	; (8002300 <HAL_GPIO_Init+0x320>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d101      	bne.n	80021e2 <HAL_GPIO_Init+0x202>
 80021de:	2306      	movs	r3, #6
 80021e0:	e00c      	b.n	80021fc <HAL_GPIO_Init+0x21c>
 80021e2:	2307      	movs	r3, #7
 80021e4:	e00a      	b.n	80021fc <HAL_GPIO_Init+0x21c>
 80021e6:	2305      	movs	r3, #5
 80021e8:	e008      	b.n	80021fc <HAL_GPIO_Init+0x21c>
 80021ea:	2304      	movs	r3, #4
 80021ec:	e006      	b.n	80021fc <HAL_GPIO_Init+0x21c>
 80021ee:	2303      	movs	r3, #3
 80021f0:	e004      	b.n	80021fc <HAL_GPIO_Init+0x21c>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e002      	b.n	80021fc <HAL_GPIO_Init+0x21c>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_GPIO_Init+0x21c>
 80021fa:	2300      	movs	r3, #0
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	f002 0203 	and.w	r2, r2, #3
 8002202:	0092      	lsls	r2, r2, #2
 8002204:	4093      	lsls	r3, r2
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800220c:	4935      	ldr	r1, [pc, #212]	; (80022e4 <HAL_GPIO_Init+0x304>)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3302      	adds	r3, #2
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221a:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <HAL_GPIO_Init+0x324>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800223e:	4a31      	ldr	r2, [pc, #196]	; (8002304 <HAL_GPIO_Init+0x324>)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002244:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <HAL_GPIO_Init+0x324>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002268:	4a26      	ldr	r2, [pc, #152]	; (8002304 <HAL_GPIO_Init+0x324>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800226e:	4b25      	ldr	r3, [pc, #148]	; (8002304 <HAL_GPIO_Init+0x324>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002292:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <HAL_GPIO_Init+0x324>)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_GPIO_Init+0x324>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022bc:	4a11      	ldr	r2, [pc, #68]	; (8002304 <HAL_GPIO_Init+0x324>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3301      	adds	r3, #1
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b0f      	cmp	r3, #15
 80022cc:	f67f ae96 	bls.w	8001ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3724      	adds	r7, #36	; 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40013800 	.word	0x40013800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40020400 	.word	0x40020400
 80022f0:	40020800 	.word	0x40020800
 80022f4:	40020c00 	.word	0x40020c00
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40021400 	.word	0x40021400
 8002300:	40021800 	.word	0x40021800
 8002304:	40013c00 	.word	0x40013c00

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002324:	e003      	b.n	800232e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HAL_PWREx_EnableOverDrive+0x90>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <HAL_PWREx_EnableOverDrive+0x90>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_PWREx_EnableOverDrive+0x90>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002368:	f7ff fcba 	bl	8001ce0 <HAL_GetTick>
 800236c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800236e:	e009      	b.n	8002384 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002370:	f7ff fcb6 	bl	8001ce0 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800237e:	d901      	bls.n	8002384 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e01f      	b.n	80023c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002390:	d1ee      	bne.n	8002370 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002398:	f7ff fca2 	bl	8001ce0 <HAL_GetTick>
 800239c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800239e:	e009      	b.n	80023b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023a0:	f7ff fc9e 	bl	8001ce0 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ae:	d901      	bls.n	80023b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e007      	b.n	80023c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023c0:	d1ee      	bne.n	80023a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40023800 	.word	0x40023800
 80023d0:	420e0040 	.word	0x420e0040
 80023d4:	40007000 	.word	0x40007000
 80023d8:	420e0044 	.word	0x420e0044

080023dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0cc      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d90c      	bls.n	8002418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b63      	ldr	r3, [pc, #396]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0b8      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d020      	beq.n	8002466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800243a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b50      	ldr	r3, [pc, #320]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	494d      	ldr	r1, [pc, #308]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d044      	beq.n	80024fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d119      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d003      	beq.n	800249a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002496:	2b03      	cmp	r3, #3
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e06f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e067      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b37      	ldr	r3, [pc, #220]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4934      	ldr	r1, [pc, #208]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7ff fc08 	bl	8001ce0 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7ff fc04 	bl	8001ce0 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e04f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d20c      	bcs.n	8002524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e032      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4916      	ldr	r1, [pc, #88]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	490e      	ldr	r1, [pc, #56]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002562:	f000 fbb1 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002566:	4602      	mov	r2, r0
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	490a      	ldr	r1, [pc, #40]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	5ccb      	ldrb	r3, [r1, r3]
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fdb6 	bl	80010f4 <HAL_InitTick>

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00
 8002598:	40023800 	.word	0x40023800
 800259c:	0800991c 	.word	0x0800991c
 80025a0:	20000010 	.word	0x20000010
 80025a4:	20000018 	.word	0x20000018

080025a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20000010 	.word	0x20000010

080025c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025c4:	f7ff fff0 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0a9b      	lsrs	r3, r3, #10
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4903      	ldr	r1, [pc, #12]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40023800 	.word	0x40023800
 80025e4:	0800992c 	.word	0x0800992c

080025e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025ec:	f7ff ffdc 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	0b5b      	lsrs	r3, r3, #13
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	4903      	ldr	r1, [pc, #12]	; (800260c <HAL_RCC_GetPCLK2Freq+0x24>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	0800992c 	.word	0x0800992c

08002610 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	220f      	movs	r2, #15
 800261e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_RCC_GetClockConfig+0x5c>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0203 	and.w	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_RCC_GetClockConfig+0x5c>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_RCC_GetClockConfig+0x5c>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_RCC_GetClockConfig+0x5c>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	08db      	lsrs	r3, r3, #3
 800264a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <HAL_RCC_GetClockConfig+0x60>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 020f 	and.w	r2, r3, #15
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	601a      	str	r2, [r3, #0]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800
 8002670:	40023c00 	.word	0x40023c00

08002674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	; 0x30
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d010      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80026ac:	4b6f      	ldr	r3, [pc, #444]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026b2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	496c      	ldr	r1, [pc, #432]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80026ca:	2301      	movs	r3, #1
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d010      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80026da:	4b64      	ldr	r3, [pc, #400]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	4960      	ldr	r1, [pc, #384]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80026f8:	2301      	movs	r3, #1
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d017      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002708:	4b58      	ldr	r3, [pc, #352]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800270a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800270e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4955      	ldr	r1, [pc, #340]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002726:	d101      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002728:	2301      	movs	r3, #1
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002734:	2301      	movs	r3, #1
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d017      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002744:	4b49      	ldr	r3, [pc, #292]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800274a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002752:	4946      	ldr	r1, [pc, #280]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002762:	d101      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002764:	2301      	movs	r3, #1
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002770:	2301      	movs	r3, #1
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 808a 	beq.w	8002896 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	4b39      	ldr	r3, [pc, #228]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a38      	ldr	r2, [pc, #224]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b36      	ldr	r3, [pc, #216]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800279e:	4b34      	ldr	r3, [pc, #208]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a33      	ldr	r2, [pc, #204]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027aa:	f7ff fa99 	bl	8001ce0 <HAL_GetTick>
 80027ae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7ff fa95 	bl	8001ce0 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e278      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027c4:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027d0:	4b26      	ldr	r3, [pc, #152]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d02f      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e8:	6a3a      	ldr	r2, [r7, #32]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d028      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027ee:	4b1f      	ldr	r3, [pc, #124]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027f8:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027fe:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002804:	4a19      	ldr	r2, [pc, #100]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800280a:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d114      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002816:	f7ff fa63 	bl	8001ce0 <HAL_GetTick>
 800281a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7ff fa5f 	bl	8001ce0 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	; 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e240      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002834:	4b0d      	ldr	r3, [pc, #52]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ee      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800284c:	d114      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800285e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002862:	4902      	ldr	r1, [pc, #8]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002864:	4313      	orrs	r3, r2
 8002866:	608b      	str	r3, [r1, #8]
 8002868:	e00c      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	40007000 	.word	0x40007000
 8002874:	42470e40 	.word	0x42470e40
 8002878:	4b4a      	ldr	r3, [pc, #296]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a49      	ldr	r2, [pc, #292]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800287e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002882:	6093      	str	r3, [r2, #8]
 8002884:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002886:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002890:	4944      	ldr	r1, [pc, #272]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002892:	4313      	orrs	r3, r2
 8002894:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80028a8:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80028aa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80028b8:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	4937      	ldr	r1, [pc, #220]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028da:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e8:	492e      	ldr	r1, [pc, #184]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d011      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028fc:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002902:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290a:	4926      	ldr	r1, [pc, #152]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800291a:	d101      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800291c:	2301      	movs	r3, #1
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800292e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002932:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	491a      	ldr	r1, [pc, #104]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294a:	2b00      	cmp	r3, #0
 800294c:	d011      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002954:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295c:	4911      	ldr	r1, [pc, #68]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800296c:	d101      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800296e:	2301      	movs	r3, #1
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d005      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002980:	f040 80ff 	bne.w	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800298a:	f7ff f9a9 	bl	8001ce0 <HAL_GetTick>
 800298e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002990:	e00e      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002992:	f7ff f9a5 	bl	8001ce0 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d907      	bls.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e188      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80029a4:	40023800 	.word	0x40023800
 80029a8:	424711e0 	.word	0x424711e0
 80029ac:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029b0:	4b7e      	ldr	r3, [pc, #504]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ea      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d028      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d124      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80029e4:	4b71      	ldr	r3, [pc, #452]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ea:	0c1b      	lsrs	r3, r3, #16
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	3301      	adds	r3, #1
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029f6:	4b6d      	ldr	r3, [pc, #436]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fc:	0e1b      	lsrs	r3, r3, #24
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	3b01      	subs	r3, #1
 8002a16:	041b      	lsls	r3, r3, #16
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	071b      	lsls	r3, r3, #28
 8002a26:	4961      	ldr	r1, [pc, #388]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d004      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d035      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a58:	d130      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a5a:	4b54      	ldr	r3, [pc, #336]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	3301      	adds	r3, #1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a72:	0f1b      	lsrs	r3, r3, #28
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	019b      	lsls	r3, r3, #6
 8002a84:	431a      	orrs	r2, r3
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	041b      	lsls	r3, r3, #16
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	431a      	orrs	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	071b      	lsls	r3, r3, #28
 8002a9c:	4943      	ldr	r1, [pc, #268]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002aa4:	4b41      	ldr	r3, [pc, #260]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aaa:	f023 021f 	bic.w	r2, r3, #31
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	493d      	ldr	r1, [pc, #244]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d029      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad0:	d124      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002ad2:	4b36      	ldr	r3, [pc, #216]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ae4:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aea:	0f1b      	lsrs	r3, r3, #28
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	019b      	lsls	r3, r3, #6
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	3b01      	subs	r3, #1
 8002b06:	041b      	lsls	r3, r3, #16
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	071b      	lsls	r3, r3, #28
 8002b14:	4925      	ldr	r1, [pc, #148]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d016      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	019b      	lsls	r3, r3, #6
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	071b      	lsls	r3, r3, #28
 8002b4e:	4917      	ldr	r1, [pc, #92]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b56:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b5c:	f7ff f8c0 	bl	8001ce0 <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b64:	f7ff f8bc 	bl	8001ce0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e09f      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	f040 8095 	bne.w	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b90:	f7ff f8a6 	bl	8001ce0 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b96:	e00f      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b98:	f7ff f8a2 	bl	8001ce0 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d908      	bls.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e085      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	42470068 	.word	0x42470068
 8002bb4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bb8:	4b41      	ldr	r3, [pc, #260]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bc4:	d0e8      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d02b      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d127      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002bee:	4b34      	ldr	r3, [pc, #208]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	019b      	lsls	r3, r3, #6
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	3b01      	subs	r3, #1
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	061b      	lsls	r3, r3, #24
 8002c1c:	4928      	ldr	r1, [pc, #160]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c24:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c2a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	3b01      	subs	r3, #1
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	4922      	ldr	r1, [pc, #136]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01d      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c52:	d118      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	0e1b      	lsrs	r3, r3, #24
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	019b      	lsls	r3, r3, #6
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	3b01      	subs	r3, #1
 8002c76:	041b      	lsls	r3, r3, #16
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	4910      	ldr	r1, [pc, #64]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c86:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c8c:	f7ff f828 	bl	8001ce0 <HAL_GetTick>
 8002c90:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c94:	f7ff f824 	bl	8001ce0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e007      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cb2:	d1ef      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3730      	adds	r7, #48	; 0x30
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	42470070 	.word	0x42470070

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ccc:	b0ae      	sub	sp, #184	; 0xb8
 8002cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cee:	4bcb      	ldr	r3, [pc, #812]	; (800301c <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b0c      	cmp	r3, #12
 8002cf8:	f200 8206 	bhi.w	8003108 <HAL_RCC_GetSysClockFreq+0x440>
 8002cfc:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d39 	.word	0x08002d39
 8002d08:	08003109 	.word	0x08003109
 8002d0c:	08003109 	.word	0x08003109
 8002d10:	08003109 	.word	0x08003109
 8002d14:	08002d41 	.word	0x08002d41
 8002d18:	08003109 	.word	0x08003109
 8002d1c:	08003109 	.word	0x08003109
 8002d20:	08003109 	.word	0x08003109
 8002d24:	08002d49 	.word	0x08002d49
 8002d28:	08003109 	.word	0x08003109
 8002d2c:	08003109 	.word	0x08003109
 8002d30:	08003109 	.word	0x08003109
 8002d34:	08002f39 	.word	0x08002f39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d38:	4bb9      	ldr	r3, [pc, #740]	; (8003020 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d3e:	e1e7      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d40:	4bb8      	ldr	r3, [pc, #736]	; (8003024 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d46:	e1e3      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d48:	4bb4      	ldr	r3, [pc, #720]	; (800301c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d54:	4bb1      	ldr	r3, [pc, #708]	; (800301c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d071      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d60:	4bae      	ldr	r3, [pc, #696]	; (800301c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	2200      	movs	r2, #0
 8002d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d6c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d86:	4622      	mov	r2, r4
 8002d88:	462b      	mov	r3, r5
 8002d8a:	f04f 0000 	mov.w	r0, #0
 8002d8e:	f04f 0100 	mov.w	r1, #0
 8002d92:	0159      	lsls	r1, r3, #5
 8002d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d98:	0150      	lsls	r0, r2, #5
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4621      	mov	r1, r4
 8002da0:	1a51      	subs	r1, r2, r1
 8002da2:	6439      	str	r1, [r7, #64]	; 0x40
 8002da4:	4629      	mov	r1, r5
 8002da6:	eb63 0301 	sbc.w	r3, r3, r1
 8002daa:	647b      	str	r3, [r7, #68]	; 0x44
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002db8:	4649      	mov	r1, r9
 8002dba:	018b      	lsls	r3, r1, #6
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dc2:	4641      	mov	r1, r8
 8002dc4:	018a      	lsls	r2, r1, #6
 8002dc6:	4641      	mov	r1, r8
 8002dc8:	1a51      	subs	r1, r2, r1
 8002dca:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dcc:	4649      	mov	r1, r9
 8002dce:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002de0:	4649      	mov	r1, r9
 8002de2:	00cb      	lsls	r3, r1, #3
 8002de4:	4641      	mov	r1, r8
 8002de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dea:	4641      	mov	r1, r8
 8002dec:	00ca      	lsls	r2, r1, #3
 8002dee:	4610      	mov	r0, r2
 8002df0:	4619      	mov	r1, r3
 8002df2:	4603      	mov	r3, r0
 8002df4:	4622      	mov	r2, r4
 8002df6:	189b      	adds	r3, r3, r2
 8002df8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dfa:	462b      	mov	r3, r5
 8002dfc:	460a      	mov	r2, r1
 8002dfe:	eb42 0303 	adc.w	r3, r2, r3
 8002e02:	637b      	str	r3, [r7, #52]	; 0x34
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e10:	4629      	mov	r1, r5
 8002e12:	024b      	lsls	r3, r1, #9
 8002e14:	4621      	mov	r1, r4
 8002e16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	024a      	lsls	r2, r1, #9
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e34:	f7fd fa54 	bl	80002e0 <__aeabi_uldivmod>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e42:	e067      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e44:	4b75      	ldr	r3, [pc, #468]	; (800301c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e50:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e5e:	2300      	movs	r3, #0
 8002e60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e66:	4622      	mov	r2, r4
 8002e68:	462b      	mov	r3, r5
 8002e6a:	f04f 0000 	mov.w	r0, #0
 8002e6e:	f04f 0100 	mov.w	r1, #0
 8002e72:	0159      	lsls	r1, r3, #5
 8002e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e78:	0150      	lsls	r0, r2, #5
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4621      	mov	r1, r4
 8002e80:	1a51      	subs	r1, r2, r1
 8002e82:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e84:	4629      	mov	r1, r5
 8002e86:	eb63 0301 	sbc.w	r3, r3, r1
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e98:	4649      	mov	r1, r9
 8002e9a:	018b      	lsls	r3, r1, #6
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ea2:	4641      	mov	r1, r8
 8002ea4:	018a      	lsls	r2, r1, #6
 8002ea6:	4641      	mov	r1, r8
 8002ea8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eac:	4649      	mov	r1, r9
 8002eae:	eb63 0b01 	sbc.w	fp, r3, r1
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ebe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ec2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ec6:	4692      	mov	sl, r2
 8002ec8:	469b      	mov	fp, r3
 8002eca:	4623      	mov	r3, r4
 8002ecc:	eb1a 0303 	adds.w	r3, sl, r3
 8002ed0:	623b      	str	r3, [r7, #32]
 8002ed2:	462b      	mov	r3, r5
 8002ed4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	028b      	lsls	r3, r1, #10
 8002eea:	4621      	mov	r1, r4
 8002eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	028a      	lsls	r2, r1, #10
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002efc:	2200      	movs	r2, #0
 8002efe:	673b      	str	r3, [r7, #112]	; 0x70
 8002f00:	677a      	str	r2, [r7, #116]	; 0x74
 8002f02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f06:	f7fd f9eb 	bl	80002e0 <__aeabi_uldivmod>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4613      	mov	r3, r2
 8002f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f14:	4b41      	ldr	r3, [pc, #260]	; (800301c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f36:	e0eb      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f38:	4b38      	ldr	r3, [pc, #224]	; (800301c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f44:	4b35      	ldr	r3, [pc, #212]	; (800301c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d06b      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f50:	4b32      	ldr	r3, [pc, #200]	; (800301c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	099b      	lsrs	r3, r3, #6
 8002f56:	2200      	movs	r2, #0
 8002f58:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f62:	663b      	str	r3, [r7, #96]	; 0x60
 8002f64:	2300      	movs	r3, #0
 8002f66:	667b      	str	r3, [r7, #100]	; 0x64
 8002f68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f6c:	4622      	mov	r2, r4
 8002f6e:	462b      	mov	r3, r5
 8002f70:	f04f 0000 	mov.w	r0, #0
 8002f74:	f04f 0100 	mov.w	r1, #0
 8002f78:	0159      	lsls	r1, r3, #5
 8002f7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f7e:	0150      	lsls	r0, r2, #5
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4621      	mov	r1, r4
 8002f86:	1a51      	subs	r1, r2, r1
 8002f88:	61b9      	str	r1, [r7, #24]
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	eb63 0301 	sbc.w	r3, r3, r1
 8002f90:	61fb      	str	r3, [r7, #28]
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	018b      	lsls	r3, r1, #6
 8002fa2:	4651      	mov	r1, sl
 8002fa4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fa8:	4651      	mov	r1, sl
 8002faa:	018a      	lsls	r2, r1, #6
 8002fac:	4651      	mov	r1, sl
 8002fae:	ebb2 0801 	subs.w	r8, r2, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	eb63 0901 	sbc.w	r9, r3, r1
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fcc:	4690      	mov	r8, r2
 8002fce:	4699      	mov	r9, r3
 8002fd0:	4623      	mov	r3, r4
 8002fd2:	eb18 0303 	adds.w	r3, r8, r3
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	462b      	mov	r3, r5
 8002fda:	eb49 0303 	adc.w	r3, r9, r3
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002fec:	4629      	mov	r1, r5
 8002fee:	024b      	lsls	r3, r1, #9
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	024a      	lsls	r2, r1, #9
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003002:	2200      	movs	r2, #0
 8003004:	65bb      	str	r3, [r7, #88]	; 0x58
 8003006:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003008:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800300c:	f7fd f968 	bl	80002e0 <__aeabi_uldivmod>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4613      	mov	r3, r2
 8003016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800301a:	e065      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x420>
 800301c:	40023800 	.word	0x40023800
 8003020:	00f42400 	.word	0x00f42400
 8003024:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003028:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <HAL_RCC_GetSysClockFreq+0x458>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	2200      	movs	r2, #0
 8003030:	4618      	mov	r0, r3
 8003032:	4611      	mov	r1, r2
 8003034:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003038:	653b      	str	r3, [r7, #80]	; 0x50
 800303a:	2300      	movs	r3, #0
 800303c:	657b      	str	r3, [r7, #84]	; 0x54
 800303e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003042:	4642      	mov	r2, r8
 8003044:	464b      	mov	r3, r9
 8003046:	f04f 0000 	mov.w	r0, #0
 800304a:	f04f 0100 	mov.w	r1, #0
 800304e:	0159      	lsls	r1, r3, #5
 8003050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003054:	0150      	lsls	r0, r2, #5
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4641      	mov	r1, r8
 800305c:	1a51      	subs	r1, r2, r1
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	4649      	mov	r1, r9
 8003062:	eb63 0301 	sbc.w	r3, r3, r1
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003074:	4659      	mov	r1, fp
 8003076:	018b      	lsls	r3, r1, #6
 8003078:	4651      	mov	r1, sl
 800307a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800307e:	4651      	mov	r1, sl
 8003080:	018a      	lsls	r2, r1, #6
 8003082:	4651      	mov	r1, sl
 8003084:	1a54      	subs	r4, r2, r1
 8003086:	4659      	mov	r1, fp
 8003088:	eb63 0501 	sbc.w	r5, r3, r1
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	00eb      	lsls	r3, r5, #3
 8003096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800309a:	00e2      	lsls	r2, r4, #3
 800309c:	4614      	mov	r4, r2
 800309e:	461d      	mov	r5, r3
 80030a0:	4643      	mov	r3, r8
 80030a2:	18e3      	adds	r3, r4, r3
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	464b      	mov	r3, r9
 80030a8:	eb45 0303 	adc.w	r3, r5, r3
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ba:	4629      	mov	r1, r5
 80030bc:	028b      	lsls	r3, r1, #10
 80030be:	4621      	mov	r1, r4
 80030c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030c4:	4621      	mov	r1, r4
 80030c6:	028a      	lsls	r2, r1, #10
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030d0:	2200      	movs	r2, #0
 80030d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030da:	f7fd f901 	bl	80002e0 <__aeabi_uldivmod>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4613      	mov	r3, r2
 80030e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030e8:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <HAL_RCC_GetSysClockFreq+0x458>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	0f1b      	lsrs	r3, r3, #28
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80030f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003106:	e003      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_RCC_GetSysClockFreq+0x45c>)
 800310a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800310e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003110:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003114:	4618      	mov	r0, r3
 8003116:	37b8      	adds	r7, #184	; 0xb8
 8003118:	46bd      	mov	sp, r7
 800311a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800
 8003124:	00f42400 	.word	0x00f42400

08003128 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e28d      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 8083 	beq.w	800324e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003148:	4b94      	ldr	r3, [pc, #592]	; (800339c <HAL_RCC_OscConfig+0x274>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b04      	cmp	r3, #4
 8003152:	d019      	beq.n	8003188 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003154:	4b91      	ldr	r3, [pc, #580]	; (800339c <HAL_RCC_OscConfig+0x274>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800315c:	2b08      	cmp	r3, #8
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003160:	4b8e      	ldr	r3, [pc, #568]	; (800339c <HAL_RCC_OscConfig+0x274>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316c:	d00c      	beq.n	8003188 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316e:	4b8b      	ldr	r3, [pc, #556]	; (800339c <HAL_RCC_OscConfig+0x274>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003176:	2b0c      	cmp	r3, #12
 8003178:	d112      	bne.n	80031a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317a:	4b88      	ldr	r3, [pc, #544]	; (800339c <HAL_RCC_OscConfig+0x274>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003186:	d10b      	bne.n	80031a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	4b84      	ldr	r3, [pc, #528]	; (800339c <HAL_RCC_OscConfig+0x274>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d05b      	beq.n	800324c <HAL_RCC_OscConfig+0x124>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d157      	bne.n	800324c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e25a      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a8:	d106      	bne.n	80031b8 <HAL_RCC_OscConfig+0x90>
 80031aa:	4b7c      	ldr	r3, [pc, #496]	; (800339c <HAL_RCC_OscConfig+0x274>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a7b      	ldr	r2, [pc, #492]	; (800339c <HAL_RCC_OscConfig+0x274>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e01d      	b.n	80031f4 <HAL_RCC_OscConfig+0xcc>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0xb4>
 80031c2:	4b76      	ldr	r3, [pc, #472]	; (800339c <HAL_RCC_OscConfig+0x274>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a75      	ldr	r2, [pc, #468]	; (800339c <HAL_RCC_OscConfig+0x274>)
 80031c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b73      	ldr	r3, [pc, #460]	; (800339c <HAL_RCC_OscConfig+0x274>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a72      	ldr	r2, [pc, #456]	; (800339c <HAL_RCC_OscConfig+0x274>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0xcc>
 80031dc:	4b6f      	ldr	r3, [pc, #444]	; (800339c <HAL_RCC_OscConfig+0x274>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a6e      	ldr	r2, [pc, #440]	; (800339c <HAL_RCC_OscConfig+0x274>)
 80031e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b6c      	ldr	r3, [pc, #432]	; (800339c <HAL_RCC_OscConfig+0x274>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6b      	ldr	r2, [pc, #428]	; (800339c <HAL_RCC_OscConfig+0x274>)
 80031ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe fd70 	bl	8001ce0 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003204:	f7fe fd6c 	bl	8001ce0 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e21f      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b61      	ldr	r3, [pc, #388]	; (800339c <HAL_RCC_OscConfig+0x274>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0xdc>
 8003222:	e014      	b.n	800324e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe fd5c 	bl	8001ce0 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800322c:	f7fe fd58 	bl	8001ce0 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e20b      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	4b57      	ldr	r3, [pc, #348]	; (800339c <HAL_RCC_OscConfig+0x274>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x104>
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d06f      	beq.n	800333a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800325a:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_OscConfig+0x274>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b00      	cmp	r3, #0
 8003264:	d017      	beq.n	8003296 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003266:	4b4d      	ldr	r3, [pc, #308]	; (800339c <HAL_RCC_OscConfig+0x274>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800326e:	2b08      	cmp	r3, #8
 8003270:	d105      	bne.n	800327e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003272:	4b4a      	ldr	r3, [pc, #296]	; (800339c <HAL_RCC_OscConfig+0x274>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_OscConfig+0x274>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003286:	2b0c      	cmp	r3, #12
 8003288:	d11c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328a:	4b44      	ldr	r3, [pc, #272]	; (800339c <HAL_RCC_OscConfig+0x274>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d116      	bne.n	80032c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	4b41      	ldr	r3, [pc, #260]	; (800339c <HAL_RCC_OscConfig+0x274>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_RCC_OscConfig+0x186>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d001      	beq.n	80032ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e1d3      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ae:	4b3b      	ldr	r3, [pc, #236]	; (800339c <HAL_RCC_OscConfig+0x274>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4937      	ldr	r1, [pc, #220]	; (800339c <HAL_RCC_OscConfig+0x274>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c2:	e03a      	b.n	800333a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d020      	beq.n	800330e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032cc:	4b34      	ldr	r3, [pc, #208]	; (80033a0 <HAL_RCC_OscConfig+0x278>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d2:	f7fe fd05 	bl	8001ce0 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032da:	f7fe fd01 	bl	8001ce0 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e1b4      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ec:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCC_OscConfig+0x274>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f8:	4b28      	ldr	r3, [pc, #160]	; (800339c <HAL_RCC_OscConfig+0x274>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4925      	ldr	r1, [pc, #148]	; (800339c <HAL_RCC_OscConfig+0x274>)
 8003308:	4313      	orrs	r3, r2
 800330a:	600b      	str	r3, [r1, #0]
 800330c:	e015      	b.n	800333a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330e:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <HAL_RCC_OscConfig+0x278>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe fce4 	bl	8001ce0 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800331c:	f7fe fce0 	bl	8001ce0 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e193      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332e:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x274>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d036      	beq.n	80033b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <HAL_RCC_OscConfig+0x27c>)
 8003350:	2201      	movs	r2, #1
 8003352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003354:	f7fe fcc4 	bl	8001ce0 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800335c:	f7fe fcc0 	bl	8001ce0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e173      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_OscConfig+0x274>)
 8003370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x234>
 800337a:	e01b      	b.n	80033b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800337c:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_OscConfig+0x27c>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003382:	f7fe fcad 	bl	8001ce0 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	e00e      	b.n	80033a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338a:	f7fe fca9 	bl	8001ce0 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d907      	bls.n	80033a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e15c      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
 800339c:	40023800 	.word	0x40023800
 80033a0:	42470000 	.word	0x42470000
 80033a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a8:	4b8a      	ldr	r3, [pc, #552]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 80033aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1ea      	bne.n	800338a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8097 	beq.w	80034f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c2:	2300      	movs	r3, #0
 80033c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c6:	4b83      	ldr	r3, [pc, #524]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	4b7f      	ldr	r3, [pc, #508]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a7e      	ldr	r2, [pc, #504]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
 80033e2:	4b7c      	ldr	r3, [pc, #496]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f2:	4b79      	ldr	r3, [pc, #484]	; (80035d8 <HAL_RCC_OscConfig+0x4b0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d118      	bne.n	8003430 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fe:	4b76      	ldr	r3, [pc, #472]	; (80035d8 <HAL_RCC_OscConfig+0x4b0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a75      	ldr	r2, [pc, #468]	; (80035d8 <HAL_RCC_OscConfig+0x4b0>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340a:	f7fe fc69 	bl	8001ce0 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003412:	f7fe fc65 	bl	8001ce0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e118      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003424:	4b6c      	ldr	r3, [pc, #432]	; (80035d8 <HAL_RCC_OscConfig+0x4b0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x31e>
 8003438:	4b66      	ldr	r3, [pc, #408]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	4a65      	ldr	r2, [pc, #404]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6713      	str	r3, [r2, #112]	; 0x70
 8003444:	e01c      	b.n	8003480 <HAL_RCC_OscConfig+0x358>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b05      	cmp	r3, #5
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x340>
 800344e:	4b61      	ldr	r3, [pc, #388]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003452:	4a60      	ldr	r2, [pc, #384]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	6713      	str	r3, [r2, #112]	; 0x70
 800345a:	4b5e      	ldr	r3, [pc, #376]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	4a5d      	ldr	r2, [pc, #372]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	6713      	str	r3, [r2, #112]	; 0x70
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0x358>
 8003468:	4b5a      	ldr	r3, [pc, #360]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	4a59      	ldr	r2, [pc, #356]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	; 0x70
 8003474:	4b57      	ldr	r3, [pc, #348]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	4a56      	ldr	r2, [pc, #344]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 800347a:	f023 0304 	bic.w	r3, r3, #4
 800347e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d015      	beq.n	80034b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003488:	f7fe fc2a 	bl	8001ce0 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003490:	f7fe fc26 	bl	8001ce0 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	; 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e0d7      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a6:	4b4b      	ldr	r3, [pc, #300]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0ee      	beq.n	8003490 <HAL_RCC_OscConfig+0x368>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fe fc14 	bl	8001ce0 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7fe fc10 	bl	8001ce0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e0c1      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d2:	4b40      	ldr	r3, [pc, #256]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ee      	bne.n	80034bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034de:	7dfb      	ldrb	r3, [r7, #23]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e4:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	4a3a      	ldr	r2, [pc, #232]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 80034ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80ad 	beq.w	8003654 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034fa:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b08      	cmp	r3, #8
 8003504:	d060      	beq.n	80035c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d145      	bne.n	800359a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	4b33      	ldr	r3, [pc, #204]	; (80035dc <HAL_RCC_OscConfig+0x4b4>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe fbe4 	bl	8001ce0 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe fbe0 	bl	8001ce0 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e093      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	019b      	lsls	r3, r3, #6
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	3b01      	subs	r3, #1
 8003554:	041b      	lsls	r3, r3, #16
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	061b      	lsls	r3, r3, #24
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	071b      	lsls	r3, r3, #28
 8003566:	491b      	ldr	r1, [pc, #108]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800356c:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <HAL_RCC_OscConfig+0x4b4>)
 800356e:	2201      	movs	r2, #1
 8003570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003572:	f7fe fbb5 	bl	8001ce0 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357a:	f7fe fbb1 	bl	8001ce0 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e064      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x452>
 8003598:	e05c      	b.n	8003654 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <HAL_RCC_OscConfig+0x4b4>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe fb9e 	bl	8001ce0 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fe fb9a 	bl	8001ce0 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e04d      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_RCC_OscConfig+0x4ac>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x480>
 80035c6:	e045      	b.n	8003654 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e040      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40007000 	.word	0x40007000
 80035dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035e0:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <HAL_RCC_OscConfig+0x538>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d030      	beq.n	8003650 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d129      	bne.n	8003650 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d122      	bne.n	8003650 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003610:	4013      	ands	r3, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003616:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003618:	4293      	cmp	r3, r2
 800361a:	d119      	bne.n	8003650 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	3b01      	subs	r3, #1
 800362a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d10f      	bne.n	8003650 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d107      	bne.n	8003650 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800

08003664 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e066      	b.n	8003748 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	7f5b      	ldrb	r3, [r3, #29]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fd fcb8 	bl	8001000 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	22ca      	movs	r2, #202	; 0xca
 800369c:	625a      	str	r2, [r3, #36]	; 0x24
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2253      	movs	r2, #83	; 0x53
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fa45 	bl	8003b36 <RTC_EnterInitMode>
 80036ac:	4603      	mov	r3, r0
 80036ae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d12c      	bne.n	8003710 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80036c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6899      	ldr	r1, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68d2      	ldr	r2, [r2, #12]
 80036f0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6919      	ldr	r1, [r3, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	041a      	lsls	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fa4c 	bl	8003ba4 <RTC_ExitInitMode>
 800370c:	4603      	mov	r3, r0
 800370e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d113      	bne.n	800373e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699a      	ldr	r2, [r3, #24]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	22ff      	movs	r2, #255	; 0xff
 8003744:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	7f1b      	ldrb	r3, [r3, #28]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_RTC_SetTime+0x1c>
 8003768:	2302      	movs	r3, #2
 800376a:	e087      	b.n	800387c <HAL_RTC_SetTime+0x12c>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2202      	movs	r2, #2
 8003776:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d126      	bne.n	80037cc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2200      	movs	r2, #0
 8003790:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fa29 	bl	8003bee <RTC_ByteToBcd2>
 800379c:	4603      	mov	r3, r0
 800379e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	785b      	ldrb	r3, [r3, #1]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fa22 	bl	8003bee <RTC_ByteToBcd2>
 80037aa:	4603      	mov	r3, r0
 80037ac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80037ae:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	789b      	ldrb	r3, [r3, #2]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fa1a 	bl	8003bee <RTC_ByteToBcd2>
 80037ba:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037bc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	78db      	ldrb	r3, [r3, #3]
 80037c4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e018      	b.n	80037fe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2200      	movs	r2, #0
 80037de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	785b      	ldrb	r3, [r3, #1]
 80037ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80037ec:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80037f2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	78db      	ldrb	r3, [r3, #3]
 80037f8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	22ca      	movs	r2, #202	; 0xca
 8003804:	625a      	str	r2, [r3, #36]	; 0x24
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2253      	movs	r2, #83	; 0x53
 800380c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f991 	bl	8003b36 <RTC_EnterInitMode>
 8003814:	4603      	mov	r3, r0
 8003816:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d120      	bne.n	8003860 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003828:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800382c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800383c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6899      	ldr	r1, [r3, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	431a      	orrs	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f9a4 	bl	8003ba4 <RTC_ExitInitMode>
 800385c:	4603      	mov	r3, r0
 800385e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	22ff      	movs	r2, #255	; 0xff
 8003872:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	771a      	strb	r2, [r3, #28]

  return status;
 800387a:	7cfb      	ldrb	r3, [r7, #19]
}
 800387c:	4618      	mov	r0, r3
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	bd90      	pop	{r4, r7, pc}

08003884 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80038b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80038ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	0c1b      	lsrs	r3, r3, #16
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	0d9b      	lsrs	r3, r3, #22
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11a      	bne.n	8003936 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f000 f98f 	bl	8003c28 <RTC_Bcd2ToByte>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f986 	bl	8003c28 <RTC_Bcd2ToByte>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	789b      	ldrb	r3, [r3, #2]
 8003928:	4618      	mov	r0, r3
 800392a:	f000 f97d 	bl	8003c28 <RTC_Bcd2ToByte>
 800392e:	4603      	mov	r3, r0
 8003930:	461a      	mov	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	7f1b      	ldrb	r3, [r3, #28]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_RTC_SetDate+0x1c>
 8003958:	2302      	movs	r3, #2
 800395a:	e071      	b.n	8003a40 <HAL_RTC_SetDate+0x100>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2202      	movs	r2, #2
 8003966:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10e      	bne.n	800398c <HAL_RTC_SetDate+0x4c>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	785b      	ldrb	r3, [r3, #1]
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	785b      	ldrb	r3, [r3, #1]
 800397e:	f023 0310 	bic.w	r3, r3, #16
 8003982:	b2db      	uxtb	r3, r3
 8003984:	330a      	adds	r3, #10
 8003986:	b2da      	uxtb	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11c      	bne.n	80039cc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	78db      	ldrb	r3, [r3, #3]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f929 	bl	8003bee <RTC_ByteToBcd2>
 800399c:	4603      	mov	r3, r0
 800399e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	785b      	ldrb	r3, [r3, #1]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f922 	bl	8003bee <RTC_ByteToBcd2>
 80039aa:	4603      	mov	r3, r0
 80039ac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80039ae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	789b      	ldrb	r3, [r3, #2]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 f91a 	bl	8003bee <RTC_ByteToBcd2>
 80039ba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80039bc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e00e      	b.n	80039ea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	78db      	ldrb	r3, [r3, #3]
 80039d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	785b      	ldrb	r3, [r3, #1]
 80039d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80039d8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80039de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	22ca      	movs	r2, #202	; 0xca
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2253      	movs	r2, #83	; 0x53
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f89b 	bl	8003b36 <RTC_EnterInitMode>
 8003a00:	4603      	mov	r3, r0
 8003a02:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10c      	bne.n	8003a24 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a18:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f8c2 	bl	8003ba4 <RTC_ExitInitMode>
 8003a20:	4603      	mov	r3, r0
 8003a22:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	22ff      	movs	r2, #255	; 0xff
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	771a      	strb	r2, [r3, #28]

  return status;
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd90      	pop	{r4, r7, pc}

08003a48 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a66:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	0c1b      	lsrs	r3, r3, #16
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	0b5b      	lsrs	r3, r3, #13
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d11a      	bne.n	8003adc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	78db      	ldrb	r3, [r3, #3]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f8bc 	bl	8003c28 <RTC_Bcd2ToByte>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	785b      	ldrb	r3, [r3, #1]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 f8b3 	bl	8003c28 <RTC_Bcd2ToByte>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	789b      	ldrb	r3, [r3, #2]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f8aa 	bl	8003c28 <RTC_Bcd2ToByte>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b00:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b02:	f7fe f8ed 	bl	8001ce0 <HAL_GetTick>
 8003b06:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b08:	e009      	b.n	8003b1e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b0a:	f7fe f8e9 	bl	8001ce0 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b18:	d901      	bls.n	8003b1e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e007      	b.n	8003b2e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0ee      	beq.n	8003b0a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d122      	bne.n	8003b9a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b62:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b64:	f7fe f8bc 	bl	8001ce0 <HAL_GetTick>
 8003b68:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b6a:	e00c      	b.n	8003b86 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b6c:	f7fe f8b8 	bl	8001ce0 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b7a:	d904      	bls.n	8003b86 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2204      	movs	r2, #4
 8003b80:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <RTC_EnterInitMode+0x64>
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d1e8      	bne.n	8003b6c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bbe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff ff89 	bl	8003ae6 <HAL_RTC_WaitForSynchro>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d004      	beq.n	8003be4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2204      	movs	r2, #4
 8003bde:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003bfc:	e005      	b.n	8003c0a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	3301      	adds	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	3b0a      	subs	r3, #10
 8003c08:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	2b09      	cmp	r3, #9
 8003c0e:	d8f6      	bhi.n	8003bfe <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	b2db      	uxtb	r3, r3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	0092      	lsls	r2, r2, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	4413      	add	r3, r2
 8003c52:	b2db      	uxtb	r3, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e041      	b.n	8003cf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f839 	bl	8003cfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f000 f9d8 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d001      	beq.n	8003d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e04e      	b.n	8003dca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a23      	ldr	r2, [pc, #140]	; (8003dd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d022      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x80>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d56:	d01d      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x80>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1f      	ldr	r2, [pc, #124]	; (8003ddc <HAL_TIM_Base_Start_IT+0xc8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d018      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x80>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d013      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x80>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1c      	ldr	r2, [pc, #112]	; (8003de4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00e      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x80>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1b      	ldr	r2, [pc, #108]	; (8003de8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d009      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x80>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a19      	ldr	r2, [pc, #100]	; (8003dec <HAL_TIM_Base_Start_IT+0xd8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d004      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x80>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a18      	ldr	r2, [pc, #96]	; (8003df0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d111      	bne.n	8003db8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b06      	cmp	r3, #6
 8003da4:	d010      	beq.n	8003dc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db6:	e007      	b.n	8003dc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40010000 	.word	0x40010000
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800
 8003de4:	40000c00 	.word	0x40000c00
 8003de8:	40010400 	.word	0x40010400
 8003dec:	40014000 	.word	0x40014000
 8003df0:	40001800 	.word	0x40001800

08003df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d122      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d11b      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0202 	mvn.w	r2, #2
 8003e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8ee 	bl	8004018 <HAL_TIM_IC_CaptureCallback>
 8003e3c:	e005      	b.n	8003e4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8e0 	bl	8004004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f8f1 	bl	800402c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d122      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0204 	mvn.w	r2, #4
 8003e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f8c4 	bl	8004018 <HAL_TIM_IC_CaptureCallback>
 8003e90:	e005      	b.n	8003e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f8b6 	bl	8004004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f8c7 	bl	800402c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d122      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d11b      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0208 	mvn.w	r2, #8
 8003ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2204      	movs	r2, #4
 8003ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f89a 	bl	8004018 <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f88c 	bl	8004004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f89d 	bl	800402c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	2b10      	cmp	r3, #16
 8003f04:	d122      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b10      	cmp	r3, #16
 8003f12:	d11b      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0210 	mvn.w	r2, #16
 8003f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2208      	movs	r2, #8
 8003f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f870 	bl	8004018 <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f862 	bl	8004004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f873 	bl	800402c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d10e      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d107      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0201 	mvn.w	r2, #1
 8003f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fc fef6 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b80      	cmp	r3, #128	; 0x80
 8003f84:	d10e      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f90:	2b80      	cmp	r3, #128	; 0x80
 8003f92:	d107      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f902 	bl	80041a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d10e      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d107      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f838 	bl	8004040 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d10e      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d107      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0220 	mvn.w	r2, #32
 8003ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8cc 	bl	8004194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a40      	ldr	r2, [pc, #256]	; (8004168 <TIM_Base_SetConfig+0x114>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004072:	d00f      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a3d      	ldr	r2, [pc, #244]	; (800416c <TIM_Base_SetConfig+0x118>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00b      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a3c      	ldr	r2, [pc, #240]	; (8004170 <TIM_Base_SetConfig+0x11c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d007      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a3b      	ldr	r2, [pc, #236]	; (8004174 <TIM_Base_SetConfig+0x120>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a3a      	ldr	r2, [pc, #232]	; (8004178 <TIM_Base_SetConfig+0x124>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d108      	bne.n	80040a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a2f      	ldr	r2, [pc, #188]	; (8004168 <TIM_Base_SetConfig+0x114>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d02b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b4:	d027      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a2c      	ldr	r2, [pc, #176]	; (800416c <TIM_Base_SetConfig+0x118>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d023      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a2b      	ldr	r2, [pc, #172]	; (8004170 <TIM_Base_SetConfig+0x11c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d01f      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a2a      	ldr	r2, [pc, #168]	; (8004174 <TIM_Base_SetConfig+0x120>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a29      	ldr	r2, [pc, #164]	; (8004178 <TIM_Base_SetConfig+0x124>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d017      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a28      	ldr	r2, [pc, #160]	; (800417c <TIM_Base_SetConfig+0x128>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a27      	ldr	r2, [pc, #156]	; (8004180 <TIM_Base_SetConfig+0x12c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00f      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a26      	ldr	r2, [pc, #152]	; (8004184 <TIM_Base_SetConfig+0x130>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a25      	ldr	r2, [pc, #148]	; (8004188 <TIM_Base_SetConfig+0x134>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a24      	ldr	r2, [pc, #144]	; (800418c <TIM_Base_SetConfig+0x138>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a23      	ldr	r2, [pc, #140]	; (8004190 <TIM_Base_SetConfig+0x13c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d108      	bne.n	8004118 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <TIM_Base_SetConfig+0x114>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <TIM_Base_SetConfig+0xf8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a0c      	ldr	r2, [pc, #48]	; (8004178 <TIM_Base_SetConfig+0x124>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d103      	bne.n	8004154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	615a      	str	r2, [r3, #20]
}
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40010000 	.word	0x40010000
 800416c:	40000400 	.word	0x40000400
 8004170:	40000800 	.word	0x40000800
 8004174:	40000c00 	.word	0x40000c00
 8004178:	40010400 	.word	0x40010400
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800
 8004188:	40001800 	.word	0x40001800
 800418c:	40001c00 	.word	0x40001c00
 8004190:	40002000 	.word	0x40002000

08004194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e03f      	b.n	800424e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fc ff36 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2224      	movs	r2, #36	; 0x24
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fddf 	bl	8004dc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b08a      	sub	sp, #40	; 0x28
 800425a:	af02      	add	r7, sp, #8
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	603b      	str	r3, [r7, #0]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b20      	cmp	r3, #32
 8004274:	d17c      	bne.n	8004370 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <HAL_UART_Transmit+0x2c>
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e075      	b.n	8004372 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_UART_Transmit+0x3e>
 8004290:	2302      	movs	r3, #2
 8004292:	e06e      	b.n	8004372 <HAL_UART_Transmit+0x11c>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2221      	movs	r2, #33	; 0x21
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042aa:	f7fd fd19 	bl	8001ce0 <HAL_GetTick>
 80042ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	88fa      	ldrh	r2, [r7, #6]
 80042b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	88fa      	ldrh	r2, [r7, #6]
 80042ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c4:	d108      	bne.n	80042d8 <HAL_UART_Transmit+0x82>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d104      	bne.n	80042d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	e003      	b.n	80042e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042e8:	e02a      	b.n	8004340 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2200      	movs	r2, #0
 80042f2:	2180      	movs	r1, #128	; 0x80
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 fb1f 	bl	8004938 <UART_WaitOnFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e036      	b.n	8004372 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10b      	bne.n	8004322 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004318:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	3302      	adds	r3, #2
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	e007      	b.n	8004332 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	781a      	ldrb	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	3301      	adds	r3, #1
 8004330:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1cf      	bne.n	80042ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2200      	movs	r2, #0
 8004352:	2140      	movs	r1, #64	; 0x40
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 faef 	bl	8004938 <UART_WaitOnFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e006      	b.n	8004372 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	3720      	adds	r7, #32
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	4613      	mov	r3, r2
 8004386:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b20      	cmp	r3, #32
 8004392:	d11d      	bne.n	80043d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_UART_Receive_IT+0x26>
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e016      	b.n	80043d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_UART_Receive_IT+0x38>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e00f      	b.n	80043d2 <HAL_UART_Receive_IT+0x58>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	461a      	mov	r2, r3
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 fb24 	bl	8004a14 <UART_Start_Receive_IT>
 80043cc:	4603      	mov	r3, r0
 80043ce:	e000      	b.n	80043d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
  }
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b0ba      	sub	sp, #232	; 0xe8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004408:	2300      	movs	r3, #0
 800440a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800440e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800441a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10f      	bne.n	8004442 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d009      	beq.n	8004442 <HAL_UART_IRQHandler+0x66>
 800442e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fc07 	bl	8004c4e <UART_Receive_IT>
      return;
 8004440:	e256      	b.n	80048f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004442:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80de 	beq.w	8004608 <HAL_UART_IRQHandler+0x22c>
 800444c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800445c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80d1 	beq.w	8004608 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_UART_IRQHandler+0xae>
 8004472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f043 0201 	orr.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800448a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <HAL_UART_IRQHandler+0xd2>
 8004496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f043 0202 	orr.w	r2, r3, #2
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_UART_IRQHandler+0xf6>
 80044ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f043 0204 	orr.w	r2, r3, #4
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d011      	beq.n	8004502 <HAL_UART_IRQHandler+0x126>
 80044de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d105      	bne.n	80044f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f043 0208 	orr.w	r2, r3, #8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 81ed 	beq.w	80048e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800450c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_UART_IRQHandler+0x14e>
 8004518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fb92 	bl	8004c4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d103      	bne.n	8004556 <HAL_UART_IRQHandler+0x17a>
 800454e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d04f      	beq.n	80045f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fa9a 	bl	8004a90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d141      	bne.n	80045ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3314      	adds	r3, #20
 8004570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3314      	adds	r3, #20
 8004592:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004596:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800459a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1d9      	bne.n	800456a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d013      	beq.n	80045e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	4a7d      	ldr	r2, [pc, #500]	; (80047b8 <HAL_UART_IRQHandler+0x3dc>)
 80045c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fd fce6 	bl	8001f9c <HAL_DMA_Abort_IT>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d016      	beq.n	8004604 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045e0:	4610      	mov	r0, r2
 80045e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	e00e      	b.n	8004604 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f990 	bl	800490c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ec:	e00a      	b.n	8004604 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f98c 	bl	800490c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f4:	e006      	b.n	8004604 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f988 	bl	800490c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004602:	e170      	b.n	80048e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004604:	bf00      	nop
    return;
 8004606:	e16e      	b.n	80048e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	2b01      	cmp	r3, #1
 800460e:	f040 814a 	bne.w	80048a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8143 	beq.w	80048a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 813c 	beq.w	80048a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	60bb      	str	r3, [r7, #8]
 8004642:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	f040 80b4 	bne.w	80047bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004660:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8140 	beq.w	80048ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800466e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004672:	429a      	cmp	r2, r3
 8004674:	f080 8139 	bcs.w	80048ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800467e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468a:	f000 8088 	beq.w	800479e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	330c      	adds	r3, #12
 8004694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	330c      	adds	r3, #12
 80046b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80046ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1d9      	bne.n	800468e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3314      	adds	r3, #20
 80046e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3314      	adds	r3, #20
 80046fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004702:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004706:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e1      	bne.n	80046da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3314      	adds	r3, #20
 800471c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800472c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3314      	adds	r3, #20
 8004736:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800473a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800473c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004740:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e3      	bne.n	8004716 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	330c      	adds	r3, #12
 8004762:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800476c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800476e:	f023 0310 	bic.w	r3, r3, #16
 8004772:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	330c      	adds	r3, #12
 800477c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004780:	65ba      	str	r2, [r7, #88]	; 0x58
 8004782:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004786:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800478e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e3      	bne.n	800475c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	4618      	mov	r0, r3
 800479a:	f7fd fb8f 	bl	8001ebc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f8b6 	bl	8004920 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047b4:	e099      	b.n	80048ea <HAL_UART_IRQHandler+0x50e>
 80047b6:	bf00      	nop
 80047b8:	08004b57 	.word	0x08004b57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 808b 	beq.w	80048ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8086 	beq.w	80048ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004806:	647a      	str	r2, [r7, #68]	; 0x44
 8004808:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800480c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e3      	bne.n	80047e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3314      	adds	r3, #20
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	623b      	str	r3, [r7, #32]
   return(result);
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	f023 0301 	bic.w	r3, r3, #1
 8004830:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3314      	adds	r3, #20
 800483a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800483e:	633a      	str	r2, [r7, #48]	; 0x30
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e3      	bne.n	800481a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0310 	bic.w	r3, r3, #16
 8004876:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004884:	61fa      	str	r2, [r7, #28]
 8004886:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	69b9      	ldr	r1, [r7, #24]
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	617b      	str	r3, [r7, #20]
   return(result);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e3      	bne.n	8004860 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800489c:	4619      	mov	r1, r3
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f83e 	bl	8004920 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048a4:	e023      	b.n	80048ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_UART_IRQHandler+0x4ea>
 80048b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f95d 	bl	8004b7e <UART_Transmit_IT>
    return;
 80048c4:	e014      	b.n	80048f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00e      	beq.n	80048f0 <HAL_UART_IRQHandler+0x514>
 80048d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f99d 	bl	8004c1e <UART_EndTransmit_IT>
    return;
 80048e4:	e004      	b.n	80048f0 <HAL_UART_IRQHandler+0x514>
    return;
 80048e6:	bf00      	nop
 80048e8:	e002      	b.n	80048f0 <HAL_UART_IRQHandler+0x514>
      return;
 80048ea:	bf00      	nop
 80048ec:	e000      	b.n	80048f0 <HAL_UART_IRQHandler+0x514>
      return;
 80048ee:	bf00      	nop
  }
}
 80048f0:	37e8      	adds	r7, #232	; 0xe8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop

080048f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b090      	sub	sp, #64	; 0x40
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	4613      	mov	r3, r2
 8004946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004948:	e050      	b.n	80049ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004950:	d04c      	beq.n	80049ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <UART_WaitOnFlagUntilTimeout+0x30>
 8004958:	f7fd f9c2 	bl	8001ce0 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004964:	429a      	cmp	r2, r3
 8004966:	d241      	bcs.n	80049ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800497e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	330c      	adds	r3, #12
 8004986:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004988:	637a      	str	r2, [r7, #52]	; 0x34
 800498a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800498e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e5      	bne.n	8004968 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3314      	adds	r3, #20
 80049a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	613b      	str	r3, [r7, #16]
   return(result);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3314      	adds	r3, #20
 80049ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049bc:	623a      	str	r2, [r7, #32]
 80049be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	69f9      	ldr	r1, [r7, #28]
 80049c2:	6a3a      	ldr	r2, [r7, #32]
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e5      	bne.n	800499c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e00f      	b.n	8004a0c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4013      	ands	r3, r2
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	bf0c      	ite	eq
 80049fc:	2301      	moveq	r3, #1
 80049fe:	2300      	movne	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d09f      	beq.n	800494a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3740      	adds	r7, #64	; 0x40
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	88fa      	ldrh	r2, [r7, #6]
 8004a32:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2222      	movs	r2, #34	; 0x22
 8004a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a60:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0201 	orr.w	r2, r2, #1
 8004a70:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0220 	orr.w	r2, r2, #32
 8004a80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b095      	sub	sp, #84	; 0x54
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ab8:	643a      	str	r2, [r7, #64]	; 0x40
 8004aba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004abe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3314      	adds	r3, #20
 8004ad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f023 0301 	bic.w	r3, r3, #1
 8004ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3314      	adds	r3, #20
 8004aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e5      	bne.n	8004acc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d119      	bne.n	8004b3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f023 0310 	bic.w	r3, r3, #16
 8004b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	330c      	adds	r3, #12
 8004b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b28:	61ba      	str	r2, [r7, #24]
 8004b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6979      	ldr	r1, [r7, #20]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	613b      	str	r3, [r7, #16]
   return(result);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e5      	bne.n	8004b08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b4a:	bf00      	nop
 8004b4c:	3754      	adds	r7, #84	; 0x54
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f7ff fecb 	bl	800490c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b085      	sub	sp, #20
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b21      	cmp	r3, #33	; 0x21
 8004b90:	d13e      	bne.n	8004c10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9a:	d114      	bne.n	8004bc6 <UART_Transmit_IT+0x48>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d110      	bne.n	8004bc6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	1c9a      	adds	r2, r3, #2
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	621a      	str	r2, [r3, #32]
 8004bc4:	e008      	b.n	8004bd8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	1c59      	adds	r1, r3, #1
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6211      	str	r1, [r2, #32]
 8004bd0:	781a      	ldrb	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	4619      	mov	r1, r3
 8004be6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10f      	bne.n	8004c0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bfa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e000      	b.n	8004c12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c10:	2302      	movs	r3, #2
  }
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff fe5a 	bl	80048f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b08c      	sub	sp, #48	; 0x30
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b22      	cmp	r3, #34	; 0x22
 8004c60:	f040 80ab 	bne.w	8004dba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6c:	d117      	bne.n	8004c9e <UART_Receive_IT+0x50>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d113      	bne.n	8004c9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	1c9a      	adds	r2, r3, #2
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c9c:	e026      	b.n	8004cec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb0:	d007      	beq.n	8004cc2 <UART_Receive_IT+0x74>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10a      	bne.n	8004cd0 <UART_Receive_IT+0x82>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e008      	b.n	8004ce2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d15a      	bne.n	8004db6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0220 	bic.w	r2, r2, #32
 8004d0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d135      	bne.n	8004dac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	613b      	str	r3, [r7, #16]
   return(result);
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f023 0310 	bic.w	r3, r3, #16
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d66:	623a      	str	r2, [r7, #32]
 8004d68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	69f9      	ldr	r1, [r7, #28]
 8004d6c:	6a3a      	ldr	r2, [r7, #32]
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e5      	bne.n	8004d46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d10a      	bne.n	8004d9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004da2:	4619      	mov	r1, r3
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff fdbb 	bl	8004920 <HAL_UARTEx_RxEventCallback>
 8004daa:	e002      	b.n	8004db2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7fb ff85 	bl	8000cbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e002      	b.n	8004dbc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e000      	b.n	8004dbc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004dba:	2302      	movs	r3, #2
  }
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3730      	adds	r7, #48	; 0x30
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc8:	b0c0      	sub	sp, #256	; 0x100
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	68d9      	ldr	r1, [r3, #12]
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	ea40 0301 	orr.w	r3, r0, r1
 8004dec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e1c:	f021 010c 	bic.w	r1, r1, #12
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3e:	6999      	ldr	r1, [r3, #24]
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	ea40 0301 	orr.w	r3, r0, r1
 8004e4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4b8f      	ldr	r3, [pc, #572]	; (8005090 <UART_SetConfig+0x2cc>)
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d005      	beq.n	8004e64 <UART_SetConfig+0xa0>
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4b8d      	ldr	r3, [pc, #564]	; (8005094 <UART_SetConfig+0x2d0>)
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d104      	bne.n	8004e6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e64:	f7fd fbc0 	bl	80025e8 <HAL_RCC_GetPCLK2Freq>
 8004e68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e6c:	e003      	b.n	8004e76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e6e:	f7fd fba7 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8004e72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e80:	f040 810c 	bne.w	800509c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e96:	4622      	mov	r2, r4
 8004e98:	462b      	mov	r3, r5
 8004e9a:	1891      	adds	r1, r2, r2
 8004e9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e9e:	415b      	adcs	r3, r3
 8004ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ea2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	eb12 0801 	adds.w	r8, r2, r1
 8004eac:	4629      	mov	r1, r5
 8004eae:	eb43 0901 	adc.w	r9, r3, r1
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ec6:	4690      	mov	r8, r2
 8004ec8:	4699      	mov	r9, r3
 8004eca:	4623      	mov	r3, r4
 8004ecc:	eb18 0303 	adds.w	r3, r8, r3
 8004ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ed4:	462b      	mov	r3, r5
 8004ed6:	eb49 0303 	adc.w	r3, r9, r3
 8004eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004eea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004eee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	18db      	adds	r3, r3, r3
 8004ef6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ef8:	4613      	mov	r3, r2
 8004efa:	eb42 0303 	adc.w	r3, r2, r3
 8004efe:	657b      	str	r3, [r7, #84]	; 0x54
 8004f00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f08:	f7fb f9ea 	bl	80002e0 <__aeabi_uldivmod>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4b61      	ldr	r3, [pc, #388]	; (8005098 <UART_SetConfig+0x2d4>)
 8004f12:	fba3 2302 	umull	r2, r3, r3, r2
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	011c      	lsls	r4, r3, #4
 8004f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	464b      	mov	r3, r9
 8004f30:	1891      	adds	r1, r2, r2
 8004f32:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f34:	415b      	adcs	r3, r3
 8004f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f3c:	4641      	mov	r1, r8
 8004f3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f42:	4649      	mov	r1, r9
 8004f44:	eb43 0b01 	adc.w	fp, r3, r1
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f5c:	4692      	mov	sl, r2
 8004f5e:	469b      	mov	fp, r3
 8004f60:	4643      	mov	r3, r8
 8004f62:	eb1a 0303 	adds.w	r3, sl, r3
 8004f66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	18db      	adds	r3, r3, r3
 8004f8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f8e:	4613      	mov	r3, r2
 8004f90:	eb42 0303 	adc.w	r3, r2, r3
 8004f94:	647b      	str	r3, [r7, #68]	; 0x44
 8004f96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f9e:	f7fb f99f 	bl	80002e0 <__aeabi_uldivmod>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4b3b      	ldr	r3, [pc, #236]	; (8005098 <UART_SetConfig+0x2d4>)
 8004faa:	fba3 2301 	umull	r2, r3, r3, r1
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	2264      	movs	r2, #100	; 0x64
 8004fb2:	fb02 f303 	mul.w	r3, r2, r3
 8004fb6:	1acb      	subs	r3, r1, r3
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fbe:	4b36      	ldr	r3, [pc, #216]	; (8005098 <UART_SetConfig+0x2d4>)
 8004fc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fcc:	441c      	add	r4, r3
 8004fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	1891      	adds	r1, r2, r2
 8004fe6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fe8:	415b      	adcs	r3, r3
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	1851      	adds	r1, r2, r1
 8004ff4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	414b      	adcs	r3, r1
 8004ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005008:	4659      	mov	r1, fp
 800500a:	00cb      	lsls	r3, r1, #3
 800500c:	4651      	mov	r1, sl
 800500e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005012:	4651      	mov	r1, sl
 8005014:	00ca      	lsls	r2, r1, #3
 8005016:	4610      	mov	r0, r2
 8005018:	4619      	mov	r1, r3
 800501a:	4603      	mov	r3, r0
 800501c:	4642      	mov	r2, r8
 800501e:	189b      	adds	r3, r3, r2
 8005020:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005024:	464b      	mov	r3, r9
 8005026:	460a      	mov	r2, r1
 8005028:	eb42 0303 	adc.w	r3, r2, r3
 800502c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800503c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005040:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005044:	460b      	mov	r3, r1
 8005046:	18db      	adds	r3, r3, r3
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
 800504a:	4613      	mov	r3, r2
 800504c:	eb42 0303 	adc.w	r3, r2, r3
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005052:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005056:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800505a:	f7fb f941 	bl	80002e0 <__aeabi_uldivmod>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <UART_SetConfig+0x2d4>)
 8005064:	fba3 1302 	umull	r1, r3, r3, r2
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	2164      	movs	r1, #100	; 0x64
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	3332      	adds	r3, #50	; 0x32
 8005076:	4a08      	ldr	r2, [pc, #32]	; (8005098 <UART_SetConfig+0x2d4>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	f003 0207 	and.w	r2, r3, #7
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4422      	add	r2, r4
 800508a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800508c:	e105      	b.n	800529a <UART_SetConfig+0x4d6>
 800508e:	bf00      	nop
 8005090:	40011000 	.word	0x40011000
 8005094:	40011400 	.word	0x40011400
 8005098:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800509c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050ae:	4642      	mov	r2, r8
 80050b0:	464b      	mov	r3, r9
 80050b2:	1891      	adds	r1, r2, r2
 80050b4:	6239      	str	r1, [r7, #32]
 80050b6:	415b      	adcs	r3, r3
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050be:	4641      	mov	r1, r8
 80050c0:	1854      	adds	r4, r2, r1
 80050c2:	4649      	mov	r1, r9
 80050c4:	eb43 0501 	adc.w	r5, r3, r1
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	00eb      	lsls	r3, r5, #3
 80050d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050d6:	00e2      	lsls	r2, r4, #3
 80050d8:	4614      	mov	r4, r2
 80050da:	461d      	mov	r5, r3
 80050dc:	4643      	mov	r3, r8
 80050de:	18e3      	adds	r3, r4, r3
 80050e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050e4:	464b      	mov	r3, r9
 80050e6:	eb45 0303 	adc.w	r3, r5, r3
 80050ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800510a:	4629      	mov	r1, r5
 800510c:	008b      	lsls	r3, r1, #2
 800510e:	4621      	mov	r1, r4
 8005110:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005114:	4621      	mov	r1, r4
 8005116:	008a      	lsls	r2, r1, #2
 8005118:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800511c:	f7fb f8e0 	bl	80002e0 <__aeabi_uldivmod>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4b60      	ldr	r3, [pc, #384]	; (80052a8 <UART_SetConfig+0x4e4>)
 8005126:	fba3 2302 	umull	r2, r3, r3, r2
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	011c      	lsls	r4, r3, #4
 800512e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005132:	2200      	movs	r2, #0
 8005134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005138:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800513c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005140:	4642      	mov	r2, r8
 8005142:	464b      	mov	r3, r9
 8005144:	1891      	adds	r1, r2, r2
 8005146:	61b9      	str	r1, [r7, #24]
 8005148:	415b      	adcs	r3, r3
 800514a:	61fb      	str	r3, [r7, #28]
 800514c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005150:	4641      	mov	r1, r8
 8005152:	1851      	adds	r1, r2, r1
 8005154:	6139      	str	r1, [r7, #16]
 8005156:	4649      	mov	r1, r9
 8005158:	414b      	adcs	r3, r1
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005168:	4659      	mov	r1, fp
 800516a:	00cb      	lsls	r3, r1, #3
 800516c:	4651      	mov	r1, sl
 800516e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005172:	4651      	mov	r1, sl
 8005174:	00ca      	lsls	r2, r1, #3
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	4603      	mov	r3, r0
 800517c:	4642      	mov	r2, r8
 800517e:	189b      	adds	r3, r3, r2
 8005180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005184:	464b      	mov	r3, r9
 8005186:	460a      	mov	r2, r1
 8005188:	eb42 0303 	adc.w	r3, r2, r3
 800518c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	67bb      	str	r3, [r7, #120]	; 0x78
 800519a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051a8:	4649      	mov	r1, r9
 80051aa:	008b      	lsls	r3, r1, #2
 80051ac:	4641      	mov	r1, r8
 80051ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051b2:	4641      	mov	r1, r8
 80051b4:	008a      	lsls	r2, r1, #2
 80051b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051ba:	f7fb f891 	bl	80002e0 <__aeabi_uldivmod>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4b39      	ldr	r3, [pc, #228]	; (80052a8 <UART_SetConfig+0x4e4>)
 80051c4:	fba3 1302 	umull	r1, r3, r3, r2
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	2164      	movs	r1, #100	; 0x64
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	3332      	adds	r3, #50	; 0x32
 80051d6:	4a34      	ldr	r2, [pc, #208]	; (80052a8 <UART_SetConfig+0x4e4>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051e2:	441c      	add	r4, r3
 80051e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e8:	2200      	movs	r2, #0
 80051ea:	673b      	str	r3, [r7, #112]	; 0x70
 80051ec:	677a      	str	r2, [r7, #116]	; 0x74
 80051ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051f2:	4642      	mov	r2, r8
 80051f4:	464b      	mov	r3, r9
 80051f6:	1891      	adds	r1, r2, r2
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	415b      	adcs	r3, r3
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005202:	4641      	mov	r1, r8
 8005204:	1851      	adds	r1, r2, r1
 8005206:	6039      	str	r1, [r7, #0]
 8005208:	4649      	mov	r1, r9
 800520a:	414b      	adcs	r3, r1
 800520c:	607b      	str	r3, [r7, #4]
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800521a:	4659      	mov	r1, fp
 800521c:	00cb      	lsls	r3, r1, #3
 800521e:	4651      	mov	r1, sl
 8005220:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005224:	4651      	mov	r1, sl
 8005226:	00ca      	lsls	r2, r1, #3
 8005228:	4610      	mov	r0, r2
 800522a:	4619      	mov	r1, r3
 800522c:	4603      	mov	r3, r0
 800522e:	4642      	mov	r2, r8
 8005230:	189b      	adds	r3, r3, r2
 8005232:	66bb      	str	r3, [r7, #104]	; 0x68
 8005234:	464b      	mov	r3, r9
 8005236:	460a      	mov	r2, r1
 8005238:	eb42 0303 	adc.w	r3, r2, r3
 800523c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800523e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	663b      	str	r3, [r7, #96]	; 0x60
 8005248:	667a      	str	r2, [r7, #100]	; 0x64
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005256:	4649      	mov	r1, r9
 8005258:	008b      	lsls	r3, r1, #2
 800525a:	4641      	mov	r1, r8
 800525c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005260:	4641      	mov	r1, r8
 8005262:	008a      	lsls	r2, r1, #2
 8005264:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005268:	f7fb f83a 	bl	80002e0 <__aeabi_uldivmod>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <UART_SetConfig+0x4e4>)
 8005272:	fba3 1302 	umull	r1, r3, r3, r2
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	2164      	movs	r1, #100	; 0x64
 800527a:	fb01 f303 	mul.w	r3, r1, r3
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	3332      	adds	r3, #50	; 0x32
 8005284:	4a08      	ldr	r2, [pc, #32]	; (80052a8 <UART_SetConfig+0x4e4>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	f003 020f 	and.w	r2, r3, #15
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4422      	add	r2, r4
 8005298:	609a      	str	r2, [r3, #8]
}
 800529a:	bf00      	nop
 800529c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052a0:	46bd      	mov	sp, r7
 80052a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a6:	bf00      	nop
 80052a8:	51eb851f 	.word	0x51eb851f

080052ac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f103 0208 	add.w	r2, r3, #8
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052c4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f103 0208 	add.w	r2, r3, #8
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f103 0208 	add.w	r2, r3, #8
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8005306:	b480      	push	{r7}
 8005308:	b085      	sub	sp, #20
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005364:	d103      	bne.n	800536e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e00c      	b.n	8005388 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3308      	adds	r3, #8
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	e002      	b.n	800537c <vListInsert+0x2e>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	429a      	cmp	r2, r3
 8005386:	d2f6      	bcs.n	8005376 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	601a      	str	r2, [r3, #0]
}
 80053b4:	bf00      	nop
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6892      	ldr	r2, [r2, #8]
 80053d6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6852      	ldr	r2, [r2, #4]
 80053e0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d103      	bne.n	80053f4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	1e5a      	subs	r2, r3, #1
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <xQueueGenericReset+0x2a>
        __asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	60bb      	str	r3, [r7, #8]
    }
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800543e:	f002 fbb1 	bl	8007ba4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544a:	68f9      	ldr	r1, [r7, #12]
 800544c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800544e:	fb01 f303 	mul.w	r3, r1, r3
 8005452:	441a      	add	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546e:	3b01      	subs	r3, #1
 8005470:	68f9      	ldr	r1, [r7, #12]
 8005472:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005474:	fb01 f303 	mul.w	r3, r1, r3
 8005478:	441a      	add	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	22ff      	movs	r2, #255	; 0xff
 8005482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	22ff      	movs	r2, #255	; 0xff
 800548a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d114      	bne.n	80054be <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01a      	beq.n	80054d2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3310      	adds	r3, #16
 80054a0:	4618      	mov	r0, r3
 80054a2:	f001 f921 	bl	80066e8 <xTaskRemoveFromEventList>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d012      	beq.n	80054d2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80054ac:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <xQueueGenericReset+0xcc>)
 80054ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	e009      	b.n	80054d2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3310      	adds	r3, #16
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff fef2 	bl	80052ac <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3324      	adds	r3, #36	; 0x24
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff feed 	bl	80052ac <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80054d2:	f002 fb97 	bl	8007c04 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80054d6:	2301      	movs	r3, #1
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	e000ed04 	.word	0xe000ed04

080054e4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08c      	sub	sp, #48	; 0x30
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xQueueGenericCreate+0x2a>
        __asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	61bb      	str	r3, [r7, #24]
    }
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d006      	beq.n	800552c <xQueueGenericCreate+0x48>
 800551e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	429a      	cmp	r2, r3
 800552a:	d101      	bne.n	8005530 <xQueueGenericCreate+0x4c>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <xQueueGenericCreate+0x4e>
 8005530:	2300      	movs	r3, #0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <xQueueGenericCreate+0x68>
        __asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	617b      	str	r3, [r7, #20]
    }
 8005548:	bf00      	nop
 800554a:	e7fe      	b.n	800554a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005552:	d90a      	bls.n	800556a <xQueueGenericCreate+0x86>
        __asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	613b      	str	r3, [r7, #16]
    }
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	3350      	adds	r3, #80	; 0x50
 800556e:	4618      	mov	r0, r3
 8005570:	f002 fc3c 	bl	8007dec <pvPortMalloc>
 8005574:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00d      	beq.n	8005598 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	3350      	adds	r3, #80	; 0x50
 8005584:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005586:	79fa      	ldrb	r2, [r7, #7]
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f805 	bl	80055a2 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005598:	6a3b      	ldr	r3, [r7, #32]
    }
 800559a:	4618      	mov	r0, r3
 800559c:	3728      	adds	r7, #40	; 0x28
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d103      	bne.n	80055be <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	e002      	b.n	80055c4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055d0:	2101      	movs	r1, #1
 80055d2:	69b8      	ldr	r0, [r7, #24]
 80055d4:	f7ff ff1e 	bl	8005414 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	78fa      	ldrb	r2, [r7, #3]
 80055dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08e      	sub	sp, #56	; 0x38
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055f6:	2300      	movs	r3, #0
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <xQueueGenericSend+0x32>
        __asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <xQueueGenericSend+0x40>
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <xQueueGenericSend+0x44>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <xQueueGenericSend+0x46>
 800562c:	2300      	movs	r3, #0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <xQueueGenericSend+0x60>
        __asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005644:	bf00      	nop
 8005646:	e7fe      	b.n	8005646 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d103      	bne.n	8005656 <xQueueGenericSend+0x6e>
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <xQueueGenericSend+0x72>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <xQueueGenericSend+0x74>
 800565a:	2300      	movs	r3, #0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10a      	bne.n	8005676 <xQueueGenericSend+0x8e>
        __asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	623b      	str	r3, [r7, #32]
    }
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005676:	f001 f9d3 	bl	8006a20 <xTaskGetSchedulerState>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d102      	bne.n	8005686 <xQueueGenericSend+0x9e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <xQueueGenericSend+0xa2>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <xQueueGenericSend+0xa4>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xQueueGenericSend+0xbe>
        __asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	61fb      	str	r3, [r7, #28]
    }
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80056a6:	f002 fa7d 	bl	8007ba4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d302      	bcc.n	80056bc <xQueueGenericSend+0xd4>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d129      	bne.n	8005710 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056c2:	f000 fac6 	bl	8005c52 <prvCopyDataToQueue>
 80056c6:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d010      	beq.n	80056f2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	3324      	adds	r3, #36	; 0x24
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 f807 	bl	80066e8 <xTaskRemoveFromEventList>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d013      	beq.n	8005708 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80056e0:	4b3f      	ldr	r3, [pc, #252]	; (80057e0 <xQueueGenericSend+0x1f8>)
 80056e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	e00a      	b.n	8005708 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80056f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d007      	beq.n	8005708 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80056f8:	4b39      	ldr	r3, [pc, #228]	; (80057e0 <xQueueGenericSend+0x1f8>)
 80056fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005708:	f002 fa7c 	bl	8007c04 <vPortExitCritical>
                return pdPASS;
 800570c:	2301      	movs	r3, #1
 800570e:	e063      	b.n	80057d8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005716:	f002 fa75 	bl	8007c04 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800571a:	2300      	movs	r3, #0
 800571c:	e05c      	b.n	80057d8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800571e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005724:	f107 0314 	add.w	r3, r7, #20
 8005728:	4618      	mov	r0, r3
 800572a:	f001 f83f 	bl	80067ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800572e:	2301      	movs	r3, #1
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005732:	f002 fa67 	bl	8007c04 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005736:	f000 fdb9 	bl	80062ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800573a:	f002 fa33 	bl	8007ba4 <vPortEnterCritical>
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005744:	b25b      	sxtb	r3, r3
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800574a:	d103      	bne.n	8005754 <xQueueGenericSend+0x16c>
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800575a:	b25b      	sxtb	r3, r3
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005760:	d103      	bne.n	800576a <xQueueGenericSend+0x182>
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800576a:	f002 fa4b 	bl	8007c04 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800576e:	1d3a      	adds	r2, r7, #4
 8005770:	f107 0314 	add.w	r3, r7, #20
 8005774:	4611      	mov	r1, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f001 f82e 	bl	80067d8 <xTaskCheckForTimeOut>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d124      	bne.n	80057cc <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005784:	f000 fb5d 	bl	8005e42 <prvIsQueueFull>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d018      	beq.n	80057c0 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	3310      	adds	r3, #16
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	4611      	mov	r1, r2
 8005796:	4618      	mov	r0, r3
 8005798:	f000 ff56 	bl	8006648 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800579c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800579e:	f000 fae8 	bl	8005d72 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80057a2:	f000 fd91 	bl	80062c8 <xTaskResumeAll>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f47f af7c 	bne.w	80056a6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80057ae:	4b0c      	ldr	r3, [pc, #48]	; (80057e0 <xQueueGenericSend+0x1f8>)
 80057b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	e772      	b.n	80056a6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80057c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057c2:	f000 fad6 	bl	8005d72 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80057c6:	f000 fd7f 	bl	80062c8 <xTaskResumeAll>
 80057ca:	e76c      	b.n	80056a6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80057cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ce:	f000 fad0 	bl	8005d72 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80057d2:	f000 fd79 	bl	80062c8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80057d6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3738      	adds	r7, #56	; 0x38
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b090      	sub	sp, #64	; 0x40
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <xQueueGenericSendFromISR+0x3c>
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <xQueueGenericSendFromISR+0x40>
 8005820:	2301      	movs	r3, #1
 8005822:	e000      	b.n	8005826 <xQueueGenericSendFromISR+0x42>
 8005824:	2300      	movs	r3, #0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800583c:	bf00      	nop
 800583e:	e7fe      	b.n	800583e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d103      	bne.n	800584e <xQueueGenericSendFromISR+0x6a>
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <xQueueGenericSendFromISR+0x6e>
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <xQueueGenericSendFromISR+0x70>
 8005852:	2300      	movs	r3, #0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10a      	bne.n	800586e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	623b      	str	r3, [r7, #32]
    }
 800586a:	bf00      	nop
 800586c:	e7fe      	b.n	800586c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800586e:	f002 fa7d 	bl	8007d6c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005872:	f3ef 8211 	mrs	r2, BASEPRI
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	61fa      	str	r2, [r7, #28]
 8005888:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800588a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800588c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005896:	429a      	cmp	r2, r3
 8005898:	d302      	bcc.n	80058a0 <xQueueGenericSendFromISR+0xbc>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b02      	cmp	r3, #2
 800589e:	d13e      	bne.n	800591e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80058a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058b6:	f000 f9cc 	bl	8005c52 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80058ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80058be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058c2:	d112      	bne.n	80058ea <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d025      	beq.n	8005918 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	3324      	adds	r3, #36	; 0x24
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 ff09 	bl	80066e8 <xTaskRemoveFromEventList>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01d      	beq.n	8005918 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d01a      	beq.n	8005918 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	e016      	b.n	8005918 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80058ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80058ee:	2b7f      	cmp	r3, #127	; 0x7f
 80058f0:	d10a      	bne.n	8005908 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	617b      	str	r3, [r7, #20]
    }
 8005904:	bf00      	nop
 8005906:	e7fe      	b.n	8005906 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005908:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800590c:	3301      	adds	r3, #1
 800590e:	b2db      	uxtb	r3, r3
 8005910:	b25a      	sxtb	r2, r3
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005918:	2301      	movs	r3, #1
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800591c:	e001      	b.n	8005922 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800591e:	2300      	movs	r3, #0
 8005920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800592c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800592e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005930:	4618      	mov	r0, r3
 8005932:	3740      	adds	r7, #64	; 0x40
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08c      	sub	sp, #48	; 0x30
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005944:	2300      	movs	r3, #0
 8005946:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10a      	bne.n	8005968 <xQueueReceive+0x30>
        __asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	623b      	str	r3, [r7, #32]
    }
 8005964:	bf00      	nop
 8005966:	e7fe      	b.n	8005966 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d103      	bne.n	8005976 <xQueueReceive+0x3e>
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <xQueueReceive+0x42>
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <xQueueReceive+0x44>
 800597a:	2300      	movs	r3, #0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10a      	bne.n	8005996 <xQueueReceive+0x5e>
        __asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	61fb      	str	r3, [r7, #28]
    }
 8005992:	bf00      	nop
 8005994:	e7fe      	b.n	8005994 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005996:	f001 f843 	bl	8006a20 <xTaskGetSchedulerState>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <xQueueReceive+0x6e>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <xQueueReceive+0x72>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <xQueueReceive+0x74>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <xQueueReceive+0x8e>
        __asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	61bb      	str	r3, [r7, #24]
    }
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80059c6:	f002 f8ed 	bl	8007ba4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d01f      	beq.n	8005a16 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059da:	f000 f9a4 	bl	8005d26 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	1e5a      	subs	r2, r3, #1
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00f      	beq.n	8005a0e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	3310      	adds	r3, #16
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fe78 	bl	80066e8 <xTaskRemoveFromEventList>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80059fe:	4b3d      	ldr	r3, [pc, #244]	; (8005af4 <xQueueReceive+0x1bc>)
 8005a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005a0e:	f002 f8f9 	bl	8007c04 <vPortExitCritical>
                return pdPASS;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e069      	b.n	8005aea <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d103      	bne.n	8005a24 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005a1c:	f002 f8f2 	bl	8007c04 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005a20:	2300      	movs	r3, #0
 8005a22:	e062      	b.n	8005aea <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005a2a:	f107 0310 	add.w	r3, r7, #16
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 febc 	bl	80067ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005a34:	2301      	movs	r3, #1
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005a38:	f002 f8e4 	bl	8007c04 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005a3c:	f000 fc36 	bl	80062ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005a40:	f002 f8b0 	bl	8007ba4 <vPortEnterCritical>
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a4a:	b25b      	sxtb	r3, r3
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a50:	d103      	bne.n	8005a5a <xQueueReceive+0x122>
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a60:	b25b      	sxtb	r3, r3
 8005a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a66:	d103      	bne.n	8005a70 <xQueueReceive+0x138>
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a70:	f002 f8c8 	bl	8007c04 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a74:	1d3a      	adds	r2, r7, #4
 8005a76:	f107 0310 	add.w	r3, r7, #16
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 feab 	bl	80067d8 <xTaskCheckForTimeOut>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d123      	bne.n	8005ad0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a8a:	f000 f9c4 	bl	8005e16 <prvIsQueueEmpty>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d017      	beq.n	8005ac4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a96:	3324      	adds	r3, #36	; 0x24
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fdd3 	bl	8006648 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aa4:	f000 f965 	bl	8005d72 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005aa8:	f000 fc0e 	bl	80062c8 <xTaskResumeAll>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d189      	bne.n	80059c6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005ab2:	4b10      	ldr	r3, [pc, #64]	; (8005af4 <xQueueReceive+0x1bc>)
 8005ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	e780      	b.n	80059c6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ac6:	f000 f954 	bl	8005d72 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005aca:	f000 fbfd 	bl	80062c8 <xTaskResumeAll>
 8005ace:	e77a      	b.n	80059c6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ad2:	f000 f94e 	bl	8005d72 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005ad6:	f000 fbf7 	bl	80062c8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005adc:	f000 f99b 	bl	8005e16 <prvIsQueueEmpty>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f43f af6f 	beq.w	80059c6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005ae8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3730      	adds	r7, #48	; 0x30
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	e000ed04 	.word	0xe000ed04

08005af8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b090      	sub	sp, #64	; 0x40
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d103      	bne.n	8005b32 <xQueueReceiveFromISR+0x3a>
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <xQueueReceiveFromISR+0x3e>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <xQueueReceiveFromISR+0x40>
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10a      	bne.n	8005b52 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b52:	f002 f90b 	bl	8007d6c <vPortValidateInterruptPriority>
        __asm volatile
 8005b56:	f3ef 8211 	mrs	r2, BASEPRI
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	623a      	str	r2, [r7, #32]
 8005b6c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005b6e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b70:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d03e      	beq.n	8005bfc <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b8c:	f000 f8cb 	bl	8005d26 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	1e5a      	subs	r2, r3, #1
 8005b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b96:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005b98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ba0:	d112      	bne.n	8005bc8 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d025      	beq.n	8005bf6 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	3310      	adds	r3, #16
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fd9a 	bl	80066e8 <xTaskRemoveFromEventList>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01d      	beq.n	8005bf6 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01a      	beq.n	8005bf6 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e016      	b.n	8005bf6 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005bc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8005bce:	d10a      	bne.n	8005be6 <xQueueReceiveFromISR+0xee>
        __asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	61bb      	str	r3, [r7, #24]
    }
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005be6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bea:	3301      	adds	r3, #1
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	b25a      	sxtb	r2, r3
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bfa:	e001      	b.n	8005c00 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c02:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f383 8811 	msr	BASEPRI, r3
    }
 8005c0a:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3740      	adds	r7, #64	; 0x40
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60bb      	str	r3, [r7, #8]
    }
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005c3a:	f001 ffb3 	bl	8007ba4 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005c44:	f001 ffde 	bl	8007c04 <vPortExitCritical>

    return uxReturn;
 8005c48:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b086      	sub	sp, #24
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	60f8      	str	r0, [r7, #12]
 8005c5a:	60b9      	str	r1, [r7, #8]
 8005c5c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10d      	bne.n	8005c8c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d14d      	bne.n	8005d14 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 feed 	bl	8006a5c <xTaskPriorityDisinherit>
 8005c82:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	609a      	str	r2, [r3, #8]
 8005c8a:	e043      	b.n	8005d14 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d119      	bne.n	8005cc6 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6858      	ldr	r0, [r3, #4]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	f002 facd 	bl	800823c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	441a      	add	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d32b      	bcc.n	8005d14 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	605a      	str	r2, [r3, #4]
 8005cc4:	e026      	b.n	8005d14 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68d8      	ldr	r0, [r3, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	461a      	mov	r2, r3
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	f002 fab3 	bl	800823c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	425b      	negs	r3, r3
 8005ce0:	441a      	add	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d207      	bcs.n	8005d02 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	425b      	negs	r3, r3
 8005cfc:	441a      	add	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d105      	bne.n	8005d14 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005d1c:	697b      	ldr	r3, [r7, #20]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d018      	beq.n	8005d6a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	441a      	add	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d303      	bcc.n	8005d5a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68d9      	ldr	r1, [r3, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	461a      	mov	r2, r3
 8005d64:	6838      	ldr	r0, [r7, #0]
 8005d66:	f002 fa69 	bl	800823c <memcpy>
    }
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005d7a:	f001 ff13 	bl	8007ba4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d84:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d86:	e011      	b.n	8005dac <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d012      	beq.n	8005db6 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3324      	adds	r3, #36	; 0x24
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fca7 	bl	80066e8 <xTaskRemoveFromEventList>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005da0:	f000 fd80 	bl	80068a4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	dce9      	bgt.n	8005d88 <prvUnlockQueue+0x16>
 8005db4:	e000      	b.n	8005db8 <prvUnlockQueue+0x46>
                        break;
 8005db6:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	22ff      	movs	r2, #255	; 0xff
 8005dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005dc0:	f001 ff20 	bl	8007c04 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005dc4:	f001 feee 	bl	8007ba4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dce:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dd0:	e011      	b.n	8005df6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d012      	beq.n	8005e00 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3310      	adds	r3, #16
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fc82 	bl	80066e8 <xTaskRemoveFromEventList>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005dea:	f000 fd5b 	bl	80068a4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005dee:	7bbb      	ldrb	r3, [r7, #14]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005df6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	dce9      	bgt.n	8005dd2 <prvUnlockQueue+0x60>
 8005dfe:	e000      	b.n	8005e02 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005e00:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	22ff      	movs	r2, #255	; 0xff
 8005e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005e0a:	f001 fefb 	bl	8007c04 <vPortExitCritical>
}
 8005e0e:	bf00      	nop
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005e1e:	f001 fec1 	bl	8007ba4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d102      	bne.n	8005e30 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	e001      	b.n	8005e34 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005e34:	f001 fee6 	bl	8007c04 <vPortExitCritical>

    return xReturn;
 8005e38:	68fb      	ldr	r3, [r7, #12]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005e4a:	f001 feab 	bl	8007ba4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d102      	bne.n	8005e60 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	e001      	b.n	8005e64 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005e64:	f001 fece 	bl	8007c04 <vPortExitCritical>

    return xReturn;
 8005e68:	68fb      	ldr	r3, [r7, #12]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005e72:	b480      	push	{r7}
 8005e74:	b087      	sub	sp, #28
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10a      	bne.n	8005e9a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	60fb      	str	r3, [r7, #12]
    }
 8005e96:	bf00      	nop
 8005e98:	e7fe      	b.n	8005e98 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d102      	bne.n	8005eac <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	e001      	b.n	8005eb0 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005eb0:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e014      	b.n	8005efa <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ed0:	4a0f      	ldr	r2, [pc, #60]	; (8005f10 <vQueueAddToRegistry+0x50>)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10b      	bne.n	8005ef4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005edc:	490c      	ldr	r1, [pc, #48]	; (8005f10 <vQueueAddToRegistry+0x50>)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005ee6:	4a0a      	ldr	r2, [pc, #40]	; (8005f10 <vQueueAddToRegistry+0x50>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	4413      	add	r3, r2
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005ef2:	e006      	b.n	8005f02 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b07      	cmp	r3, #7
 8005efe:	d9e7      	bls.n	8005ed0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005f00:	bf00      	nop
 8005f02:	bf00      	nop
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	200001ec 	.word	0x200001ec

08005f14 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005f24:	f001 fe3e 	bl	8007ba4 <vPortEnterCritical>
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f2e:	b25b      	sxtb	r3, r3
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f34:	d103      	bne.n	8005f3e <vQueueWaitForMessageRestricted+0x2a>
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f44:	b25b      	sxtb	r3, r3
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f4a:	d103      	bne.n	8005f54 <vQueueWaitForMessageRestricted+0x40>
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f54:	f001 fe56 	bl	8007c04 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d106      	bne.n	8005f6e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	3324      	adds	r3, #36	; 0x24
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fb91 	bl	8006690 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005f6e:	6978      	ldr	r0, [r7, #20]
 8005f70:	f7ff feff 	bl	8005d72 <prvUnlockQueue>
    }
 8005f74:	bf00      	nop
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08c      	sub	sp, #48	; 0x30
 8005f80:	af04      	add	r7, sp, #16
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f8c:	88fb      	ldrh	r3, [r7, #6]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 ff2b 	bl	8007dec <pvPortMalloc>
 8005f96:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00e      	beq.n	8005fbc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f9e:	2058      	movs	r0, #88	; 0x58
 8005fa0:	f001 ff24 	bl	8007dec <pvPortMalloc>
 8005fa4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8005fb2:	e005      	b.n	8005fc0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005fb4:	6978      	ldr	r0, [r7, #20]
 8005fb6:	f001 fff9 	bl	8007fac <vPortFree>
 8005fba:	e001      	b.n	8005fc0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d013      	beq.n	8005fee <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fc6:	88fa      	ldrh	r2, [r7, #6]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9303      	str	r3, [sp, #12]
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	9302      	str	r3, [sp, #8]
 8005fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd2:	9301      	str	r3, [sp, #4]
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f80e 	bl	8005ffe <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005fe2:	69f8      	ldr	r0, [r7, #28]
 8005fe4:	f000 f8a2 	bl	800612c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	61bb      	str	r3, [r7, #24]
 8005fec:	e002      	b.n	8005ff4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ff2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
    }
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3720      	adds	r7, #32
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b088      	sub	sp, #32
 8006002:	af00      	add	r7, sp, #0
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	607a      	str	r2, [r7, #4]
 800600a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	461a      	mov	r2, r3
 8006016:	21a5      	movs	r1, #165	; 0xa5
 8006018:	f002 f91e 	bl	8008258 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006026:	3b01      	subs	r3, #1
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	f023 0307 	bic.w	r3, r3, #7
 8006034:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <prvInitialiseNewTask+0x58>
        __asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	617b      	str	r3, [r7, #20]
    }
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01f      	beq.n	800609c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800605c:	2300      	movs	r3, #0
 800605e:	61fb      	str	r3, [r7, #28]
 8006060:	e012      	b.n	8006088 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	7819      	ldrb	r1, [r3, #0]
 800606a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	3334      	adds	r3, #52	; 0x34
 8006072:	460a      	mov	r2, r1
 8006074:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	4413      	add	r3, r2
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d006      	beq.n	8006090 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3301      	adds	r3, #1
 8006086:	61fb      	str	r3, [r7, #28]
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	2b09      	cmp	r3, #9
 800608c:	d9e9      	bls.n	8006062 <prvInitialiseNewTask+0x64>
 800608e:	e000      	b.n	8006092 <prvInitialiseNewTask+0x94>
            {
                break;
 8006090:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	2200      	movs	r2, #0
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800609a:	e003      	b.n	80060a4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d901      	bls.n	80060ae <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060aa:	2304      	movs	r3, #4
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060b2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060b8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	2200      	movs	r2, #0
 80060be:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	3304      	adds	r3, #4
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff f911 	bl	80052ec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	3318      	adds	r3, #24
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff f90c 	bl	80052ec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	f1c3 0205 	rsb	r2, r3, #5
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	3350      	adds	r3, #80	; 0x50
 80060ee:	2204      	movs	r2, #4
 80060f0:	2100      	movs	r1, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f002 f8b0 	bl	8008258 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	3354      	adds	r3, #84	; 0x54
 80060fc:	2201      	movs	r2, #1
 80060fe:	2100      	movs	r1, #0
 8006100:	4618      	mov	r0, r3
 8006102:	f002 f8a9 	bl	8008258 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	68f9      	ldr	r1, [r7, #12]
 800610a:	69b8      	ldr	r0, [r7, #24]
 800610c:	f001 fba0 	bl	8007850 <pxPortInitialiseStack>
 8006110:	4602      	mov	r2, r0
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006120:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006122:	bf00      	nop
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006134:	f001 fd36 	bl	8007ba4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006138:	4b2c      	ldr	r3, [pc, #176]	; (80061ec <prvAddNewTaskToReadyList+0xc0>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3301      	adds	r3, #1
 800613e:	4a2b      	ldr	r2, [pc, #172]	; (80061ec <prvAddNewTaskToReadyList+0xc0>)
 8006140:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006142:	4b2b      	ldr	r3, [pc, #172]	; (80061f0 <prvAddNewTaskToReadyList+0xc4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800614a:	4a29      	ldr	r2, [pc, #164]	; (80061f0 <prvAddNewTaskToReadyList+0xc4>)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006150:	4b26      	ldr	r3, [pc, #152]	; (80061ec <prvAddNewTaskToReadyList+0xc0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d110      	bne.n	800617a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006158:	f000 fbc8 	bl	80068ec <prvInitialiseTaskLists>
 800615c:	e00d      	b.n	800617a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800615e:	4b25      	ldr	r3, [pc, #148]	; (80061f4 <prvAddNewTaskToReadyList+0xc8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006166:	4b22      	ldr	r3, [pc, #136]	; (80061f0 <prvAddNewTaskToReadyList+0xc4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	429a      	cmp	r2, r3
 8006172:	d802      	bhi.n	800617a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006174:	4a1e      	ldr	r2, [pc, #120]	; (80061f0 <prvAddNewTaskToReadyList+0xc4>)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800617a:	4b1f      	ldr	r3, [pc, #124]	; (80061f8 <prvAddNewTaskToReadyList+0xcc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3301      	adds	r3, #1
 8006180:	4a1d      	ldr	r2, [pc, #116]	; (80061f8 <prvAddNewTaskToReadyList+0xcc>)
 8006182:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006184:	4b1c      	ldr	r3, [pc, #112]	; (80061f8 <prvAddNewTaskToReadyList+0xcc>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	2201      	movs	r2, #1
 8006192:	409a      	lsls	r2, r3
 8006194:	4b19      	ldr	r3, [pc, #100]	; (80061fc <prvAddNewTaskToReadyList+0xd0>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4313      	orrs	r3, r2
 800619a:	4a18      	ldr	r2, [pc, #96]	; (80061fc <prvAddNewTaskToReadyList+0xd0>)
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a2:	4613      	mov	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4a15      	ldr	r2, [pc, #84]	; (8006200 <prvAddNewTaskToReadyList+0xd4>)
 80061ac:	441a      	add	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	4610      	mov	r0, r2
 80061b6:	f7ff f8a6 	bl	8005306 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80061ba:	f001 fd23 	bl	8007c04 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80061be:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <prvAddNewTaskToReadyList+0xc8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00e      	beq.n	80061e4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061c6:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <prvAddNewTaskToReadyList+0xc4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d207      	bcs.n	80061e4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80061d4:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <prvAddNewTaskToReadyList+0xd8>)
 80061d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20000304 	.word	0x20000304
 80061f0:	2000022c 	.word	0x2000022c
 80061f4:	20000310 	.word	0x20000310
 80061f8:	20000320 	.word	0x20000320
 80061fc:	2000030c 	.word	0x2000030c
 8006200:	20000230 	.word	0x20000230
 8006204:	e000ed04 	.word	0xe000ed04

08006208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800620e:	4b20      	ldr	r3, [pc, #128]	; (8006290 <vTaskStartScheduler+0x88>)
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	2300      	movs	r3, #0
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	2300      	movs	r3, #0
 8006218:	2282      	movs	r2, #130	; 0x82
 800621a:	491e      	ldr	r1, [pc, #120]	; (8006294 <vTaskStartScheduler+0x8c>)
 800621c:	481e      	ldr	r0, [pc, #120]	; (8006298 <vTaskStartScheduler+0x90>)
 800621e:	f7ff fead 	bl	8005f7c <xTaskCreate>
 8006222:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d102      	bne.n	8006230 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800622a:	f000 ff59 	bl	80070e0 <xTimerCreateTimerTask>
 800622e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d116      	bne.n	8006264 <vTaskStartScheduler+0x5c>
        __asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	60bb      	str	r3, [r7, #8]
    }
 8006248:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800624a:	4b14      	ldr	r3, [pc, #80]	; (800629c <vTaskStartScheduler+0x94>)
 800624c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006250:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006252:	4b13      	ldr	r3, [pc, #76]	; (80062a0 <vTaskStartScheduler+0x98>)
 8006254:	2201      	movs	r2, #1
 8006256:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006258:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <vTaskStartScheduler+0x9c>)
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800625e:	f001 fb81 	bl	8007964 <xPortStartScheduler>
 8006262:	e00e      	b.n	8006282 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800626a:	d10a      	bne.n	8006282 <vTaskStartScheduler+0x7a>
        __asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	607b      	str	r3, [r7, #4]
    }
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006282:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <vTaskStartScheduler+0xa0>)
 8006284:	681b      	ldr	r3, [r3, #0]
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20000328 	.word	0x20000328
 8006294:	08009904 	.word	0x08009904
 8006298:	080068bd 	.word	0x080068bd
 800629c:	20000324 	.word	0x20000324
 80062a0:	20000310 	.word	0x20000310
 80062a4:	20000308 	.word	0x20000308
 80062a8:	20000020 	.word	0x20000020

080062ac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80062b0:	4b04      	ldr	r3, [pc, #16]	; (80062c4 <vTaskSuspendAll+0x18>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3301      	adds	r3, #1
 80062b6:	4a03      	ldr	r2, [pc, #12]	; (80062c4 <vTaskSuspendAll+0x18>)
 80062b8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80062ba:	bf00      	nop
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	2000032c 	.word	0x2000032c

080062c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80062d6:	4b41      	ldr	r3, [pc, #260]	; (80063dc <xTaskResumeAll+0x114>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <xTaskResumeAll+0x2c>
        __asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	603b      	str	r3, [r7, #0]
    }
 80062f0:	bf00      	nop
 80062f2:	e7fe      	b.n	80062f2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80062f4:	f001 fc56 	bl	8007ba4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80062f8:	4b38      	ldr	r3, [pc, #224]	; (80063dc <xTaskResumeAll+0x114>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	4a37      	ldr	r2, [pc, #220]	; (80063dc <xTaskResumeAll+0x114>)
 8006300:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006302:	4b36      	ldr	r3, [pc, #216]	; (80063dc <xTaskResumeAll+0x114>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d161      	bne.n	80063ce <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800630a:	4b35      	ldr	r3, [pc, #212]	; (80063e0 <xTaskResumeAll+0x118>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d05d      	beq.n	80063ce <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006312:	e02e      	b.n	8006372 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006314:	4b33      	ldr	r3, [pc, #204]	; (80063e4 <xTaskResumeAll+0x11c>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3318      	adds	r3, #24
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff f84d 	bl	80053c0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3304      	adds	r3, #4
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff f848 	bl	80053c0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	2201      	movs	r2, #1
 8006336:	409a      	lsls	r2, r3
 8006338:	4b2b      	ldr	r3, [pc, #172]	; (80063e8 <xTaskResumeAll+0x120>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4313      	orrs	r3, r2
 800633e:	4a2a      	ldr	r2, [pc, #168]	; (80063e8 <xTaskResumeAll+0x120>)
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4a27      	ldr	r2, [pc, #156]	; (80063ec <xTaskResumeAll+0x124>)
 8006350:	441a      	add	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3304      	adds	r3, #4
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f7fe ffd4 	bl	8005306 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006362:	4b23      	ldr	r3, [pc, #140]	; (80063f0 <xTaskResumeAll+0x128>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	429a      	cmp	r2, r3
 800636a:	d302      	bcc.n	8006372 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 800636c:	4b21      	ldr	r3, [pc, #132]	; (80063f4 <xTaskResumeAll+0x12c>)
 800636e:	2201      	movs	r2, #1
 8006370:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006372:	4b1c      	ldr	r3, [pc, #112]	; (80063e4 <xTaskResumeAll+0x11c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1cc      	bne.n	8006314 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006380:	f000 fb32 	bl	80069e8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006384:	4b1c      	ldr	r3, [pc, #112]	; (80063f8 <xTaskResumeAll+0x130>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d010      	beq.n	80063b2 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006390:	f000 f846 	bl	8006420 <xTaskIncrementTick>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800639a:	4b16      	ldr	r3, [pc, #88]	; (80063f4 <xTaskResumeAll+0x12c>)
 800639c:	2201      	movs	r2, #1
 800639e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1f1      	bne.n	8006390 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80063ac:	4b12      	ldr	r3, [pc, #72]	; (80063f8 <xTaskResumeAll+0x130>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <xTaskResumeAll+0x12c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80063ba:	2301      	movs	r3, #1
 80063bc:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80063be:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <xTaskResumeAll+0x134>)
 80063c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80063ce:	f001 fc19 	bl	8007c04 <vPortExitCritical>

    return xAlreadyYielded;
 80063d2:	68bb      	ldr	r3, [r7, #8]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	2000032c 	.word	0x2000032c
 80063e0:	20000304 	.word	0x20000304
 80063e4:	200002c4 	.word	0x200002c4
 80063e8:	2000030c 	.word	0x2000030c
 80063ec:	20000230 	.word	0x20000230
 80063f0:	2000022c 	.word	0x2000022c
 80063f4:	20000318 	.word	0x20000318
 80063f8:	20000314 	.word	0x20000314
 80063fc:	e000ed04 	.word	0xe000ed04

08006400 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006406:	4b05      	ldr	r3, [pc, #20]	; (800641c <xTaskGetTickCount+0x1c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800640c:	687b      	ldr	r3, [r7, #4]
}
 800640e:	4618      	mov	r0, r3
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	20000308 	.word	0x20000308

08006420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800642a:	4b4e      	ldr	r3, [pc, #312]	; (8006564 <xTaskIncrementTick+0x144>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f040 808e 	bne.w	8006550 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006434:	4b4c      	ldr	r3, [pc, #304]	; (8006568 <xTaskIncrementTick+0x148>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3301      	adds	r3, #1
 800643a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800643c:	4a4a      	ldr	r2, [pc, #296]	; (8006568 <xTaskIncrementTick+0x148>)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d120      	bne.n	800648a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006448:	4b48      	ldr	r3, [pc, #288]	; (800656c <xTaskIncrementTick+0x14c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <xTaskIncrementTick+0x48>
        __asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	603b      	str	r3, [r7, #0]
    }
 8006464:	bf00      	nop
 8006466:	e7fe      	b.n	8006466 <xTaskIncrementTick+0x46>
 8006468:	4b40      	ldr	r3, [pc, #256]	; (800656c <xTaskIncrementTick+0x14c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	4b40      	ldr	r3, [pc, #256]	; (8006570 <xTaskIncrementTick+0x150>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a3e      	ldr	r2, [pc, #248]	; (800656c <xTaskIncrementTick+0x14c>)
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	4a3e      	ldr	r2, [pc, #248]	; (8006570 <xTaskIncrementTick+0x150>)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	4b3d      	ldr	r3, [pc, #244]	; (8006574 <xTaskIncrementTick+0x154>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3301      	adds	r3, #1
 8006482:	4a3c      	ldr	r2, [pc, #240]	; (8006574 <xTaskIncrementTick+0x154>)
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	f000 faaf 	bl	80069e8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800648a:	4b3b      	ldr	r3, [pc, #236]	; (8006578 <xTaskIncrementTick+0x158>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	429a      	cmp	r2, r3
 8006492:	d348      	bcc.n	8006526 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006494:	4b35      	ldr	r3, [pc, #212]	; (800656c <xTaskIncrementTick+0x14c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800649e:	4b36      	ldr	r3, [pc, #216]	; (8006578 <xTaskIncrementTick+0x158>)
 80064a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064a4:	601a      	str	r2, [r3, #0]
                    break;
 80064a6:	e03e      	b.n	8006526 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064a8:	4b30      	ldr	r3, [pc, #192]	; (800656c <xTaskIncrementTick+0x14c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d203      	bcs.n	80064c8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80064c0:	4a2d      	ldr	r2, [pc, #180]	; (8006578 <xTaskIncrementTick+0x158>)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064c6:	e02e      	b.n	8006526 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	3304      	adds	r3, #4
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe ff77 	bl	80053c0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d004      	beq.n	80064e4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	3318      	adds	r3, #24
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe ff6e 	bl	80053c0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	2201      	movs	r2, #1
 80064ea:	409a      	lsls	r2, r3
 80064ec:	4b23      	ldr	r3, [pc, #140]	; (800657c <xTaskIncrementTick+0x15c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	4a22      	ldr	r2, [pc, #136]	; (800657c <xTaskIncrementTick+0x15c>)
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4a1f      	ldr	r2, [pc, #124]	; (8006580 <xTaskIncrementTick+0x160>)
 8006504:	441a      	add	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	3304      	adds	r3, #4
 800650a:	4619      	mov	r1, r3
 800650c:	4610      	mov	r0, r2
 800650e:	f7fe fefa 	bl	8005306 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006516:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <xTaskIncrementTick+0x164>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	429a      	cmp	r2, r3
 800651e:	d3b9      	bcc.n	8006494 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8006520:	2301      	movs	r3, #1
 8006522:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006524:	e7b6      	b.n	8006494 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006526:	4b17      	ldr	r3, [pc, #92]	; (8006584 <xTaskIncrementTick+0x164>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	4914      	ldr	r1, [pc, #80]	; (8006580 <xTaskIncrementTick+0x160>)
 800652e:	4613      	mov	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	440b      	add	r3, r1
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d901      	bls.n	8006542 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800653e:	2301      	movs	r3, #1
 8006540:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006542:	4b11      	ldr	r3, [pc, #68]	; (8006588 <xTaskIncrementTick+0x168>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d007      	beq.n	800655a <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800654a:	2301      	movs	r3, #1
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	e004      	b.n	800655a <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006550:	4b0e      	ldr	r3, [pc, #56]	; (800658c <xTaskIncrementTick+0x16c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	4a0d      	ldr	r2, [pc, #52]	; (800658c <xTaskIncrementTick+0x16c>)
 8006558:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800655a:	697b      	ldr	r3, [r7, #20]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	2000032c 	.word	0x2000032c
 8006568:	20000308 	.word	0x20000308
 800656c:	200002bc 	.word	0x200002bc
 8006570:	200002c0 	.word	0x200002c0
 8006574:	2000031c 	.word	0x2000031c
 8006578:	20000324 	.word	0x20000324
 800657c:	2000030c 	.word	0x2000030c
 8006580:	20000230 	.word	0x20000230
 8006584:	2000022c 	.word	0x2000022c
 8006588:	20000318 	.word	0x20000318
 800658c:	20000314 	.word	0x20000314

08006590 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006596:	4b27      	ldr	r3, [pc, #156]	; (8006634 <vTaskSwitchContext+0xa4>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800659e:	4b26      	ldr	r3, [pc, #152]	; (8006638 <vTaskSwitchContext+0xa8>)
 80065a0:	2201      	movs	r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80065a4:	e03f      	b.n	8006626 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80065a6:	4b24      	ldr	r3, [pc, #144]	; (8006638 <vTaskSwitchContext+0xa8>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ac:	4b23      	ldr	r3, [pc, #140]	; (800663c <vTaskSwitchContext+0xac>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	fab3 f383 	clz	r3, r3
 80065b8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80065ba:	7afb      	ldrb	r3, [r7, #11]
 80065bc:	f1c3 031f 	rsb	r3, r3, #31
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	491f      	ldr	r1, [pc, #124]	; (8006640 <vTaskSwitchContext+0xb0>)
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	440b      	add	r3, r1
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10a      	bne.n	80065ec <vTaskSwitchContext+0x5c>
        __asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	607b      	str	r3, [r7, #4]
    }
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <vTaskSwitchContext+0x5a>
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4a12      	ldr	r2, [pc, #72]	; (8006640 <vTaskSwitchContext+0xb0>)
 80065f8:	4413      	add	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	605a      	str	r2, [r3, #4]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	3308      	adds	r3, #8
 800660e:	429a      	cmp	r2, r3
 8006610:	d104      	bne.n	800661c <vTaskSwitchContext+0x8c>
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	605a      	str	r2, [r3, #4]
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	4a08      	ldr	r2, [pc, #32]	; (8006644 <vTaskSwitchContext+0xb4>)
 8006624:	6013      	str	r3, [r2, #0]
}
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	2000032c 	.word	0x2000032c
 8006638:	20000318 	.word	0x20000318
 800663c:	2000030c 	.word	0x2000030c
 8006640:	20000230 	.word	0x20000230
 8006644:	2000022c 	.word	0x2000022c

08006648 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	60fb      	str	r3, [r7, #12]
    }
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800666e:	4b07      	ldr	r3, [pc, #28]	; (800668c <vTaskPlaceOnEventList+0x44>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3318      	adds	r3, #24
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7fe fe69 	bl	800534e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800667c:	2101      	movs	r1, #1
 800667e:	6838      	ldr	r0, [r7, #0]
 8006680:	f000 fcc8 	bl	8007014 <prvAddCurrentTaskToDelayedList>
}
 8006684:	bf00      	nop
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	2000022c 	.word	0x2000022c

08006690 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	617b      	str	r3, [r7, #20]
    }
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066b8:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3318      	adds	r3, #24
 80066be:	4619      	mov	r1, r3
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7fe fe20 	bl	8005306 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80066cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066d0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	68b8      	ldr	r0, [r7, #8]
 80066d6:	f000 fc9d 	bl	8007014 <prvAddCurrentTaskToDelayedList>
    }
 80066da:	bf00      	nop
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	2000022c 	.word	0x2000022c

080066e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	60fb      	str	r3, [r7, #12]
    }
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	3318      	adds	r3, #24
 8006718:	4618      	mov	r0, r3
 800671a:	f7fe fe51 	bl	80053c0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800671e:	4b1d      	ldr	r3, [pc, #116]	; (8006794 <xTaskRemoveFromEventList+0xac>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d11c      	bne.n	8006760 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	3304      	adds	r3, #4
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fe48 	bl	80053c0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	2201      	movs	r2, #1
 8006736:	409a      	lsls	r2, r3
 8006738:	4b17      	ldr	r3, [pc, #92]	; (8006798 <xTaskRemoveFromEventList+0xb0>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4313      	orrs	r3, r2
 800673e:	4a16      	ldr	r2, [pc, #88]	; (8006798 <xTaskRemoveFromEventList+0xb0>)
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4a13      	ldr	r2, [pc, #76]	; (800679c <xTaskRemoveFromEventList+0xb4>)
 8006750:	441a      	add	r2, r3
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	3304      	adds	r3, #4
 8006756:	4619      	mov	r1, r3
 8006758:	4610      	mov	r0, r2
 800675a:	f7fe fdd4 	bl	8005306 <vListInsertEnd>
 800675e:	e005      	b.n	800676c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	3318      	adds	r3, #24
 8006764:	4619      	mov	r1, r3
 8006766:	480e      	ldr	r0, [pc, #56]	; (80067a0 <xTaskRemoveFromEventList+0xb8>)
 8006768:	f7fe fdcd 	bl	8005306 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006770:	4b0c      	ldr	r3, [pc, #48]	; (80067a4 <xTaskRemoveFromEventList+0xbc>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	429a      	cmp	r2, r3
 8006778:	d905      	bls.n	8006786 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800677a:	2301      	movs	r3, #1
 800677c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800677e:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <xTaskRemoveFromEventList+0xc0>)
 8006780:	2201      	movs	r2, #1
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e001      	b.n	800678a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8006786:	2300      	movs	r3, #0
 8006788:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800678a:	697b      	ldr	r3, [r7, #20]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	2000032c 	.word	0x2000032c
 8006798:	2000030c 	.word	0x2000030c
 800679c:	20000230 	.word	0x20000230
 80067a0:	200002c4 	.word	0x200002c4
 80067a4:	2000022c 	.word	0x2000022c
 80067a8:	20000318 	.word	0x20000318

080067ac <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067b4:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <vTaskInternalSetTimeOutState+0x24>)
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80067bc:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <vTaskInternalSetTimeOutState+0x28>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	605a      	str	r2, [r3, #4]
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	2000031c 	.word	0x2000031c
 80067d4:	20000308 	.word	0x20000308

080067d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b088      	sub	sp, #32
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	613b      	str	r3, [r7, #16]
    }
 80067fa:	bf00      	nop
 80067fc:	e7fe      	b.n	80067fc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10a      	bne.n	800681a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	60fb      	str	r3, [r7, #12]
    }
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800681a:	f001 f9c3 	bl	8007ba4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800681e:	4b1f      	ldr	r3, [pc, #124]	; (800689c <xTaskCheckForTimeOut+0xc4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006836:	d102      	bne.n	800683e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	61fb      	str	r3, [r7, #28]
 800683c:	e026      	b.n	800688c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <xTaskCheckForTimeOut+0xc8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d00a      	beq.n	8006860 <xTaskCheckForTimeOut+0x88>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	429a      	cmp	r2, r3
 8006852:	d305      	bcc.n	8006860 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006854:	2301      	movs	r3, #1
 8006856:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	e015      	b.n	800688c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	429a      	cmp	r2, r3
 8006868:	d20b      	bcs.n	8006882 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	1ad2      	subs	r2, r2, r3
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7ff ff98 	bl	80067ac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800687c:	2300      	movs	r3, #0
 800687e:	61fb      	str	r3, [r7, #28]
 8006880:	e004      	b.n	800688c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006888:	2301      	movs	r3, #1
 800688a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800688c:	f001 f9ba 	bl	8007c04 <vPortExitCritical>

    return xReturn;
 8006890:	69fb      	ldr	r3, [r7, #28]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3720      	adds	r7, #32
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000308 	.word	0x20000308
 80068a0:	2000031c 	.word	0x2000031c

080068a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068a4:	b480      	push	{r7}
 80068a6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80068a8:	4b03      	ldr	r3, [pc, #12]	; (80068b8 <vTaskMissedYield+0x14>)
 80068aa:	2201      	movs	r2, #1
 80068ac:	601a      	str	r2, [r3, #0]
}
 80068ae:	bf00      	nop
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	20000318 	.word	0x20000318

080068bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80068c4:	f000 f852 	bl	800696c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068c8:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <prvIdleTask+0x28>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d9f9      	bls.n	80068c4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80068d0:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <prvIdleTask+0x2c>)
 80068d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80068e0:	e7f0      	b.n	80068c4 <prvIdleTask+0x8>
 80068e2:	bf00      	nop
 80068e4:	20000230 	.word	0x20000230
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068f2:	2300      	movs	r3, #0
 80068f4:	607b      	str	r3, [r7, #4]
 80068f6:	e00c      	b.n	8006912 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	4613      	mov	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4a12      	ldr	r2, [pc, #72]	; (800694c <prvInitialiseTaskLists+0x60>)
 8006904:	4413      	add	r3, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe fcd0 	bl	80052ac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3301      	adds	r3, #1
 8006910:	607b      	str	r3, [r7, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b04      	cmp	r3, #4
 8006916:	d9ef      	bls.n	80068f8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006918:	480d      	ldr	r0, [pc, #52]	; (8006950 <prvInitialiseTaskLists+0x64>)
 800691a:	f7fe fcc7 	bl	80052ac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800691e:	480d      	ldr	r0, [pc, #52]	; (8006954 <prvInitialiseTaskLists+0x68>)
 8006920:	f7fe fcc4 	bl	80052ac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006924:	480c      	ldr	r0, [pc, #48]	; (8006958 <prvInitialiseTaskLists+0x6c>)
 8006926:	f7fe fcc1 	bl	80052ac <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800692a:	480c      	ldr	r0, [pc, #48]	; (800695c <prvInitialiseTaskLists+0x70>)
 800692c:	f7fe fcbe 	bl	80052ac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006930:	480b      	ldr	r0, [pc, #44]	; (8006960 <prvInitialiseTaskLists+0x74>)
 8006932:	f7fe fcbb 	bl	80052ac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006936:	4b0b      	ldr	r3, [pc, #44]	; (8006964 <prvInitialiseTaskLists+0x78>)
 8006938:	4a05      	ldr	r2, [pc, #20]	; (8006950 <prvInitialiseTaskLists+0x64>)
 800693a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800693c:	4b0a      	ldr	r3, [pc, #40]	; (8006968 <prvInitialiseTaskLists+0x7c>)
 800693e:	4a05      	ldr	r2, [pc, #20]	; (8006954 <prvInitialiseTaskLists+0x68>)
 8006940:	601a      	str	r2, [r3, #0]
}
 8006942:	bf00      	nop
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000230 	.word	0x20000230
 8006950:	20000294 	.word	0x20000294
 8006954:	200002a8 	.word	0x200002a8
 8006958:	200002c4 	.word	0x200002c4
 800695c:	200002d8 	.word	0x200002d8
 8006960:	200002f0 	.word	0x200002f0
 8006964:	200002bc 	.word	0x200002bc
 8006968:	200002c0 	.word	0x200002c0

0800696c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006972:	e019      	b.n	80069a8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006974:	f001 f916 	bl	8007ba4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006978:	4b10      	ldr	r3, [pc, #64]	; (80069bc <prvCheckTasksWaitingTermination+0x50>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3304      	adds	r3, #4
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe fd1b 	bl	80053c0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800698a:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <prvCheckTasksWaitingTermination+0x54>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3b01      	subs	r3, #1
 8006990:	4a0b      	ldr	r2, [pc, #44]	; (80069c0 <prvCheckTasksWaitingTermination+0x54>)
 8006992:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006994:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <prvCheckTasksWaitingTermination+0x58>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3b01      	subs	r3, #1
 800699a:	4a0a      	ldr	r2, [pc, #40]	; (80069c4 <prvCheckTasksWaitingTermination+0x58>)
 800699c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800699e:	f001 f931 	bl	8007c04 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f810 	bl	80069c8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069a8:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <prvCheckTasksWaitingTermination+0x58>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e1      	bne.n	8006974 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80069b0:	bf00      	nop
 80069b2:	bf00      	nop
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	200002d8 	.word	0x200002d8
 80069c0:	20000304 	.word	0x20000304
 80069c4:	200002ec 	.word	0x200002ec

080069c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d4:	4618      	mov	r0, r3
 80069d6:	f001 fae9 	bl	8007fac <vPortFree>
                vPortFree( pxTCB );
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f001 fae6 	bl	8007fac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ec:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <prvResetNextTaskUnblockTime+0x30>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d104      	bne.n	8006a00 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80069f6:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <prvResetNextTaskUnblockTime+0x34>)
 80069f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069fc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80069fe:	e005      	b.n	8006a0c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a00:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <prvResetNextTaskUnblockTime+0x30>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a04      	ldr	r2, [pc, #16]	; (8006a1c <prvResetNextTaskUnblockTime+0x34>)
 8006a0a:	6013      	str	r3, [r2, #0]
}
 8006a0c:	bf00      	nop
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	200002bc 	.word	0x200002bc
 8006a1c:	20000324 	.word	0x20000324

08006a20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006a26:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <xTaskGetSchedulerState+0x34>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	607b      	str	r3, [r7, #4]
 8006a32:	e008      	b.n	8006a46 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a34:	4b08      	ldr	r3, [pc, #32]	; (8006a58 <xTaskGetSchedulerState+0x38>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	607b      	str	r3, [r7, #4]
 8006a40:	e001      	b.n	8006a46 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006a42:	2300      	movs	r3, #0
 8006a44:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006a46:	687b      	ldr	r3, [r7, #4]
    }
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	20000310 	.word	0x20000310
 8006a58:	2000032c 	.word	0x2000032c

08006a5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d063      	beq.n	8006b3a <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006a72:	4b34      	ldr	r3, [pc, #208]	; (8006b44 <xTaskPriorityDisinherit+0xe8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d00a      	beq.n	8006a92 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	60fb      	str	r3, [r7, #12]
    }
 8006a8e:	bf00      	nop
 8006a90:	e7fe      	b.n	8006a90 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10a      	bne.n	8006ab0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	60bb      	str	r3, [r7, #8]
    }
 8006aac:	bf00      	nop
 8006aae:	e7fe      	b.n	8006aae <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab4:	1e5a      	subs	r2, r3, #1
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d039      	beq.n	8006b3a <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d135      	bne.n	8006b3a <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe fc74 	bl	80053c0 <uxListRemove>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10a      	bne.n	8006af4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae8:	43da      	mvns	r2, r3
 8006aea:	4b17      	ldr	r3, [pc, #92]	; (8006b48 <xTaskPriorityDisinherit+0xec>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4013      	ands	r3, r2
 8006af0:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <xTaskPriorityDisinherit+0xec>)
 8006af2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b00:	f1c3 0205 	rsb	r2, r3, #5
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	409a      	lsls	r2, r3
 8006b10:	4b0d      	ldr	r3, [pc, #52]	; (8006b48 <xTaskPriorityDisinherit+0xec>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	4a0c      	ldr	r2, [pc, #48]	; (8006b48 <xTaskPriorityDisinherit+0xec>)
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4a09      	ldr	r2, [pc, #36]	; (8006b4c <xTaskPriorityDisinherit+0xf0>)
 8006b28:	441a      	add	r2, r3
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4610      	mov	r0, r2
 8006b32:	f7fe fbe8 	bl	8005306 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006b36:	2301      	movs	r3, #1
 8006b38:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006b3a:	697b      	ldr	r3, [r7, #20]
    }
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3718      	adds	r7, #24
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	2000022c 	.word	0x2000022c
 8006b48:	2000030c 	.word	0x2000030c
 8006b4c:	20000230 	.word	0x20000230

08006b50 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00a      	beq.n	8006b7a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	613b      	str	r3, [r7, #16]
    }
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006b7a:	f001 f813 	bl	8007ba4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006b7e:	4b32      	ldr	r3, [pc, #200]	; (8006c48 <xTaskGenericNotifyWait+0xf8>)
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4413      	add	r3, r2
 8006b86:	3354      	adds	r3, #84	; 0x54
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d022      	beq.n	8006bd6 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006b90:	4b2d      	ldr	r3, [pc, #180]	; (8006c48 <xTaskGenericNotifyWait+0xf8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	3214      	adds	r2, #20
 8006b98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	43d2      	mvns	r2, r2
 8006ba0:	4011      	ands	r1, r2
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	3214      	adds	r2, #20
 8006ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006baa:	4b27      	ldr	r3, [pc, #156]	; (8006c48 <xTaskGenericNotifyWait+0xf8>)
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	3354      	adds	r3, #84	; 0x54
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	6a38      	ldr	r0, [r7, #32]
 8006bc2:	f000 fa27 	bl	8007014 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006bc6:	4b21      	ldr	r3, [pc, #132]	; (8006c4c <xTaskGenericNotifyWait+0xfc>)
 8006bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006bd6:	f001 f815 	bl	8007c04 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006bda:	f000 ffe3 	bl	8007ba4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d007      	beq.n	8006bf4 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006be4:	4b18      	ldr	r3, [pc, #96]	; (8006c48 <xTaskGenericNotifyWait+0xf8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	3214      	adds	r2, #20
 8006bec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006bf4:	4b14      	ldr	r3, [pc, #80]	; (8006c48 <xTaskGenericNotifyWait+0xf8>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	3354      	adds	r3, #84	; 0x54
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d002      	beq.n	8006c0c <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	e00e      	b.n	8006c2a <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006c0c:	4b0e      	ldr	r3, [pc, #56]	; (8006c48 <xTaskGenericNotifyWait+0xf8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	3214      	adds	r2, #20
 8006c14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	43d2      	mvns	r2, r2
 8006c1c:	4011      	ands	r1, r2
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	3214      	adds	r2, #20
 8006c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006c26:	2301      	movs	r3, #1
 8006c28:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006c2a:	4b07      	ldr	r3, [pc, #28]	; (8006c48 <xTaskGenericNotifyWait+0xf8>)
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4413      	add	r3, r2
 8006c32:	3354      	adds	r3, #84	; 0x54
 8006c34:	2200      	movs	r2, #0
 8006c36:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006c38:	f000 ffe4 	bl	8007c04 <vPortExitCritical>

        return xReturn;
 8006c3c:	697b      	ldr	r3, [r7, #20]
    }
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	2000022c 	.word	0x2000022c
 8006c4c:	e000ed04 	.word	0xe000ed04

08006c50 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08c      	sub	sp, #48	; 0x30
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <xTaskGenericNotify+0x2e>
        __asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	623b      	str	r3, [r7, #32]
    }
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <xTaskGenericNotify+0x4a>
        __asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	61fb      	str	r3, [r7, #28]
    }
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006c9e:	f000 ff81 	bl	8007ba4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d006      	beq.n	8006cb6 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	3214      	adds	r2, #20
 8006cae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4413      	add	r3, r2
 8006cbc:	3354      	adds	r3, #84	; 0x54
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	4413      	add	r3, r2
 8006cca:	3354      	adds	r3, #84	; 0x54
 8006ccc:	2202      	movs	r2, #2
 8006cce:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d83b      	bhi.n	8006d4e <xTaskGenericNotify+0xfe>
 8006cd6:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <xTaskGenericNotify+0x8c>)
 8006cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cdc:	08006d6d 	.word	0x08006d6d
 8006ce0:	08006cf1 	.word	0x08006cf1
 8006ce4:	08006d0d 	.word	0x08006d0d
 8006ce8:	08006d25 	.word	0x08006d25
 8006cec:	08006d33 	.word	0x08006d33
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	3214      	adds	r2, #20
 8006cf6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	ea42 0103 	orr.w	r1, r2, r3
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	3214      	adds	r2, #20
 8006d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006d0a:	e032      	b.n	8006d72 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	3214      	adds	r2, #20
 8006d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d16:	1c59      	adds	r1, r3, #1
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	3214      	adds	r2, #20
 8006d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006d22:	e026      	b.n	8006d72 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	3214      	adds	r2, #20
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006d30:	e01f      	b.n	8006d72 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006d32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d006      	beq.n	8006d48 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	3214      	adds	r2, #20
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006d46:	e014      	b.n	8006d72 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8006d4c:	e011      	b.n	8006d72 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006d4e:	4b2b      	ldr	r3, [pc, #172]	; (8006dfc <xTaskGenericNotify+0x1ac>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00c      	beq.n	8006d70 <xTaskGenericNotify+0x120>
        __asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	61bb      	str	r3, [r7, #24]
    }
 8006d68:	bf00      	nop
 8006d6a:	e7fe      	b.n	8006d6a <xTaskGenericNotify+0x11a>
                    break;
 8006d6c:	bf00      	nop
 8006d6e:	e000      	b.n	8006d72 <xTaskGenericNotify+0x122>

                    break;
 8006d70:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d139      	bne.n	8006dee <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fb1e 	bl	80053c0 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	2201      	movs	r2, #1
 8006d8a:	409a      	lsls	r2, r3
 8006d8c:	4b1c      	ldr	r3, [pc, #112]	; (8006e00 <xTaskGenericNotify+0x1b0>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	4a1b      	ldr	r2, [pc, #108]	; (8006e00 <xTaskGenericNotify+0x1b0>)
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4a18      	ldr	r2, [pc, #96]	; (8006e04 <xTaskGenericNotify+0x1b4>)
 8006da4:	441a      	add	r2, r3
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	3304      	adds	r3, #4
 8006daa:	4619      	mov	r1, r3
 8006dac:	4610      	mov	r0, r2
 8006dae:	f7fe faaa 	bl	8005306 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <xTaskGenericNotify+0x180>
        __asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	617b      	str	r3, [r7, #20]
    }
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <xTaskGenericNotify+0x1b8>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d907      	bls.n	8006dee <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006dde:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <xTaskGenericNotify+0x1bc>)
 8006de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006dee:	f000 ff09 	bl	8007c04 <vPortExitCritical>

        return xReturn;
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006df4:	4618      	mov	r0, r3
 8006df6:	3730      	adds	r7, #48	; 0x30
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20000308 	.word	0x20000308
 8006e00:	2000030c 	.word	0x2000030c
 8006e04:	20000230 	.word	0x20000230
 8006e08:	2000022c 	.word	0x2000022c
 8006e0c:	e000ed04 	.word	0xe000ed04

08006e10 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b090      	sub	sp, #64	; 0x40
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10a      	bne.n	8006e3e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006e56:	bf00      	nop
 8006e58:	e7fe      	b.n	8006e58 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e5a:	f000 ff87 	bl	8007d6c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8006e62:	f3ef 8211 	mrs	r2, BASEPRI
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	627a      	str	r2, [r7, #36]	; 0x24
 8006e78:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e7c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8006e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d006      	beq.n	8006e92 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	3214      	adds	r2, #20
 8006e8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e90:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4413      	add	r3, r2
 8006e98:	3354      	adds	r3, #84	; 0x54
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	3354      	adds	r3, #84	; 0x54
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d83b      	bhi.n	8006f2a <xTaskGenericNotifyFromISR+0x11a>
 8006eb2:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <xTaskGenericNotifyFromISR+0xa8>)
 8006eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb8:	08006f49 	.word	0x08006f49
 8006ebc:	08006ecd 	.word	0x08006ecd
 8006ec0:	08006ee9 	.word	0x08006ee9
 8006ec4:	08006f01 	.word	0x08006f01
 8006ec8:	08006f0f 	.word	0x08006f0f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	3214      	adds	r2, #20
 8006ed2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	ea42 0103 	orr.w	r1, r2, r3
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	3214      	adds	r2, #20
 8006ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006ee6:	e032      	b.n	8006f4e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	3214      	adds	r2, #20
 8006eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef2:	1c59      	adds	r1, r3, #1
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	3214      	adds	r2, #20
 8006efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006efe:	e026      	b.n	8006f4e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	3214      	adds	r2, #20
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006f0c:	e01f      	b.n	8006f4e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006f0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d006      	beq.n	8006f24 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	3214      	adds	r2, #20
 8006f1c:	6879      	ldr	r1, [r7, #4]
 8006f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006f22:	e014      	b.n	8006f4e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8006f28:	e011      	b.n	8006f4e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006f2a:	4b33      	ldr	r3, [pc, #204]	; (8006ff8 <xTaskGenericNotifyFromISR+0x1e8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00c      	beq.n	8006f4c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	61fb      	str	r3, [r7, #28]
    }
 8006f44:	bf00      	nop
 8006f46:	e7fe      	b.n	8006f46 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006f48:	bf00      	nop
 8006f4a:	e000      	b.n	8006f4e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006f4c:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006f4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d145      	bne.n	8006fe2 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	61bb      	str	r3, [r7, #24]
    }
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f74:	4b21      	ldr	r3, [pc, #132]	; (8006ffc <xTaskGenericNotifyFromISR+0x1ec>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d11c      	bne.n	8006fb6 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fe fa1d 	bl	80053c0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	409a      	lsls	r2, r3
 8006f8e:	4b1c      	ldr	r3, [pc, #112]	; (8007000 <xTaskGenericNotifyFromISR+0x1f0>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	4a1a      	ldr	r2, [pc, #104]	; (8007000 <xTaskGenericNotifyFromISR+0x1f0>)
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4a17      	ldr	r2, [pc, #92]	; (8007004 <xTaskGenericNotifyFromISR+0x1f4>)
 8006fa6:	441a      	add	r2, r3
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	3304      	adds	r3, #4
 8006fac:	4619      	mov	r1, r3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	f7fe f9a9 	bl	8005306 <vListInsertEnd>
 8006fb4:	e005      	b.n	8006fc2 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	3318      	adds	r3, #24
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4812      	ldr	r0, [pc, #72]	; (8007008 <xTaskGenericNotifyFromISR+0x1f8>)
 8006fbe:	f7fe f9a2 	bl	8005306 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc6:	4b11      	ldr	r3, [pc, #68]	; (800700c <xTaskGenericNotifyFromISR+0x1fc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d908      	bls.n	8006fe2 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd8:	2201      	movs	r2, #1
 8006fda:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006fdc:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <xTaskGenericNotifyFromISR+0x200>)
 8006fde:	2201      	movs	r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe4:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f383 8811 	msr	BASEPRI, r3
    }
 8006fec:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3740      	adds	r7, #64	; 0x40
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000308 	.word	0x20000308
 8006ffc:	2000032c 	.word	0x2000032c
 8007000:	2000030c 	.word	0x2000030c
 8007004:	20000230 	.word	0x20000230
 8007008:	200002c4 	.word	0x200002c4
 800700c:	2000022c 	.word	0x2000022c
 8007010:	20000318 	.word	0x20000318

08007014 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800701e:	4b29      	ldr	r3, [pc, #164]	; (80070c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007024:	4b28      	ldr	r3, [pc, #160]	; (80070c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3304      	adds	r3, #4
 800702a:	4618      	mov	r0, r3
 800702c:	f7fe f9c8 	bl	80053c0 <uxListRemove>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10b      	bne.n	800704e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007036:	4b24      	ldr	r3, [pc, #144]	; (80070c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	2201      	movs	r2, #1
 800703e:	fa02 f303 	lsl.w	r3, r2, r3
 8007042:	43da      	mvns	r2, r3
 8007044:	4b21      	ldr	r3, [pc, #132]	; (80070cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4013      	ands	r3, r2
 800704a:	4a20      	ldr	r2, [pc, #128]	; (80070cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800704c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007054:	d10a      	bne.n	800706c <prvAddCurrentTaskToDelayedList+0x58>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d007      	beq.n	800706c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800705c:	4b1a      	ldr	r3, [pc, #104]	; (80070c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3304      	adds	r3, #4
 8007062:	4619      	mov	r1, r3
 8007064:	481a      	ldr	r0, [pc, #104]	; (80070d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007066:	f7fe f94e 	bl	8005306 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800706a:	e026      	b.n	80070ba <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4413      	add	r3, r2
 8007072:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007074:	4b14      	ldr	r3, [pc, #80]	; (80070c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	429a      	cmp	r2, r3
 8007082:	d209      	bcs.n	8007098 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007084:	4b13      	ldr	r3, [pc, #76]	; (80070d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3304      	adds	r3, #4
 800708e:	4619      	mov	r1, r3
 8007090:	4610      	mov	r0, r2
 8007092:	f7fe f95c 	bl	800534e <vListInsert>
}
 8007096:	e010      	b.n	80070ba <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007098:	4b0f      	ldr	r3, [pc, #60]	; (80070d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	4b0a      	ldr	r3, [pc, #40]	; (80070c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3304      	adds	r3, #4
 80070a2:	4619      	mov	r1, r3
 80070a4:	4610      	mov	r0, r2
 80070a6:	f7fe f952 	bl	800534e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80070aa:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d202      	bcs.n	80070ba <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80070b4:	4a09      	ldr	r2, [pc, #36]	; (80070dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	6013      	str	r3, [r2, #0]
}
 80070ba:	bf00      	nop
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000308 	.word	0x20000308
 80070c8:	2000022c 	.word	0x2000022c
 80070cc:	2000030c 	.word	0x2000030c
 80070d0:	200002f0 	.word	0x200002f0
 80070d4:	200002c0 	.word	0x200002c0
 80070d8:	200002bc 	.word	0x200002bc
 80070dc:	20000324 	.word	0x20000324

080070e0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80070ea:	f000 fb31 	bl	8007750 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80070ee:	4b11      	ldr	r3, [pc, #68]	; (8007134 <xTimerCreateTimerTask+0x54>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00b      	beq.n	800710e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80070f6:	4b10      	ldr	r3, [pc, #64]	; (8007138 <xTimerCreateTimerTask+0x58>)
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	2302      	movs	r3, #2
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	2300      	movs	r3, #0
 8007100:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007104:	490d      	ldr	r1, [pc, #52]	; (800713c <xTimerCreateTimerTask+0x5c>)
 8007106:	480e      	ldr	r0, [pc, #56]	; (8007140 <xTimerCreateTimerTask+0x60>)
 8007108:	f7fe ff38 	bl	8005f7c <xTaskCreate>
 800710c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	603b      	str	r3, [r7, #0]
    }
 8007126:	bf00      	nop
 8007128:	e7fe      	b.n	8007128 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800712a:	687b      	ldr	r3, [r7, #4]
    }
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20000360 	.word	0x20000360
 8007138:	20000364 	.word	0x20000364
 800713c:	0800990c 	.word	0x0800990c
 8007140:	08007331 	.word	0x08007331

08007144 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007144:	b580      	push	{r7, lr}
 8007146:	b088      	sub	sp, #32
 8007148:	af02      	add	r7, sp, #8
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007152:	202c      	movs	r0, #44	; 0x2c
 8007154:	f000 fe4a 	bl	8007dec <pvPortMalloc>
 8007158:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00d      	beq.n	800717c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	68b9      	ldr	r1, [r7, #8]
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 f805 	bl	8007186 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800717c:	697b      	ldr	r3, [r7, #20]
        }
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8007186:	b580      	push	{r7, lr}
 8007188:	b086      	sub	sp, #24
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10a      	bne.n	80071b0 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	617b      	str	r3, [r7, #20]
    }
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d01e      	beq.n	80071f4 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 80071b6:	f000 facb 	bl	8007750 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80071c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	6a3a      	ldr	r2, [r7, #32]
 80071d0:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	3304      	adds	r3, #4
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe f888 	bl	80052ec <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d008      	beq.n	80071f4 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e8:	f043 0304 	orr.w	r3, r3, #4
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80071f4:	bf00      	nop
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08a      	sub	sp, #40	; 0x28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800720a:	2300      	movs	r3, #0
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <xTimerGenericCommand+0x2e>
        __asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	623b      	str	r3, [r7, #32]
    }
 8007226:	bf00      	nop
 8007228:	e7fe      	b.n	8007228 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800722a:	4b1a      	ldr	r3, [pc, #104]	; (8007294 <xTimerGenericCommand+0x98>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d02a      	beq.n	8007288 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b05      	cmp	r3, #5
 8007242:	dc18      	bgt.n	8007276 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007244:	f7ff fbec 	bl	8006a20 <xTaskGetSchedulerState>
 8007248:	4603      	mov	r3, r0
 800724a:	2b02      	cmp	r3, #2
 800724c:	d109      	bne.n	8007262 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800724e:	4b11      	ldr	r3, [pc, #68]	; (8007294 <xTimerGenericCommand+0x98>)
 8007250:	6818      	ldr	r0, [r3, #0]
 8007252:	f107 0114 	add.w	r1, r7, #20
 8007256:	2300      	movs	r3, #0
 8007258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800725a:	f7fe f9c5 	bl	80055e8 <xQueueGenericSend>
 800725e:	6278      	str	r0, [r7, #36]	; 0x24
 8007260:	e012      	b.n	8007288 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007262:	4b0c      	ldr	r3, [pc, #48]	; (8007294 <xTimerGenericCommand+0x98>)
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	f107 0114 	add.w	r1, r7, #20
 800726a:	2300      	movs	r3, #0
 800726c:	2200      	movs	r2, #0
 800726e:	f7fe f9bb 	bl	80055e8 <xQueueGenericSend>
 8007272:	6278      	str	r0, [r7, #36]	; 0x24
 8007274:	e008      	b.n	8007288 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007276:	4b07      	ldr	r3, [pc, #28]	; (8007294 <xTimerGenericCommand+0x98>)
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	f107 0114 	add.w	r1, r7, #20
 800727e:	2300      	movs	r3, #0
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	f7fe faaf 	bl	80057e4 <xQueueGenericSendFromISR>
 8007286:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800728a:	4618      	mov	r0, r3
 800728c:	3728      	adds	r7, #40	; 0x28
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20000360 	.word	0x20000360

08007298 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af02      	add	r7, sp, #8
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a2:	4b22      	ldr	r3, [pc, #136]	; (800732c <prvProcessExpiredTimer+0x94>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	3304      	adds	r3, #4
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fe f885 	bl	80053c0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d022      	beq.n	800730a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	699a      	ldr	r2, [r3, #24]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	18d1      	adds	r1, r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	6978      	ldr	r0, [r7, #20]
 80072d2:	f000 f8d1 	bl	8007478 <prvInsertTimerInActiveList>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01f      	beq.n	800731c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072dc:	2300      	movs	r3, #0
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	2300      	movs	r3, #0
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	2100      	movs	r1, #0
 80072e6:	6978      	ldr	r0, [r7, #20]
 80072e8:	f7ff ff88 	bl	80071fc <xTimerGenericCommand>
 80072ec:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d113      	bne.n	800731c <prvProcessExpiredTimer+0x84>
        __asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	60fb      	str	r3, [r7, #12]
    }
 8007306:	bf00      	nop
 8007308:	e7fe      	b.n	8007308 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007310:	f023 0301 	bic.w	r3, r3, #1
 8007314:	b2da      	uxtb	r2, r3
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	6978      	ldr	r0, [r7, #20]
 8007322:	4798      	blx	r3
    }
 8007324:	bf00      	nop
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	20000358 	.word	0x20000358

08007330 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007338:	f107 0308 	add.w	r3, r7, #8
 800733c:	4618      	mov	r0, r3
 800733e:	f000 f857 	bl	80073f0 <prvGetNextExpireTime>
 8007342:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	4619      	mov	r1, r3
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 f803 	bl	8007354 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800734e:	f000 f8d5 	bl	80074fc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007352:	e7f1      	b.n	8007338 <prvTimerTask+0x8>

08007354 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800735e:	f7fe ffa5 	bl	80062ac <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007362:	f107 0308 	add.w	r3, r7, #8
 8007366:	4618      	mov	r0, r3
 8007368:	f000 f866 	bl	8007438 <prvSampleTimeNow>
 800736c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d130      	bne.n	80073d6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10a      	bne.n	8007390 <prvProcessTimerOrBlockTask+0x3c>
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	429a      	cmp	r2, r3
 8007380:	d806      	bhi.n	8007390 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007382:	f7fe ffa1 	bl	80062c8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007386:	68f9      	ldr	r1, [r7, #12]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff ff85 	bl	8007298 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800738e:	e024      	b.n	80073da <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d008      	beq.n	80073a8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007396:	4b13      	ldr	r3, [pc, #76]	; (80073e4 <prvProcessTimerOrBlockTask+0x90>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <prvProcessTimerOrBlockTask+0x50>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e000      	b.n	80073a6 <prvProcessTimerOrBlockTask+0x52>
 80073a4:	2300      	movs	r3, #0
 80073a6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073a8:	4b0f      	ldr	r3, [pc, #60]	; (80073e8 <prvProcessTimerOrBlockTask+0x94>)
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	4619      	mov	r1, r3
 80073b6:	f7fe fdad 	bl	8005f14 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80073ba:	f7fe ff85 	bl	80062c8 <xTaskResumeAll>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10a      	bne.n	80073da <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80073c4:	4b09      	ldr	r3, [pc, #36]	; (80073ec <prvProcessTimerOrBlockTask+0x98>)
 80073c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	f3bf 8f6f 	isb	sy
    }
 80073d4:	e001      	b.n	80073da <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80073d6:	f7fe ff77 	bl	80062c8 <xTaskResumeAll>
    }
 80073da:	bf00      	nop
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	2000035c 	.word	0x2000035c
 80073e8:	20000360 	.word	0x20000360
 80073ec:	e000ed04 	.word	0xe000ed04

080073f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073f8:	4b0e      	ldr	r3, [pc, #56]	; (8007434 <prvGetNextExpireTime+0x44>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <prvGetNextExpireTime+0x16>
 8007402:	2201      	movs	r2, #1
 8007404:	e000      	b.n	8007408 <prvGetNextExpireTime+0x18>
 8007406:	2200      	movs	r2, #0
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d105      	bne.n	8007420 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007414:	4b07      	ldr	r3, [pc, #28]	; (8007434 <prvGetNextExpireTime+0x44>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	e001      	b.n	8007424 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007424:	68fb      	ldr	r3, [r7, #12]
    }
 8007426:	4618      	mov	r0, r3
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	20000358 	.word	0x20000358

08007438 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007440:	f7fe ffde 	bl	8006400 <xTaskGetTickCount>
 8007444:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007446:	4b0b      	ldr	r3, [pc, #44]	; (8007474 <prvSampleTimeNow+0x3c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	429a      	cmp	r2, r3
 800744e:	d205      	bcs.n	800745c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007450:	f000 f91a 	bl	8007688 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	e002      	b.n	8007462 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007462:	4a04      	ldr	r2, [pc, #16]	; (8007474 <prvSampleTimeNow+0x3c>)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007468:	68fb      	ldr	r3, [r7, #12]
    }
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000368 	.word	0x20000368

08007478 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	429a      	cmp	r2, r3
 800749c:	d812      	bhi.n	80074c4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	1ad2      	subs	r2, r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d302      	bcc.n	80074b2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80074ac:	2301      	movs	r3, #1
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	e01b      	b.n	80074ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074b2:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <prvInsertTimerInActiveList+0x7c>)
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3304      	adds	r3, #4
 80074ba:	4619      	mov	r1, r3
 80074bc:	4610      	mov	r0, r2
 80074be:	f7fd ff46 	bl	800534e <vListInsert>
 80074c2:	e012      	b.n	80074ea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d206      	bcs.n	80074da <prvInsertTimerInActiveList+0x62>
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d302      	bcc.n	80074da <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80074d4:	2301      	movs	r3, #1
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	e007      	b.n	80074ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074da:	4b07      	ldr	r3, [pc, #28]	; (80074f8 <prvInsertTimerInActiveList+0x80>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3304      	adds	r3, #4
 80074e2:	4619      	mov	r1, r3
 80074e4:	4610      	mov	r0, r2
 80074e6:	f7fd ff32 	bl	800534e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80074ea:	697b      	ldr	r3, [r7, #20]
    }
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	2000035c 	.word	0x2000035c
 80074f8:	20000358 	.word	0x20000358

080074fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08c      	sub	sp, #48	; 0x30
 8007500:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007502:	e0ae      	b.n	8007662 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f2c0 80aa 	blt.w	8007660 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d004      	beq.n	8007522 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	3304      	adds	r3, #4
 800751c:	4618      	mov	r0, r3
 800751e:	f7fd ff4f 	bl	80053c0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007522:	1d3b      	adds	r3, r7, #4
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff ff87 	bl	8007438 <prvSampleTimeNow>
 800752a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b09      	cmp	r3, #9
 8007530:	f200 8097 	bhi.w	8007662 <prvProcessReceivedCommands+0x166>
 8007534:	a201      	add	r2, pc, #4	; (adr r2, 800753c <prvProcessReceivedCommands+0x40>)
 8007536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753a:	bf00      	nop
 800753c:	08007565 	.word	0x08007565
 8007540:	08007565 	.word	0x08007565
 8007544:	08007565 	.word	0x08007565
 8007548:	080075d9 	.word	0x080075d9
 800754c:	080075ed 	.word	0x080075ed
 8007550:	08007637 	.word	0x08007637
 8007554:	08007565 	.word	0x08007565
 8007558:	08007565 	.word	0x08007565
 800755c:	080075d9 	.word	0x080075d9
 8007560:	080075ed 	.word	0x080075ed
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800756a:	f043 0301 	orr.w	r3, r3, #1
 800756e:	b2da      	uxtb	r2, r3
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	18d1      	adds	r1, r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6a3a      	ldr	r2, [r7, #32]
 8007582:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007584:	f7ff ff78 	bl	8007478 <prvInsertTimerInActiveList>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d069      	beq.n	8007662 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007594:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d05e      	beq.n	8007662 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	441a      	add	r2, r3
 80075ac:	2300      	movs	r3, #0
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	2300      	movs	r3, #0
 80075b2:	2100      	movs	r1, #0
 80075b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075b6:	f7ff fe21 	bl	80071fc <xTimerGenericCommand>
 80075ba:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d14f      	bne.n	8007662 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	61bb      	str	r3, [r7, #24]
    }
 80075d4:	bf00      	nop
 80075d6:	e7fe      	b.n	80075d6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075de:	f023 0301 	bic.w	r3, r3, #1
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80075ea:	e03a      	b.n	8007662 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075f2:	f043 0301 	orr.w	r3, r3, #1
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	617b      	str	r3, [r7, #20]
    }
 800761e:	bf00      	nop
 8007620:	e7fe      	b.n	8007620 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	699a      	ldr	r2, [r3, #24]
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	18d1      	adds	r1, r2, r3
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	6a3a      	ldr	r2, [r7, #32]
 800762e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007630:	f7ff ff22 	bl	8007478 <prvInsertTimerInActiveList>
                        break;
 8007634:	e015      	b.n	8007662 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8007644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007646:	f000 fcb1 	bl	8007fac <vPortFree>
 800764a:	e00a      	b.n	8007662 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007652:	f023 0301 	bic.w	r3, r3, #1
 8007656:	b2da      	uxtb	r2, r3
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800765e:	e000      	b.n	8007662 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007660:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007662:	4b08      	ldr	r3, [pc, #32]	; (8007684 <prvProcessReceivedCommands+0x188>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f107 0108 	add.w	r1, r7, #8
 800766a:	2200      	movs	r2, #0
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe f963 	bl	8005938 <xQueueReceive>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	f47f af45 	bne.w	8007504 <prvProcessReceivedCommands+0x8>
        }
    }
 800767a:	bf00      	nop
 800767c:	bf00      	nop
 800767e:	3728      	adds	r7, #40	; 0x28
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20000360 	.word	0x20000360

08007688 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800768e:	e048      	b.n	8007722 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007690:	4b2d      	ldr	r3, [pc, #180]	; (8007748 <prvSwitchTimerLists+0xc0>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800769a:	4b2b      	ldr	r3, [pc, #172]	; (8007748 <prvSwitchTimerLists+0xc0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3304      	adds	r3, #4
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fd fe89 	bl	80053c0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d02e      	beq.n	8007722 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	4413      	add	r3, r2
 80076cc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d90e      	bls.n	80076f4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076e2:	4b19      	ldr	r3, [pc, #100]	; (8007748 <prvSwitchTimerLists+0xc0>)
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3304      	adds	r3, #4
 80076ea:	4619      	mov	r1, r3
 80076ec:	4610      	mov	r0, r2
 80076ee:	f7fd fe2e 	bl	800534e <vListInsert>
 80076f2:	e016      	b.n	8007722 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076f4:	2300      	movs	r3, #0
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	2300      	movs	r3, #0
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	2100      	movs	r1, #0
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f7ff fd7c 	bl	80071fc <xTimerGenericCommand>
 8007704:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	603b      	str	r3, [r7, #0]
    }
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007722:	4b09      	ldr	r3, [pc, #36]	; (8007748 <prvSwitchTimerLists+0xc0>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1b1      	bne.n	8007690 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <prvSwitchTimerLists+0xc0>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007732:	4b06      	ldr	r3, [pc, #24]	; (800774c <prvSwitchTimerLists+0xc4>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a04      	ldr	r2, [pc, #16]	; (8007748 <prvSwitchTimerLists+0xc0>)
 8007738:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800773a:	4a04      	ldr	r2, [pc, #16]	; (800774c <prvSwitchTimerLists+0xc4>)
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	6013      	str	r3, [r2, #0]
    }
 8007740:	bf00      	nop
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	20000358 	.word	0x20000358
 800774c:	2000035c 	.word	0x2000035c

08007750 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007750:	b580      	push	{r7, lr}
 8007752:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007754:	f000 fa26 	bl	8007ba4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007758:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <prvCheckForValidListAndQueue+0x54>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d11d      	bne.n	800779c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007760:	4811      	ldr	r0, [pc, #68]	; (80077a8 <prvCheckForValidListAndQueue+0x58>)
 8007762:	f7fd fda3 	bl	80052ac <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007766:	4811      	ldr	r0, [pc, #68]	; (80077ac <prvCheckForValidListAndQueue+0x5c>)
 8007768:	f7fd fda0 	bl	80052ac <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800776c:	4b10      	ldr	r3, [pc, #64]	; (80077b0 <prvCheckForValidListAndQueue+0x60>)
 800776e:	4a0e      	ldr	r2, [pc, #56]	; (80077a8 <prvCheckForValidListAndQueue+0x58>)
 8007770:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007772:	4b10      	ldr	r3, [pc, #64]	; (80077b4 <prvCheckForValidListAndQueue+0x64>)
 8007774:	4a0d      	ldr	r2, [pc, #52]	; (80077ac <prvCheckForValidListAndQueue+0x5c>)
 8007776:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007778:	2200      	movs	r2, #0
 800777a:	210c      	movs	r1, #12
 800777c:	200a      	movs	r0, #10
 800777e:	f7fd feb1 	bl	80054e4 <xQueueGenericCreate>
 8007782:	4603      	mov	r3, r0
 8007784:	4a07      	ldr	r2, [pc, #28]	; (80077a4 <prvCheckForValidListAndQueue+0x54>)
 8007786:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007788:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <prvCheckForValidListAndQueue+0x54>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007790:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <prvCheckForValidListAndQueue+0x54>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4908      	ldr	r1, [pc, #32]	; (80077b8 <prvCheckForValidListAndQueue+0x68>)
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe fb92 	bl	8005ec0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800779c:	f000 fa32 	bl	8007c04 <vPortExitCritical>
    }
 80077a0:	bf00      	nop
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20000360 	.word	0x20000360
 80077a8:	20000330 	.word	0x20000330
 80077ac:	20000344 	.word	0x20000344
 80077b0:	20000358 	.word	0x20000358
 80077b4:	2000035c 	.word	0x2000035c
 80077b8:	08009914 	.word	0x08009914

080077bc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <xTimerIsTimerActive+0x28>
        __asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	60fb      	str	r3, [r7, #12]
    }
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 80077e4:	f000 f9de 	bl	8007ba4 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d102      	bne.n	80077fc <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 80077f6:	2300      	movs	r3, #0
 80077f8:	617b      	str	r3, [r7, #20]
 80077fa:	e001      	b.n	8007800 <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 80077fc:	2301      	movs	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8007800:	f000 fa00 	bl	8007c04 <vPortExitCritical>

        return xReturn;
 8007804:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 800780e:	b580      	push	{r7, lr}
 8007810:	b086      	sub	sp, #24
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10a      	bne.n	8007836 <pvTimerGetTimerID+0x28>
        __asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	60fb      	str	r3, [r7, #12]
    }
 8007832:	bf00      	nop
 8007834:	e7fe      	b.n	8007834 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8007836:	f000 f9b5 	bl	8007ba4 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007840:	f000 f9e0 	bl	8007c04 <vPortExitCritical>

        return pvReturn;
 8007844:	693b      	ldr	r3, [r7, #16]
    }
 8007846:	4618      	mov	r0, r3
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3b04      	subs	r3, #4
 8007860:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007868:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3b04      	subs	r3, #4
 800786e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f023 0201 	bic.w	r2, r3, #1
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3b04      	subs	r3, #4
 800787e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007880:	4a0c      	ldr	r2, [pc, #48]	; (80078b4 <pxPortInitialiseStack+0x64>)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3b14      	subs	r3, #20
 800788a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3b04      	subs	r3, #4
 8007896:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f06f 0202 	mvn.w	r2, #2
 800789e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3b20      	subs	r3, #32
 80078a4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80078a6:	68fb      	ldr	r3, [r7, #12]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	080078b9 	.word	0x080078b9

080078b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80078c2:	4b12      	ldr	r3, [pc, #72]	; (800790c <prvTaskExitError+0x54>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ca:	d00a      	beq.n	80078e2 <prvTaskExitError+0x2a>
        __asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	60fb      	str	r3, [r7, #12]
    }
 80078de:	bf00      	nop
 80078e0:	e7fe      	b.n	80078e0 <prvTaskExitError+0x28>
        __asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	60bb      	str	r3, [r7, #8]
    }
 80078f4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80078f6:	bf00      	nop
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0fc      	beq.n	80078f8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80078fe:	bf00      	nop
 8007900:	bf00      	nop
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	20000024 	.word	0x20000024

08007910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007910:	4b07      	ldr	r3, [pc, #28]	; (8007930 <pxCurrentTCBConst2>)
 8007912:	6819      	ldr	r1, [r3, #0]
 8007914:	6808      	ldr	r0, [r1, #0]
 8007916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791a:	f380 8809 	msr	PSP, r0
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f380 8811 	msr	BASEPRI, r0
 800792a:	4770      	bx	lr
 800792c:	f3af 8000 	nop.w

08007930 <pxCurrentTCBConst2>:
 8007930:	2000022c 	.word	0x2000022c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop

08007938 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007938:	4808      	ldr	r0, [pc, #32]	; (800795c <prvPortStartFirstTask+0x24>)
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	6800      	ldr	r0, [r0, #0]
 800793e:	f380 8808 	msr	MSP, r0
 8007942:	f04f 0000 	mov.w	r0, #0
 8007946:	f380 8814 	msr	CONTROL, r0
 800794a:	b662      	cpsie	i
 800794c:	b661      	cpsie	f
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	df00      	svc	0
 8007958:	bf00      	nop
 800795a:	0000      	.short	0x0000
 800795c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007960:	bf00      	nop
 8007962:	bf00      	nop

08007964 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800796a:	4b46      	ldr	r3, [pc, #280]	; (8007a84 <xPortStartScheduler+0x120>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a46      	ldr	r2, [pc, #280]	; (8007a88 <xPortStartScheduler+0x124>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d10a      	bne.n	800798a <xPortStartScheduler+0x26>
        __asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	613b      	str	r3, [r7, #16]
    }
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800798a:	4b3e      	ldr	r3, [pc, #248]	; (8007a84 <xPortStartScheduler+0x120>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a3f      	ldr	r2, [pc, #252]	; (8007a8c <xPortStartScheduler+0x128>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d10a      	bne.n	80079aa <xPortStartScheduler+0x46>
        __asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	60fb      	str	r3, [r7, #12]
    }
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079aa:	4b39      	ldr	r3, [pc, #228]	; (8007a90 <xPortStartScheduler+0x12c>)
 80079ac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	22ff      	movs	r2, #255	; 0xff
 80079ba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	4b31      	ldr	r3, [pc, #196]	; (8007a94 <xPortStartScheduler+0x130>)
 80079d0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079d2:	4b31      	ldr	r3, [pc, #196]	; (8007a98 <xPortStartScheduler+0x134>)
 80079d4:	2207      	movs	r2, #7
 80079d6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079d8:	e009      	b.n	80079ee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80079da:	4b2f      	ldr	r3, [pc, #188]	; (8007a98 <xPortStartScheduler+0x134>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3b01      	subs	r3, #1
 80079e0:	4a2d      	ldr	r2, [pc, #180]	; (8007a98 <xPortStartScheduler+0x134>)
 80079e2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f6:	2b80      	cmp	r3, #128	; 0x80
 80079f8:	d0ef      	beq.n	80079da <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079fa:	4b27      	ldr	r3, [pc, #156]	; (8007a98 <xPortStartScheduler+0x134>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f1c3 0307 	rsb	r3, r3, #7
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d00a      	beq.n	8007a1c <xPortStartScheduler+0xb8>
        __asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	60bb      	str	r3, [r7, #8]
    }
 8007a18:	bf00      	nop
 8007a1a:	e7fe      	b.n	8007a1a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a1c:	4b1e      	ldr	r3, [pc, #120]	; (8007a98 <xPortStartScheduler+0x134>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	4a1d      	ldr	r2, [pc, #116]	; (8007a98 <xPortStartScheduler+0x134>)
 8007a24:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a26:	4b1c      	ldr	r3, [pc, #112]	; (8007a98 <xPortStartScheduler+0x134>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a2e:	4a1a      	ldr	r2, [pc, #104]	; (8007a98 <xPortStartScheduler+0x134>)
 8007a30:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007a3a:	4b18      	ldr	r3, [pc, #96]	; (8007a9c <xPortStartScheduler+0x138>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a17      	ldr	r2, [pc, #92]	; (8007a9c <xPortStartScheduler+0x138>)
 8007a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a44:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007a46:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <xPortStartScheduler+0x138>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a14      	ldr	r2, [pc, #80]	; (8007a9c <xPortStartScheduler+0x138>)
 8007a4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a50:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007a52:	f000 f95b 	bl	8007d0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007a56:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <xPortStartScheduler+0x13c>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007a5c:	f000 f97a 	bl	8007d54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a60:	4b10      	ldr	r3, [pc, #64]	; (8007aa4 <xPortStartScheduler+0x140>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a0f      	ldr	r2, [pc, #60]	; (8007aa4 <xPortStartScheduler+0x140>)
 8007a66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a6a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007a6c:	f7ff ff64 	bl	8007938 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007a70:	f7fe fd8e 	bl	8006590 <vTaskSwitchContext>
    prvTaskExitError();
 8007a74:	f7ff ff20 	bl	80078b8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	e000ed00 	.word	0xe000ed00
 8007a88:	410fc271 	.word	0x410fc271
 8007a8c:	410fc270 	.word	0x410fc270
 8007a90:	e000e400 	.word	0xe000e400
 8007a94:	2000036c 	.word	0x2000036c
 8007a98:	20000370 	.word	0x20000370
 8007a9c:	e000ed20 	.word	0xe000ed20
 8007aa0:	20000024 	.word	0x20000024
 8007aa4:	e000ef34 	.word	0xe000ef34

08007aa8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007aae:	4b37      	ldr	r3, [pc, #220]	; (8007b8c <vInitPrioGroupValue+0xe4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a37      	ldr	r2, [pc, #220]	; (8007b90 <vInitPrioGroupValue+0xe8>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d10a      	bne.n	8007ace <vInitPrioGroupValue+0x26>
        __asm volatile
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	613b      	str	r3, [r7, #16]
    }
 8007aca:	bf00      	nop
 8007acc:	e7fe      	b.n	8007acc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ace:	4b2f      	ldr	r3, [pc, #188]	; (8007b8c <vInitPrioGroupValue+0xe4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a30      	ldr	r2, [pc, #192]	; (8007b94 <vInitPrioGroupValue+0xec>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d10a      	bne.n	8007aee <vInitPrioGroupValue+0x46>
        __asm volatile
 8007ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	60fb      	str	r3, [r7, #12]
    }
 8007aea:	bf00      	nop
 8007aec:	e7fe      	b.n	8007aec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007aee:	4b2a      	ldr	r3, [pc, #168]	; (8007b98 <vInitPrioGroupValue+0xf0>)
 8007af0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	22ff      	movs	r2, #255	; 0xff
 8007afe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b08:	78fb      	ldrb	r3, [r7, #3]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	4b22      	ldr	r3, [pc, #136]	; (8007b9c <vInitPrioGroupValue+0xf4>)
 8007b14:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b16:	4b22      	ldr	r3, [pc, #136]	; (8007ba0 <vInitPrioGroupValue+0xf8>)
 8007b18:	2207      	movs	r2, #7
 8007b1a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b1c:	e009      	b.n	8007b32 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8007b1e:	4b20      	ldr	r3, [pc, #128]	; (8007ba0 <vInitPrioGroupValue+0xf8>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	4a1e      	ldr	r2, [pc, #120]	; (8007ba0 <vInitPrioGroupValue+0xf8>)
 8007b26:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b32:	78fb      	ldrb	r3, [r7, #3]
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b3a:	2b80      	cmp	r3, #128	; 0x80
 8007b3c:	d0ef      	beq.n	8007b1e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b3e:	4b18      	ldr	r3, [pc, #96]	; (8007ba0 <vInitPrioGroupValue+0xf8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f1c3 0307 	rsb	r3, r3, #7
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d00a      	beq.n	8007b60 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	60bb      	str	r3, [r7, #8]
    }
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b60:	4b0f      	ldr	r3, [pc, #60]	; (8007ba0 <vInitPrioGroupValue+0xf8>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	021b      	lsls	r3, r3, #8
 8007b66:	4a0e      	ldr	r2, [pc, #56]	; (8007ba0 <vInitPrioGroupValue+0xf8>)
 8007b68:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ba0 <vInitPrioGroupValue+0xf8>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b72:	4a0b      	ldr	r2, [pc, #44]	; (8007ba0 <vInitPrioGroupValue+0xf8>)
 8007b74:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8007b7e:	bf00      	nop
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	e000ed00 	.word	0xe000ed00
 8007b90:	410fc271 	.word	0x410fc271
 8007b94:	410fc270 	.word	0x410fc270
 8007b98:	e000e400 	.word	0xe000e400
 8007b9c:	2000036c 	.word	0x2000036c
 8007ba0:	20000370 	.word	0x20000370

08007ba4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
        __asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	607b      	str	r3, [r7, #4]
    }
 8007bbc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007bbe:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <vPortEnterCritical+0x58>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	4a0d      	ldr	r2, [pc, #52]	; (8007bfc <vPortEnterCritical+0x58>)
 8007bc6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007bc8:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <vPortEnterCritical+0x58>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d10f      	bne.n	8007bf0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <vPortEnterCritical+0x5c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <vPortEnterCritical+0x4c>
        __asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	603b      	str	r3, [r7, #0]
    }
 8007bec:	bf00      	nop
 8007bee:	e7fe      	b.n	8007bee <vPortEnterCritical+0x4a>
    }
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	20000024 	.word	0x20000024
 8007c00:	e000ed04 	.word	0xe000ed04

08007c04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007c0a:	4b12      	ldr	r3, [pc, #72]	; (8007c54 <vPortExitCritical+0x50>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10a      	bne.n	8007c28 <vPortExitCritical+0x24>
        __asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	607b      	str	r3, [r7, #4]
    }
 8007c24:	bf00      	nop
 8007c26:	e7fe      	b.n	8007c26 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007c28:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <vPortExitCritical+0x50>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	4a09      	ldr	r2, [pc, #36]	; (8007c54 <vPortExitCritical+0x50>)
 8007c30:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007c32:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <vPortExitCritical+0x50>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d105      	bne.n	8007c46 <vPortExitCritical+0x42>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	f383 8811 	msr	BASEPRI, r3
    }
 8007c44:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20000024 	.word	0x20000024
	...

08007c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007c60:	f3ef 8009 	mrs	r0, PSP
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	4b15      	ldr	r3, [pc, #84]	; (8007cc0 <pxCurrentTCBConst>)
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	f01e 0f10 	tst.w	lr, #16
 8007c70:	bf08      	it	eq
 8007c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7a:	6010      	str	r0, [r2, #0]
 8007c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c84:	f380 8811 	msr	BASEPRI, r0
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f7fe fc7e 	bl	8006590 <vTaskSwitchContext>
 8007c94:	f04f 0000 	mov.w	r0, #0
 8007c98:	f380 8811 	msr	BASEPRI, r0
 8007c9c:	bc09      	pop	{r0, r3}
 8007c9e:	6819      	ldr	r1, [r3, #0]
 8007ca0:	6808      	ldr	r0, [r1, #0]
 8007ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca6:	f01e 0f10 	tst.w	lr, #16
 8007caa:	bf08      	it	eq
 8007cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cb0:	f380 8809 	msr	PSP, r0
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	f3af 8000 	nop.w

08007cc0 <pxCurrentTCBConst>:
 8007cc0:	2000022c 	.word	0x2000022c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop

08007cc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
        __asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	607b      	str	r3, [r7, #4]
    }
 8007ce0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007ce2:	f7fe fb9d 	bl	8006420 <xTaskIncrementTick>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cec:	4b06      	ldr	r3, [pc, #24]	; (8007d08 <SysTick_Handler+0x40>)
 8007cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	f383 8811 	msr	BASEPRI, r3
    }
 8007cfe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d10:	4b0b      	ldr	r3, [pc, #44]	; (8007d40 <vPortSetupTimerInterrupt+0x34>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d16:	4b0b      	ldr	r3, [pc, #44]	; (8007d44 <vPortSetupTimerInterrupt+0x38>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d1c:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <vPortSetupTimerInterrupt+0x3c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a0a      	ldr	r2, [pc, #40]	; (8007d4c <vPortSetupTimerInterrupt+0x40>)
 8007d22:	fba2 2303 	umull	r2, r3, r2, r3
 8007d26:	099b      	lsrs	r3, r3, #6
 8007d28:	4a09      	ldr	r2, [pc, #36]	; (8007d50 <vPortSetupTimerInterrupt+0x44>)
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d2e:	4b04      	ldr	r3, [pc, #16]	; (8007d40 <vPortSetupTimerInterrupt+0x34>)
 8007d30:	2207      	movs	r2, #7
 8007d32:	601a      	str	r2, [r3, #0]
}
 8007d34:	bf00      	nop
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	e000e010 	.word	0xe000e010
 8007d44:	e000e018 	.word	0xe000e018
 8007d48:	20000010 	.word	0x20000010
 8007d4c:	10624dd3 	.word	0x10624dd3
 8007d50:	e000e014 	.word	0xe000e014

08007d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007d54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d64 <vPortEnableVFP+0x10>
 8007d58:	6801      	ldr	r1, [r0, #0]
 8007d5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d5e:	6001      	str	r1, [r0, #0]
 8007d60:	4770      	bx	lr
 8007d62:	0000      	.short	0x0000
 8007d64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop

08007d6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007d72:	f3ef 8305 	mrs	r3, IPSR
 8007d76:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b0f      	cmp	r3, #15
 8007d7c:	d914      	bls.n	8007da8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d7e:	4a17      	ldr	r2, [pc, #92]	; (8007ddc <vPortValidateInterruptPriority+0x70>)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d88:	4b15      	ldr	r3, [pc, #84]	; (8007de0 <vPortValidateInterruptPriority+0x74>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	7afa      	ldrb	r2, [r7, #11]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d20a      	bcs.n	8007da8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	607b      	str	r3, [r7, #4]
    }
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007da8:	4b0e      	ldr	r3, [pc, #56]	; (8007de4 <vPortValidateInterruptPriority+0x78>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007db0:	4b0d      	ldr	r3, [pc, #52]	; (8007de8 <vPortValidateInterruptPriority+0x7c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d90a      	bls.n	8007dce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	603b      	str	r3, [r7, #0]
    }
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <vPortValidateInterruptPriority+0x60>
    }
 8007dce:	bf00      	nop
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	e000e3f0 	.word	0xe000e3f0
 8007de0:	2000036c 	.word	0x2000036c
 8007de4:	e000ed0c 	.word	0xe000ed0c
 8007de8:	20000370 	.word	0x20000370

08007dec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08a      	sub	sp, #40	; 0x28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007df4:	2300      	movs	r3, #0
 8007df6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007df8:	f7fe fa58 	bl	80062ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007dfc:	4b65      	ldr	r3, [pc, #404]	; (8007f94 <pvPortMalloc+0x1a8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007e04:	f000 f934 	bl	8008070 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e08:	4b63      	ldr	r3, [pc, #396]	; (8007f98 <pvPortMalloc+0x1ac>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f040 80a7 	bne.w	8007f64 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d02d      	beq.n	8007e78 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007e1c:	2208      	movs	r2, #8
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d227      	bcs.n	8007e78 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007e28:	2208      	movs	r2, #8
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d021      	beq.n	8007e7e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f023 0307 	bic.w	r3, r3, #7
 8007e40:	3308      	adds	r3, #8
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d214      	bcs.n	8007e72 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f023 0307 	bic.w	r3, r3, #7
 8007e4e:	3308      	adds	r3, #8
 8007e50:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f003 0307 	and.w	r3, r3, #7
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d010      	beq.n	8007e7e <pvPortMalloc+0x92>
        __asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	617b      	str	r3, [r7, #20]
    }
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e76:	e002      	b.n	8007e7e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	607b      	str	r3, [r7, #4]
 8007e7c:	e000      	b.n	8007e80 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e7e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d06e      	beq.n	8007f64 <pvPortMalloc+0x178>
 8007e86:	4b45      	ldr	r3, [pc, #276]	; (8007f9c <pvPortMalloc+0x1b0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d869      	bhi.n	8007f64 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007e90:	4b43      	ldr	r3, [pc, #268]	; (8007fa0 <pvPortMalloc+0x1b4>)
 8007e92:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007e94:	4b42      	ldr	r3, [pc, #264]	; (8007fa0 <pvPortMalloc+0x1b4>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e9a:	e004      	b.n	8007ea6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d903      	bls.n	8007eb8 <pvPortMalloc+0xcc>
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1f1      	bne.n	8007e9c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007eb8:	4b36      	ldr	r3, [pc, #216]	; (8007f94 <pvPortMalloc+0x1a8>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d050      	beq.n	8007f64 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2208      	movs	r2, #8
 8007ec8:	4413      	add	r3, r2
 8007eca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	1ad2      	subs	r2, r2, r3
 8007edc:	2308      	movs	r3, #8
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d91f      	bls.n	8007f24 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4413      	add	r3, r2
 8007eea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00a      	beq.n	8007f0c <pvPortMalloc+0x120>
        __asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	613b      	str	r3, [r7, #16]
    }
 8007f08:	bf00      	nop
 8007f0a:	e7fe      	b.n	8007f0a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	1ad2      	subs	r2, r2, r3
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f1e:	69b8      	ldr	r0, [r7, #24]
 8007f20:	f000 f908 	bl	8008134 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f24:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <pvPortMalloc+0x1b0>)
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	4a1b      	ldr	r2, [pc, #108]	; (8007f9c <pvPortMalloc+0x1b0>)
 8007f30:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f32:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <pvPortMalloc+0x1b0>)
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	4b1b      	ldr	r3, [pc, #108]	; (8007fa4 <pvPortMalloc+0x1b8>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d203      	bcs.n	8007f46 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f3e:	4b17      	ldr	r3, [pc, #92]	; (8007f9c <pvPortMalloc+0x1b0>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a18      	ldr	r2, [pc, #96]	; (8007fa4 <pvPortMalloc+0x1b8>)
 8007f44:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	4b13      	ldr	r3, [pc, #76]	; (8007f98 <pvPortMalloc+0x1ac>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	2200      	movs	r2, #0
 8007f58:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007f5a:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <pvPortMalloc+0x1bc>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	4a11      	ldr	r2, [pc, #68]	; (8007fa8 <pvPortMalloc+0x1bc>)
 8007f62:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007f64:	f7fe f9b0 	bl	80062c8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <pvPortMalloc+0x19c>
        __asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	60fb      	str	r3, [r7, #12]
    }
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <pvPortMalloc+0x19a>
    return pvReturn;
 8007f88:	69fb      	ldr	r3, [r7, #28]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3728      	adds	r7, #40	; 0x28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	2001937c 	.word	0x2001937c
 8007f98:	20019390 	.word	0x20019390
 8007f9c:	20019380 	.word	0x20019380
 8007fa0:	20019374 	.word	0x20019374
 8007fa4:	20019384 	.word	0x20019384
 8007fa8:	20019388 	.word	0x20019388

08007fac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d04d      	beq.n	800805a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007fbe:	2308      	movs	r3, #8
 8007fc0:	425b      	negs	r3, r3
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	4b24      	ldr	r3, [pc, #144]	; (8008064 <vPortFree+0xb8>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <vPortFree+0x44>
        __asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	60fb      	str	r3, [r7, #12]
    }
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00a      	beq.n	800800e <vPortFree+0x62>
        __asm volatile
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	60bb      	str	r3, [r7, #8]
    }
 800800a:	bf00      	nop
 800800c:	e7fe      	b.n	800800c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	4b14      	ldr	r3, [pc, #80]	; (8008064 <vPortFree+0xb8>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4013      	ands	r3, r2
 8008018:	2b00      	cmp	r3, #0
 800801a:	d01e      	beq.n	800805a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d11a      	bne.n	800805a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	4b0e      	ldr	r3, [pc, #56]	; (8008064 <vPortFree+0xb8>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	43db      	mvns	r3, r3
 800802e:	401a      	ands	r2, r3
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008034:	f7fe f93a 	bl	80062ac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	4b0a      	ldr	r3, [pc, #40]	; (8008068 <vPortFree+0xbc>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4413      	add	r3, r2
 8008042:	4a09      	ldr	r2, [pc, #36]	; (8008068 <vPortFree+0xbc>)
 8008044:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008046:	6938      	ldr	r0, [r7, #16]
 8008048:	f000 f874 	bl	8008134 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800804c:	4b07      	ldr	r3, [pc, #28]	; (800806c <vPortFree+0xc0>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3301      	adds	r3, #1
 8008052:	4a06      	ldr	r2, [pc, #24]	; (800806c <vPortFree+0xc0>)
 8008054:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008056:	f7fe f937 	bl	80062c8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800805a:	bf00      	nop
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20019390 	.word	0x20019390
 8008068:	20019380 	.word	0x20019380
 800806c:	2001938c 	.word	0x2001938c

08008070 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008076:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800807a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800807c:	4b27      	ldr	r3, [pc, #156]	; (800811c <prvHeapInit+0xac>)
 800807e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00c      	beq.n	80080a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3307      	adds	r3, #7
 800808e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0307 	bic.w	r3, r3, #7
 8008096:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	4a1f      	ldr	r2, [pc, #124]	; (800811c <prvHeapInit+0xac>)
 80080a0:	4413      	add	r3, r2
 80080a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080a8:	4a1d      	ldr	r2, [pc, #116]	; (8008120 <prvHeapInit+0xb0>)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80080ae:	4b1c      	ldr	r3, [pc, #112]	; (8008120 <prvHeapInit+0xb0>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	4413      	add	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80080bc:	2208      	movs	r2, #8
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	1a9b      	subs	r3, r3, r2
 80080c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f023 0307 	bic.w	r3, r3, #7
 80080ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4a15      	ldr	r2, [pc, #84]	; (8008124 <prvHeapInit+0xb4>)
 80080d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80080d2:	4b14      	ldr	r3, [pc, #80]	; (8008124 <prvHeapInit+0xb4>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2200      	movs	r2, #0
 80080d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80080da:	4b12      	ldr	r3, [pc, #72]	; (8008124 <prvHeapInit+0xb4>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2200      	movs	r2, #0
 80080e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	1ad2      	subs	r2, r2, r3
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080f0:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <prvHeapInit+0xb4>)
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	4a0a      	ldr	r2, [pc, #40]	; (8008128 <prvHeapInit+0xb8>)
 80080fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	4a09      	ldr	r2, [pc, #36]	; (800812c <prvHeapInit+0xbc>)
 8008106:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008108:	4b09      	ldr	r3, [pc, #36]	; (8008130 <prvHeapInit+0xc0>)
 800810a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800810e:	601a      	str	r2, [r3, #0]
}
 8008110:	bf00      	nop
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	20000374 	.word	0x20000374
 8008120:	20019374 	.word	0x20019374
 8008124:	2001937c 	.word	0x2001937c
 8008128:	20019384 	.word	0x20019384
 800812c:	20019380 	.word	0x20019380
 8008130:	20019390 	.word	0x20019390

08008134 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800813c:	4b28      	ldr	r3, [pc, #160]	; (80081e0 <prvInsertBlockIntoFreeList+0xac>)
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	e002      	b.n	8008148 <prvInsertBlockIntoFreeList+0x14>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	429a      	cmp	r2, r3
 8008150:	d8f7      	bhi.n	8008142 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	4413      	add	r3, r2
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	d108      	bne.n	8008176 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	441a      	add	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	441a      	add	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	429a      	cmp	r2, r3
 8008188:	d118      	bne.n	80081bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4b15      	ldr	r3, [pc, #84]	; (80081e4 <prvInsertBlockIntoFreeList+0xb0>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	429a      	cmp	r2, r3
 8008194:	d00d      	beq.n	80081b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	441a      	add	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	e008      	b.n	80081c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081b2:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <prvInsertBlockIntoFreeList+0xb0>)
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	e003      	b.n	80081c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d002      	beq.n	80081d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80081d2:	bf00      	nop
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	20019374 	.word	0x20019374
 80081e4:	2001937c 	.word	0x2001937c

080081e8 <__errno>:
 80081e8:	4b01      	ldr	r3, [pc, #4]	; (80081f0 <__errno+0x8>)
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20000028 	.word	0x20000028

080081f4 <__libc_init_array>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	4d0d      	ldr	r5, [pc, #52]	; (800822c <__libc_init_array+0x38>)
 80081f8:	4c0d      	ldr	r4, [pc, #52]	; (8008230 <__libc_init_array+0x3c>)
 80081fa:	1b64      	subs	r4, r4, r5
 80081fc:	10a4      	asrs	r4, r4, #2
 80081fe:	2600      	movs	r6, #0
 8008200:	42a6      	cmp	r6, r4
 8008202:	d109      	bne.n	8008218 <__libc_init_array+0x24>
 8008204:	4d0b      	ldr	r5, [pc, #44]	; (8008234 <__libc_init_array+0x40>)
 8008206:	4c0c      	ldr	r4, [pc, #48]	; (8008238 <__libc_init_array+0x44>)
 8008208:	f001 f98a 	bl	8009520 <_init>
 800820c:	1b64      	subs	r4, r4, r5
 800820e:	10a4      	asrs	r4, r4, #2
 8008210:	2600      	movs	r6, #0
 8008212:	42a6      	cmp	r6, r4
 8008214:	d105      	bne.n	8008222 <__libc_init_array+0x2e>
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	f855 3b04 	ldr.w	r3, [r5], #4
 800821c:	4798      	blx	r3
 800821e:	3601      	adds	r6, #1
 8008220:	e7ee      	b.n	8008200 <__libc_init_array+0xc>
 8008222:	f855 3b04 	ldr.w	r3, [r5], #4
 8008226:	4798      	blx	r3
 8008228:	3601      	adds	r6, #1
 800822a:	e7f2      	b.n	8008212 <__libc_init_array+0x1e>
 800822c:	080099d4 	.word	0x080099d4
 8008230:	080099d4 	.word	0x080099d4
 8008234:	080099d4 	.word	0x080099d4
 8008238:	080099d8 	.word	0x080099d8

0800823c <memcpy>:
 800823c:	440a      	add	r2, r1
 800823e:	4291      	cmp	r1, r2
 8008240:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008244:	d100      	bne.n	8008248 <memcpy+0xc>
 8008246:	4770      	bx	lr
 8008248:	b510      	push	{r4, lr}
 800824a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800824e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008252:	4291      	cmp	r1, r2
 8008254:	d1f9      	bne.n	800824a <memcpy+0xe>
 8008256:	bd10      	pop	{r4, pc}

08008258 <memset>:
 8008258:	4402      	add	r2, r0
 800825a:	4603      	mov	r3, r0
 800825c:	4293      	cmp	r3, r2
 800825e:	d100      	bne.n	8008262 <memset+0xa>
 8008260:	4770      	bx	lr
 8008262:	f803 1b01 	strb.w	r1, [r3], #1
 8008266:	e7f9      	b.n	800825c <memset+0x4>

08008268 <iprintf>:
 8008268:	b40f      	push	{r0, r1, r2, r3}
 800826a:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <iprintf+0x2c>)
 800826c:	b513      	push	{r0, r1, r4, lr}
 800826e:	681c      	ldr	r4, [r3, #0]
 8008270:	b124      	cbz	r4, 800827c <iprintf+0x14>
 8008272:	69a3      	ldr	r3, [r4, #24]
 8008274:	b913      	cbnz	r3, 800827c <iprintf+0x14>
 8008276:	4620      	mov	r0, r4
 8008278:	f000 f886 	bl	8008388 <__sinit>
 800827c:	ab05      	add	r3, sp, #20
 800827e:	9a04      	ldr	r2, [sp, #16]
 8008280:	68a1      	ldr	r1, [r4, #8]
 8008282:	9301      	str	r3, [sp, #4]
 8008284:	4620      	mov	r0, r4
 8008286:	f000 fb39 	bl	80088fc <_vfiprintf_r>
 800828a:	b002      	add	sp, #8
 800828c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008290:	b004      	add	sp, #16
 8008292:	4770      	bx	lr
 8008294:	20000028 	.word	0x20000028

08008298 <siprintf>:
 8008298:	b40e      	push	{r1, r2, r3}
 800829a:	b500      	push	{lr}
 800829c:	b09c      	sub	sp, #112	; 0x70
 800829e:	ab1d      	add	r3, sp, #116	; 0x74
 80082a0:	9002      	str	r0, [sp, #8]
 80082a2:	9006      	str	r0, [sp, #24]
 80082a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082a8:	4809      	ldr	r0, [pc, #36]	; (80082d0 <siprintf+0x38>)
 80082aa:	9107      	str	r1, [sp, #28]
 80082ac:	9104      	str	r1, [sp, #16]
 80082ae:	4909      	ldr	r1, [pc, #36]	; (80082d4 <siprintf+0x3c>)
 80082b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80082b4:	9105      	str	r1, [sp, #20]
 80082b6:	6800      	ldr	r0, [r0, #0]
 80082b8:	9301      	str	r3, [sp, #4]
 80082ba:	a902      	add	r1, sp, #8
 80082bc:	f000 f9f4 	bl	80086a8 <_svfiprintf_r>
 80082c0:	9b02      	ldr	r3, [sp, #8]
 80082c2:	2200      	movs	r2, #0
 80082c4:	701a      	strb	r2, [r3, #0]
 80082c6:	b01c      	add	sp, #112	; 0x70
 80082c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082cc:	b003      	add	sp, #12
 80082ce:	4770      	bx	lr
 80082d0:	20000028 	.word	0x20000028
 80082d4:	ffff0208 	.word	0xffff0208

080082d8 <std>:
 80082d8:	2300      	movs	r3, #0
 80082da:	b510      	push	{r4, lr}
 80082dc:	4604      	mov	r4, r0
 80082de:	e9c0 3300 	strd	r3, r3, [r0]
 80082e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082e6:	6083      	str	r3, [r0, #8]
 80082e8:	8181      	strh	r1, [r0, #12]
 80082ea:	6643      	str	r3, [r0, #100]	; 0x64
 80082ec:	81c2      	strh	r2, [r0, #14]
 80082ee:	6183      	str	r3, [r0, #24]
 80082f0:	4619      	mov	r1, r3
 80082f2:	2208      	movs	r2, #8
 80082f4:	305c      	adds	r0, #92	; 0x5c
 80082f6:	f7ff ffaf 	bl	8008258 <memset>
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <std+0x38>)
 80082fc:	6263      	str	r3, [r4, #36]	; 0x24
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <std+0x3c>)
 8008300:	62a3      	str	r3, [r4, #40]	; 0x28
 8008302:	4b05      	ldr	r3, [pc, #20]	; (8008318 <std+0x40>)
 8008304:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <std+0x44>)
 8008308:	6224      	str	r4, [r4, #32]
 800830a:	6323      	str	r3, [r4, #48]	; 0x30
 800830c:	bd10      	pop	{r4, pc}
 800830e:	bf00      	nop
 8008310:	08008ea5 	.word	0x08008ea5
 8008314:	08008ec7 	.word	0x08008ec7
 8008318:	08008eff 	.word	0x08008eff
 800831c:	08008f23 	.word	0x08008f23

08008320 <_cleanup_r>:
 8008320:	4901      	ldr	r1, [pc, #4]	; (8008328 <_cleanup_r+0x8>)
 8008322:	f000 b8af 	b.w	8008484 <_fwalk_reent>
 8008326:	bf00      	nop
 8008328:	080091fd 	.word	0x080091fd

0800832c <__sfmoreglue>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	2268      	movs	r2, #104	; 0x68
 8008330:	1e4d      	subs	r5, r1, #1
 8008332:	4355      	muls	r5, r2
 8008334:	460e      	mov	r6, r1
 8008336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800833a:	f000 f8e5 	bl	8008508 <_malloc_r>
 800833e:	4604      	mov	r4, r0
 8008340:	b140      	cbz	r0, 8008354 <__sfmoreglue+0x28>
 8008342:	2100      	movs	r1, #0
 8008344:	e9c0 1600 	strd	r1, r6, [r0]
 8008348:	300c      	adds	r0, #12
 800834a:	60a0      	str	r0, [r4, #8]
 800834c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008350:	f7ff ff82 	bl	8008258 <memset>
 8008354:	4620      	mov	r0, r4
 8008356:	bd70      	pop	{r4, r5, r6, pc}

08008358 <__sfp_lock_acquire>:
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <__sfp_lock_acquire+0x8>)
 800835a:	f000 b8b3 	b.w	80084c4 <__retarget_lock_acquire_recursive>
 800835e:	bf00      	nop
 8008360:	20019395 	.word	0x20019395

08008364 <__sfp_lock_release>:
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <__sfp_lock_release+0x8>)
 8008366:	f000 b8ae 	b.w	80084c6 <__retarget_lock_release_recursive>
 800836a:	bf00      	nop
 800836c:	20019395 	.word	0x20019395

08008370 <__sinit_lock_acquire>:
 8008370:	4801      	ldr	r0, [pc, #4]	; (8008378 <__sinit_lock_acquire+0x8>)
 8008372:	f000 b8a7 	b.w	80084c4 <__retarget_lock_acquire_recursive>
 8008376:	bf00      	nop
 8008378:	20019396 	.word	0x20019396

0800837c <__sinit_lock_release>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__sinit_lock_release+0x8>)
 800837e:	f000 b8a2 	b.w	80084c6 <__retarget_lock_release_recursive>
 8008382:	bf00      	nop
 8008384:	20019396 	.word	0x20019396

08008388 <__sinit>:
 8008388:	b510      	push	{r4, lr}
 800838a:	4604      	mov	r4, r0
 800838c:	f7ff fff0 	bl	8008370 <__sinit_lock_acquire>
 8008390:	69a3      	ldr	r3, [r4, #24]
 8008392:	b11b      	cbz	r3, 800839c <__sinit+0x14>
 8008394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008398:	f7ff bff0 	b.w	800837c <__sinit_lock_release>
 800839c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083a0:	6523      	str	r3, [r4, #80]	; 0x50
 80083a2:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <__sinit+0x68>)
 80083a4:	4a13      	ldr	r2, [pc, #76]	; (80083f4 <__sinit+0x6c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80083aa:	42a3      	cmp	r3, r4
 80083ac:	bf04      	itt	eq
 80083ae:	2301      	moveq	r3, #1
 80083b0:	61a3      	streq	r3, [r4, #24]
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 f820 	bl	80083f8 <__sfp>
 80083b8:	6060      	str	r0, [r4, #4]
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 f81c 	bl	80083f8 <__sfp>
 80083c0:	60a0      	str	r0, [r4, #8]
 80083c2:	4620      	mov	r0, r4
 80083c4:	f000 f818 	bl	80083f8 <__sfp>
 80083c8:	2200      	movs	r2, #0
 80083ca:	60e0      	str	r0, [r4, #12]
 80083cc:	2104      	movs	r1, #4
 80083ce:	6860      	ldr	r0, [r4, #4]
 80083d0:	f7ff ff82 	bl	80082d8 <std>
 80083d4:	68a0      	ldr	r0, [r4, #8]
 80083d6:	2201      	movs	r2, #1
 80083d8:	2109      	movs	r1, #9
 80083da:	f7ff ff7d 	bl	80082d8 <std>
 80083de:	68e0      	ldr	r0, [r4, #12]
 80083e0:	2202      	movs	r2, #2
 80083e2:	2112      	movs	r1, #18
 80083e4:	f7ff ff78 	bl	80082d8 <std>
 80083e8:	2301      	movs	r3, #1
 80083ea:	61a3      	str	r3, [r4, #24]
 80083ec:	e7d2      	b.n	8008394 <__sinit+0xc>
 80083ee:	bf00      	nop
 80083f0:	08009934 	.word	0x08009934
 80083f4:	08008321 	.word	0x08008321

080083f8 <__sfp>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	4607      	mov	r7, r0
 80083fc:	f7ff ffac 	bl	8008358 <__sfp_lock_acquire>
 8008400:	4b1e      	ldr	r3, [pc, #120]	; (800847c <__sfp+0x84>)
 8008402:	681e      	ldr	r6, [r3, #0]
 8008404:	69b3      	ldr	r3, [r6, #24]
 8008406:	b913      	cbnz	r3, 800840e <__sfp+0x16>
 8008408:	4630      	mov	r0, r6
 800840a:	f7ff ffbd 	bl	8008388 <__sinit>
 800840e:	3648      	adds	r6, #72	; 0x48
 8008410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008414:	3b01      	subs	r3, #1
 8008416:	d503      	bpl.n	8008420 <__sfp+0x28>
 8008418:	6833      	ldr	r3, [r6, #0]
 800841a:	b30b      	cbz	r3, 8008460 <__sfp+0x68>
 800841c:	6836      	ldr	r6, [r6, #0]
 800841e:	e7f7      	b.n	8008410 <__sfp+0x18>
 8008420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008424:	b9d5      	cbnz	r5, 800845c <__sfp+0x64>
 8008426:	4b16      	ldr	r3, [pc, #88]	; (8008480 <__sfp+0x88>)
 8008428:	60e3      	str	r3, [r4, #12]
 800842a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800842e:	6665      	str	r5, [r4, #100]	; 0x64
 8008430:	f000 f847 	bl	80084c2 <__retarget_lock_init_recursive>
 8008434:	f7ff ff96 	bl	8008364 <__sfp_lock_release>
 8008438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800843c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008440:	6025      	str	r5, [r4, #0]
 8008442:	61a5      	str	r5, [r4, #24]
 8008444:	2208      	movs	r2, #8
 8008446:	4629      	mov	r1, r5
 8008448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800844c:	f7ff ff04 	bl	8008258 <memset>
 8008450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008458:	4620      	mov	r0, r4
 800845a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845c:	3468      	adds	r4, #104	; 0x68
 800845e:	e7d9      	b.n	8008414 <__sfp+0x1c>
 8008460:	2104      	movs	r1, #4
 8008462:	4638      	mov	r0, r7
 8008464:	f7ff ff62 	bl	800832c <__sfmoreglue>
 8008468:	4604      	mov	r4, r0
 800846a:	6030      	str	r0, [r6, #0]
 800846c:	2800      	cmp	r0, #0
 800846e:	d1d5      	bne.n	800841c <__sfp+0x24>
 8008470:	f7ff ff78 	bl	8008364 <__sfp_lock_release>
 8008474:	230c      	movs	r3, #12
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	e7ee      	b.n	8008458 <__sfp+0x60>
 800847a:	bf00      	nop
 800847c:	08009934 	.word	0x08009934
 8008480:	ffff0001 	.word	0xffff0001

08008484 <_fwalk_reent>:
 8008484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008488:	4606      	mov	r6, r0
 800848a:	4688      	mov	r8, r1
 800848c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008490:	2700      	movs	r7, #0
 8008492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008496:	f1b9 0901 	subs.w	r9, r9, #1
 800849a:	d505      	bpl.n	80084a8 <_fwalk_reent+0x24>
 800849c:	6824      	ldr	r4, [r4, #0]
 800849e:	2c00      	cmp	r4, #0
 80084a0:	d1f7      	bne.n	8008492 <_fwalk_reent+0xe>
 80084a2:	4638      	mov	r0, r7
 80084a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a8:	89ab      	ldrh	r3, [r5, #12]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d907      	bls.n	80084be <_fwalk_reent+0x3a>
 80084ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084b2:	3301      	adds	r3, #1
 80084b4:	d003      	beq.n	80084be <_fwalk_reent+0x3a>
 80084b6:	4629      	mov	r1, r5
 80084b8:	4630      	mov	r0, r6
 80084ba:	47c0      	blx	r8
 80084bc:	4307      	orrs	r7, r0
 80084be:	3568      	adds	r5, #104	; 0x68
 80084c0:	e7e9      	b.n	8008496 <_fwalk_reent+0x12>

080084c2 <__retarget_lock_init_recursive>:
 80084c2:	4770      	bx	lr

080084c4 <__retarget_lock_acquire_recursive>:
 80084c4:	4770      	bx	lr

080084c6 <__retarget_lock_release_recursive>:
 80084c6:	4770      	bx	lr

080084c8 <sbrk_aligned>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	4e0e      	ldr	r6, [pc, #56]	; (8008504 <sbrk_aligned+0x3c>)
 80084cc:	460c      	mov	r4, r1
 80084ce:	6831      	ldr	r1, [r6, #0]
 80084d0:	4605      	mov	r5, r0
 80084d2:	b911      	cbnz	r1, 80084da <sbrk_aligned+0x12>
 80084d4:	f000 fcd6 	bl	8008e84 <_sbrk_r>
 80084d8:	6030      	str	r0, [r6, #0]
 80084da:	4621      	mov	r1, r4
 80084dc:	4628      	mov	r0, r5
 80084de:	f000 fcd1 	bl	8008e84 <_sbrk_r>
 80084e2:	1c43      	adds	r3, r0, #1
 80084e4:	d00a      	beq.n	80084fc <sbrk_aligned+0x34>
 80084e6:	1cc4      	adds	r4, r0, #3
 80084e8:	f024 0403 	bic.w	r4, r4, #3
 80084ec:	42a0      	cmp	r0, r4
 80084ee:	d007      	beq.n	8008500 <sbrk_aligned+0x38>
 80084f0:	1a21      	subs	r1, r4, r0
 80084f2:	4628      	mov	r0, r5
 80084f4:	f000 fcc6 	bl	8008e84 <_sbrk_r>
 80084f8:	3001      	adds	r0, #1
 80084fa:	d101      	bne.n	8008500 <sbrk_aligned+0x38>
 80084fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008500:	4620      	mov	r0, r4
 8008502:	bd70      	pop	{r4, r5, r6, pc}
 8008504:	2001939c 	.word	0x2001939c

08008508 <_malloc_r>:
 8008508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800850c:	1ccd      	adds	r5, r1, #3
 800850e:	f025 0503 	bic.w	r5, r5, #3
 8008512:	3508      	adds	r5, #8
 8008514:	2d0c      	cmp	r5, #12
 8008516:	bf38      	it	cc
 8008518:	250c      	movcc	r5, #12
 800851a:	2d00      	cmp	r5, #0
 800851c:	4607      	mov	r7, r0
 800851e:	db01      	blt.n	8008524 <_malloc_r+0x1c>
 8008520:	42a9      	cmp	r1, r5
 8008522:	d905      	bls.n	8008530 <_malloc_r+0x28>
 8008524:	230c      	movs	r3, #12
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	2600      	movs	r6, #0
 800852a:	4630      	mov	r0, r6
 800852c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008530:	4e2e      	ldr	r6, [pc, #184]	; (80085ec <_malloc_r+0xe4>)
 8008532:	f000 ff31 	bl	8009398 <__malloc_lock>
 8008536:	6833      	ldr	r3, [r6, #0]
 8008538:	461c      	mov	r4, r3
 800853a:	bb34      	cbnz	r4, 800858a <_malloc_r+0x82>
 800853c:	4629      	mov	r1, r5
 800853e:	4638      	mov	r0, r7
 8008540:	f7ff ffc2 	bl	80084c8 <sbrk_aligned>
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	4604      	mov	r4, r0
 8008548:	d14d      	bne.n	80085e6 <_malloc_r+0xde>
 800854a:	6834      	ldr	r4, [r6, #0]
 800854c:	4626      	mov	r6, r4
 800854e:	2e00      	cmp	r6, #0
 8008550:	d140      	bne.n	80085d4 <_malloc_r+0xcc>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	4631      	mov	r1, r6
 8008556:	4638      	mov	r0, r7
 8008558:	eb04 0803 	add.w	r8, r4, r3
 800855c:	f000 fc92 	bl	8008e84 <_sbrk_r>
 8008560:	4580      	cmp	r8, r0
 8008562:	d13a      	bne.n	80085da <_malloc_r+0xd2>
 8008564:	6821      	ldr	r1, [r4, #0]
 8008566:	3503      	adds	r5, #3
 8008568:	1a6d      	subs	r5, r5, r1
 800856a:	f025 0503 	bic.w	r5, r5, #3
 800856e:	3508      	adds	r5, #8
 8008570:	2d0c      	cmp	r5, #12
 8008572:	bf38      	it	cc
 8008574:	250c      	movcc	r5, #12
 8008576:	4629      	mov	r1, r5
 8008578:	4638      	mov	r0, r7
 800857a:	f7ff ffa5 	bl	80084c8 <sbrk_aligned>
 800857e:	3001      	adds	r0, #1
 8008580:	d02b      	beq.n	80085da <_malloc_r+0xd2>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	442b      	add	r3, r5
 8008586:	6023      	str	r3, [r4, #0]
 8008588:	e00e      	b.n	80085a8 <_malloc_r+0xa0>
 800858a:	6822      	ldr	r2, [r4, #0]
 800858c:	1b52      	subs	r2, r2, r5
 800858e:	d41e      	bmi.n	80085ce <_malloc_r+0xc6>
 8008590:	2a0b      	cmp	r2, #11
 8008592:	d916      	bls.n	80085c2 <_malloc_r+0xba>
 8008594:	1961      	adds	r1, r4, r5
 8008596:	42a3      	cmp	r3, r4
 8008598:	6025      	str	r5, [r4, #0]
 800859a:	bf18      	it	ne
 800859c:	6059      	strne	r1, [r3, #4]
 800859e:	6863      	ldr	r3, [r4, #4]
 80085a0:	bf08      	it	eq
 80085a2:	6031      	streq	r1, [r6, #0]
 80085a4:	5162      	str	r2, [r4, r5]
 80085a6:	604b      	str	r3, [r1, #4]
 80085a8:	4638      	mov	r0, r7
 80085aa:	f104 060b 	add.w	r6, r4, #11
 80085ae:	f000 fef9 	bl	80093a4 <__malloc_unlock>
 80085b2:	f026 0607 	bic.w	r6, r6, #7
 80085b6:	1d23      	adds	r3, r4, #4
 80085b8:	1af2      	subs	r2, r6, r3
 80085ba:	d0b6      	beq.n	800852a <_malloc_r+0x22>
 80085bc:	1b9b      	subs	r3, r3, r6
 80085be:	50a3      	str	r3, [r4, r2]
 80085c0:	e7b3      	b.n	800852a <_malloc_r+0x22>
 80085c2:	6862      	ldr	r2, [r4, #4]
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	bf0c      	ite	eq
 80085c8:	6032      	streq	r2, [r6, #0]
 80085ca:	605a      	strne	r2, [r3, #4]
 80085cc:	e7ec      	b.n	80085a8 <_malloc_r+0xa0>
 80085ce:	4623      	mov	r3, r4
 80085d0:	6864      	ldr	r4, [r4, #4]
 80085d2:	e7b2      	b.n	800853a <_malloc_r+0x32>
 80085d4:	4634      	mov	r4, r6
 80085d6:	6876      	ldr	r6, [r6, #4]
 80085d8:	e7b9      	b.n	800854e <_malloc_r+0x46>
 80085da:	230c      	movs	r3, #12
 80085dc:	603b      	str	r3, [r7, #0]
 80085de:	4638      	mov	r0, r7
 80085e0:	f000 fee0 	bl	80093a4 <__malloc_unlock>
 80085e4:	e7a1      	b.n	800852a <_malloc_r+0x22>
 80085e6:	6025      	str	r5, [r4, #0]
 80085e8:	e7de      	b.n	80085a8 <_malloc_r+0xa0>
 80085ea:	bf00      	nop
 80085ec:	20019398 	.word	0x20019398

080085f0 <__ssputs_r>:
 80085f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f4:	688e      	ldr	r6, [r1, #8]
 80085f6:	429e      	cmp	r6, r3
 80085f8:	4682      	mov	sl, r0
 80085fa:	460c      	mov	r4, r1
 80085fc:	4690      	mov	r8, r2
 80085fe:	461f      	mov	r7, r3
 8008600:	d838      	bhi.n	8008674 <__ssputs_r+0x84>
 8008602:	898a      	ldrh	r2, [r1, #12]
 8008604:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008608:	d032      	beq.n	8008670 <__ssputs_r+0x80>
 800860a:	6825      	ldr	r5, [r4, #0]
 800860c:	6909      	ldr	r1, [r1, #16]
 800860e:	eba5 0901 	sub.w	r9, r5, r1
 8008612:	6965      	ldr	r5, [r4, #20]
 8008614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008618:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800861c:	3301      	adds	r3, #1
 800861e:	444b      	add	r3, r9
 8008620:	106d      	asrs	r5, r5, #1
 8008622:	429d      	cmp	r5, r3
 8008624:	bf38      	it	cc
 8008626:	461d      	movcc	r5, r3
 8008628:	0553      	lsls	r3, r2, #21
 800862a:	d531      	bpl.n	8008690 <__ssputs_r+0xa0>
 800862c:	4629      	mov	r1, r5
 800862e:	f7ff ff6b 	bl	8008508 <_malloc_r>
 8008632:	4606      	mov	r6, r0
 8008634:	b950      	cbnz	r0, 800864c <__ssputs_r+0x5c>
 8008636:	230c      	movs	r3, #12
 8008638:	f8ca 3000 	str.w	r3, [sl]
 800863c:	89a3      	ldrh	r3, [r4, #12]
 800863e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008642:	81a3      	strh	r3, [r4, #12]
 8008644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864c:	6921      	ldr	r1, [r4, #16]
 800864e:	464a      	mov	r2, r9
 8008650:	f7ff fdf4 	bl	800823c <memcpy>
 8008654:	89a3      	ldrh	r3, [r4, #12]
 8008656:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800865a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800865e:	81a3      	strh	r3, [r4, #12]
 8008660:	6126      	str	r6, [r4, #16]
 8008662:	6165      	str	r5, [r4, #20]
 8008664:	444e      	add	r6, r9
 8008666:	eba5 0509 	sub.w	r5, r5, r9
 800866a:	6026      	str	r6, [r4, #0]
 800866c:	60a5      	str	r5, [r4, #8]
 800866e:	463e      	mov	r6, r7
 8008670:	42be      	cmp	r6, r7
 8008672:	d900      	bls.n	8008676 <__ssputs_r+0x86>
 8008674:	463e      	mov	r6, r7
 8008676:	6820      	ldr	r0, [r4, #0]
 8008678:	4632      	mov	r2, r6
 800867a:	4641      	mov	r1, r8
 800867c:	f000 fe72 	bl	8009364 <memmove>
 8008680:	68a3      	ldr	r3, [r4, #8]
 8008682:	1b9b      	subs	r3, r3, r6
 8008684:	60a3      	str	r3, [r4, #8]
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	4433      	add	r3, r6
 800868a:	6023      	str	r3, [r4, #0]
 800868c:	2000      	movs	r0, #0
 800868e:	e7db      	b.n	8008648 <__ssputs_r+0x58>
 8008690:	462a      	mov	r2, r5
 8008692:	f000 fed9 	bl	8009448 <_realloc_r>
 8008696:	4606      	mov	r6, r0
 8008698:	2800      	cmp	r0, #0
 800869a:	d1e1      	bne.n	8008660 <__ssputs_r+0x70>
 800869c:	6921      	ldr	r1, [r4, #16]
 800869e:	4650      	mov	r0, sl
 80086a0:	f000 fe86 	bl	80093b0 <_free_r>
 80086a4:	e7c7      	b.n	8008636 <__ssputs_r+0x46>
	...

080086a8 <_svfiprintf_r>:
 80086a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	4698      	mov	r8, r3
 80086ae:	898b      	ldrh	r3, [r1, #12]
 80086b0:	061b      	lsls	r3, r3, #24
 80086b2:	b09d      	sub	sp, #116	; 0x74
 80086b4:	4607      	mov	r7, r0
 80086b6:	460d      	mov	r5, r1
 80086b8:	4614      	mov	r4, r2
 80086ba:	d50e      	bpl.n	80086da <_svfiprintf_r+0x32>
 80086bc:	690b      	ldr	r3, [r1, #16]
 80086be:	b963      	cbnz	r3, 80086da <_svfiprintf_r+0x32>
 80086c0:	2140      	movs	r1, #64	; 0x40
 80086c2:	f7ff ff21 	bl	8008508 <_malloc_r>
 80086c6:	6028      	str	r0, [r5, #0]
 80086c8:	6128      	str	r0, [r5, #16]
 80086ca:	b920      	cbnz	r0, 80086d6 <_svfiprintf_r+0x2e>
 80086cc:	230c      	movs	r3, #12
 80086ce:	603b      	str	r3, [r7, #0]
 80086d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086d4:	e0d1      	b.n	800887a <_svfiprintf_r+0x1d2>
 80086d6:	2340      	movs	r3, #64	; 0x40
 80086d8:	616b      	str	r3, [r5, #20]
 80086da:	2300      	movs	r3, #0
 80086dc:	9309      	str	r3, [sp, #36]	; 0x24
 80086de:	2320      	movs	r3, #32
 80086e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086e8:	2330      	movs	r3, #48	; 0x30
 80086ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008894 <_svfiprintf_r+0x1ec>
 80086ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086f2:	f04f 0901 	mov.w	r9, #1
 80086f6:	4623      	mov	r3, r4
 80086f8:	469a      	mov	sl, r3
 80086fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086fe:	b10a      	cbz	r2, 8008704 <_svfiprintf_r+0x5c>
 8008700:	2a25      	cmp	r2, #37	; 0x25
 8008702:	d1f9      	bne.n	80086f8 <_svfiprintf_r+0x50>
 8008704:	ebba 0b04 	subs.w	fp, sl, r4
 8008708:	d00b      	beq.n	8008722 <_svfiprintf_r+0x7a>
 800870a:	465b      	mov	r3, fp
 800870c:	4622      	mov	r2, r4
 800870e:	4629      	mov	r1, r5
 8008710:	4638      	mov	r0, r7
 8008712:	f7ff ff6d 	bl	80085f0 <__ssputs_r>
 8008716:	3001      	adds	r0, #1
 8008718:	f000 80aa 	beq.w	8008870 <_svfiprintf_r+0x1c8>
 800871c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800871e:	445a      	add	r2, fp
 8008720:	9209      	str	r2, [sp, #36]	; 0x24
 8008722:	f89a 3000 	ldrb.w	r3, [sl]
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 80a2 	beq.w	8008870 <_svfiprintf_r+0x1c8>
 800872c:	2300      	movs	r3, #0
 800872e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008736:	f10a 0a01 	add.w	sl, sl, #1
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	9307      	str	r3, [sp, #28]
 800873e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008742:	931a      	str	r3, [sp, #104]	; 0x68
 8008744:	4654      	mov	r4, sl
 8008746:	2205      	movs	r2, #5
 8008748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874c:	4851      	ldr	r0, [pc, #324]	; (8008894 <_svfiprintf_r+0x1ec>)
 800874e:	f7f7 fd77 	bl	8000240 <memchr>
 8008752:	9a04      	ldr	r2, [sp, #16]
 8008754:	b9d8      	cbnz	r0, 800878e <_svfiprintf_r+0xe6>
 8008756:	06d0      	lsls	r0, r2, #27
 8008758:	bf44      	itt	mi
 800875a:	2320      	movmi	r3, #32
 800875c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008760:	0711      	lsls	r1, r2, #28
 8008762:	bf44      	itt	mi
 8008764:	232b      	movmi	r3, #43	; 0x2b
 8008766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800876a:	f89a 3000 	ldrb.w	r3, [sl]
 800876e:	2b2a      	cmp	r3, #42	; 0x2a
 8008770:	d015      	beq.n	800879e <_svfiprintf_r+0xf6>
 8008772:	9a07      	ldr	r2, [sp, #28]
 8008774:	4654      	mov	r4, sl
 8008776:	2000      	movs	r0, #0
 8008778:	f04f 0c0a 	mov.w	ip, #10
 800877c:	4621      	mov	r1, r4
 800877e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008782:	3b30      	subs	r3, #48	; 0x30
 8008784:	2b09      	cmp	r3, #9
 8008786:	d94e      	bls.n	8008826 <_svfiprintf_r+0x17e>
 8008788:	b1b0      	cbz	r0, 80087b8 <_svfiprintf_r+0x110>
 800878a:	9207      	str	r2, [sp, #28]
 800878c:	e014      	b.n	80087b8 <_svfiprintf_r+0x110>
 800878e:	eba0 0308 	sub.w	r3, r0, r8
 8008792:	fa09 f303 	lsl.w	r3, r9, r3
 8008796:	4313      	orrs	r3, r2
 8008798:	9304      	str	r3, [sp, #16]
 800879a:	46a2      	mov	sl, r4
 800879c:	e7d2      	b.n	8008744 <_svfiprintf_r+0x9c>
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	1d19      	adds	r1, r3, #4
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	9103      	str	r1, [sp, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bfbb      	ittet	lt
 80087aa:	425b      	neglt	r3, r3
 80087ac:	f042 0202 	orrlt.w	r2, r2, #2
 80087b0:	9307      	strge	r3, [sp, #28]
 80087b2:	9307      	strlt	r3, [sp, #28]
 80087b4:	bfb8      	it	lt
 80087b6:	9204      	strlt	r2, [sp, #16]
 80087b8:	7823      	ldrb	r3, [r4, #0]
 80087ba:	2b2e      	cmp	r3, #46	; 0x2e
 80087bc:	d10c      	bne.n	80087d8 <_svfiprintf_r+0x130>
 80087be:	7863      	ldrb	r3, [r4, #1]
 80087c0:	2b2a      	cmp	r3, #42	; 0x2a
 80087c2:	d135      	bne.n	8008830 <_svfiprintf_r+0x188>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	1d1a      	adds	r2, r3, #4
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	9203      	str	r2, [sp, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	bfb8      	it	lt
 80087d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80087d4:	3402      	adds	r4, #2
 80087d6:	9305      	str	r3, [sp, #20]
 80087d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80088a4 <_svfiprintf_r+0x1fc>
 80087dc:	7821      	ldrb	r1, [r4, #0]
 80087de:	2203      	movs	r2, #3
 80087e0:	4650      	mov	r0, sl
 80087e2:	f7f7 fd2d 	bl	8000240 <memchr>
 80087e6:	b140      	cbz	r0, 80087fa <_svfiprintf_r+0x152>
 80087e8:	2340      	movs	r3, #64	; 0x40
 80087ea:	eba0 000a 	sub.w	r0, r0, sl
 80087ee:	fa03 f000 	lsl.w	r0, r3, r0
 80087f2:	9b04      	ldr	r3, [sp, #16]
 80087f4:	4303      	orrs	r3, r0
 80087f6:	3401      	adds	r4, #1
 80087f8:	9304      	str	r3, [sp, #16]
 80087fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087fe:	4826      	ldr	r0, [pc, #152]	; (8008898 <_svfiprintf_r+0x1f0>)
 8008800:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008804:	2206      	movs	r2, #6
 8008806:	f7f7 fd1b 	bl	8000240 <memchr>
 800880a:	2800      	cmp	r0, #0
 800880c:	d038      	beq.n	8008880 <_svfiprintf_r+0x1d8>
 800880e:	4b23      	ldr	r3, [pc, #140]	; (800889c <_svfiprintf_r+0x1f4>)
 8008810:	bb1b      	cbnz	r3, 800885a <_svfiprintf_r+0x1b2>
 8008812:	9b03      	ldr	r3, [sp, #12]
 8008814:	3307      	adds	r3, #7
 8008816:	f023 0307 	bic.w	r3, r3, #7
 800881a:	3308      	adds	r3, #8
 800881c:	9303      	str	r3, [sp, #12]
 800881e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008820:	4433      	add	r3, r6
 8008822:	9309      	str	r3, [sp, #36]	; 0x24
 8008824:	e767      	b.n	80086f6 <_svfiprintf_r+0x4e>
 8008826:	fb0c 3202 	mla	r2, ip, r2, r3
 800882a:	460c      	mov	r4, r1
 800882c:	2001      	movs	r0, #1
 800882e:	e7a5      	b.n	800877c <_svfiprintf_r+0xd4>
 8008830:	2300      	movs	r3, #0
 8008832:	3401      	adds	r4, #1
 8008834:	9305      	str	r3, [sp, #20]
 8008836:	4619      	mov	r1, r3
 8008838:	f04f 0c0a 	mov.w	ip, #10
 800883c:	4620      	mov	r0, r4
 800883e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008842:	3a30      	subs	r2, #48	; 0x30
 8008844:	2a09      	cmp	r2, #9
 8008846:	d903      	bls.n	8008850 <_svfiprintf_r+0x1a8>
 8008848:	2b00      	cmp	r3, #0
 800884a:	d0c5      	beq.n	80087d8 <_svfiprintf_r+0x130>
 800884c:	9105      	str	r1, [sp, #20]
 800884e:	e7c3      	b.n	80087d8 <_svfiprintf_r+0x130>
 8008850:	fb0c 2101 	mla	r1, ip, r1, r2
 8008854:	4604      	mov	r4, r0
 8008856:	2301      	movs	r3, #1
 8008858:	e7f0      	b.n	800883c <_svfiprintf_r+0x194>
 800885a:	ab03      	add	r3, sp, #12
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	462a      	mov	r2, r5
 8008860:	4b0f      	ldr	r3, [pc, #60]	; (80088a0 <_svfiprintf_r+0x1f8>)
 8008862:	a904      	add	r1, sp, #16
 8008864:	4638      	mov	r0, r7
 8008866:	f3af 8000 	nop.w
 800886a:	1c42      	adds	r2, r0, #1
 800886c:	4606      	mov	r6, r0
 800886e:	d1d6      	bne.n	800881e <_svfiprintf_r+0x176>
 8008870:	89ab      	ldrh	r3, [r5, #12]
 8008872:	065b      	lsls	r3, r3, #25
 8008874:	f53f af2c 	bmi.w	80086d0 <_svfiprintf_r+0x28>
 8008878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800887a:	b01d      	add	sp, #116	; 0x74
 800887c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008880:	ab03      	add	r3, sp, #12
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	462a      	mov	r2, r5
 8008886:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <_svfiprintf_r+0x1f8>)
 8008888:	a904      	add	r1, sp, #16
 800888a:	4638      	mov	r0, r7
 800888c:	f000 f9d4 	bl	8008c38 <_printf_i>
 8008890:	e7eb      	b.n	800886a <_svfiprintf_r+0x1c2>
 8008892:	bf00      	nop
 8008894:	08009998 	.word	0x08009998
 8008898:	080099a2 	.word	0x080099a2
 800889c:	00000000 	.word	0x00000000
 80088a0:	080085f1 	.word	0x080085f1
 80088a4:	0800999e 	.word	0x0800999e

080088a8 <__sfputc_r>:
 80088a8:	6893      	ldr	r3, [r2, #8]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	b410      	push	{r4}
 80088b0:	6093      	str	r3, [r2, #8]
 80088b2:	da08      	bge.n	80088c6 <__sfputc_r+0x1e>
 80088b4:	6994      	ldr	r4, [r2, #24]
 80088b6:	42a3      	cmp	r3, r4
 80088b8:	db01      	blt.n	80088be <__sfputc_r+0x16>
 80088ba:	290a      	cmp	r1, #10
 80088bc:	d103      	bne.n	80088c6 <__sfputc_r+0x1e>
 80088be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088c2:	f000 bb33 	b.w	8008f2c <__swbuf_r>
 80088c6:	6813      	ldr	r3, [r2, #0]
 80088c8:	1c58      	adds	r0, r3, #1
 80088ca:	6010      	str	r0, [r2, #0]
 80088cc:	7019      	strb	r1, [r3, #0]
 80088ce:	4608      	mov	r0, r1
 80088d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <__sfputs_r>:
 80088d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d8:	4606      	mov	r6, r0
 80088da:	460f      	mov	r7, r1
 80088dc:	4614      	mov	r4, r2
 80088de:	18d5      	adds	r5, r2, r3
 80088e0:	42ac      	cmp	r4, r5
 80088e2:	d101      	bne.n	80088e8 <__sfputs_r+0x12>
 80088e4:	2000      	movs	r0, #0
 80088e6:	e007      	b.n	80088f8 <__sfputs_r+0x22>
 80088e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ec:	463a      	mov	r2, r7
 80088ee:	4630      	mov	r0, r6
 80088f0:	f7ff ffda 	bl	80088a8 <__sfputc_r>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d1f3      	bne.n	80088e0 <__sfputs_r+0xa>
 80088f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088fc <_vfiprintf_r>:
 80088fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	460d      	mov	r5, r1
 8008902:	b09d      	sub	sp, #116	; 0x74
 8008904:	4614      	mov	r4, r2
 8008906:	4698      	mov	r8, r3
 8008908:	4606      	mov	r6, r0
 800890a:	b118      	cbz	r0, 8008914 <_vfiprintf_r+0x18>
 800890c:	6983      	ldr	r3, [r0, #24]
 800890e:	b90b      	cbnz	r3, 8008914 <_vfiprintf_r+0x18>
 8008910:	f7ff fd3a 	bl	8008388 <__sinit>
 8008914:	4b89      	ldr	r3, [pc, #548]	; (8008b3c <_vfiprintf_r+0x240>)
 8008916:	429d      	cmp	r5, r3
 8008918:	d11b      	bne.n	8008952 <_vfiprintf_r+0x56>
 800891a:	6875      	ldr	r5, [r6, #4]
 800891c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800891e:	07d9      	lsls	r1, r3, #31
 8008920:	d405      	bmi.n	800892e <_vfiprintf_r+0x32>
 8008922:	89ab      	ldrh	r3, [r5, #12]
 8008924:	059a      	lsls	r2, r3, #22
 8008926:	d402      	bmi.n	800892e <_vfiprintf_r+0x32>
 8008928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800892a:	f7ff fdcb 	bl	80084c4 <__retarget_lock_acquire_recursive>
 800892e:	89ab      	ldrh	r3, [r5, #12]
 8008930:	071b      	lsls	r3, r3, #28
 8008932:	d501      	bpl.n	8008938 <_vfiprintf_r+0x3c>
 8008934:	692b      	ldr	r3, [r5, #16]
 8008936:	b9eb      	cbnz	r3, 8008974 <_vfiprintf_r+0x78>
 8008938:	4629      	mov	r1, r5
 800893a:	4630      	mov	r0, r6
 800893c:	f000 fb5a 	bl	8008ff4 <__swsetup_r>
 8008940:	b1c0      	cbz	r0, 8008974 <_vfiprintf_r+0x78>
 8008942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008944:	07dc      	lsls	r4, r3, #31
 8008946:	d50e      	bpl.n	8008966 <_vfiprintf_r+0x6a>
 8008948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800894c:	b01d      	add	sp, #116	; 0x74
 800894e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008952:	4b7b      	ldr	r3, [pc, #492]	; (8008b40 <_vfiprintf_r+0x244>)
 8008954:	429d      	cmp	r5, r3
 8008956:	d101      	bne.n	800895c <_vfiprintf_r+0x60>
 8008958:	68b5      	ldr	r5, [r6, #8]
 800895a:	e7df      	b.n	800891c <_vfiprintf_r+0x20>
 800895c:	4b79      	ldr	r3, [pc, #484]	; (8008b44 <_vfiprintf_r+0x248>)
 800895e:	429d      	cmp	r5, r3
 8008960:	bf08      	it	eq
 8008962:	68f5      	ldreq	r5, [r6, #12]
 8008964:	e7da      	b.n	800891c <_vfiprintf_r+0x20>
 8008966:	89ab      	ldrh	r3, [r5, #12]
 8008968:	0598      	lsls	r0, r3, #22
 800896a:	d4ed      	bmi.n	8008948 <_vfiprintf_r+0x4c>
 800896c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800896e:	f7ff fdaa 	bl	80084c6 <__retarget_lock_release_recursive>
 8008972:	e7e9      	b.n	8008948 <_vfiprintf_r+0x4c>
 8008974:	2300      	movs	r3, #0
 8008976:	9309      	str	r3, [sp, #36]	; 0x24
 8008978:	2320      	movs	r3, #32
 800897a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800897e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008982:	2330      	movs	r3, #48	; 0x30
 8008984:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b48 <_vfiprintf_r+0x24c>
 8008988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800898c:	f04f 0901 	mov.w	r9, #1
 8008990:	4623      	mov	r3, r4
 8008992:	469a      	mov	sl, r3
 8008994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008998:	b10a      	cbz	r2, 800899e <_vfiprintf_r+0xa2>
 800899a:	2a25      	cmp	r2, #37	; 0x25
 800899c:	d1f9      	bne.n	8008992 <_vfiprintf_r+0x96>
 800899e:	ebba 0b04 	subs.w	fp, sl, r4
 80089a2:	d00b      	beq.n	80089bc <_vfiprintf_r+0xc0>
 80089a4:	465b      	mov	r3, fp
 80089a6:	4622      	mov	r2, r4
 80089a8:	4629      	mov	r1, r5
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7ff ff93 	bl	80088d6 <__sfputs_r>
 80089b0:	3001      	adds	r0, #1
 80089b2:	f000 80aa 	beq.w	8008b0a <_vfiprintf_r+0x20e>
 80089b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089b8:	445a      	add	r2, fp
 80089ba:	9209      	str	r2, [sp, #36]	; 0x24
 80089bc:	f89a 3000 	ldrb.w	r3, [sl]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 80a2 	beq.w	8008b0a <_vfiprintf_r+0x20e>
 80089c6:	2300      	movs	r3, #0
 80089c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089d0:	f10a 0a01 	add.w	sl, sl, #1
 80089d4:	9304      	str	r3, [sp, #16]
 80089d6:	9307      	str	r3, [sp, #28]
 80089d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089dc:	931a      	str	r3, [sp, #104]	; 0x68
 80089de:	4654      	mov	r4, sl
 80089e0:	2205      	movs	r2, #5
 80089e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e6:	4858      	ldr	r0, [pc, #352]	; (8008b48 <_vfiprintf_r+0x24c>)
 80089e8:	f7f7 fc2a 	bl	8000240 <memchr>
 80089ec:	9a04      	ldr	r2, [sp, #16]
 80089ee:	b9d8      	cbnz	r0, 8008a28 <_vfiprintf_r+0x12c>
 80089f0:	06d1      	lsls	r1, r2, #27
 80089f2:	bf44      	itt	mi
 80089f4:	2320      	movmi	r3, #32
 80089f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089fa:	0713      	lsls	r3, r2, #28
 80089fc:	bf44      	itt	mi
 80089fe:	232b      	movmi	r3, #43	; 0x2b
 8008a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a04:	f89a 3000 	ldrb.w	r3, [sl]
 8008a08:	2b2a      	cmp	r3, #42	; 0x2a
 8008a0a:	d015      	beq.n	8008a38 <_vfiprintf_r+0x13c>
 8008a0c:	9a07      	ldr	r2, [sp, #28]
 8008a0e:	4654      	mov	r4, sl
 8008a10:	2000      	movs	r0, #0
 8008a12:	f04f 0c0a 	mov.w	ip, #10
 8008a16:	4621      	mov	r1, r4
 8008a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a1c:	3b30      	subs	r3, #48	; 0x30
 8008a1e:	2b09      	cmp	r3, #9
 8008a20:	d94e      	bls.n	8008ac0 <_vfiprintf_r+0x1c4>
 8008a22:	b1b0      	cbz	r0, 8008a52 <_vfiprintf_r+0x156>
 8008a24:	9207      	str	r2, [sp, #28]
 8008a26:	e014      	b.n	8008a52 <_vfiprintf_r+0x156>
 8008a28:	eba0 0308 	sub.w	r3, r0, r8
 8008a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a30:	4313      	orrs	r3, r2
 8008a32:	9304      	str	r3, [sp, #16]
 8008a34:	46a2      	mov	sl, r4
 8008a36:	e7d2      	b.n	80089de <_vfiprintf_r+0xe2>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	1d19      	adds	r1, r3, #4
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	9103      	str	r1, [sp, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	bfbb      	ittet	lt
 8008a44:	425b      	neglt	r3, r3
 8008a46:	f042 0202 	orrlt.w	r2, r2, #2
 8008a4a:	9307      	strge	r3, [sp, #28]
 8008a4c:	9307      	strlt	r3, [sp, #28]
 8008a4e:	bfb8      	it	lt
 8008a50:	9204      	strlt	r2, [sp, #16]
 8008a52:	7823      	ldrb	r3, [r4, #0]
 8008a54:	2b2e      	cmp	r3, #46	; 0x2e
 8008a56:	d10c      	bne.n	8008a72 <_vfiprintf_r+0x176>
 8008a58:	7863      	ldrb	r3, [r4, #1]
 8008a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a5c:	d135      	bne.n	8008aca <_vfiprintf_r+0x1ce>
 8008a5e:	9b03      	ldr	r3, [sp, #12]
 8008a60:	1d1a      	adds	r2, r3, #4
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	9203      	str	r2, [sp, #12]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	bfb8      	it	lt
 8008a6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a6e:	3402      	adds	r4, #2
 8008a70:	9305      	str	r3, [sp, #20]
 8008a72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b58 <_vfiprintf_r+0x25c>
 8008a76:	7821      	ldrb	r1, [r4, #0]
 8008a78:	2203      	movs	r2, #3
 8008a7a:	4650      	mov	r0, sl
 8008a7c:	f7f7 fbe0 	bl	8000240 <memchr>
 8008a80:	b140      	cbz	r0, 8008a94 <_vfiprintf_r+0x198>
 8008a82:	2340      	movs	r3, #64	; 0x40
 8008a84:	eba0 000a 	sub.w	r0, r0, sl
 8008a88:	fa03 f000 	lsl.w	r0, r3, r0
 8008a8c:	9b04      	ldr	r3, [sp, #16]
 8008a8e:	4303      	orrs	r3, r0
 8008a90:	3401      	adds	r4, #1
 8008a92:	9304      	str	r3, [sp, #16]
 8008a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a98:	482c      	ldr	r0, [pc, #176]	; (8008b4c <_vfiprintf_r+0x250>)
 8008a9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a9e:	2206      	movs	r2, #6
 8008aa0:	f7f7 fbce 	bl	8000240 <memchr>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d03f      	beq.n	8008b28 <_vfiprintf_r+0x22c>
 8008aa8:	4b29      	ldr	r3, [pc, #164]	; (8008b50 <_vfiprintf_r+0x254>)
 8008aaa:	bb1b      	cbnz	r3, 8008af4 <_vfiprintf_r+0x1f8>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	3307      	adds	r3, #7
 8008ab0:	f023 0307 	bic.w	r3, r3, #7
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	9303      	str	r3, [sp, #12]
 8008ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aba:	443b      	add	r3, r7
 8008abc:	9309      	str	r3, [sp, #36]	; 0x24
 8008abe:	e767      	b.n	8008990 <_vfiprintf_r+0x94>
 8008ac0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	e7a5      	b.n	8008a16 <_vfiprintf_r+0x11a>
 8008aca:	2300      	movs	r3, #0
 8008acc:	3401      	adds	r4, #1
 8008ace:	9305      	str	r3, [sp, #20]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	f04f 0c0a 	mov.w	ip, #10
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008adc:	3a30      	subs	r2, #48	; 0x30
 8008ade:	2a09      	cmp	r2, #9
 8008ae0:	d903      	bls.n	8008aea <_vfiprintf_r+0x1ee>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0c5      	beq.n	8008a72 <_vfiprintf_r+0x176>
 8008ae6:	9105      	str	r1, [sp, #20]
 8008ae8:	e7c3      	b.n	8008a72 <_vfiprintf_r+0x176>
 8008aea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aee:	4604      	mov	r4, r0
 8008af0:	2301      	movs	r3, #1
 8008af2:	e7f0      	b.n	8008ad6 <_vfiprintf_r+0x1da>
 8008af4:	ab03      	add	r3, sp, #12
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	462a      	mov	r2, r5
 8008afa:	4b16      	ldr	r3, [pc, #88]	; (8008b54 <_vfiprintf_r+0x258>)
 8008afc:	a904      	add	r1, sp, #16
 8008afe:	4630      	mov	r0, r6
 8008b00:	f3af 8000 	nop.w
 8008b04:	4607      	mov	r7, r0
 8008b06:	1c78      	adds	r0, r7, #1
 8008b08:	d1d6      	bne.n	8008ab8 <_vfiprintf_r+0x1bc>
 8008b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b0c:	07d9      	lsls	r1, r3, #31
 8008b0e:	d405      	bmi.n	8008b1c <_vfiprintf_r+0x220>
 8008b10:	89ab      	ldrh	r3, [r5, #12]
 8008b12:	059a      	lsls	r2, r3, #22
 8008b14:	d402      	bmi.n	8008b1c <_vfiprintf_r+0x220>
 8008b16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b18:	f7ff fcd5 	bl	80084c6 <__retarget_lock_release_recursive>
 8008b1c:	89ab      	ldrh	r3, [r5, #12]
 8008b1e:	065b      	lsls	r3, r3, #25
 8008b20:	f53f af12 	bmi.w	8008948 <_vfiprintf_r+0x4c>
 8008b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b26:	e711      	b.n	800894c <_vfiprintf_r+0x50>
 8008b28:	ab03      	add	r3, sp, #12
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	462a      	mov	r2, r5
 8008b2e:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <_vfiprintf_r+0x258>)
 8008b30:	a904      	add	r1, sp, #16
 8008b32:	4630      	mov	r0, r6
 8008b34:	f000 f880 	bl	8008c38 <_printf_i>
 8008b38:	e7e4      	b.n	8008b04 <_vfiprintf_r+0x208>
 8008b3a:	bf00      	nop
 8008b3c:	08009958 	.word	0x08009958
 8008b40:	08009978 	.word	0x08009978
 8008b44:	08009938 	.word	0x08009938
 8008b48:	08009998 	.word	0x08009998
 8008b4c:	080099a2 	.word	0x080099a2
 8008b50:	00000000 	.word	0x00000000
 8008b54:	080088d7 	.word	0x080088d7
 8008b58:	0800999e 	.word	0x0800999e

08008b5c <_printf_common>:
 8008b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b60:	4616      	mov	r6, r2
 8008b62:	4699      	mov	r9, r3
 8008b64:	688a      	ldr	r2, [r1, #8]
 8008b66:	690b      	ldr	r3, [r1, #16]
 8008b68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	bfb8      	it	lt
 8008b70:	4613      	movlt	r3, r2
 8008b72:	6033      	str	r3, [r6, #0]
 8008b74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b78:	4607      	mov	r7, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	b10a      	cbz	r2, 8008b82 <_printf_common+0x26>
 8008b7e:	3301      	adds	r3, #1
 8008b80:	6033      	str	r3, [r6, #0]
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	0699      	lsls	r1, r3, #26
 8008b86:	bf42      	ittt	mi
 8008b88:	6833      	ldrmi	r3, [r6, #0]
 8008b8a:	3302      	addmi	r3, #2
 8008b8c:	6033      	strmi	r3, [r6, #0]
 8008b8e:	6825      	ldr	r5, [r4, #0]
 8008b90:	f015 0506 	ands.w	r5, r5, #6
 8008b94:	d106      	bne.n	8008ba4 <_printf_common+0x48>
 8008b96:	f104 0a19 	add.w	sl, r4, #25
 8008b9a:	68e3      	ldr	r3, [r4, #12]
 8008b9c:	6832      	ldr	r2, [r6, #0]
 8008b9e:	1a9b      	subs	r3, r3, r2
 8008ba0:	42ab      	cmp	r3, r5
 8008ba2:	dc26      	bgt.n	8008bf2 <_printf_common+0x96>
 8008ba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ba8:	1e13      	subs	r3, r2, #0
 8008baa:	6822      	ldr	r2, [r4, #0]
 8008bac:	bf18      	it	ne
 8008bae:	2301      	movne	r3, #1
 8008bb0:	0692      	lsls	r2, r2, #26
 8008bb2:	d42b      	bmi.n	8008c0c <_printf_common+0xb0>
 8008bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bb8:	4649      	mov	r1, r9
 8008bba:	4638      	mov	r0, r7
 8008bbc:	47c0      	blx	r8
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	d01e      	beq.n	8008c00 <_printf_common+0xa4>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	68e5      	ldr	r5, [r4, #12]
 8008bc6:	6832      	ldr	r2, [r6, #0]
 8008bc8:	f003 0306 	and.w	r3, r3, #6
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	bf08      	it	eq
 8008bd0:	1aad      	subeq	r5, r5, r2
 8008bd2:	68a3      	ldr	r3, [r4, #8]
 8008bd4:	6922      	ldr	r2, [r4, #16]
 8008bd6:	bf0c      	ite	eq
 8008bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bdc:	2500      	movne	r5, #0
 8008bde:	4293      	cmp	r3, r2
 8008be0:	bfc4      	itt	gt
 8008be2:	1a9b      	subgt	r3, r3, r2
 8008be4:	18ed      	addgt	r5, r5, r3
 8008be6:	2600      	movs	r6, #0
 8008be8:	341a      	adds	r4, #26
 8008bea:	42b5      	cmp	r5, r6
 8008bec:	d11a      	bne.n	8008c24 <_printf_common+0xc8>
 8008bee:	2000      	movs	r0, #0
 8008bf0:	e008      	b.n	8008c04 <_printf_common+0xa8>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	4652      	mov	r2, sl
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	47c0      	blx	r8
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d103      	bne.n	8008c08 <_printf_common+0xac>
 8008c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c08:	3501      	adds	r5, #1
 8008c0a:	e7c6      	b.n	8008b9a <_printf_common+0x3e>
 8008c0c:	18e1      	adds	r1, r4, r3
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	2030      	movs	r0, #48	; 0x30
 8008c12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c16:	4422      	add	r2, r4
 8008c18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c20:	3302      	adds	r3, #2
 8008c22:	e7c7      	b.n	8008bb4 <_printf_common+0x58>
 8008c24:	2301      	movs	r3, #1
 8008c26:	4622      	mov	r2, r4
 8008c28:	4649      	mov	r1, r9
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	47c0      	blx	r8
 8008c2e:	3001      	adds	r0, #1
 8008c30:	d0e6      	beq.n	8008c00 <_printf_common+0xa4>
 8008c32:	3601      	adds	r6, #1
 8008c34:	e7d9      	b.n	8008bea <_printf_common+0x8e>
	...

08008c38 <_printf_i>:
 8008c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c3c:	7e0f      	ldrb	r7, [r1, #24]
 8008c3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c40:	2f78      	cmp	r7, #120	; 0x78
 8008c42:	4691      	mov	r9, r2
 8008c44:	4680      	mov	r8, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	469a      	mov	sl, r3
 8008c4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c4e:	d807      	bhi.n	8008c60 <_printf_i+0x28>
 8008c50:	2f62      	cmp	r7, #98	; 0x62
 8008c52:	d80a      	bhi.n	8008c6a <_printf_i+0x32>
 8008c54:	2f00      	cmp	r7, #0
 8008c56:	f000 80d8 	beq.w	8008e0a <_printf_i+0x1d2>
 8008c5a:	2f58      	cmp	r7, #88	; 0x58
 8008c5c:	f000 80a3 	beq.w	8008da6 <_printf_i+0x16e>
 8008c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c68:	e03a      	b.n	8008ce0 <_printf_i+0xa8>
 8008c6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c6e:	2b15      	cmp	r3, #21
 8008c70:	d8f6      	bhi.n	8008c60 <_printf_i+0x28>
 8008c72:	a101      	add	r1, pc, #4	; (adr r1, 8008c78 <_printf_i+0x40>)
 8008c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c78:	08008cd1 	.word	0x08008cd1
 8008c7c:	08008ce5 	.word	0x08008ce5
 8008c80:	08008c61 	.word	0x08008c61
 8008c84:	08008c61 	.word	0x08008c61
 8008c88:	08008c61 	.word	0x08008c61
 8008c8c:	08008c61 	.word	0x08008c61
 8008c90:	08008ce5 	.word	0x08008ce5
 8008c94:	08008c61 	.word	0x08008c61
 8008c98:	08008c61 	.word	0x08008c61
 8008c9c:	08008c61 	.word	0x08008c61
 8008ca0:	08008c61 	.word	0x08008c61
 8008ca4:	08008df1 	.word	0x08008df1
 8008ca8:	08008d15 	.word	0x08008d15
 8008cac:	08008dd3 	.word	0x08008dd3
 8008cb0:	08008c61 	.word	0x08008c61
 8008cb4:	08008c61 	.word	0x08008c61
 8008cb8:	08008e13 	.word	0x08008e13
 8008cbc:	08008c61 	.word	0x08008c61
 8008cc0:	08008d15 	.word	0x08008d15
 8008cc4:	08008c61 	.word	0x08008c61
 8008cc8:	08008c61 	.word	0x08008c61
 8008ccc:	08008ddb 	.word	0x08008ddb
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	1d1a      	adds	r2, r3, #4
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	602a      	str	r2, [r5, #0]
 8008cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e0a3      	b.n	8008e2c <_printf_i+0x1f4>
 8008ce4:	6820      	ldr	r0, [r4, #0]
 8008ce6:	6829      	ldr	r1, [r5, #0]
 8008ce8:	0606      	lsls	r6, r0, #24
 8008cea:	f101 0304 	add.w	r3, r1, #4
 8008cee:	d50a      	bpl.n	8008d06 <_printf_i+0xce>
 8008cf0:	680e      	ldr	r6, [r1, #0]
 8008cf2:	602b      	str	r3, [r5, #0]
 8008cf4:	2e00      	cmp	r6, #0
 8008cf6:	da03      	bge.n	8008d00 <_printf_i+0xc8>
 8008cf8:	232d      	movs	r3, #45	; 0x2d
 8008cfa:	4276      	negs	r6, r6
 8008cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d00:	485e      	ldr	r0, [pc, #376]	; (8008e7c <_printf_i+0x244>)
 8008d02:	230a      	movs	r3, #10
 8008d04:	e019      	b.n	8008d3a <_printf_i+0x102>
 8008d06:	680e      	ldr	r6, [r1, #0]
 8008d08:	602b      	str	r3, [r5, #0]
 8008d0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d0e:	bf18      	it	ne
 8008d10:	b236      	sxthne	r6, r6
 8008d12:	e7ef      	b.n	8008cf4 <_printf_i+0xbc>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	6820      	ldr	r0, [r4, #0]
 8008d18:	1d19      	adds	r1, r3, #4
 8008d1a:	6029      	str	r1, [r5, #0]
 8008d1c:	0601      	lsls	r1, r0, #24
 8008d1e:	d501      	bpl.n	8008d24 <_printf_i+0xec>
 8008d20:	681e      	ldr	r6, [r3, #0]
 8008d22:	e002      	b.n	8008d2a <_printf_i+0xf2>
 8008d24:	0646      	lsls	r6, r0, #25
 8008d26:	d5fb      	bpl.n	8008d20 <_printf_i+0xe8>
 8008d28:	881e      	ldrh	r6, [r3, #0]
 8008d2a:	4854      	ldr	r0, [pc, #336]	; (8008e7c <_printf_i+0x244>)
 8008d2c:	2f6f      	cmp	r7, #111	; 0x6f
 8008d2e:	bf0c      	ite	eq
 8008d30:	2308      	moveq	r3, #8
 8008d32:	230a      	movne	r3, #10
 8008d34:	2100      	movs	r1, #0
 8008d36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d3a:	6865      	ldr	r5, [r4, #4]
 8008d3c:	60a5      	str	r5, [r4, #8]
 8008d3e:	2d00      	cmp	r5, #0
 8008d40:	bfa2      	ittt	ge
 8008d42:	6821      	ldrge	r1, [r4, #0]
 8008d44:	f021 0104 	bicge.w	r1, r1, #4
 8008d48:	6021      	strge	r1, [r4, #0]
 8008d4a:	b90e      	cbnz	r6, 8008d50 <_printf_i+0x118>
 8008d4c:	2d00      	cmp	r5, #0
 8008d4e:	d04d      	beq.n	8008dec <_printf_i+0x1b4>
 8008d50:	4615      	mov	r5, r2
 8008d52:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d56:	fb03 6711 	mls	r7, r3, r1, r6
 8008d5a:	5dc7      	ldrb	r7, [r0, r7]
 8008d5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d60:	4637      	mov	r7, r6
 8008d62:	42bb      	cmp	r3, r7
 8008d64:	460e      	mov	r6, r1
 8008d66:	d9f4      	bls.n	8008d52 <_printf_i+0x11a>
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	d10b      	bne.n	8008d84 <_printf_i+0x14c>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	07de      	lsls	r6, r3, #31
 8008d70:	d508      	bpl.n	8008d84 <_printf_i+0x14c>
 8008d72:	6923      	ldr	r3, [r4, #16]
 8008d74:	6861      	ldr	r1, [r4, #4]
 8008d76:	4299      	cmp	r1, r3
 8008d78:	bfde      	ittt	le
 8008d7a:	2330      	movle	r3, #48	; 0x30
 8008d7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008d84:	1b52      	subs	r2, r2, r5
 8008d86:	6122      	str	r2, [r4, #16]
 8008d88:	f8cd a000 	str.w	sl, [sp]
 8008d8c:	464b      	mov	r3, r9
 8008d8e:	aa03      	add	r2, sp, #12
 8008d90:	4621      	mov	r1, r4
 8008d92:	4640      	mov	r0, r8
 8008d94:	f7ff fee2 	bl	8008b5c <_printf_common>
 8008d98:	3001      	adds	r0, #1
 8008d9a:	d14c      	bne.n	8008e36 <_printf_i+0x1fe>
 8008d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008da0:	b004      	add	sp, #16
 8008da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da6:	4835      	ldr	r0, [pc, #212]	; (8008e7c <_printf_i+0x244>)
 8008da8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008dac:	6829      	ldr	r1, [r5, #0]
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008db4:	6029      	str	r1, [r5, #0]
 8008db6:	061d      	lsls	r5, r3, #24
 8008db8:	d514      	bpl.n	8008de4 <_printf_i+0x1ac>
 8008dba:	07df      	lsls	r7, r3, #31
 8008dbc:	bf44      	itt	mi
 8008dbe:	f043 0320 	orrmi.w	r3, r3, #32
 8008dc2:	6023      	strmi	r3, [r4, #0]
 8008dc4:	b91e      	cbnz	r6, 8008dce <_printf_i+0x196>
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	f023 0320 	bic.w	r3, r3, #32
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	2310      	movs	r3, #16
 8008dd0:	e7b0      	b.n	8008d34 <_printf_i+0xfc>
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	f043 0320 	orr.w	r3, r3, #32
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	2378      	movs	r3, #120	; 0x78
 8008ddc:	4828      	ldr	r0, [pc, #160]	; (8008e80 <_printf_i+0x248>)
 8008dde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008de2:	e7e3      	b.n	8008dac <_printf_i+0x174>
 8008de4:	0659      	lsls	r1, r3, #25
 8008de6:	bf48      	it	mi
 8008de8:	b2b6      	uxthmi	r6, r6
 8008dea:	e7e6      	b.n	8008dba <_printf_i+0x182>
 8008dec:	4615      	mov	r5, r2
 8008dee:	e7bb      	b.n	8008d68 <_printf_i+0x130>
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	6826      	ldr	r6, [r4, #0]
 8008df4:	6961      	ldr	r1, [r4, #20]
 8008df6:	1d18      	adds	r0, r3, #4
 8008df8:	6028      	str	r0, [r5, #0]
 8008dfa:	0635      	lsls	r5, r6, #24
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	d501      	bpl.n	8008e04 <_printf_i+0x1cc>
 8008e00:	6019      	str	r1, [r3, #0]
 8008e02:	e002      	b.n	8008e0a <_printf_i+0x1d2>
 8008e04:	0670      	lsls	r0, r6, #25
 8008e06:	d5fb      	bpl.n	8008e00 <_printf_i+0x1c8>
 8008e08:	8019      	strh	r1, [r3, #0]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	6123      	str	r3, [r4, #16]
 8008e0e:	4615      	mov	r5, r2
 8008e10:	e7ba      	b.n	8008d88 <_printf_i+0x150>
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	1d1a      	adds	r2, r3, #4
 8008e16:	602a      	str	r2, [r5, #0]
 8008e18:	681d      	ldr	r5, [r3, #0]
 8008e1a:	6862      	ldr	r2, [r4, #4]
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f7f7 fa0e 	bl	8000240 <memchr>
 8008e24:	b108      	cbz	r0, 8008e2a <_printf_i+0x1f2>
 8008e26:	1b40      	subs	r0, r0, r5
 8008e28:	6060      	str	r0, [r4, #4]
 8008e2a:	6863      	ldr	r3, [r4, #4]
 8008e2c:	6123      	str	r3, [r4, #16]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e34:	e7a8      	b.n	8008d88 <_printf_i+0x150>
 8008e36:	6923      	ldr	r3, [r4, #16]
 8008e38:	462a      	mov	r2, r5
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	47d0      	blx	sl
 8008e40:	3001      	adds	r0, #1
 8008e42:	d0ab      	beq.n	8008d9c <_printf_i+0x164>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	079b      	lsls	r3, r3, #30
 8008e48:	d413      	bmi.n	8008e72 <_printf_i+0x23a>
 8008e4a:	68e0      	ldr	r0, [r4, #12]
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	4298      	cmp	r0, r3
 8008e50:	bfb8      	it	lt
 8008e52:	4618      	movlt	r0, r3
 8008e54:	e7a4      	b.n	8008da0 <_printf_i+0x168>
 8008e56:	2301      	movs	r3, #1
 8008e58:	4632      	mov	r2, r6
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	4640      	mov	r0, r8
 8008e5e:	47d0      	blx	sl
 8008e60:	3001      	adds	r0, #1
 8008e62:	d09b      	beq.n	8008d9c <_printf_i+0x164>
 8008e64:	3501      	adds	r5, #1
 8008e66:	68e3      	ldr	r3, [r4, #12]
 8008e68:	9903      	ldr	r1, [sp, #12]
 8008e6a:	1a5b      	subs	r3, r3, r1
 8008e6c:	42ab      	cmp	r3, r5
 8008e6e:	dcf2      	bgt.n	8008e56 <_printf_i+0x21e>
 8008e70:	e7eb      	b.n	8008e4a <_printf_i+0x212>
 8008e72:	2500      	movs	r5, #0
 8008e74:	f104 0619 	add.w	r6, r4, #25
 8008e78:	e7f5      	b.n	8008e66 <_printf_i+0x22e>
 8008e7a:	bf00      	nop
 8008e7c:	080099a9 	.word	0x080099a9
 8008e80:	080099ba 	.word	0x080099ba

08008e84 <_sbrk_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d06      	ldr	r5, [pc, #24]	; (8008ea0 <_sbrk_r+0x1c>)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	602b      	str	r3, [r5, #0]
 8008e90:	f7f8 fa6c 	bl	800136c <_sbrk>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_sbrk_r+0x1a>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_sbrk_r+0x1a>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	200193a0 	.word	0x200193a0

08008ea4 <__sread>:
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eac:	f000 fafc 	bl	80094a8 <_read_r>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	bfab      	itete	ge
 8008eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8008eb8:	181b      	addge	r3, r3, r0
 8008eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ebe:	bfac      	ite	ge
 8008ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ec2:	81a3      	strhlt	r3, [r4, #12]
 8008ec4:	bd10      	pop	{r4, pc}

08008ec6 <__swrite>:
 8008ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eca:	461f      	mov	r7, r3
 8008ecc:	898b      	ldrh	r3, [r1, #12]
 8008ece:	05db      	lsls	r3, r3, #23
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	4616      	mov	r6, r2
 8008ed6:	d505      	bpl.n	8008ee4 <__swrite+0x1e>
 8008ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008edc:	2302      	movs	r3, #2
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f000 f9c8 	bl	8009274 <_lseek_r>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eee:	81a3      	strh	r3, [r4, #12]
 8008ef0:	4632      	mov	r2, r6
 8008ef2:	463b      	mov	r3, r7
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008efa:	f000 b869 	b.w	8008fd0 <_write_r>

08008efe <__sseek>:
 8008efe:	b510      	push	{r4, lr}
 8008f00:	460c      	mov	r4, r1
 8008f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f06:	f000 f9b5 	bl	8009274 <_lseek_r>
 8008f0a:	1c43      	adds	r3, r0, #1
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	bf15      	itete	ne
 8008f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f1a:	81a3      	strheq	r3, [r4, #12]
 8008f1c:	bf18      	it	ne
 8008f1e:	81a3      	strhne	r3, [r4, #12]
 8008f20:	bd10      	pop	{r4, pc}

08008f22 <__sclose>:
 8008f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f26:	f000 b8d3 	b.w	80090d0 <_close_r>
	...

08008f2c <__swbuf_r>:
 8008f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2e:	460e      	mov	r6, r1
 8008f30:	4614      	mov	r4, r2
 8008f32:	4605      	mov	r5, r0
 8008f34:	b118      	cbz	r0, 8008f3e <__swbuf_r+0x12>
 8008f36:	6983      	ldr	r3, [r0, #24]
 8008f38:	b90b      	cbnz	r3, 8008f3e <__swbuf_r+0x12>
 8008f3a:	f7ff fa25 	bl	8008388 <__sinit>
 8008f3e:	4b21      	ldr	r3, [pc, #132]	; (8008fc4 <__swbuf_r+0x98>)
 8008f40:	429c      	cmp	r4, r3
 8008f42:	d12b      	bne.n	8008f9c <__swbuf_r+0x70>
 8008f44:	686c      	ldr	r4, [r5, #4]
 8008f46:	69a3      	ldr	r3, [r4, #24]
 8008f48:	60a3      	str	r3, [r4, #8]
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	071a      	lsls	r2, r3, #28
 8008f4e:	d52f      	bpl.n	8008fb0 <__swbuf_r+0x84>
 8008f50:	6923      	ldr	r3, [r4, #16]
 8008f52:	b36b      	cbz	r3, 8008fb0 <__swbuf_r+0x84>
 8008f54:	6923      	ldr	r3, [r4, #16]
 8008f56:	6820      	ldr	r0, [r4, #0]
 8008f58:	1ac0      	subs	r0, r0, r3
 8008f5a:	6963      	ldr	r3, [r4, #20]
 8008f5c:	b2f6      	uxtb	r6, r6
 8008f5e:	4283      	cmp	r3, r0
 8008f60:	4637      	mov	r7, r6
 8008f62:	dc04      	bgt.n	8008f6e <__swbuf_r+0x42>
 8008f64:	4621      	mov	r1, r4
 8008f66:	4628      	mov	r0, r5
 8008f68:	f000 f948 	bl	80091fc <_fflush_r>
 8008f6c:	bb30      	cbnz	r0, 8008fbc <__swbuf_r+0x90>
 8008f6e:	68a3      	ldr	r3, [r4, #8]
 8008f70:	3b01      	subs	r3, #1
 8008f72:	60a3      	str	r3, [r4, #8]
 8008f74:	6823      	ldr	r3, [r4, #0]
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	6022      	str	r2, [r4, #0]
 8008f7a:	701e      	strb	r6, [r3, #0]
 8008f7c:	6963      	ldr	r3, [r4, #20]
 8008f7e:	3001      	adds	r0, #1
 8008f80:	4283      	cmp	r3, r0
 8008f82:	d004      	beq.n	8008f8e <__swbuf_r+0x62>
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	07db      	lsls	r3, r3, #31
 8008f88:	d506      	bpl.n	8008f98 <__swbuf_r+0x6c>
 8008f8a:	2e0a      	cmp	r6, #10
 8008f8c:	d104      	bne.n	8008f98 <__swbuf_r+0x6c>
 8008f8e:	4621      	mov	r1, r4
 8008f90:	4628      	mov	r0, r5
 8008f92:	f000 f933 	bl	80091fc <_fflush_r>
 8008f96:	b988      	cbnz	r0, 8008fbc <__swbuf_r+0x90>
 8008f98:	4638      	mov	r0, r7
 8008f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f9c:	4b0a      	ldr	r3, [pc, #40]	; (8008fc8 <__swbuf_r+0x9c>)
 8008f9e:	429c      	cmp	r4, r3
 8008fa0:	d101      	bne.n	8008fa6 <__swbuf_r+0x7a>
 8008fa2:	68ac      	ldr	r4, [r5, #8]
 8008fa4:	e7cf      	b.n	8008f46 <__swbuf_r+0x1a>
 8008fa6:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <__swbuf_r+0xa0>)
 8008fa8:	429c      	cmp	r4, r3
 8008faa:	bf08      	it	eq
 8008fac:	68ec      	ldreq	r4, [r5, #12]
 8008fae:	e7ca      	b.n	8008f46 <__swbuf_r+0x1a>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 f81e 	bl	8008ff4 <__swsetup_r>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d0cb      	beq.n	8008f54 <__swbuf_r+0x28>
 8008fbc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008fc0:	e7ea      	b.n	8008f98 <__swbuf_r+0x6c>
 8008fc2:	bf00      	nop
 8008fc4:	08009958 	.word	0x08009958
 8008fc8:	08009978 	.word	0x08009978
 8008fcc:	08009938 	.word	0x08009938

08008fd0 <_write_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4d07      	ldr	r5, [pc, #28]	; (8008ff0 <_write_r+0x20>)
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	4608      	mov	r0, r1
 8008fd8:	4611      	mov	r1, r2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	602a      	str	r2, [r5, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	f7f8 f973 	bl	80012ca <_write>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	d102      	bne.n	8008fee <_write_r+0x1e>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	b103      	cbz	r3, 8008fee <_write_r+0x1e>
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	200193a0 	.word	0x200193a0

08008ff4 <__swsetup_r>:
 8008ff4:	4b32      	ldr	r3, [pc, #200]	; (80090c0 <__swsetup_r+0xcc>)
 8008ff6:	b570      	push	{r4, r5, r6, lr}
 8008ff8:	681d      	ldr	r5, [r3, #0]
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	b125      	cbz	r5, 800900a <__swsetup_r+0x16>
 8009000:	69ab      	ldr	r3, [r5, #24]
 8009002:	b913      	cbnz	r3, 800900a <__swsetup_r+0x16>
 8009004:	4628      	mov	r0, r5
 8009006:	f7ff f9bf 	bl	8008388 <__sinit>
 800900a:	4b2e      	ldr	r3, [pc, #184]	; (80090c4 <__swsetup_r+0xd0>)
 800900c:	429c      	cmp	r4, r3
 800900e:	d10f      	bne.n	8009030 <__swsetup_r+0x3c>
 8009010:	686c      	ldr	r4, [r5, #4]
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009018:	0719      	lsls	r1, r3, #28
 800901a:	d42c      	bmi.n	8009076 <__swsetup_r+0x82>
 800901c:	06dd      	lsls	r5, r3, #27
 800901e:	d411      	bmi.n	8009044 <__swsetup_r+0x50>
 8009020:	2309      	movs	r3, #9
 8009022:	6033      	str	r3, [r6, #0]
 8009024:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009028:	81a3      	strh	r3, [r4, #12]
 800902a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800902e:	e03e      	b.n	80090ae <__swsetup_r+0xba>
 8009030:	4b25      	ldr	r3, [pc, #148]	; (80090c8 <__swsetup_r+0xd4>)
 8009032:	429c      	cmp	r4, r3
 8009034:	d101      	bne.n	800903a <__swsetup_r+0x46>
 8009036:	68ac      	ldr	r4, [r5, #8]
 8009038:	e7eb      	b.n	8009012 <__swsetup_r+0x1e>
 800903a:	4b24      	ldr	r3, [pc, #144]	; (80090cc <__swsetup_r+0xd8>)
 800903c:	429c      	cmp	r4, r3
 800903e:	bf08      	it	eq
 8009040:	68ec      	ldreq	r4, [r5, #12]
 8009042:	e7e6      	b.n	8009012 <__swsetup_r+0x1e>
 8009044:	0758      	lsls	r0, r3, #29
 8009046:	d512      	bpl.n	800906e <__swsetup_r+0x7a>
 8009048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800904a:	b141      	cbz	r1, 800905e <__swsetup_r+0x6a>
 800904c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009050:	4299      	cmp	r1, r3
 8009052:	d002      	beq.n	800905a <__swsetup_r+0x66>
 8009054:	4630      	mov	r0, r6
 8009056:	f000 f9ab 	bl	80093b0 <_free_r>
 800905a:	2300      	movs	r3, #0
 800905c:	6363      	str	r3, [r4, #52]	; 0x34
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009064:	81a3      	strh	r3, [r4, #12]
 8009066:	2300      	movs	r3, #0
 8009068:	6063      	str	r3, [r4, #4]
 800906a:	6923      	ldr	r3, [r4, #16]
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	f043 0308 	orr.w	r3, r3, #8
 8009074:	81a3      	strh	r3, [r4, #12]
 8009076:	6923      	ldr	r3, [r4, #16]
 8009078:	b94b      	cbnz	r3, 800908e <__swsetup_r+0x9a>
 800907a:	89a3      	ldrh	r3, [r4, #12]
 800907c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009084:	d003      	beq.n	800908e <__swsetup_r+0x9a>
 8009086:	4621      	mov	r1, r4
 8009088:	4630      	mov	r0, r6
 800908a:	f000 f92b 	bl	80092e4 <__smakebuf_r>
 800908e:	89a0      	ldrh	r0, [r4, #12]
 8009090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009094:	f010 0301 	ands.w	r3, r0, #1
 8009098:	d00a      	beq.n	80090b0 <__swsetup_r+0xbc>
 800909a:	2300      	movs	r3, #0
 800909c:	60a3      	str	r3, [r4, #8]
 800909e:	6963      	ldr	r3, [r4, #20]
 80090a0:	425b      	negs	r3, r3
 80090a2:	61a3      	str	r3, [r4, #24]
 80090a4:	6923      	ldr	r3, [r4, #16]
 80090a6:	b943      	cbnz	r3, 80090ba <__swsetup_r+0xc6>
 80090a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090ac:	d1ba      	bne.n	8009024 <__swsetup_r+0x30>
 80090ae:	bd70      	pop	{r4, r5, r6, pc}
 80090b0:	0781      	lsls	r1, r0, #30
 80090b2:	bf58      	it	pl
 80090b4:	6963      	ldrpl	r3, [r4, #20]
 80090b6:	60a3      	str	r3, [r4, #8]
 80090b8:	e7f4      	b.n	80090a4 <__swsetup_r+0xb0>
 80090ba:	2000      	movs	r0, #0
 80090bc:	e7f7      	b.n	80090ae <__swsetup_r+0xba>
 80090be:	bf00      	nop
 80090c0:	20000028 	.word	0x20000028
 80090c4:	08009958 	.word	0x08009958
 80090c8:	08009978 	.word	0x08009978
 80090cc:	08009938 	.word	0x08009938

080090d0 <_close_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4d06      	ldr	r5, [pc, #24]	; (80090ec <_close_r+0x1c>)
 80090d4:	2300      	movs	r3, #0
 80090d6:	4604      	mov	r4, r0
 80090d8:	4608      	mov	r0, r1
 80090da:	602b      	str	r3, [r5, #0]
 80090dc:	f7f8 f911 	bl	8001302 <_close>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d102      	bne.n	80090ea <_close_r+0x1a>
 80090e4:	682b      	ldr	r3, [r5, #0]
 80090e6:	b103      	cbz	r3, 80090ea <_close_r+0x1a>
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	200193a0 	.word	0x200193a0

080090f0 <__sflush_r>:
 80090f0:	898a      	ldrh	r2, [r1, #12]
 80090f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f6:	4605      	mov	r5, r0
 80090f8:	0710      	lsls	r0, r2, #28
 80090fa:	460c      	mov	r4, r1
 80090fc:	d458      	bmi.n	80091b0 <__sflush_r+0xc0>
 80090fe:	684b      	ldr	r3, [r1, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	dc05      	bgt.n	8009110 <__sflush_r+0x20>
 8009104:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009106:	2b00      	cmp	r3, #0
 8009108:	dc02      	bgt.n	8009110 <__sflush_r+0x20>
 800910a:	2000      	movs	r0, #0
 800910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009112:	2e00      	cmp	r6, #0
 8009114:	d0f9      	beq.n	800910a <__sflush_r+0x1a>
 8009116:	2300      	movs	r3, #0
 8009118:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800911c:	682f      	ldr	r7, [r5, #0]
 800911e:	602b      	str	r3, [r5, #0]
 8009120:	d032      	beq.n	8009188 <__sflush_r+0x98>
 8009122:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	075a      	lsls	r2, r3, #29
 8009128:	d505      	bpl.n	8009136 <__sflush_r+0x46>
 800912a:	6863      	ldr	r3, [r4, #4]
 800912c:	1ac0      	subs	r0, r0, r3
 800912e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009130:	b10b      	cbz	r3, 8009136 <__sflush_r+0x46>
 8009132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009134:	1ac0      	subs	r0, r0, r3
 8009136:	2300      	movs	r3, #0
 8009138:	4602      	mov	r2, r0
 800913a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800913c:	6a21      	ldr	r1, [r4, #32]
 800913e:	4628      	mov	r0, r5
 8009140:	47b0      	blx	r6
 8009142:	1c43      	adds	r3, r0, #1
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	d106      	bne.n	8009156 <__sflush_r+0x66>
 8009148:	6829      	ldr	r1, [r5, #0]
 800914a:	291d      	cmp	r1, #29
 800914c:	d82c      	bhi.n	80091a8 <__sflush_r+0xb8>
 800914e:	4a2a      	ldr	r2, [pc, #168]	; (80091f8 <__sflush_r+0x108>)
 8009150:	40ca      	lsrs	r2, r1
 8009152:	07d6      	lsls	r6, r2, #31
 8009154:	d528      	bpl.n	80091a8 <__sflush_r+0xb8>
 8009156:	2200      	movs	r2, #0
 8009158:	6062      	str	r2, [r4, #4]
 800915a:	04d9      	lsls	r1, r3, #19
 800915c:	6922      	ldr	r2, [r4, #16]
 800915e:	6022      	str	r2, [r4, #0]
 8009160:	d504      	bpl.n	800916c <__sflush_r+0x7c>
 8009162:	1c42      	adds	r2, r0, #1
 8009164:	d101      	bne.n	800916a <__sflush_r+0x7a>
 8009166:	682b      	ldr	r3, [r5, #0]
 8009168:	b903      	cbnz	r3, 800916c <__sflush_r+0x7c>
 800916a:	6560      	str	r0, [r4, #84]	; 0x54
 800916c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800916e:	602f      	str	r7, [r5, #0]
 8009170:	2900      	cmp	r1, #0
 8009172:	d0ca      	beq.n	800910a <__sflush_r+0x1a>
 8009174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009178:	4299      	cmp	r1, r3
 800917a:	d002      	beq.n	8009182 <__sflush_r+0x92>
 800917c:	4628      	mov	r0, r5
 800917e:	f000 f917 	bl	80093b0 <_free_r>
 8009182:	2000      	movs	r0, #0
 8009184:	6360      	str	r0, [r4, #52]	; 0x34
 8009186:	e7c1      	b.n	800910c <__sflush_r+0x1c>
 8009188:	6a21      	ldr	r1, [r4, #32]
 800918a:	2301      	movs	r3, #1
 800918c:	4628      	mov	r0, r5
 800918e:	47b0      	blx	r6
 8009190:	1c41      	adds	r1, r0, #1
 8009192:	d1c7      	bne.n	8009124 <__sflush_r+0x34>
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d0c4      	beq.n	8009124 <__sflush_r+0x34>
 800919a:	2b1d      	cmp	r3, #29
 800919c:	d001      	beq.n	80091a2 <__sflush_r+0xb2>
 800919e:	2b16      	cmp	r3, #22
 80091a0:	d101      	bne.n	80091a6 <__sflush_r+0xb6>
 80091a2:	602f      	str	r7, [r5, #0]
 80091a4:	e7b1      	b.n	800910a <__sflush_r+0x1a>
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	e7ad      	b.n	800910c <__sflush_r+0x1c>
 80091b0:	690f      	ldr	r7, [r1, #16]
 80091b2:	2f00      	cmp	r7, #0
 80091b4:	d0a9      	beq.n	800910a <__sflush_r+0x1a>
 80091b6:	0793      	lsls	r3, r2, #30
 80091b8:	680e      	ldr	r6, [r1, #0]
 80091ba:	bf08      	it	eq
 80091bc:	694b      	ldreq	r3, [r1, #20]
 80091be:	600f      	str	r7, [r1, #0]
 80091c0:	bf18      	it	ne
 80091c2:	2300      	movne	r3, #0
 80091c4:	eba6 0807 	sub.w	r8, r6, r7
 80091c8:	608b      	str	r3, [r1, #8]
 80091ca:	f1b8 0f00 	cmp.w	r8, #0
 80091ce:	dd9c      	ble.n	800910a <__sflush_r+0x1a>
 80091d0:	6a21      	ldr	r1, [r4, #32]
 80091d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091d4:	4643      	mov	r3, r8
 80091d6:	463a      	mov	r2, r7
 80091d8:	4628      	mov	r0, r5
 80091da:	47b0      	blx	r6
 80091dc:	2800      	cmp	r0, #0
 80091de:	dc06      	bgt.n	80091ee <__sflush_r+0xfe>
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091e6:	81a3      	strh	r3, [r4, #12]
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091ec:	e78e      	b.n	800910c <__sflush_r+0x1c>
 80091ee:	4407      	add	r7, r0
 80091f0:	eba8 0800 	sub.w	r8, r8, r0
 80091f4:	e7e9      	b.n	80091ca <__sflush_r+0xda>
 80091f6:	bf00      	nop
 80091f8:	20400001 	.word	0x20400001

080091fc <_fflush_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	690b      	ldr	r3, [r1, #16]
 8009200:	4605      	mov	r5, r0
 8009202:	460c      	mov	r4, r1
 8009204:	b913      	cbnz	r3, 800920c <_fflush_r+0x10>
 8009206:	2500      	movs	r5, #0
 8009208:	4628      	mov	r0, r5
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	b118      	cbz	r0, 8009216 <_fflush_r+0x1a>
 800920e:	6983      	ldr	r3, [r0, #24]
 8009210:	b90b      	cbnz	r3, 8009216 <_fflush_r+0x1a>
 8009212:	f7ff f8b9 	bl	8008388 <__sinit>
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <_fflush_r+0x6c>)
 8009218:	429c      	cmp	r4, r3
 800921a:	d11b      	bne.n	8009254 <_fflush_r+0x58>
 800921c:	686c      	ldr	r4, [r5, #4]
 800921e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0ef      	beq.n	8009206 <_fflush_r+0xa>
 8009226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009228:	07d0      	lsls	r0, r2, #31
 800922a:	d404      	bmi.n	8009236 <_fflush_r+0x3a>
 800922c:	0599      	lsls	r1, r3, #22
 800922e:	d402      	bmi.n	8009236 <_fflush_r+0x3a>
 8009230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009232:	f7ff f947 	bl	80084c4 <__retarget_lock_acquire_recursive>
 8009236:	4628      	mov	r0, r5
 8009238:	4621      	mov	r1, r4
 800923a:	f7ff ff59 	bl	80090f0 <__sflush_r>
 800923e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009240:	07da      	lsls	r2, r3, #31
 8009242:	4605      	mov	r5, r0
 8009244:	d4e0      	bmi.n	8009208 <_fflush_r+0xc>
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	059b      	lsls	r3, r3, #22
 800924a:	d4dd      	bmi.n	8009208 <_fflush_r+0xc>
 800924c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800924e:	f7ff f93a 	bl	80084c6 <__retarget_lock_release_recursive>
 8009252:	e7d9      	b.n	8009208 <_fflush_r+0xc>
 8009254:	4b05      	ldr	r3, [pc, #20]	; (800926c <_fflush_r+0x70>)
 8009256:	429c      	cmp	r4, r3
 8009258:	d101      	bne.n	800925e <_fflush_r+0x62>
 800925a:	68ac      	ldr	r4, [r5, #8]
 800925c:	e7df      	b.n	800921e <_fflush_r+0x22>
 800925e:	4b04      	ldr	r3, [pc, #16]	; (8009270 <_fflush_r+0x74>)
 8009260:	429c      	cmp	r4, r3
 8009262:	bf08      	it	eq
 8009264:	68ec      	ldreq	r4, [r5, #12]
 8009266:	e7da      	b.n	800921e <_fflush_r+0x22>
 8009268:	08009958 	.word	0x08009958
 800926c:	08009978 	.word	0x08009978
 8009270:	08009938 	.word	0x08009938

08009274 <_lseek_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4d07      	ldr	r5, [pc, #28]	; (8009294 <_lseek_r+0x20>)
 8009278:	4604      	mov	r4, r0
 800927a:	4608      	mov	r0, r1
 800927c:	4611      	mov	r1, r2
 800927e:	2200      	movs	r2, #0
 8009280:	602a      	str	r2, [r5, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	f7f8 f864 	bl	8001350 <_lseek>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_lseek_r+0x1e>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_lseek_r+0x1e>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	200193a0 	.word	0x200193a0

08009298 <__swhatbuf_r>:
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	460e      	mov	r6, r1
 800929c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a0:	2900      	cmp	r1, #0
 80092a2:	b096      	sub	sp, #88	; 0x58
 80092a4:	4614      	mov	r4, r2
 80092a6:	461d      	mov	r5, r3
 80092a8:	da08      	bge.n	80092bc <__swhatbuf_r+0x24>
 80092aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	602a      	str	r2, [r5, #0]
 80092b2:	061a      	lsls	r2, r3, #24
 80092b4:	d410      	bmi.n	80092d8 <__swhatbuf_r+0x40>
 80092b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ba:	e00e      	b.n	80092da <__swhatbuf_r+0x42>
 80092bc:	466a      	mov	r2, sp
 80092be:	f000 f905 	bl	80094cc <_fstat_r>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	dbf1      	blt.n	80092aa <__swhatbuf_r+0x12>
 80092c6:	9a01      	ldr	r2, [sp, #4]
 80092c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092d0:	425a      	negs	r2, r3
 80092d2:	415a      	adcs	r2, r3
 80092d4:	602a      	str	r2, [r5, #0]
 80092d6:	e7ee      	b.n	80092b6 <__swhatbuf_r+0x1e>
 80092d8:	2340      	movs	r3, #64	; 0x40
 80092da:	2000      	movs	r0, #0
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	b016      	add	sp, #88	; 0x58
 80092e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080092e4 <__smakebuf_r>:
 80092e4:	898b      	ldrh	r3, [r1, #12]
 80092e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092e8:	079d      	lsls	r5, r3, #30
 80092ea:	4606      	mov	r6, r0
 80092ec:	460c      	mov	r4, r1
 80092ee:	d507      	bpl.n	8009300 <__smakebuf_r+0x1c>
 80092f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	6123      	str	r3, [r4, #16]
 80092f8:	2301      	movs	r3, #1
 80092fa:	6163      	str	r3, [r4, #20]
 80092fc:	b002      	add	sp, #8
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	ab01      	add	r3, sp, #4
 8009302:	466a      	mov	r2, sp
 8009304:	f7ff ffc8 	bl	8009298 <__swhatbuf_r>
 8009308:	9900      	ldr	r1, [sp, #0]
 800930a:	4605      	mov	r5, r0
 800930c:	4630      	mov	r0, r6
 800930e:	f7ff f8fb 	bl	8008508 <_malloc_r>
 8009312:	b948      	cbnz	r0, 8009328 <__smakebuf_r+0x44>
 8009314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009318:	059a      	lsls	r2, r3, #22
 800931a:	d4ef      	bmi.n	80092fc <__smakebuf_r+0x18>
 800931c:	f023 0303 	bic.w	r3, r3, #3
 8009320:	f043 0302 	orr.w	r3, r3, #2
 8009324:	81a3      	strh	r3, [r4, #12]
 8009326:	e7e3      	b.n	80092f0 <__smakebuf_r+0xc>
 8009328:	4b0d      	ldr	r3, [pc, #52]	; (8009360 <__smakebuf_r+0x7c>)
 800932a:	62b3      	str	r3, [r6, #40]	; 0x28
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	6020      	str	r0, [r4, #0]
 8009330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009334:	81a3      	strh	r3, [r4, #12]
 8009336:	9b00      	ldr	r3, [sp, #0]
 8009338:	6163      	str	r3, [r4, #20]
 800933a:	9b01      	ldr	r3, [sp, #4]
 800933c:	6120      	str	r0, [r4, #16]
 800933e:	b15b      	cbz	r3, 8009358 <__smakebuf_r+0x74>
 8009340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009344:	4630      	mov	r0, r6
 8009346:	f000 f8d3 	bl	80094f0 <_isatty_r>
 800934a:	b128      	cbz	r0, 8009358 <__smakebuf_r+0x74>
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	f023 0303 	bic.w	r3, r3, #3
 8009352:	f043 0301 	orr.w	r3, r3, #1
 8009356:	81a3      	strh	r3, [r4, #12]
 8009358:	89a0      	ldrh	r0, [r4, #12]
 800935a:	4305      	orrs	r5, r0
 800935c:	81a5      	strh	r5, [r4, #12]
 800935e:	e7cd      	b.n	80092fc <__smakebuf_r+0x18>
 8009360:	08008321 	.word	0x08008321

08009364 <memmove>:
 8009364:	4288      	cmp	r0, r1
 8009366:	b510      	push	{r4, lr}
 8009368:	eb01 0402 	add.w	r4, r1, r2
 800936c:	d902      	bls.n	8009374 <memmove+0x10>
 800936e:	4284      	cmp	r4, r0
 8009370:	4623      	mov	r3, r4
 8009372:	d807      	bhi.n	8009384 <memmove+0x20>
 8009374:	1e43      	subs	r3, r0, #1
 8009376:	42a1      	cmp	r1, r4
 8009378:	d008      	beq.n	800938c <memmove+0x28>
 800937a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800937e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009382:	e7f8      	b.n	8009376 <memmove+0x12>
 8009384:	4402      	add	r2, r0
 8009386:	4601      	mov	r1, r0
 8009388:	428a      	cmp	r2, r1
 800938a:	d100      	bne.n	800938e <memmove+0x2a>
 800938c:	bd10      	pop	{r4, pc}
 800938e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009396:	e7f7      	b.n	8009388 <memmove+0x24>

08009398 <__malloc_lock>:
 8009398:	4801      	ldr	r0, [pc, #4]	; (80093a0 <__malloc_lock+0x8>)
 800939a:	f7ff b893 	b.w	80084c4 <__retarget_lock_acquire_recursive>
 800939e:	bf00      	nop
 80093a0:	20019394 	.word	0x20019394

080093a4 <__malloc_unlock>:
 80093a4:	4801      	ldr	r0, [pc, #4]	; (80093ac <__malloc_unlock+0x8>)
 80093a6:	f7ff b88e 	b.w	80084c6 <__retarget_lock_release_recursive>
 80093aa:	bf00      	nop
 80093ac:	20019394 	.word	0x20019394

080093b0 <_free_r>:
 80093b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093b2:	2900      	cmp	r1, #0
 80093b4:	d044      	beq.n	8009440 <_free_r+0x90>
 80093b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ba:	9001      	str	r0, [sp, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f1a1 0404 	sub.w	r4, r1, #4
 80093c2:	bfb8      	it	lt
 80093c4:	18e4      	addlt	r4, r4, r3
 80093c6:	f7ff ffe7 	bl	8009398 <__malloc_lock>
 80093ca:	4a1e      	ldr	r2, [pc, #120]	; (8009444 <_free_r+0x94>)
 80093cc:	9801      	ldr	r0, [sp, #4]
 80093ce:	6813      	ldr	r3, [r2, #0]
 80093d0:	b933      	cbnz	r3, 80093e0 <_free_r+0x30>
 80093d2:	6063      	str	r3, [r4, #4]
 80093d4:	6014      	str	r4, [r2, #0]
 80093d6:	b003      	add	sp, #12
 80093d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093dc:	f7ff bfe2 	b.w	80093a4 <__malloc_unlock>
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	d908      	bls.n	80093f6 <_free_r+0x46>
 80093e4:	6825      	ldr	r5, [r4, #0]
 80093e6:	1961      	adds	r1, r4, r5
 80093e8:	428b      	cmp	r3, r1
 80093ea:	bf01      	itttt	eq
 80093ec:	6819      	ldreq	r1, [r3, #0]
 80093ee:	685b      	ldreq	r3, [r3, #4]
 80093f0:	1949      	addeq	r1, r1, r5
 80093f2:	6021      	streq	r1, [r4, #0]
 80093f4:	e7ed      	b.n	80093d2 <_free_r+0x22>
 80093f6:	461a      	mov	r2, r3
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	b10b      	cbz	r3, 8009400 <_free_r+0x50>
 80093fc:	42a3      	cmp	r3, r4
 80093fe:	d9fa      	bls.n	80093f6 <_free_r+0x46>
 8009400:	6811      	ldr	r1, [r2, #0]
 8009402:	1855      	adds	r5, r2, r1
 8009404:	42a5      	cmp	r5, r4
 8009406:	d10b      	bne.n	8009420 <_free_r+0x70>
 8009408:	6824      	ldr	r4, [r4, #0]
 800940a:	4421      	add	r1, r4
 800940c:	1854      	adds	r4, r2, r1
 800940e:	42a3      	cmp	r3, r4
 8009410:	6011      	str	r1, [r2, #0]
 8009412:	d1e0      	bne.n	80093d6 <_free_r+0x26>
 8009414:	681c      	ldr	r4, [r3, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	6053      	str	r3, [r2, #4]
 800941a:	4421      	add	r1, r4
 800941c:	6011      	str	r1, [r2, #0]
 800941e:	e7da      	b.n	80093d6 <_free_r+0x26>
 8009420:	d902      	bls.n	8009428 <_free_r+0x78>
 8009422:	230c      	movs	r3, #12
 8009424:	6003      	str	r3, [r0, #0]
 8009426:	e7d6      	b.n	80093d6 <_free_r+0x26>
 8009428:	6825      	ldr	r5, [r4, #0]
 800942a:	1961      	adds	r1, r4, r5
 800942c:	428b      	cmp	r3, r1
 800942e:	bf04      	itt	eq
 8009430:	6819      	ldreq	r1, [r3, #0]
 8009432:	685b      	ldreq	r3, [r3, #4]
 8009434:	6063      	str	r3, [r4, #4]
 8009436:	bf04      	itt	eq
 8009438:	1949      	addeq	r1, r1, r5
 800943a:	6021      	streq	r1, [r4, #0]
 800943c:	6054      	str	r4, [r2, #4]
 800943e:	e7ca      	b.n	80093d6 <_free_r+0x26>
 8009440:	b003      	add	sp, #12
 8009442:	bd30      	pop	{r4, r5, pc}
 8009444:	20019398 	.word	0x20019398

08009448 <_realloc_r>:
 8009448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800944c:	4680      	mov	r8, r0
 800944e:	4614      	mov	r4, r2
 8009450:	460e      	mov	r6, r1
 8009452:	b921      	cbnz	r1, 800945e <_realloc_r+0x16>
 8009454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009458:	4611      	mov	r1, r2
 800945a:	f7ff b855 	b.w	8008508 <_malloc_r>
 800945e:	b92a      	cbnz	r2, 800946c <_realloc_r+0x24>
 8009460:	f7ff ffa6 	bl	80093b0 <_free_r>
 8009464:	4625      	mov	r5, r4
 8009466:	4628      	mov	r0, r5
 8009468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800946c:	f000 f850 	bl	8009510 <_malloc_usable_size_r>
 8009470:	4284      	cmp	r4, r0
 8009472:	4607      	mov	r7, r0
 8009474:	d802      	bhi.n	800947c <_realloc_r+0x34>
 8009476:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800947a:	d812      	bhi.n	80094a2 <_realloc_r+0x5a>
 800947c:	4621      	mov	r1, r4
 800947e:	4640      	mov	r0, r8
 8009480:	f7ff f842 	bl	8008508 <_malloc_r>
 8009484:	4605      	mov	r5, r0
 8009486:	2800      	cmp	r0, #0
 8009488:	d0ed      	beq.n	8009466 <_realloc_r+0x1e>
 800948a:	42bc      	cmp	r4, r7
 800948c:	4622      	mov	r2, r4
 800948e:	4631      	mov	r1, r6
 8009490:	bf28      	it	cs
 8009492:	463a      	movcs	r2, r7
 8009494:	f7fe fed2 	bl	800823c <memcpy>
 8009498:	4631      	mov	r1, r6
 800949a:	4640      	mov	r0, r8
 800949c:	f7ff ff88 	bl	80093b0 <_free_r>
 80094a0:	e7e1      	b.n	8009466 <_realloc_r+0x1e>
 80094a2:	4635      	mov	r5, r6
 80094a4:	e7df      	b.n	8009466 <_realloc_r+0x1e>
	...

080094a8 <_read_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	4d07      	ldr	r5, [pc, #28]	; (80094c8 <_read_r+0x20>)
 80094ac:	4604      	mov	r4, r0
 80094ae:	4608      	mov	r0, r1
 80094b0:	4611      	mov	r1, r2
 80094b2:	2200      	movs	r2, #0
 80094b4:	602a      	str	r2, [r5, #0]
 80094b6:	461a      	mov	r2, r3
 80094b8:	f7f7 feea 	bl	8001290 <_read>
 80094bc:	1c43      	adds	r3, r0, #1
 80094be:	d102      	bne.n	80094c6 <_read_r+0x1e>
 80094c0:	682b      	ldr	r3, [r5, #0]
 80094c2:	b103      	cbz	r3, 80094c6 <_read_r+0x1e>
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	bd38      	pop	{r3, r4, r5, pc}
 80094c8:	200193a0 	.word	0x200193a0

080094cc <_fstat_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4d07      	ldr	r5, [pc, #28]	; (80094ec <_fstat_r+0x20>)
 80094d0:	2300      	movs	r3, #0
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	602b      	str	r3, [r5, #0]
 80094da:	f7f7 ff1e 	bl	800131a <_fstat>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	d102      	bne.n	80094e8 <_fstat_r+0x1c>
 80094e2:	682b      	ldr	r3, [r5, #0]
 80094e4:	b103      	cbz	r3, 80094e8 <_fstat_r+0x1c>
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	bd38      	pop	{r3, r4, r5, pc}
 80094ea:	bf00      	nop
 80094ec:	200193a0 	.word	0x200193a0

080094f0 <_isatty_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4d06      	ldr	r5, [pc, #24]	; (800950c <_isatty_r+0x1c>)
 80094f4:	2300      	movs	r3, #0
 80094f6:	4604      	mov	r4, r0
 80094f8:	4608      	mov	r0, r1
 80094fa:	602b      	str	r3, [r5, #0]
 80094fc:	f7f7 ff1d 	bl	800133a <_isatty>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_isatty_r+0x1a>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	b103      	cbz	r3, 800950a <_isatty_r+0x1a>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	200193a0 	.word	0x200193a0

08009510 <_malloc_usable_size_r>:
 8009510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009514:	1f18      	subs	r0, r3, #4
 8009516:	2b00      	cmp	r3, #0
 8009518:	bfbc      	itt	lt
 800951a:	580b      	ldrlt	r3, [r1, r0]
 800951c:	18c0      	addlt	r0, r0, r3
 800951e:	4770      	bx	lr

08009520 <_init>:
 8009520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009522:	bf00      	nop
 8009524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009526:	bc08      	pop	{r3}
 8009528:	469e      	mov	lr, r3
 800952a:	4770      	bx	lr

0800952c <_fini>:
 800952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952e:	bf00      	nop
 8009530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009532:	bc08      	pop	{r3}
 8009534:	469e      	mov	lr, r3
 8009536:	4770      	bx	lr
